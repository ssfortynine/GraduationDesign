// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module LSTM_Top_infer_Pipeline_VITIS_LOOP_114_4_VITIS_LOOP_116_5 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        vec_i_address0,
        vec_i_ce0,
        vec_i_q0,
        vec_tmp_address0,
        vec_tmp_ce0,
        vec_tmp_we0,
        vec_tmp_d0,
        grp_fu_298_p_din0,
        grp_fu_298_p_din1,
        grp_fu_298_p_opcode,
        grp_fu_298_p_dout0,
        grp_fu_298_p_ce,
        grp_fu_371_p_din0,
        grp_fu_371_p_din1,
        grp_fu_371_p_dout0,
        grp_fu_371_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 4'd1;
parameter    ap_ST_fsm_pp0_stage1 = 4'd2;
parameter    ap_ST_fsm_pp0_stage2 = 4'd4;
parameter    ap_ST_fsm_pp0_stage3 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] vec_i_address0;
output   vec_i_ce0;
input  [31:0] vec_i_q0;
output  [6:0] vec_tmp_address0;
output   vec_tmp_ce0;
output   vec_tmp_we0;
output  [31:0] vec_tmp_d0;
output  [31:0] grp_fu_298_p_din0;
output  [31:0] grp_fu_298_p_din1;
output  [0:0] grp_fu_298_p_opcode;
input  [31:0] grp_fu_298_p_dout0;
output   grp_fu_298_p_ce;
output  [31:0] grp_fu_371_p_din0;
output  [31:0] grp_fu_371_p_din1;
input  [31:0] grp_fu_371_p_dout0;
output   grp_fu_371_p_ce;

reg ap_idle;
reg vec_i_ce0;
reg vec_tmp_ce0;
reg vec_tmp_we0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_state8_pp0_stage3_iter1;
wire    ap_block_state12_pp0_stage3_iter2;
wire    ap_block_state16_pp0_stage3_iter3;
wire    ap_block_pp0_stage3_subdone;
reg   [0:0] icmp_ln114_reg_292;
reg    ap_condition_exit_pp0_iter0_stage3;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [14:0] Weight0_f_address0;
reg    Weight0_f_ce0;
wire   [31:0] Weight0_f_q0;
wire   [6:0] Bias0_f_address0;
reg    Bias0_f_ce0;
wire   [31:0] Bias0_f_q0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_state9_pp0_stage0_iter2;
wire    ap_block_state13_pp0_stage0_iter3;
wire    ap_block_state17_pp0_stage0_iter4;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln114_fu_146_p2;
reg   [0:0] icmp_ln114_reg_292_pp0_iter1_reg;
reg   [0:0] icmp_ln114_reg_292_pp0_iter2_reg;
reg   [0:0] icmp_ln114_reg_292_pp0_iter3_reg;
wire   [0:0] icmp_ln116_fu_170_p2;
reg   [0:0] icmp_ln116_reg_296;
reg   [0:0] icmp_ln116_reg_296_pp0_iter1_reg;
wire   [7:0] select_ln114_fu_176_p3;
reg   [7:0] select_ln114_reg_301;
wire   [7:0] select_ln114_2_fu_184_p3;
reg   [7:0] select_ln114_2_reg_306;
reg   [7:0] select_ln114_2_reg_306_pp0_iter1_reg;
wire   [0:0] ifzero_fu_207_p2;
reg   [0:0] ifzero_reg_321;
reg   [0:0] ifzero_reg_321_pp0_iter1_reg;
reg   [0:0] ifzero_reg_321_pp0_iter2_reg;
reg   [0:0] ifzero_reg_321_pp0_iter3_reg;
reg   [0:0] ifzero_reg_321_pp0_iter4_reg;
reg   [31:0] vec_i_load_reg_325;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state6_pp0_stage1_iter1;
wire    ap_block_state10_pp0_stage1_iter2;
wire    ap_block_state14_pp0_stage1_iter3;
wire    ap_block_state18_pp0_stage1_iter4;
wire    ap_block_pp0_stage1_11001;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_state7_pp0_stage2_iter1;
wire    ap_block_state11_pp0_stage2_iter2;
wire    ap_block_state15_pp0_stage2_iter3;
wire    ap_block_state19_pp0_stage2_iter4;
wire    ap_block_pp0_stage2_11001;
wire    ap_block_pp0_stage3_11001;
reg   [31:0] mul1_reg_345;
wire   [31:0] select_ln114_1_fu_238_p3;
wire   [63:0] zext_ln114_fu_246_p1;
reg   [63:0] zext_ln114_reg_355;
reg   [63:0] zext_ln114_reg_355_pp0_iter3_reg;
reg   [63:0] zext_ln114_reg_355_pp0_iter4_reg;
reg   [31:0] Bias0_f_load_reg_365;
reg   [31:0] add2_reg_370;
reg   [31:0] add1_reg_375;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage2_subdone;
wire   [63:0] j_2_cast_fu_196_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln117_1_fu_231_p1;
wire    ap_block_pp0_stage3;
wire    ap_block_pp0_stage2;
reg   [31:0] add411624_fu_46;
reg   [31:0] ap_sig_allocacmp_add411624_load;
wire    ap_loop_init;
reg   [7:0] j_fu_50;
wire   [7:0] add_ln116_fu_201_p2;
reg   [7:0] ap_sig_allocacmp_j_load;
reg   [7:0] i_1_fu_54;
reg   [7:0] ap_sig_allocacmp_i_1_load;
reg   [14:0] indvar_flatten_fu_58;
wire   [14:0] add_ln114_1_fu_152_p2;
reg   [14:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [31:0] grp_fu_114_p0;
reg   [31:0] grp_fu_114_p1;
wire    ap_block_pp0_stage1;
wire   [7:0] add_ln114_fu_164_p2;
wire   [14:0] grp_fu_255_p3;
wire   [7:0] grp_fu_255_p0;
wire   [7:0] grp_fu_255_p1;
wire   [7:0] grp_fu_255_p2;
wire    ap_block_pp0_stage0_00001;
wire    ap_block_pp0_stage1_00001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_condition_exit_pp0_iter3_stage2;
reg    ap_idle_pp0_0to2;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [3:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to4;
wire    ap_block_pp0_stage1_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [14:0] grp_fu_255_p00;
wire   [14:0] grp_fu_255_p20;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

LSTM_Top_infer_Pipeline_VITIS_LOOP_114_4_VITIS_LOOP_116_5_Weight0_f_ROM_AUTO_1R #(
    .DataWidth( 32 ),
    .AddressRange( 17024 ),
    .AddressWidth( 15 ))
Weight0_f_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(Weight0_f_address0),
    .ce0(Weight0_f_ce0),
    .q0(Weight0_f_q0)
);

LSTM_Top_infer_Pipeline_VITIS_LOOP_114_4_VITIS_LOOP_116_5_Bias0_f_ROM_AUTO_1R #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
Bias0_f_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(Bias0_f_address0),
    .ce0(Bias0_f_ce0),
    .q0(Bias0_f_q0)
);

LSTM_Top_mac_muladd_8ns_8ns_8ns_15_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 15 ))
mac_muladd_8ns_8ns_8ns_15_4_1_U23(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_255_p0),
    .din1(grp_fu_255_p1),
    .din2(grp_fu_255_p2),
    .ce(1'b1),
    .dout(grp_fu_255_p3)
);

LSTM_Top_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage3),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage2_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage3)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            add411624_fu_46 <= 32'd0;
        end else if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
            add411624_fu_46 <= grp_fu_298_p_dout0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to2 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter3_stage2))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to2 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter3_stage2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to2 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter3_stage2))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln114_fu_146_p2 == 1'd0))) begin
            i_1_fu_54 <= select_ln114_2_fu_184_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_1_fu_54 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln114_fu_146_p2 == 1'd0))) begin
            indvar_flatten_fu_58 <= add_ln114_1_fu_152_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_58 <= 15'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln114_fu_146_p2 == 1'd0))) begin
            j_fu_50 <= add_ln116_fu_201_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_50 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ifzero_reg_321_pp0_iter2_reg == 1'd1))) begin
        Bias0_f_load_reg_365 <= Bias0_f_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ifzero_reg_321_pp0_iter4_reg == 1'd1))) begin
        add1_reg_375 <= grp_fu_298_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add2_reg_370 <= grp_fu_298_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln114_reg_292 <= icmp_ln114_fu_146_p2;
        icmp_ln114_reg_292_pp0_iter1_reg <= icmp_ln114_reg_292;
        icmp_ln114_reg_292_pp0_iter2_reg <= icmp_ln114_reg_292_pp0_iter1_reg;
        icmp_ln114_reg_292_pp0_iter3_reg <= icmp_ln114_reg_292_pp0_iter2_reg;
        icmp_ln116_reg_296_pp0_iter1_reg <= icmp_ln116_reg_296;
        ifzero_reg_321_pp0_iter1_reg <= ifzero_reg_321;
        ifzero_reg_321_pp0_iter2_reg <= ifzero_reg_321_pp0_iter1_reg;
        ifzero_reg_321_pp0_iter3_reg <= ifzero_reg_321_pp0_iter2_reg;
        ifzero_reg_321_pp0_iter4_reg <= ifzero_reg_321_pp0_iter3_reg;
        select_ln114_2_reg_306_pp0_iter1_reg <= select_ln114_2_reg_306;
        zext_ln114_reg_355[7 : 0] <= zext_ln114_fu_246_p1[7 : 0];
        zext_ln114_reg_355_pp0_iter3_reg[7 : 0] <= zext_ln114_reg_355[7 : 0];
        zext_ln114_reg_355_pp0_iter4_reg[7 : 0] <= zext_ln114_reg_355_pp0_iter3_reg[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln114_fu_146_p2 == 1'd0))) begin
        icmp_ln116_reg_296 <= icmp_ln116_fu_170_p2;
        ifzero_reg_321 <= ifzero_fu_207_p2;
        select_ln114_2_reg_306 <= select_ln114_2_fu_184_p3;
        select_ln114_reg_301 <= select_ln114_fu_176_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        mul1_reg_345 <= grp_fu_371_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln114_reg_292 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        vec_i_load_reg_325 <= vec_i_q0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Bias0_f_ce0 = 1'b1;
    end else begin
        Bias0_f_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        Weight0_f_ce0 = 1'b1;
    end else begin
        Weight0_f_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln114_reg_292 == 1'd1) & (1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_condition_exit_pp0_iter0_stage3 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln114_reg_292_pp0_iter3_reg == 1'd1))) begin
        ap_condition_exit_pp0_iter3_stage2 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter3_stage2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to2 = 1'b1;
    end else begin
        ap_idle_pp0_0to2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to4 = 1'b1;
    end else begin
        ap_idle_pp0_1to4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_add411624_load = grp_fu_298_p_dout0;
    end else begin
        ap_sig_allocacmp_add411624_load = add411624_fu_46;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_1_load = 8'd0;
    end else begin
        ap_sig_allocacmp_i_1_load = i_1_fu_54;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 15'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_58;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_j_load = 8'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_50;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_114_p0 = add2_reg_370;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_114_p0 = select_ln114_1_fu_238_p3;
    end else begin
        grp_fu_114_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_114_p1 = Bias0_f_load_reg_365;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_114_p1 = mul1_reg_345;
    end else begin
        grp_fu_114_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        vec_i_ce0 = 1'b1;
    end else begin
        vec_i_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        vec_tmp_ce0 = 1'b1;
    end else begin
        vec_tmp_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ifzero_reg_321_pp0_iter4_reg == 1'd1))) begin
        vec_tmp_we0 = 1'b1;
    end else begin
        vec_tmp_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to4 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if (((ap_idle_pp0_0to2 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter3_stage2))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Bias0_f_address0 = zext_ln114_fu_246_p1;

assign Weight0_f_address0 = zext_ln117_1_fu_231_p1;

assign add_ln114_1_fu_152_p2 = (ap_sig_allocacmp_indvar_flatten_load + 15'd1);

assign add_ln114_fu_164_p2 = (ap_sig_allocacmp_i_1_load + 8'd1);

assign add_ln116_fu_201_p2 = (select_ln114_fu_176_p3 + 8'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage3_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage2_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage3_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage1_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage2_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage3;

assign grp_fu_255_p0 = grp_fu_255_p00;

assign grp_fu_255_p00 = select_ln114_2_fu_184_p3;

assign grp_fu_255_p1 = 15'd133;

assign grp_fu_255_p2 = grp_fu_255_p20;

assign grp_fu_255_p20 = select_ln114_reg_301;

assign grp_fu_298_p_ce = 1'b1;

assign grp_fu_298_p_din0 = grp_fu_114_p0;

assign grp_fu_298_p_din1 = grp_fu_114_p1;

assign grp_fu_298_p_opcode = 2'd0;

assign grp_fu_371_p_ce = 1'b1;

assign grp_fu_371_p_din0 = Weight0_f_q0;

assign grp_fu_371_p_din1 = vec_i_load_reg_325;

assign icmp_ln114_fu_146_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 15'd17024) ? 1'b1 : 1'b0);

assign icmp_ln116_fu_170_p2 = ((ap_sig_allocacmp_j_load == 8'd133) ? 1'b1 : 1'b0);

assign ifzero_fu_207_p2 = ((add_ln116_fu_201_p2 == 8'd133) ? 1'b1 : 1'b0);

assign j_2_cast_fu_196_p1 = select_ln114_fu_176_p3;

assign select_ln114_1_fu_238_p3 = ((icmp_ln116_reg_296_pp0_iter1_reg[0:0] == 1'b1) ? 32'd0 : ap_sig_allocacmp_add411624_load);

assign select_ln114_2_fu_184_p3 = ((icmp_ln116_fu_170_p2[0:0] == 1'b1) ? add_ln114_fu_164_p2 : ap_sig_allocacmp_i_1_load);

assign select_ln114_fu_176_p3 = ((icmp_ln116_fu_170_p2[0:0] == 1'b1) ? 8'd0 : ap_sig_allocacmp_j_load);

assign vec_i_address0 = j_2_cast_fu_196_p1;

assign vec_tmp_address0 = zext_ln114_reg_355_pp0_iter4_reg;

assign vec_tmp_d0 = add1_reg_375;

assign zext_ln114_fu_246_p1 = select_ln114_2_reg_306_pp0_iter1_reg;

assign zext_ln117_1_fu_231_p1 = grp_fu_255_p3;

always @ (posedge ap_clk) begin
    zext_ln114_reg_355[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln114_reg_355_pp0_iter3_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln114_reg_355_pp0_iter4_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
end

endmodule //LSTM_Top_infer_Pipeline_VITIS_LOOP_114_4_VITIS_LOOP_116_5
