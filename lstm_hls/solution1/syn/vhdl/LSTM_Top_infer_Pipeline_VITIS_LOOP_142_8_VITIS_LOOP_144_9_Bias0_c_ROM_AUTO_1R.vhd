-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity LSTM_Top_infer_Pipeline_VITIS_LOOP_142_8_VITIS_LOOP_144_9_Bias0_c_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 32; 
             AddressWidth     : integer := 7; 
             AddressRange    : integer := 128
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of LSTM_Top_infer_Pipeline_VITIS_LOOP_142_8_VITIS_LOOP_144_9_Bias0_c_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "10111100110111011010001000110111", 1 => "10111100111000000110011111100101", 2 => "10111100000101010110000111011111", 3 => "00111100111001001110111110111001", 
    4 => "10111011010010111001100100011111", 5 => "10111110000101001111010010000100", 6 => "10111100001010100110011011110001", 7 => "00111101010100110011001111011010", 
    8 => "00111101100110001100101000000111", 9 => "10111101000000000110000110111000", 10 => "00111011111111010101011001001000", 11 => "00111101101010011111000100110001", 
    12 => "00111101111010011011011110001001", 13 => "00111101100101010010101100001010", 14 => "00111101010100111111000010111011", 15 => "10111101011011100011110011101010", 
    16 => "00111011111000101101110101010100", 17 => "00111011111110111111100110100111", 18 => "10111011111101010010001111110111", 19 => "10111101100110011111101000100000", 
    20 => "00111100110101010110110100100101", 21 => "10111101010010011010111111100101", 22 => "10111100101100110011111101101000", 23 => "00111101111010111100001010111001", 
    24 => "10111101100111110001111110011000", 25 => "10111100101111111110110000101111", 26 => "00111110000001000111000100110101", 27 => "10111101000000010011110000110011", 
    28 => "10111110001110011111000010010100", 29 => "00111101110111111011011000010011", 30 => "00111101011010110111001010100010", 31 => "10111101110111100100001001110110", 
    32 => "10111011100100111000110011001110", 33 => "10111100011110111000100001110111", 34 => "00111101000011111101100010111011", 35 => "00111110001001110100111000111101", 
    36 => "10111101000010110011011110101100", 37 => "00111011101101011001110111111010", 38 => "10111101000100011010011010001110", 39 => "00111100101010101100000011000011", 
    40 => "00111100001011010100011010100000", 41 => "00111101011111000010111101010000", 42 => "10111101100100110101110011011101", 43 => "00111101110110111110100001111001", 
    44 => "00111101100111001101010010110101", 45 => "00111101011010111110101111101001", 46 => "10111100001000101101001001111100", 47 => "00111101011010100111101101000001", 
    48 => "10111100110111111101000000001111", 49 => "10111101110100111000101010110100", 50 => "10111101100101001010010110110000", 51 => "10111101110001100111110101001100", 
    52 => "10111100101011101010011011101101", 53 => "10111011010000100001000110010000", 54 => "10111101110100100100001000100010", 55 => "10111110000011111011111101101000", 
    56 => "00111101110010100010101110100001", 57 => "10111101110101101000111100001000", 58 => "00111101101000001000000101001010", 59 => "10111110000100000011110100000111", 
    60 => "00111101000101110000011100000011", 61 => "00111010000000111000100111000000", 62 => "10111100110100010000101101110110", 63 => "10111100110111011111001000111110", 
    64 => "00111101000101111101001101111110", 65 => "10111101100001000111110101110111", 66 => "00111100111110001001011001011010", 67 => "00111101110101111001001001110011", 
    68 => "00111101101001100111011110100110", 69 => "00111101110011000110010101010000", 70 => "00111101000101000110111110101100", 71 => "00111110001010000000111111010101", 
    72 => "00111100110111001110010011100011", 73 => "10111101101010000000010000010100", 74 => "00111101010011011000110000011010", 75 => "10111101101000000111001111010011", 
    76 => "10111101110011101000010110111010", 77 => "00111100100111101000001011001000", 78 => "00111101100100010101001000001100", 79 => "10111101100010011101111111101100", 
    80 => "00111101011010001100111111101011", 81 => "00111101001101111010010000000011", 82 => "10111101110001111101000010111000", 83 => "10111011100011001001101001011100", 
    84 => "00111100110011010111001010010100", 85 => "10111100110100001011100101100001", 86 => "00111101100011111100010101101100", 87 => "00111101101000100001100111110011", 
    88 => "10111101111011010110100010010001", 89 => "10111011100011011011100010101010", 90 => "10111101101010110101111101010010", 91 => "10111101011000111101100000001111", 
    92 => "00111101100000101100010010110110", 93 => "00111011111111011101101001001110", 94 => "00111101000101000000011011110000", 95 => "10111101101001111011100100011111", 
    96 => "10111101000101111110010001111110", 97 => "10111011111100110100001100010100", 98 => "00111101100110000011001100001011", 99 => "00111100110100101011110000110101", 
    100 => "00111100011110100110001101010011", 101 => "10111101110000100000111100100111", 102 => "10111101001010110100100010001110", 103 => "00111100000001010001001011111000", 
    104 => "00111100111110110011000111000101", 105 => "00111101001011000101010110011100", 106 => "10111110010100010100011011010001", 107 => "10111110000011011100011111000000", 
    108 => "10111100101100100100111110011110", 109 => "00111100011101111100001011001111", 110 => "00111100001100100010101000111111", 111 => "00111011011000101101100011000110", 
    112 => "00111100100011111001011010111100", 113 => "00111101101011111100110101011000", 114 => "10111101110001100100011011001010", 115 => "10111011101010001111110001111111", 
    116 => "10111101111010011111010110111000", 117 => "00111011100110111000110010000011", 118 => "10111101010110100011010001100100", 119 => "10111101010100111001011100011100", 
    120 => "10111101100010011100010001001010", 121 => "00111100101100110010001110101110", 122 => "00111110010011101100001111101111", 123 => "10111100110000001101001011010100", 
    124 => "00111100101001010111100100000001", 125 => "10111100101101000010110100100011", 126 => "10111011101101110001100111011011", 127 => "10111100111110101011110111110111");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

