-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity LSTM_Top_infer_Pipeline_VITIS_LOOP_193_15_Weight_lc_0_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 32; 
             AddressWidth     : integer := 7; 
             AddressRange    : integer := 128
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of LSTM_Top_infer_Pipeline_VITIS_LOOP_193_15_Weight_lc_0_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "10111101110100010011100111001001", 1 => "10111110000000001010101010000000", 2 => "00111110001011110001001110100000", 3 => "10111101101110000100010101100000", 
    4 => "00111101101000000001100110011001", 5 => "00111010001001010011111011000010", 6 => "10111110000011110011001010010101", 7 => "00111101110011000001011111001010", 
    8 => "00111101100011101111111111001010", 9 => "00111101111001110011110110000100", 10 => "10111101111001001101010101011111", 11 => "10111110001010010011011010011101", 
    12 => "00111101110110111011011010000010", 13 => "00111101111101011111010111001000", 14 => "00111101101100100100000001100010", 15 => "00111101010010110110011101000111", 
    16 => "10111110000001001010010011010011", 17 => "10111101111000011001111110110101", 18 => "00111100000010100100111011101110", 19 => "10111110000010110100110011110001", 
    20 => "10111100011010011101000111010110", 21 => "10111101010011000111111011100001", 22 => "10111101111111001110011001100011", 23 => "10111101100100001110000010010000", 
    24 => "10111101010100001011110111001000", 25 => "10111101001111011001001011001011", 26 => "00111101001100110011110110011010", 27 => "10111101100111111000111111011111", 
    28 => "10111110000001001000101011110011", 29 => "00111101110100011110011001101111", 30 => "10111101100101010000111100010001", 31 => "00111110100011100001011101110001", 
    32 => "10111100110011001000101110110100", 33 => "10111101110111110010100110011110", 34 => "10111101100001000111011011000000", 35 => "10111110010000000111101001111001", 
    36 => "00111110000011110100110110001000", 37 => "10111101000111100101011100111110", 38 => "00111100011101100010001000100110", 39 => "00111110000111001100001111001000", 
    40 => "00111101110000001110001010110000", 41 => "10111101101011101110110101011001", 42 => "10111110000110111011110000001010", 43 => "00111110010000001100001001101111", 
    44 => "00111110110011111011011010000101", 45 => "00111101110100011110011000010001", 46 => "10111101110100000101101011110111", 47 => "10111100101011110010011110001011", 
    48 => "00111110000110110000011000011100", 49 => "10111110000000100001111111011111", 50 => "00111101011001011011101110100100", 51 => "10111101101011000011110100101111", 
    52 => "00111110010111100010101011010111", 53 => "00111101101100001000001101111000", 54 => "10111110010010111010101110010100", 55 => "10111101000000010000010101111001", 
    56 => "10111100111110111001001010111110", 57 => "10111101110101000110100011011000", 58 => "00111101101111001111110000101011", 59 => "10111110000101011111011100110011", 
    60 => "00111110000101011100001010100011", 61 => "00111101100111100001000110100011", 62 => "10111101100111110001110110010111", 63 => "10111101100111011000100101000001", 
    64 => "10111101011101010110100001110101", 65 => "10111010010110011101000001110001", 66 => "10111010101000101110111010001011", 67 => "10111101000000011111011110111111", 
    68 => "00111101100100111101110111111001", 69 => "00111101111101010101110001101110", 70 => "00111101010111011101011011110000", 71 => "10111111000100011011011010110011", 
    72 => "10111100011000100111010101001011", 73 => "10111110001101111110011001110001", 74 => "00111110001101110111001010011001", 75 => "00111101000100111011000000101011", 
    76 => "10111110000011001100001100101110", 77 => "00111100101101000100110000101000", 78 => "00111101101011000110110100010111", 79 => "10111101100011001001111011011111", 
    80 => "10111110000110010110110001101111", 81 => "00111101101010010011010001011101", 82 => "10111110010000111110110011110101", 83 => "00111110000000100000001110101010", 
    84 => "00111101101110101110110110111101", 85 => "10111101110001000111010111111010", 86 => "10111101000001001010010101101001", 87 => "10111110010000110111001001100000", 
    88 => "10111110001101100001101001000110", 89 => "10111110010011110001001110011001", 90 => "00111110000001111111011010111111", 91 => "10111101100001100011101100110111", 
    92 => "00111101011100001010001011000011", 93 => "00111101111111000000110111011011", 94 => "10111101111101010101001001101010", 95 => "10111101110011100111110011101011", 
    96 => "10111100110111010010100010000101", 97 => "10111110000011011100111000010001", 98 => "00111010100100010010001111101110", 99 => "10111101100010010011111100010010", 
    100 => "00111110000010111110101001000001", 101 => "10111110000000101111100000110001", 102 => "10111101010010110100010100010101", 103 => "10111110000101100110101001001000", 
    104 => "00111101111000101000111011111110", 105 => "00111101101011010110101100000010", 106 => "00111110000000100000010100000111", 107 => "00111110001101100111011110000101", 
    108 => "10111011110101010010100011000000", 109 => "00111101110000000111001111110110", 110 => "00111110000110101101000111011110", 111 => "10111101110100101000001101001101", 
    112 => "00111101111110011111011110101000", 113 => "00111101110110101000101100110001", 114 => "00111101011110100111000011111101", 115 => "00111101101100001000110110101111", 
    116 => "10111101111100000111100100101010", 117 => "00111101100101010110100010001100", 118 => "10111101111011010001000010111111", 119 => "00111101010111110000000110101110", 
    120 => "10111110000011100000001101011101", 121 => "00111110000001010110111000010010", 122 => "00111110101010000111100010100011", 123 => "00111110000100110011110100111101", 
    124 => "00111100010101000111111111011111", 125 => "00111110000010000001101000000001", 126 => "00111100101110100111111100001101", 127 => "00111110000110011001011000110001");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

