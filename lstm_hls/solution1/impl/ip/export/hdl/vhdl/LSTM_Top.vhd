-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity LSTM_Top is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    in_r_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    in_r_TVALID : IN STD_LOGIC;
    in_r_TREADY : OUT STD_LOGIC;
    in_r_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    in_r_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    in_r_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    in_r_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    in_r_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    in_r_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    out_r_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_r_TVALID : OUT STD_LOGIC;
    out_r_TREADY : IN STD_LOGIC;
    out_r_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_r_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_r_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_r_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_r_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_r_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of LSTM_Top is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "LSTM_Top_LSTM_Top,hls_ip_2023_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu5eg-sfvc784-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.708000,HLS_SYN_LAT=1371684,HLS_SYN_TPT=none,HLS_SYN_MEM=159,HLS_SYN_DSP=0,HLS_SYN_FF=5252,HLS_SYN_LUT=7830,HLS_VERSION=2023_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";

    signal ap_rst_n_inv : STD_LOGIC;
    signal out_r_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal buf_in_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal buf_in_ce0 : STD_LOGIC;
    signal buf_in_we0 : STD_LOGIC;
    signal buf_in_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_LSTM_Top_Pipeline_VITIS_LOOP_10_1_fu_125_ap_start : STD_LOGIC;
    signal grp_LSTM_Top_Pipeline_VITIS_LOOP_10_1_fu_125_ap_done : STD_LOGIC;
    signal grp_LSTM_Top_Pipeline_VITIS_LOOP_10_1_fu_125_ap_idle : STD_LOGIC;
    signal grp_LSTM_Top_Pipeline_VITIS_LOOP_10_1_fu_125_ap_ready : STD_LOGIC;
    signal grp_LSTM_Top_Pipeline_VITIS_LOOP_10_1_fu_125_in_r_TREADY : STD_LOGIC;
    signal grp_LSTM_Top_Pipeline_VITIS_LOOP_10_1_fu_125_buf_in_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_LSTM_Top_Pipeline_VITIS_LOOP_10_1_fu_125_buf_in_ce0 : STD_LOGIC;
    signal grp_LSTM_Top_Pipeline_VITIS_LOOP_10_1_fu_125_buf_in_we0 : STD_LOGIC;
    signal grp_LSTM_Top_Pipeline_VITIS_LOOP_10_1_fu_125_buf_in_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_infer_fu_144_ap_start : STD_LOGIC;
    signal grp_infer_fu_144_ap_done : STD_LOGIC;
    signal grp_infer_fu_144_ap_idle : STD_LOGIC;
    signal grp_infer_fu_144_ap_ready : STD_LOGIC;
    signal grp_infer_fu_144_input_r_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_infer_fu_144_input_r_ce0 : STD_LOGIC;
    signal grp_infer_fu_144_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_LSTM_Top_Pipeline_VITIS_LOOP_10_1_fu_125_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_infer_fu_144_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal regslice_both_out_r_V_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_block_state6 : BOOLEAN;
    signal regslice_both_in_r_V_data_V_U_apdone_blk : STD_LOGIC;
    signal in_r_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal in_r_TVALID_int_regslice : STD_LOGIC;
    signal in_r_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_in_r_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_r_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal in_r_TKEEP_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_in_r_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_r_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_r_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal in_r_TSTRB_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_in_r_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_r_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_r_V_user_V_U_apdone_blk : STD_LOGIC;
    signal in_r_TUSER_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_in_r_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_r_V_user_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_r_V_last_V_U_apdone_blk : STD_LOGIC;
    signal in_r_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_in_r_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_r_V_last_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_r_V_id_V_U_apdone_blk : STD_LOGIC;
    signal in_r_TID_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_in_r_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_r_V_id_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_r_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal in_r_TDEST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_in_r_V_dest_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_r_V_dest_V_U_ack_in : STD_LOGIC;
    signal out_r_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal out_r_TVALID_int_regslice : STD_LOGIC;
    signal out_r_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_out_r_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_r_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out_r_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_r_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_r_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out_r_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_r_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_r_V_user_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out_r_V_user_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_r_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_r_V_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out_r_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_r_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_r_V_id_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out_r_V_id_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_r_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_r_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out_r_V_dest_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_r_V_dest_V_U_vld_out : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component LSTM_Top_LSTM_Top_Pipeline_VITIS_LOOP_10_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_r_TVALID : IN STD_LOGIC;
        in_r_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        in_r_TREADY : OUT STD_LOGIC;
        in_r_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
        in_r_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        in_r_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        in_r_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        in_r_TID : IN STD_LOGIC_VECTOR (0 downto 0);
        in_r_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
        buf_in_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        buf_in_ce0 : OUT STD_LOGIC;
        buf_in_we0 : OUT STD_LOGIC;
        buf_in_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component LSTM_Top_infer IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_r_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component LSTM_Top_buf_in_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component LSTM_Top_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    buf_in_U : component LSTM_Top_buf_in_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 100,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => buf_in_address0,
        ce0 => buf_in_ce0,
        we0 => buf_in_we0,
        d0 => grp_LSTM_Top_Pipeline_VITIS_LOOP_10_1_fu_125_buf_in_d0,
        q0 => buf_in_q0);

    grp_LSTM_Top_Pipeline_VITIS_LOOP_10_1_fu_125 : component LSTM_Top_LSTM_Top_Pipeline_VITIS_LOOP_10_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_LSTM_Top_Pipeline_VITIS_LOOP_10_1_fu_125_ap_start,
        ap_done => grp_LSTM_Top_Pipeline_VITIS_LOOP_10_1_fu_125_ap_done,
        ap_idle => grp_LSTM_Top_Pipeline_VITIS_LOOP_10_1_fu_125_ap_idle,
        ap_ready => grp_LSTM_Top_Pipeline_VITIS_LOOP_10_1_fu_125_ap_ready,
        in_r_TVALID => in_r_TVALID_int_regslice,
        in_r_TDATA => in_r_TDATA_int_regslice,
        in_r_TREADY => grp_LSTM_Top_Pipeline_VITIS_LOOP_10_1_fu_125_in_r_TREADY,
        in_r_TKEEP => in_r_TKEEP_int_regslice,
        in_r_TSTRB => in_r_TSTRB_int_regslice,
        in_r_TUSER => in_r_TUSER_int_regslice,
        in_r_TLAST => in_r_TLAST_int_regslice,
        in_r_TID => in_r_TID_int_regslice,
        in_r_TDEST => in_r_TDEST_int_regslice,
        buf_in_address0 => grp_LSTM_Top_Pipeline_VITIS_LOOP_10_1_fu_125_buf_in_address0,
        buf_in_ce0 => grp_LSTM_Top_Pipeline_VITIS_LOOP_10_1_fu_125_buf_in_ce0,
        buf_in_we0 => grp_LSTM_Top_Pipeline_VITIS_LOOP_10_1_fu_125_buf_in_we0,
        buf_in_d0 => grp_LSTM_Top_Pipeline_VITIS_LOOP_10_1_fu_125_buf_in_d0);

    grp_infer_fu_144 : component LSTM_Top_infer
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_infer_fu_144_ap_start,
        ap_done => grp_infer_fu_144_ap_done,
        ap_idle => grp_infer_fu_144_ap_idle,
        ap_ready => grp_infer_fu_144_ap_ready,
        input_r_address0 => grp_infer_fu_144_input_r_address0,
        input_r_ce0 => grp_infer_fu_144_input_r_ce0,
        input_r_q0 => buf_in_q0,
        ap_return => grp_infer_fu_144_ap_return);

    regslice_both_in_r_V_data_V_U : component LSTM_Top_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_r_TDATA,
        vld_in => in_r_TVALID,
        ack_in => regslice_both_in_r_V_data_V_U_ack_in,
        data_out => in_r_TDATA_int_regslice,
        vld_out => in_r_TVALID_int_regslice,
        ack_out => in_r_TREADY_int_regslice,
        apdone_blk => regslice_both_in_r_V_data_V_U_apdone_blk);

    regslice_both_in_r_V_keep_V_U : component LSTM_Top_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_r_TKEEP,
        vld_in => in_r_TVALID,
        ack_in => regslice_both_in_r_V_keep_V_U_ack_in,
        data_out => in_r_TKEEP_int_regslice,
        vld_out => regslice_both_in_r_V_keep_V_U_vld_out,
        ack_out => in_r_TREADY_int_regslice,
        apdone_blk => regslice_both_in_r_V_keep_V_U_apdone_blk);

    regslice_both_in_r_V_strb_V_U : component LSTM_Top_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_r_TSTRB,
        vld_in => in_r_TVALID,
        ack_in => regslice_both_in_r_V_strb_V_U_ack_in,
        data_out => in_r_TSTRB_int_regslice,
        vld_out => regslice_both_in_r_V_strb_V_U_vld_out,
        ack_out => in_r_TREADY_int_regslice,
        apdone_blk => regslice_both_in_r_V_strb_V_U_apdone_blk);

    regslice_both_in_r_V_user_V_U : component LSTM_Top_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_r_TUSER,
        vld_in => in_r_TVALID,
        ack_in => regslice_both_in_r_V_user_V_U_ack_in,
        data_out => in_r_TUSER_int_regslice,
        vld_out => regslice_both_in_r_V_user_V_U_vld_out,
        ack_out => in_r_TREADY_int_regslice,
        apdone_blk => regslice_both_in_r_V_user_V_U_apdone_blk);

    regslice_both_in_r_V_last_V_U : component LSTM_Top_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_r_TLAST,
        vld_in => in_r_TVALID,
        ack_in => regslice_both_in_r_V_last_V_U_ack_in,
        data_out => in_r_TLAST_int_regslice,
        vld_out => regslice_both_in_r_V_last_V_U_vld_out,
        ack_out => in_r_TREADY_int_regslice,
        apdone_blk => regslice_both_in_r_V_last_V_U_apdone_blk);

    regslice_both_in_r_V_id_V_U : component LSTM_Top_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_r_TID,
        vld_in => in_r_TVALID,
        ack_in => regslice_both_in_r_V_id_V_U_ack_in,
        data_out => in_r_TID_int_regslice,
        vld_out => regslice_both_in_r_V_id_V_U_vld_out,
        ack_out => in_r_TREADY_int_regslice,
        apdone_blk => regslice_both_in_r_V_id_V_U_apdone_blk);

    regslice_both_in_r_V_dest_V_U : component LSTM_Top_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_r_TDEST,
        vld_in => in_r_TVALID,
        ack_in => regslice_both_in_r_V_dest_V_U_ack_in,
        data_out => in_r_TDEST_int_regslice,
        vld_out => regslice_both_in_r_V_dest_V_U_vld_out,
        ack_out => in_r_TREADY_int_regslice,
        apdone_blk => regslice_both_in_r_V_dest_V_U_apdone_blk);

    regslice_both_out_r_V_data_V_U : component LSTM_Top_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => out_r_TDATA_int_regslice,
        vld_in => out_r_TVALID_int_regslice,
        ack_in => out_r_TREADY_int_regslice,
        data_out => out_r_TDATA,
        vld_out => regslice_both_out_r_V_data_V_U_vld_out,
        ack_out => out_r_TREADY,
        apdone_blk => regslice_both_out_r_V_data_V_U_apdone_blk);

    regslice_both_out_r_V_keep_V_U : component LSTM_Top_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv4_F,
        vld_in => out_r_TVALID_int_regslice,
        ack_in => regslice_both_out_r_V_keep_V_U_ack_in_dummy,
        data_out => out_r_TKEEP,
        vld_out => regslice_both_out_r_V_keep_V_U_vld_out,
        ack_out => out_r_TREADY,
        apdone_blk => regslice_both_out_r_V_keep_V_U_apdone_blk);

    regslice_both_out_r_V_strb_V_U : component LSTM_Top_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv4_F,
        vld_in => out_r_TVALID_int_regslice,
        ack_in => regslice_both_out_r_V_strb_V_U_ack_in_dummy,
        data_out => out_r_TSTRB,
        vld_out => regslice_both_out_r_V_strb_V_U_vld_out,
        ack_out => out_r_TREADY,
        apdone_blk => regslice_both_out_r_V_strb_V_U_apdone_blk);

    regslice_both_out_r_V_user_V_U : component LSTM_Top_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv1_0,
        vld_in => out_r_TVALID_int_regslice,
        ack_in => regslice_both_out_r_V_user_V_U_ack_in_dummy,
        data_out => out_r_TUSER,
        vld_out => regslice_both_out_r_V_user_V_U_vld_out,
        ack_out => out_r_TREADY,
        apdone_blk => regslice_both_out_r_V_user_V_U_apdone_blk);

    regslice_both_out_r_V_last_V_U : component LSTM_Top_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv1_1,
        vld_in => out_r_TVALID_int_regslice,
        ack_in => regslice_both_out_r_V_last_V_U_ack_in_dummy,
        data_out => out_r_TLAST,
        vld_out => regslice_both_out_r_V_last_V_U_vld_out,
        ack_out => out_r_TREADY,
        apdone_blk => regslice_both_out_r_V_last_V_U_apdone_blk);

    regslice_both_out_r_V_id_V_U : component LSTM_Top_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv1_0,
        vld_in => out_r_TVALID_int_regslice,
        ack_in => regslice_both_out_r_V_id_V_U_ack_in_dummy,
        data_out => out_r_TID,
        vld_out => regslice_both_out_r_V_id_V_U_vld_out,
        ack_out => out_r_TREADY,
        apdone_blk => regslice_both_out_r_V_id_V_U_apdone_blk);

    regslice_both_out_r_V_dest_V_U : component LSTM_Top_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv1_0,
        vld_in => out_r_TVALID_int_regslice,
        ack_in => regslice_both_out_r_V_dest_V_U_ack_in_dummy,
        data_out => out_r_TDEST,
        vld_out => regslice_both_out_r_V_dest_V_U_vld_out,
        ack_out => out_r_TREADY,
        apdone_blk => regslice_both_out_r_V_dest_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_LSTM_Top_Pipeline_VITIS_LOOP_10_1_fu_125_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_LSTM_Top_Pipeline_VITIS_LOOP_10_1_fu_125_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    grp_LSTM_Top_Pipeline_VITIS_LOOP_10_1_fu_125_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_LSTM_Top_Pipeline_VITIS_LOOP_10_1_fu_125_ap_ready = ap_const_logic_1)) then 
                    grp_LSTM_Top_Pipeline_VITIS_LOOP_10_1_fu_125_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_infer_fu_144_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_infer_fu_144_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    grp_infer_fu_144_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_infer_fu_144_ap_ready = ap_const_logic_1)) then 
                    grp_infer_fu_144_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state5, ap_CS_fsm_state6, grp_LSTM_Top_Pipeline_VITIS_LOOP_10_1_fu_125_ap_done, grp_infer_fu_144_ap_done, ap_CS_fsm_state3, regslice_both_out_r_V_data_V_U_apdone_blk, out_r_TREADY_int_regslice)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((grp_LSTM_Top_Pipeline_VITIS_LOOP_10_1_fu_125_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if ((not(((grp_infer_fu_144_ap_done = ap_const_logic_0) or (out_r_TREADY_int_regslice = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if ((not(((out_r_TREADY_int_regslice = ap_const_logic_0) or (regslice_both_out_r_V_data_V_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_ST_fsm_state1_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(grp_LSTM_Top_Pipeline_VITIS_LOOP_10_1_fu_125_ap_done)
    begin
        if ((grp_LSTM_Top_Pipeline_VITIS_LOOP_10_1_fu_125_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state4_blk <= ap_const_logic_0;

    ap_ST_fsm_state5_blk_assign_proc : process(grp_infer_fu_144_ap_done, out_r_TREADY_int_regslice)
    begin
        if (((grp_infer_fu_144_ap_done = ap_const_logic_0) or (out_r_TREADY_int_regslice = ap_const_logic_0))) then 
            ap_ST_fsm_state5_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state5_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state6_blk_assign_proc : process(regslice_both_out_r_V_data_V_U_apdone_blk, out_r_TREADY_int_regslice)
    begin
        if (((out_r_TREADY_int_regslice = ap_const_logic_0) or (regslice_both_out_r_V_data_V_U_apdone_blk = ap_const_logic_1))) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state6_assign_proc : process(regslice_both_out_r_V_data_V_U_apdone_blk, out_r_TREADY_int_regslice)
    begin
                ap_block_state6 <= ((out_r_TREADY_int_regslice = ap_const_logic_0) or (regslice_both_out_r_V_data_V_U_apdone_blk = ap_const_logic_1));
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    buf_in_address0_assign_proc : process(ap_CS_fsm_state5, grp_LSTM_Top_Pipeline_VITIS_LOOP_10_1_fu_125_buf_in_address0, grp_infer_fu_144_input_r_address0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            buf_in_address0 <= grp_infer_fu_144_input_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            buf_in_address0 <= grp_LSTM_Top_Pipeline_VITIS_LOOP_10_1_fu_125_buf_in_address0;
        else 
            buf_in_address0 <= "XXXXXXX";
        end if; 
    end process;


    buf_in_ce0_assign_proc : process(ap_CS_fsm_state5, grp_LSTM_Top_Pipeline_VITIS_LOOP_10_1_fu_125_buf_in_ce0, grp_infer_fu_144_input_r_ce0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            buf_in_ce0 <= grp_infer_fu_144_input_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            buf_in_ce0 <= grp_LSTM_Top_Pipeline_VITIS_LOOP_10_1_fu_125_buf_in_ce0;
        else 
            buf_in_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_in_we0_assign_proc : process(grp_LSTM_Top_Pipeline_VITIS_LOOP_10_1_fu_125_buf_in_we0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            buf_in_we0 <= grp_LSTM_Top_Pipeline_VITIS_LOOP_10_1_fu_125_buf_in_we0;
        else 
            buf_in_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_LSTM_Top_Pipeline_VITIS_LOOP_10_1_fu_125_ap_start <= grp_LSTM_Top_Pipeline_VITIS_LOOP_10_1_fu_125_ap_start_reg;
    grp_infer_fu_144_ap_start <= grp_infer_fu_144_ap_start_reg;
    in_r_TREADY <= regslice_both_in_r_V_data_V_U_ack_in;

    in_r_TREADY_int_regslice_assign_proc : process(grp_LSTM_Top_Pipeline_VITIS_LOOP_10_1_fu_125_in_r_TREADY, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            in_r_TREADY_int_regslice <= grp_LSTM_Top_Pipeline_VITIS_LOOP_10_1_fu_125_in_r_TREADY;
        else 
            in_r_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    out_r_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, out_r_TREADY_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            out_r_TDATA_blk_n <= out_r_TREADY_int_regslice;
        else 
            out_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_r_TDATA_int_regslice <= grp_infer_fu_144_ap_return;
    out_r_TVALID <= regslice_both_out_r_V_data_V_U_vld_out;

    out_r_TVALID_int_regslice_assign_proc : process(ap_CS_fsm_state5, grp_infer_fu_144_ap_done, out_r_TREADY_int_regslice)
    begin
        if ((not(((grp_infer_fu_144_ap_done = ap_const_logic_0) or (out_r_TREADY_int_regslice = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            out_r_TVALID_int_regslice <= ap_const_logic_1;
        else 
            out_r_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

end behav;
