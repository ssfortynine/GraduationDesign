-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity LSTM_Top_infer_Pipeline_VITIS_LOOP_156_10_VITIS_LOOP_158_11_Bias0_o_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 32; 
             AddressWidth     : integer := 7; 
             AddressRange    : integer := 128
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of LSTM_Top_infer_Pipeline_VITIS_LOOP_156_10_VITIS_LOOP_158_11_Bias0_o_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "10111101111011110110101100011010", 1 => "00111101101011010000110111010111", 2 => "00111110001000011101110110111011", 3 => "00111101001110001010000001101011", 
    4 => "10111110010011111111010000000101", 5 => "10111110001101011111010101000010", 6 => "00111100110110101111111111100110", 7 => "00111101011100010100001011000011", 
    8 => "00111100100000100011101111011111", 9 => "10111101011101011111001101000100", 10 => "00111100101100110001011001111000", 11 => "00111110001111011111011010101101", 
    12 => "00111101110111110110101100110101", 13 => "00111101000111010111011001010011", 14 => "10111100100100001101000101001001", 15 => "10111101011001000100010101011111", 
    16 => "00111101001100000010010000100010", 17 => "10111100100010000011000101001100", 18 => "10111101100011101001011101110101", 19 => "10111110001000111010011100110011", 
    20 => "10111101111001100010011011000000", 21 => "00111101101011101111011011101110", 22 => "10111101100011110100010110000011", 23 => "10111101111100101111111110001111", 
    24 => "00111100101010110110011001011011", 25 => "10111110001101011001001101010010", 26 => "10111011100001101000110001010000", 27 => "00111100100100000100000000001111", 
    28 => "10111110001011001110000011001101", 29 => "10111110000011111010011010000001", 30 => "10111101110111000110010111000111", 31 => "00111110110111011011011100100001", 
    32 => "10111100110101110111000001101111", 33 => "10111110001110111101100010100100", 34 => "10111001000101110110010001111111", 35 => "00111110010111111101110110011011", 
    36 => "10111101010110011010101010110001", 37 => "00111101000011001110100101110010", 38 => "00111110010110001011101000111010", 39 => "00111110000101110100001000101000", 
    40 => "10111101111001000000011111100111", 41 => "10111011110010101110110111000111", 42 => "10111101100101011010101010111000", 43 => "00111110000011010101100111001000", 
    44 => "00111111000110100010001110110011", 45 => "00111101010010001100000100001100", 46 => "10111101001010000001011010001010", 47 => "10111101001100011001001110011001", 
    48 => "00111110010000011110011111000101", 49 => "10111101000111010011110101010000", 50 => "10111100101010110100011001011010", 51 => "10111101100100100011001100000010", 
    52 => "00111110100101001110110011001011", 53 => "10111101100011010100101111101001", 54 => "00111110011101010001010111111110", 55 => "10111101110110000000100001011101", 
    56 => "00111101000100100100110010011100", 57 => "10111101110111101010100001111101", 58 => "00111011001010010010101010000010", 59 => "10111101111000101011101010000010", 
    60 => "00111101111001010000110001000100", 61 => "00111100010110101010110110010110", 62 => "00111101100100100100010000010010", 63 => "00111011010100101100101101110010", 
    64 => "00111101101100001101011110111001", 65 => "10111101100110000001010110010011", 66 => "10111110000101000010110111111110", 67 => "10111110010010010100010001011010", 
    68 => "10111110000110000110000001010000", 69 => "10111100100101001100110110110010", 70 => "10111101110101110001011101001011", 71 => "00111111011011110100001000011111", 
    72 => "10111110010110000010100000000001", 73 => "00111101001000100101010111011011", 74 => "00111110000011010011110001100101", 75 => "10111101111000011010101000110010", 
    76 => "00111110011010011010011111101010", 77 => "10111100110011001101011010001000", 78 => "10111011010011111010100000011110", 79 => "10111101101100011010001010001111", 
    80 => "00111101101010101110101011111001", 81 => "10111101101001110101000110101111", 82 => "00111110100000101010100010011011", 83 => "10111101100110101001100101110111", 
    84 => "00111110001010000001000000110011", 85 => "10111101001011001001111000111100", 86 => "10111101010011100100011100111011", 87 => "00111110010110011000000100011110", 
    88 => "00111100000010010001100100000110", 89 => "00111110000111011010011110010110", 90 => "00111101010110101011010101100000", 91 => "10111101000011001011100010111000", 
    92 => "10111100000100000001101110011000", 93 => "10111101111110001111110001011110", 94 => "10111110000101010101100110011001", 95 => "00111101001100101110110111011100", 
    96 => "10111100101111110110011001011101", 97 => "00111110000110000111111001100001", 98 => "00111101010011100101100010001011", 99 => "10111100110111001100101101111000", 
    100 => "00111101010001000001011101001100", 101 => "00111101011001111010001100110101", 102 => "00111100101101110111000011001010", 103 => "00111101101110111100110111001000", 
    104 => "00111101000100010110001000011011", 105 => "00111110001001100100010100001110", 106 => "10111101001011010010111111001001", 107 => "00111100110101011010000000001010", 
    108 => "00111100110101100011011111000000", 109 => "00111101011010101000111110011011", 110 => "00111101011010111101101010000100", 111 => "10111101010100011100000011011101", 
    112 => "00111101010100001101000010011011", 113 => "10111101010101100010100100110111", 114 => "10111101111001100010100010111110", 115 => "10111101111010001110011110000000", 
    116 => "10111101010101110000010011101010", 117 => "00111110010000110100001011101110", 118 => "00111101000100111111100001011101", 119 => "10111110000100101100000011100001", 
    120 => "10111100001110111110111101111010", 121 => "10111110000110110000001101001110", 122 => "00111111001101111001000100010000", 123 => "00111101110001101010110110000000", 
    124 => "00111101110001110100101101000000", 125 => "00111101001000100001010011001000", 126 => "00111101011110111010001011110110", 127 => "00111110000110100010001011111101");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

