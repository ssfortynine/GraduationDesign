# 1 "lstm_hls/rnn.cpp"
# 1 "<built-in>" 1
# 1 "<built-in>" 3
# 396 "<built-in>" 3
# 1 "<command line>" 1
# 1 "<built-in>" 2
# 1 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/autopilot_ssdm_op.h" 1
# 108 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/autopilot_ssdm_op.h"
extern "C" {






    void _ssdm_op_IfRead(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_IfWrite(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfNbRead(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfNbWrite(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfCanRead(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfCanWrite(...) __attribute__ ((nothrow)) __attribute__((overloadable));


    void _ssdm_StreamRead(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_StreamWrite(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamNbRead(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamNbWrite(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamCanRead(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamCanWrite(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned _ssdm_StreamSize(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_ReadReq(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_Read(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_WriteReq(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_Write(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_NbReadReq(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_CanReadReq(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_NbWriteReq(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_CanWriteReq(...) __attribute__ ((nothrow)) __attribute__((overloadable));




    void _ssdm_op_MemShiftRead(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_PrintNone(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_PrintInt(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_PrintDouble(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_Wait(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_Poll(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_Return(...) __attribute__ ((nothrow)) __attribute__((overloadable));


    void _ssdm_op_SpecSynModule(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecTopModule(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecProcessDecl(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecProcessDef(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecPort(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecConnection(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecChannel(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecSensitive(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecModuleInst(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecPortMap(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecReset(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecPlatform(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecClockDomain(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecPowerDomain(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    int _ssdm_op_SpecRegionBegin(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    int _ssdm_op_SpecRegionEnd(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecLoopName(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecLoopTripCount(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    int _ssdm_op_SpecStateBegin(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    int _ssdm_op_SpecStateEnd(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecInterface(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecPipeline(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecDataflowPipeline(...) __attribute__ ((nothrow)) __attribute__((overloadable));


    void _ssdm_op_SpecLatency(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecParallel(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecProtocol(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecOccurrence(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecResource(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecResourceLimit(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecCHCore(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecFUCore(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecIFCore(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecIPCore(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecMemCore(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecExt(...) __attribute__ ((nothrow)) __attribute__((overloadable));




    void _ssdm_SpecArrayDimSize(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_RegionBegin(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_RegionEnd(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_Unroll(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_UnrollRegion(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_InlineAll(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_InlineLoop(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_Inline(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_InlineSelf(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_InlineRegion(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_SpecArrayMap(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_SpecArrayPartition(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_SpecArrayReshape(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_SpecStream(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecStable(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecStableContent(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecBindPort(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecPipoDepth(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_SpecExpr(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_SpecExprBalance(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_SpecDependence(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_SpecLoopMerge(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_SpecLoopFlatten(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_SpecLoopRewind(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_SpecFuncInstantiation(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_SpecFuncBuffer(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_SpecFuncExtract(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_SpecConstant(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_DataPack(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_SpecDataPack(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecBitsMap(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecLicense(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void __xilinx_ip_top(...) __attribute__ ((nothrow)) __attribute__((overloadable));


}
# 2 "<built-in>" 2
# 1 "lstm_hls/rnn.cpp" 2
# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\iostream" 1 3
# 37 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\iostream" 3

# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\x86_64-w64-mingw32\\bits/c++config.h" 1 3
# 236 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\x86_64-w64-mingw32\\bits/c++config.h" 3
namespace std
{
  typedef long unsigned int size_t;
  typedef long int ptrdiff_t;


  typedef decltype(nullptr) nullptr_t;

}
# 258 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\x86_64-w64-mingw32\\bits/c++config.h" 3
namespace std
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
namespace __gnu_cxx
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
# 508 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\x86_64-w64-mingw32\\bits/c++config.h" 3
# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\x86_64-w64-mingw32\\bits/os_defines.h" 1 3
# 509 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\x86_64-w64-mingw32\\bits/c++config.h" 2 3


# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\x86_64-w64-mingw32\\bits/cpu_defines.h" 1 3
# 512 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\x86_64-w64-mingw32\\bits/c++config.h" 2 3
# 39 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\iostream" 2 3
# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\ostream" 1 3
# 37 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\ostream" 3

# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\ios" 1 3
# 37 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\ios" 3

# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\iosfwd" 1 3
# 37 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\iosfwd" 3


# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/stringfwd.h" 1 3
# 38 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/stringfwd.h" 3


# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/memoryfwd.h" 1 3
# 47 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/memoryfwd.h" 3



namespace std
{
# 63 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/memoryfwd.h" 3
  template<typename>
    class allocator;

  template<>
    class allocator<void>;


  template<typename, typename>
    struct uses_allocator;




}
# 41 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/stringfwd.h" 2 3

namespace std
{
# 52 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/stringfwd.h" 3
  template<class _CharT>
    struct char_traits;

  template<> struct char_traits<char>;


  template<> struct char_traits<wchar_t>;




  template<> struct char_traits<char16_t>;
  template<> struct char_traits<char32_t>;


namespace __cxx11 {

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
           typename _Alloc = allocator<_CharT> >
    class basic_string;


  typedef basic_string<char> string;



  typedef basic_string<wchar_t> wstring;





  typedef basic_string<char16_t> u16string;


  typedef basic_string<char32_t> u32string;


}




}
# 40 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\iosfwd" 2 3
# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/postypes.h" 1 3
# 39 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/postypes.h" 3

# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\cwchar" 1 3
# 40 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\cwchar" 3




# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\wchar.h" 1 3








# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\crtdefs.h" 1 3
# 10 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\crtdefs.h" 3
# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\_mingw.h" 1 3
# 12 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\_mingw.h" 3
# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include/_mingw_mac.h" 1 3
# 13 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\_mingw.h" 2 3
# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include/_mingw_secapi.h" 1 3
# 44 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include/_mingw_secapi.h" 3
extern "C++" {
template <bool __test, typename __dsttype>
  struct __if_array;
template <typename __dsttype>
  struct __if_array <true, __dsttype> {
    typedef __dsttype __type;
};
}
# 14 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\_mingw.h" 2 3
# 282 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\_mingw.h" 3
# 1 "D:\\Xilinx\\Vitis_HLS\\2023.1\\win64\\tools\\clang-3.9-csynth\\lib\\clang\\7.0.0\\include\\vadefs.h" 1 3
# 26 "D:\\Xilinx\\Vitis_HLS\\2023.1\\win64\\tools\\clang-3.9-csynth\\lib\\clang\\7.0.0\\include\\vadefs.h" 3
# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\vadefs.h" 1 3








# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\_mingw.h" 1 3
# 595 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\_mingw.h" 3
# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include/sdks/_mingw_directx.h" 1 3
# 596 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\_mingw.h" 2 3
# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include/sdks/_mingw_ddk.h" 1 3
# 597 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\_mingw.h" 2 3
# 10 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\vadefs.h" 2 3




#pragma pack(push,_CRT_PACKING)



extern "C" {





  typedef __builtin_va_list __gnuc_va_list;






  typedef __gnuc_va_list va_list;
# 99 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\vadefs.h" 3
}



#pragma pack(pop)
# 27 "D:\\Xilinx\\Vitis_HLS\\2023.1\\win64\\tools\\clang-3.9-csynth\\lib\\clang\\7.0.0\\include\\vadefs.h" 2 3
# 283 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\_mingw.h" 2 3
# 558 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\_mingw.h" 3
extern "C" {
# 569 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\_mingw.h" 3
void __attribute__((__cdecl__)) __debugbreak(void);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__)) void __attribute__((__cdecl__)) __debugbreak(void)
{
  __asm__ __volatile__("int {$}3":);
}




const char *__mingw_get_crt_info (void);


}
# 11 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\crtdefs.h" 2 3




#pragma pack(push,_CRT_PACKING)
# 35 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\crtdefs.h" 3
__extension__ typedef unsigned long size_t;
# 45 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\crtdefs.h" 3
__extension__ typedef long ssize_t;






typedef size_t rsize_t;
# 62 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\crtdefs.h" 3
__extension__ typedef long intptr_t;
# 75 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\crtdefs.h" 3
__extension__ typedef unsigned long uintptr_t;
# 88 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\crtdefs.h" 3
__extension__ typedef long ptrdiff_t;
# 106 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\crtdefs.h" 3
typedef unsigned short wint_t;
typedef unsigned short wctype_t;





typedef int errno_t;




typedef long __time32_t;




__extension__ typedef long __time64_t;
# 138 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\crtdefs.h" 3
typedef __time64_t time_t;
# 422 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\crtdefs.h" 3
struct threadlocaleinfostruct;
struct threadmbcinfostruct;
typedef struct threadlocaleinfostruct *pthreadlocinfo;
typedef struct threadmbcinfostruct *pthreadmbcinfo;
struct __lc_time_data;

typedef struct localeinfo_struct {
  pthreadlocinfo locinfo;
  pthreadmbcinfo mbcinfo;
} _locale_tstruct,*_locale_t;



typedef struct tagLC_ID {
  unsigned short wLanguage;
  unsigned short wCountry;
  unsigned short wCodePage;
} LC_ID,*LPLC_ID;




typedef struct threadlocaleinfostruct {
  int refcount;
  unsigned int lc_codepage;
  unsigned int lc_collate_cp;
  unsigned long lc_handle[6];
  LC_ID lc_id[6];
  struct {
    char *locale;
    wchar_t *wlocale;
    int *refcount;
    int *wrefcount;
  } lc_category[6];
  int lc_clike;
  int mb_cur_max;
  int *lconv_intl_refcount;
  int *lconv_num_refcount;
  int *lconv_mon_refcount;
  struct lconv *lconv;
  int *ctype1_refcount;
  unsigned short *ctype1;
  const unsigned short *pctype;
  const unsigned char *pclmap;
  const unsigned char *pcumap;
  struct __lc_time_data *lc_time_curr;
} threadlocinfo;







#pragma pack(pop)
# 10 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\wchar.h" 2 3
# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\_mingw_print_push.h" 1 3
# 11 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\wchar.h" 2 3
# 25 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\wchar.h" 3
#pragma pack(push,_CRT_PACKING)


extern "C" {
# 41 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\wchar.h" 3
  struct _iobuf {
    char *_ptr;
    int _cnt;
    char *_base;
    int _flag;
    int _file;
    int _charbuf;
    int _bufsiz;
    char *_tmpfname;
  };
  typedef struct _iobuf FILE;



__attribute__ ((__dllimport__)) FILE *__attribute__((__cdecl__)) __acrt_iob_func(unsigned index);


  __attribute__ ((__dllimport__)) FILE *__attribute__((__cdecl__)) __iob_func(void);
# 81 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\wchar.h" 3
  typedef unsigned long _fsize_t;




  struct _wfinddata32_t {
    unsigned attrib;
    __time32_t time_create;
    __time32_t time_access;
    __time32_t time_write;
    _fsize_t size;
    wchar_t name[260];
  };

  struct _wfinddata32i64_t {
    unsigned attrib;
    __time32_t time_create;
    __time32_t time_access;
    __time32_t time_write;
    __extension__ long size;
    wchar_t name[260];
  };

  struct _wfinddata64i32_t {
    unsigned attrib;
    __time64_t time_create;
    __time64_t time_access;
    __time64_t time_write;
    _fsize_t size;
    wchar_t name[260];
  };

  struct _wfinddata64_t {
    unsigned attrib;
    __time64_t time_create;
    __time64_t time_access;
    __time64_t time_write;
    __extension__ long size;
    wchar_t name[260];
  };
# 186 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\wchar.h" 3
  extern unsigned short ** __imp__pctype;
# 201 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\wchar.h" 3
  extern unsigned short ** __imp__wctype;
# 216 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\wchar.h" 3
  extern unsigned short ** __imp__pwctype;
# 262 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\wchar.h" 3
  int __attribute__((__cdecl__)) iswalpha(wint_t _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswalpha_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswupper(wint_t _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswupper_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswlower(wint_t _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswlower_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswdigit(wint_t _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswdigit_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswxdigit(wint_t _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswxdigit_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswspace(wint_t _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswspace_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswpunct(wint_t _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswpunct_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswalnum(wint_t _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswalnum_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswprint(wint_t _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswprint_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswgraph(wint_t _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswgraph_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswcntrl(wint_t _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswcntrl_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswascii(wint_t _C);
  int __attribute__((__cdecl__)) isleadbyte(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _isleadbyte_l(int _C,_locale_t _Locale);
  wint_t __attribute__((__cdecl__)) towupper(wint_t _C);
  __attribute__ ((__dllimport__)) wint_t __attribute__((__cdecl__)) _towupper_l(wint_t _C,_locale_t _Locale);
  wint_t __attribute__((__cdecl__)) towlower(wint_t _C);
  __attribute__ ((__dllimport__)) wint_t __attribute__((__cdecl__)) _towlower_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswctype(wint_t _C,wctype_t _Type);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswctype_l(wint_t _C,wctype_t _Type,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) __iswcsymf(wint_t _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswcsymf_l(wint_t _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) __iswcsym(wint_t _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswcsym_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) is_wctype(wint_t _C,wctype_t _Type);


  int __attribute__((__cdecl__)) iswblank(wint_t _C);







  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wgetcwd(wchar_t *_DstBuf,int _SizeInWords);
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wgetdcwd(int _Drive,wchar_t *_DstBuf,int _SizeInWords);
  wchar_t *__attribute__((__cdecl__)) _wgetdcwd_nolock(int _Drive,wchar_t *_DstBuf,int _SizeInWords);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wchdir(const wchar_t *_Path);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wmkdir(const wchar_t *_Path);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wrmdir(const wchar_t *_Path);





  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _waccess(const wchar_t *_Filename,int _AccessMode);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wchmod(const wchar_t *_Filename,int _Mode);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcreat(const wchar_t *_Filename,int _PermissionMode) ;
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wfindfirst32(const wchar_t *_Filename,struct _wfinddata32_t *_FindData);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wfindnext32(intptr_t _FindHandle,struct _wfinddata32_t *_FindData);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wunlink(const wchar_t *_Filename);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wrename(const wchar_t *_OldFilename,const wchar_t *_NewFilename);
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wmktemp(wchar_t *_TemplateName) ;
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wfindfirst32i64(const wchar_t *_Filename,struct _wfinddata32i64_t *_FindData);
  intptr_t __attribute__((__cdecl__)) _wfindfirst64i32(const wchar_t *_Filename,struct _wfinddata64i32_t *_FindData);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wfindfirst64(const wchar_t *_Filename,struct _wfinddata64_t *_FindData);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wfindnext32i64(intptr_t _FindHandle,struct _wfinddata32i64_t *_FindData);
  int __attribute__((__cdecl__)) _wfindnext64i32(intptr_t _FindHandle,struct _wfinddata64i32_t *_FindData);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wfindnext64(intptr_t _FindHandle,struct _wfinddata64_t *_FindData);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wsopen_s(int *_FileHandle,const wchar_t *_Filename,int _OpenFlag,int _ShareFlag,int _PermissionFlag);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wopen(const wchar_t *_Filename,int _OpenFlag,...) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wsopen(const wchar_t *_Filename,int _OpenFlag,int _ShareFlag,...) ;




  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wsetlocale(int _Category,const wchar_t *_Locale);




  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wexecl(const wchar_t *_Filename,const wchar_t *_ArgList,...);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wexecle(const wchar_t *_Filename,const wchar_t *_ArgList,...);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wexeclp(const wchar_t *_Filename,const wchar_t *_ArgList,...);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wexeclpe(const wchar_t *_Filename,const wchar_t *_ArgList,...);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wexecv(const wchar_t *_Filename,const wchar_t *const *_ArgList);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wexecve(const wchar_t *_Filename,const wchar_t *const *_ArgList,const wchar_t *const *_Env);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wexecvp(const wchar_t *_Filename,const wchar_t *const *_ArgList);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wexecvpe(const wchar_t *_Filename,const wchar_t *const *_ArgList,const wchar_t *const *_Env);




  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wspawnl(int _Mode,const wchar_t *_Filename,const wchar_t *_ArgList,...);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wspawnle(int _Mode,const wchar_t *_Filename,const wchar_t *_ArgList,...);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wspawnlp(int _Mode,const wchar_t *_Filename,const wchar_t *_ArgList,...);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wspawnlpe(int _Mode,const wchar_t *_Filename,const wchar_t *_ArgList,...);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wspawnv(int _Mode,const wchar_t *_Filename,const wchar_t *const *_ArgList);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wspawnve(int _Mode,const wchar_t *_Filename,const wchar_t *const *_ArgList,const wchar_t *const *_Env);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wspawnvp(int _Mode,const wchar_t *_Filename,const wchar_t *const *_ArgList);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wspawnvpe(int _Mode,const wchar_t *_Filename,const wchar_t *const *_ArgList,const wchar_t *const *_Env);




  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wsystem(const wchar_t *_Command);
# 409 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\wchar.h" 3
  typedef unsigned short _ino_t;

  typedef unsigned short ino_t;





  typedef unsigned int _dev_t;

  typedef unsigned int dev_t;




# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\_mingw_off_t.h" 1 3




  typedef long _off_t;

  typedef long off32_t;





  __extension__ typedef long long _off64_t;

  __extension__ typedef long long off64_t;
# 26 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\_mingw_off_t.h" 3
typedef off32_t off_t;
# 424 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\wchar.h" 2 3
# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\_mingw_stat64.h" 1 3
# 25 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\_mingw_stat64.h" 3
  struct _stat32 {
    _dev_t st_dev;
   _ino_t st_ino;
    unsigned short st_mode;
    short st_nlink;
    short st_uid;
    short st_gid;
    _dev_t st_rdev;
    _off_t st_size;
    __time32_t st_atime;
    __time32_t st_mtime;
    __time32_t st_ctime;
  };


  struct stat {
    _dev_t st_dev;
    _ino_t st_ino;
    unsigned short st_mode;
    short st_nlink;
    short st_uid;
    short st_gid;
    _dev_t st_rdev;
    _off_t st_size;
    time_t st_atime;
    time_t st_mtime;
    time_t st_ctime;
  };


  struct _stat32i64 {
    _dev_t st_dev;
    _ino_t st_ino;
    unsigned short st_mode;
    short st_nlink;
    short st_uid;
    short st_gid;
    _dev_t st_rdev;
    __extension__ long st_size;
    __time32_t st_atime;
    __time32_t st_mtime;
    __time32_t st_ctime;
  };

  struct _stat64i32 {
    _dev_t st_dev;
    _ino_t st_ino;
    unsigned short st_mode;
    short st_nlink;
    short st_uid;
    short st_gid;
    _dev_t st_rdev;
    _off_t st_size;
    __time64_t st_atime;
    __time64_t st_mtime;
    __time64_t st_ctime;
  };

  struct _stat64 {
    _dev_t st_dev;
    _ino_t st_ino;
    unsigned short st_mode;
    short st_nlink;
    short st_uid;
    short st_gid;
    _dev_t st_rdev;
    __extension__ long st_size;
    __time64_t st_atime;
    __time64_t st_mtime;
    __time64_t st_ctime;
  };
# 425 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\wchar.h" 2 3




  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wstat32(const wchar_t *_Name,struct _stat32 *_Stat);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wstat32i64(const wchar_t *_Name,struct _stat32i64 *_Stat);
  int __attribute__((__cdecl__)) _wstat64i32(const wchar_t *_Name,struct _stat64i32 *_Stat);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wstat64(const wchar_t *_Name,struct _stat64 *_Stat);
# 443 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\wchar.h" 3
  __attribute__ ((__dllimport__)) wchar_t *_cgetws(wchar_t *_Buffer) ;
  __attribute__ ((__dllimport__)) wint_t __attribute__((__cdecl__)) _getwch(void);
  __attribute__ ((__dllimport__)) wint_t __attribute__((__cdecl__)) _getwche(void);
  __attribute__ ((__dllimport__)) wint_t __attribute__((__cdecl__)) _putwch(wchar_t _WCh);
  __attribute__ ((__dllimport__)) wint_t __attribute__((__cdecl__)) _ungetwch(wint_t _WCh);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _cputws(const wchar_t *_String);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _cwprintf(const wchar_t * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _cwscanf(const wchar_t * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _cwscanf_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vcwprintf(const wchar_t * __restrict__ _Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _cwprintf_p(const wchar_t * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vcwprintf_p(const wchar_t * __restrict__ _Format,va_list _ArgList);

  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _cwprintf_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vcwprintf_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _cwprintf_p_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vcwprintf_p_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,va_list _ArgList);
  wint_t __attribute__((__cdecl__)) _putwch_nolock(wchar_t _WCh);
  wint_t __attribute__((__cdecl__)) _getwch_nolock(void);
  wint_t __attribute__((__cdecl__)) _getwche_nolock(void);
  wint_t __attribute__((__cdecl__)) _ungetwch_nolock(wint_t _WCh);





                                                     __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_swscanf(const wchar_t * __restrict__ _Src,const wchar_t * __restrict__ _Format,...);
                                                     __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_vswscanf (const wchar_t * __restrict__ _Str,const wchar_t * __restrict__ Format,va_list argp);
                                                     __attribute__ ((__nonnull__ (1)))
  int __attribute__((__cdecl__)) __mingw_wscanf(const wchar_t * __restrict__ _Format,...);
                                                     __attribute__ ((__nonnull__ (1)))
  int __attribute__((__cdecl__)) __mingw_vwscanf(const wchar_t * __restrict__ Format, va_list argp);
                                                     __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_fwscanf(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,...);
                                                     __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_vfwscanf (FILE * __restrict__ fp, const wchar_t * __restrict__ Format,va_list argp);


                                                      __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_fwprintf(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,...);
                                                      __attribute__ ((__nonnull__ (1)))
  int __attribute__((__cdecl__)) __mingw_wprintf(const wchar_t * __restrict__ _Format,...);
                                                      __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_vfwprintf(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,va_list _ArgList);
                                                     __attribute__ ((__nonnull__ (1)))
  int __attribute__((__cdecl__)) __mingw_vwprintf(const wchar_t * __restrict__ _Format,va_list _ArgList);
                                                      __attribute__ ((__nonnull__ (3)))
  int __attribute__((__cdecl__)) __mingw_snwprintf (wchar_t * __restrict__ s, size_t n, const wchar_t * __restrict__ format, ...);
                                                      __attribute__ ((__nonnull__ (3)))
  int __attribute__((__cdecl__)) __mingw_vsnwprintf (wchar_t * __restrict__ , size_t, const wchar_t * __restrict__ , va_list);
                                                      __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_swprintf(wchar_t * __restrict__ , const wchar_t * __restrict__ , ...);
                                                      __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_vswprintf(wchar_t * __restrict__ , const wchar_t * __restrict__ ,va_list);
# 525 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\wchar.h" 3
static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
                                                     __attribute__ ((__nonnull__ (2)))
int swscanf(const wchar_t *__source, const wchar_t *__format, ...)
{
  int __retval;
  __builtin_va_list __local_argv; __builtin_va_start( __local_argv, __format );
  __retval = __mingw_vswscanf( __source, __format, __local_argv );
  __builtin_va_end( __local_argv );
  return __retval;
}

static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
                                                     __attribute__ ((__nonnull__ (1)))
int wscanf(const wchar_t *__format, ...)
{
  int __retval;
  __builtin_va_list __local_argv; __builtin_va_start( __local_argv, __format );
  __retval = __mingw_vfwscanf( (__acrt_iob_func(0)), __format, __local_argv );
  __builtin_va_end( __local_argv );
  return __retval;
}

static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
                                                     __attribute__ ((__nonnull__ (2)))
int fwscanf(FILE *__stream, const wchar_t *__format, ...)
{
  int __retval;
  __builtin_va_list __local_argv; __builtin_va_start( __local_argv, __format );
  __retval = __mingw_vfwscanf( __stream, __format, __local_argv );
  __builtin_va_end( __local_argv );
  return __retval;
}


static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
                                                     __attribute__ ((__nonnull__ (2)))
int vswscanf (const wchar_t *__source, const wchar_t *__format, __builtin_va_list __local_argv)
{
  return __mingw_vswscanf( __source, __format, __local_argv );
}

static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
                                                     __attribute__ ((__nonnull__ (1)))
int vwscanf(const wchar_t *__format, __builtin_va_list __local_argv)
{
  return __mingw_vfwscanf( (__acrt_iob_func(0)), __format, __local_argv );
}

static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
                                                     __attribute__ ((__nonnull__ (2)))
int vfwscanf (FILE *__stream, const wchar_t *__format, __builtin_va_list __local_argv)
{
  return __mingw_vfwscanf( __stream, __format, __local_argv );
}




static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
                                                      __attribute__ ((__nonnull__ (2)))
int fwprintf (FILE *__stream, const wchar_t *__format, ...)
{
  int __retval;
  __builtin_va_list __local_argv; __builtin_va_start( __local_argv, __format );
  __retval = __mingw_vfwprintf( __stream, __format, __local_argv );
  __builtin_va_end( __local_argv );
  return __retval;
}

static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
                                                      __attribute__ ((__nonnull__ (1)))
int wprintf (const wchar_t *__format, ...)
{
  int __retval;
  __builtin_va_list __local_argv; __builtin_va_start( __local_argv, __format );
  __retval = __mingw_vfwprintf( (__acrt_iob_func(1)), __format, __local_argv );
  __builtin_va_end( __local_argv );
  return __retval;
}

static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
                                                      __attribute__ ((__nonnull__ (2)))
int vfwprintf (FILE *__stream, const wchar_t *__format, __builtin_va_list __local_argv)
{
  return __mingw_vfwprintf( __stream, __format, __local_argv );
}

static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
                                                      __attribute__ ((__nonnull__ (1)))
int vwprintf (const wchar_t *__format, __builtin_va_list __local_argv)
{
  return __mingw_vfwprintf( (__acrt_iob_func(1)), __format, __local_argv );
}


static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
                                                      __attribute__ ((__nonnull__ (3)))
int snwprintf (wchar_t *__stream, size_t __n, const wchar_t *__format, ...)
{
  int __retval;
  __builtin_va_list __local_argv; __builtin_va_start( __local_argv, __format );
  __retval = __mingw_vsnwprintf( __stream, __n, __format, __local_argv );
  __builtin_va_end( __local_argv );
  return __retval;
}

static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
                                                      __attribute__ ((__nonnull__ (3)))
int vsnwprintf (wchar_t *__stream, size_t __n, const wchar_t *__format, __builtin_va_list __local_argv)
{
  return __mingw_vsnwprintf( __stream, __n, __format, __local_argv );
}
# 768 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\wchar.h" 3
  __attribute__ ((__dllimport__)) FILE *__attribute__((__cdecl__)) _wfsopen(const wchar_t *_Filename,const wchar_t *_Mode,int _ShFlag);


  wint_t __attribute__((__cdecl__)) fgetwc(FILE *_File);
  __attribute__ ((__dllimport__)) wint_t __attribute__((__cdecl__)) _fgetwchar(void);
  wint_t __attribute__((__cdecl__)) fputwc(wchar_t _Ch,FILE *_File);
  __attribute__ ((__dllimport__)) wint_t __attribute__((__cdecl__)) _fputwchar(wchar_t _Ch);
  wint_t __attribute__((__cdecl__)) getwc(FILE *_File);
  wint_t __attribute__((__cdecl__)) getwchar(void);
  wint_t __attribute__((__cdecl__)) putwc(wchar_t _Ch,FILE *_File);
  wint_t __attribute__((__cdecl__)) putwchar(wchar_t _Ch);
  wint_t __attribute__((__cdecl__)) ungetwc(wint_t _Ch,FILE *_File);
  wchar_t *__attribute__((__cdecl__)) fgetws(wchar_t * __restrict__ _Dst,int _SizeInWords,FILE * __restrict__ _File);
  int __attribute__((__cdecl__)) fputws(const wchar_t * __restrict__ _Str,FILE * __restrict__ _File);
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _getws(wchar_t *_String) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _putws(const wchar_t *_Str);
# 831 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\wchar.h" 3
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _scwprintf(const wchar_t * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _swprintf_l(wchar_t * __restrict__ ,size_t _SizeInWords,const wchar_t * __restrict__ _Format,_locale_t _Locale,... ) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _swprintf_c(wchar_t * __restrict__ _DstBuf,size_t _SizeInWords,const wchar_t * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vswprintf_c(wchar_t * __restrict__ _DstBuf,size_t _SizeInWords,const wchar_t * __restrict__ _Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _snwprintf(wchar_t * __restrict__ _Dest,size_t _Count,const wchar_t * __restrict__ _Format,...) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vsnwprintf(wchar_t * __restrict__ _Dest,size_t _Count,const wchar_t * __restrict__ _Format,va_list _Args) ;
# 1145 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\wchar.h" 3
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fwprintf_p(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wprintf_p(const wchar_t * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vfwprintf_p(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vwprintf_p(const wchar_t * __restrict__ _Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _swprintf_p(wchar_t * __restrict__ _DstBuf,size_t _MaxCount,const wchar_t * __restrict__ _Format,...);
  __attribute__((dllimport)) int __attribute__((__cdecl__)) _vswprintf_p(wchar_t * __restrict__ _DstBuf,size_t _MaxCount,const wchar_t * __restrict__ _Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _scwprintf_p(const wchar_t * __restrict__ _Format,...);
  __attribute__((dllimport)) int __attribute__((__cdecl__)) _vscwprintf_p(const wchar_t * __restrict__ _Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wprintf_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wprintf_p_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vwprintf_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vwprintf_p_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fwprintf_l(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fwprintf_p_l(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vfwprintf_l(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vfwprintf_p_l(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _swprintf_c_l(wchar_t * __restrict__ _DstBuf,size_t _MaxCount,const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _swprintf_p_l(wchar_t * __restrict__ _DstBuf,size_t _MaxCount,const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vswprintf_c_l(wchar_t * __restrict__ _DstBuf,size_t _MaxCount,const wchar_t * __restrict__ _Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vswprintf_p_l(wchar_t * __restrict__ _DstBuf,size_t _MaxCount,const wchar_t * __restrict__ _Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _scwprintf_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _scwprintf_p_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vscwprintf_p_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _snwprintf_l(wchar_t * __restrict__ _DstBuf,size_t _MaxCount,const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vsnwprintf_l(wchar_t * __restrict__ _DstBuf,size_t _MaxCount,const wchar_t * __restrict__ _Format,_locale_t _Locale,va_list _ArgList) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _swprintf(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vswprintf(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Format,va_list _Args);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) __swprintf_l(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Format,_locale_t _Plocinfo,...) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vswprintf_l(wchar_t * __restrict__ _Dest,size_t _MaxCount,const wchar_t * __restrict__ _Format,_locale_t _Locale,va_list _ArgList) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) __vswprintf_l(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Format,_locale_t _Plocinfo,va_list _Args) ;




# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\swprintf.inl" 1 3
# 10 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\swprintf.inl" 3
# 1 "D:\\Xilinx\\Vitis_HLS\\2023.1\\win64\\tools\\clang-3.9-csynth\\lib\\clang\\7.0.0\\include\\vadefs.h" 1 3
# 11 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\swprintf.inl" 2 3
# 25 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\swprintf.inl" 3
static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
                                                      __attribute__ ((__nonnull__ (3)))
int vswprintf (wchar_t *__stream, size_t __count, const wchar_t *__format, __builtin_va_list __local_argv)
{
  return vsnwprintf( __stream, __count, __format, __local_argv );
}

static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
                                                      __attribute__ ((__nonnull__ (3)))
int swprintf (wchar_t *__stream, size_t __count, const wchar_t *__format, ...)
{
  int __retval;
  __builtin_va_list __local_argv;

  __builtin_va_start( __local_argv, __format );
  __retval = vswprintf( __stream, __count, __format, __local_argv );
  __builtin_va_end( __local_argv );
  return __retval;
}



extern "C++" {

static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
                                                      __attribute__ ((__nonnull__ (2)))
int vswprintf (wchar_t *__stream, const wchar_t *__format, __builtin_va_list __local_argv)
{

  return __mingw_vswprintf( __stream, __format, __local_argv );



}

static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
                                                      __attribute__ ((__nonnull__ (2)))
int swprintf (wchar_t *__stream, const wchar_t *__format, ...)
{
  int __retval;
  __builtin_va_list __local_argv;

  __builtin_va_start( __local_argv, __format );
  __retval = vswprintf( __stream, __format, __local_argv );
  __builtin_va_end( __local_argv );
  return __retval;
}

}
# 1179 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\wchar.h" 2 3
# 1188 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\wchar.h" 3
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wtempnam(const wchar_t *_Directory,const wchar_t *_FilePrefix);

  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vscwprintf(const wchar_t * __restrict__ _Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vscwprintf_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fwscanf_l(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,_locale_t _Locale,...) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _swscanf_l(const wchar_t * __restrict__ _Src,const wchar_t * __restrict__ _Format,_locale_t _Locale,...) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _snwscanf(const wchar_t * __restrict__ _Src,size_t _MaxCount,const wchar_t * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _snwscanf_l(const wchar_t * __restrict__ _Src,size_t _MaxCount,const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wscanf_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,...) ;

  __attribute__ ((__dllimport__)) FILE *__attribute__((__cdecl__)) _wfdopen(int _FileHandle ,const wchar_t *_Mode);
  __attribute__ ((__dllimport__)) FILE *__attribute__((__cdecl__)) _wfopen(const wchar_t * __restrict__ _Filename,const wchar_t * __restrict__ _Mode) ;
  __attribute__ ((__dllimport__)) FILE *__attribute__((__cdecl__)) _wfreopen(const wchar_t * __restrict__ _Filename,const wchar_t * __restrict__ _Mode,FILE * __restrict__ _OldFile) ;



  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _wperror(const wchar_t *_ErrMsg);

  __attribute__ ((__dllimport__)) FILE *__attribute__((__cdecl__)) _wpopen(const wchar_t *_Command,const wchar_t *_Mode);



  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wremove(const wchar_t *_Filename);
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wtmpnam(wchar_t *_Buffer);
  __attribute__ ((__dllimport__)) wint_t __attribute__((__cdecl__)) _fgetwc_nolock(FILE *_File);
  __attribute__ ((__dllimport__)) wint_t __attribute__((__cdecl__)) _fputwc_nolock(wchar_t _Ch,FILE *_File);
  __attribute__ ((__dllimport__)) wint_t __attribute__((__cdecl__)) _ungetwc_nolock(wint_t _Ch,FILE *_File);
# 1235 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\wchar.h" 3
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _itow(int _Value,wchar_t *_Dest,int _Radix) ;
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _ltow(long _Value,wchar_t *_Dest,int _Radix) ;
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _ultow(unsigned long _Value,wchar_t *_Dest,int _Radix) ;
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _wcstod_l(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr,_locale_t _Locale);

  double __attribute__((__cdecl__)) __mingw_wcstod(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr);
  float __attribute__((__cdecl__)) __mingw_wcstof(const wchar_t * __restrict__ nptr, wchar_t ** __restrict__ endptr);
  long double __attribute__((__cdecl__)) __mingw_wcstold(const wchar_t * __restrict__, wchar_t ** __restrict__);


  static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
  double __attribute__((__cdecl__)) wcstod(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr){
    return __mingw_wcstod(_Str,_EndPtr);
  }
  static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
  float __attribute__((__cdecl__)) wcstof(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr){
    return __mingw_wcstof(_Str,_EndPtr);
  }






  long double __attribute__((__cdecl__)) wcstold (const wchar_t * __restrict__, wchar_t ** __restrict__);

  long __attribute__((__cdecl__)) wcstol(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr,int _Radix);
  __attribute__ ((__dllimport__)) long __attribute__((__cdecl__)) _wcstol_l(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr,int _Radix,_locale_t _Locale);
  unsigned long __attribute__((__cdecl__)) wcstoul(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr,int _Radix);
  __attribute__ ((__dllimport__)) unsigned long __attribute__((__cdecl__)) _wcstoul_l(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr,int _Radix,_locale_t _Locale);
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wgetenv(const wchar_t *_VarName) ;




  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _wtof(const wchar_t *_Str);
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _wtof_l(const wchar_t *_Str,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wtoi(const wchar_t *_Str);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wtoi_l(const wchar_t *_Str,_locale_t _Locale);
  __attribute__ ((__dllimport__)) long __attribute__((__cdecl__)) _wtol(const wchar_t *_Str);
  __attribute__ ((__dllimport__)) long __attribute__((__cdecl__)) _wtol_l(const wchar_t *_Str,_locale_t _Locale);

  __extension__ __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _i64tow(long _Val,wchar_t *_DstBuf,int _Radix) ;
  __extension__ __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _ui64tow(unsigned long _Val,wchar_t *_DstBuf,int _Radix);
  __extension__ __attribute__ ((__dllimport__)) long __attribute__((__cdecl__)) _wtoi64(const wchar_t *_Str);
  __extension__ __attribute__ ((__dllimport__)) long __attribute__((__cdecl__)) _wtoi64_l(const wchar_t *_Str,_locale_t _Locale);
  __extension__ __attribute__ ((__dllimport__)) long __attribute__((__cdecl__)) _wcstoi64(const wchar_t *_Str,wchar_t **_EndPtr,int _Radix);
  __extension__ __attribute__ ((__dllimport__)) long __attribute__((__cdecl__)) _wcstoi64_l(const wchar_t *_Str,wchar_t **_EndPtr,int _Radix,_locale_t _Locale);
  __extension__ __attribute__ ((__dllimport__)) unsigned long __attribute__((__cdecl__)) _wcstoui64(const wchar_t *_Str,wchar_t **_EndPtr,int _Radix);
  __extension__ __attribute__ ((__dllimport__)) unsigned long __attribute__((__cdecl__)) _wcstoui64_l(const wchar_t *_Str,wchar_t **_EndPtr,int _Radix,_locale_t _Locale);





  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wfullpath(wchar_t *_FullPath,const wchar_t *_Path,size_t _SizeInWords);
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _wmakepath(wchar_t *_ResultPath,const wchar_t *_Drive,const wchar_t *_Dir,const wchar_t *_Filename,const wchar_t *_Ext);




  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wputenv(const wchar_t *_EnvString);
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _wsearchenv(const wchar_t *_Filename,const wchar_t *_EnvVar,wchar_t *_ResultPath) ;
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _wsplitpath(const wchar_t *_FullPath,wchar_t *_Drive,wchar_t *_Dir,wchar_t *_Filename,wchar_t *_Ext) ;





  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wcsdup(const wchar_t *_Str);
  wchar_t *__attribute__((__cdecl__)) wcscat(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Source) ;
                wchar_t *__attribute__((__cdecl__)) wcschr(const wchar_t *_Str,wchar_t _Ch);
  int __attribute__((__cdecl__)) wcscmp(const wchar_t *_Str1,const wchar_t *_Str2);
  wchar_t *__attribute__((__cdecl__)) wcscpy(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Source) ;
  size_t __attribute__((__cdecl__)) wcscspn(const wchar_t *_Str,const wchar_t *_Control);
  size_t __attribute__((__cdecl__)) wcslen(const wchar_t *_Str);
  size_t __attribute__((__cdecl__)) wcsnlen(const wchar_t *_Src,size_t _MaxCount);
  wchar_t *__attribute__((__cdecl__)) wcsncat(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Source,size_t _Count) ;
  int __attribute__((__cdecl__)) wcsncmp(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount);
  wchar_t *__attribute__((__cdecl__)) wcsncpy(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Source,size_t _Count) ;
  wchar_t *__attribute__((__cdecl__)) _wcsncpy_l(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Source,size_t _Count,_locale_t _Locale) ;
                wchar_t *__attribute__((__cdecl__)) wcspbrk(const wchar_t *_Str,const wchar_t *_Control);
                wchar_t *__attribute__((__cdecl__)) wcsrchr(const wchar_t *_Str,wchar_t _Ch);
  size_t __attribute__((__cdecl__)) wcsspn(const wchar_t *_Str,const wchar_t *_Control);
                wchar_t *__attribute__((__cdecl__)) wcsstr(const wchar_t *_Str,const wchar_t *_SubStr);
  wchar_t *__attribute__((__cdecl__)) wcstok(wchar_t * __restrict__ _Str,const wchar_t * __restrict__ _Delim) ;
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wcserror(int _ErrNum) ;
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) __wcserror(const wchar_t *_Str) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcsicmp(const wchar_t *_Str1,const wchar_t *_Str2);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcsicmp_l(const wchar_t *_Str1,const wchar_t *_Str2,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcsnicmp(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcsnicmp_l(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount,_locale_t _Locale);
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wcsnset(wchar_t *_Str,wchar_t _Val,size_t _MaxCount) ;
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wcsrev(wchar_t *_Str);
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wcsset(wchar_t *_Str,wchar_t _Val) ;
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wcslwr(wchar_t *_String) ;
  __attribute__ ((__dllimport__)) wchar_t *_wcslwr_l(wchar_t *_String,_locale_t _Locale) ;
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wcsupr(wchar_t *_String) ;
  __attribute__ ((__dllimport__)) wchar_t *_wcsupr_l(wchar_t *_String,_locale_t _Locale) ;
  size_t __attribute__((__cdecl__)) wcsxfrm(wchar_t * __restrict__ _Dst,const wchar_t * __restrict__ _Src,size_t _MaxCount);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _wcsxfrm_l(wchar_t * __restrict__ _Dst,const wchar_t * __restrict__ _Src,size_t _MaxCount,_locale_t _Locale);
  int __attribute__((__cdecl__)) wcscoll(const wchar_t *_Str1,const wchar_t *_Str2);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcscoll_l(const wchar_t *_Str1,const wchar_t *_Str2,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcsicoll(const wchar_t *_Str1,const wchar_t *_Str2);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcsicoll_l(const wchar_t *_Str1,const wchar_t *_Str2,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcsncoll(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcsncoll_l(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcsnicoll(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcsnicoll_l(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount,_locale_t _Locale);


  wchar_t *__attribute__((__cdecl__)) wcsdup(const wchar_t *_Str) ;

  int __attribute__((__cdecl__)) wcsicmp(const wchar_t *_Str1,const wchar_t *_Str2) ;
  int __attribute__((__cdecl__)) wcsnicmp(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount) ;
  wchar_t *__attribute__((__cdecl__)) wcsnset(wchar_t *_Str,wchar_t _Val,size_t _MaxCount) ;
  wchar_t *__attribute__((__cdecl__)) wcsrev(wchar_t *_Str) ;
  wchar_t *__attribute__((__cdecl__)) wcsset(wchar_t *_Str,wchar_t _Val) ;
  wchar_t *__attribute__((__cdecl__)) wcslwr(wchar_t *_Str) ;
  wchar_t *__attribute__((__cdecl__)) wcsupr(wchar_t *_Str) ;
  int __attribute__((__cdecl__)) wcsicoll(const wchar_t *_Str1,const wchar_t *_Str2) ;





  struct tm {
    int tm_sec;
    int tm_min;
    int tm_hour;
    int tm_mday;
    int tm_mon;
    int tm_year;
    int tm_wday;
    int tm_yday;
    int tm_isdst;
  };





  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wasctime(const struct tm *_Tm);
  __attribute__((dllimport)) errno_t __attribute__((__cdecl__)) _wasctime_s (wchar_t *_Buf,size_t _SizeInWords,const struct tm *_Tm);
  wchar_t *__attribute__((__cdecl__)) _wctime32(const __time32_t *_Time) ;
  __attribute__((dllimport)) errno_t __attribute__((__cdecl__)) _wctime32_s (wchar_t *_Buf,size_t _SizeInWords,const __time32_t *_Time);
  size_t __attribute__((__cdecl__)) wcsftime(wchar_t * __restrict__ _Buf,size_t _SizeInWords,const wchar_t * __restrict__ _Format,const struct tm * __restrict__ _Tm);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _wcsftime_l(wchar_t * __restrict__ _Buf,size_t _SizeInWords,const wchar_t * __restrict__ _Format,const struct tm * __restrict__ _Tm,_locale_t _Locale);
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wstrdate(wchar_t *_Buffer) ;
  __attribute__((dllimport)) errno_t __attribute__((__cdecl__)) _wstrdate_s (wchar_t *_Buf,size_t _SizeInWords);
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wstrtime(wchar_t *_Buffer) ;
  __attribute__((dllimport)) errno_t __attribute__((__cdecl__)) _wstrtime_s (wchar_t *_Buf,size_t _SizeInWords);
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wctime64(const __time64_t *_Time) ;
  __attribute__((dllimport)) errno_t __attribute__((__cdecl__)) _wctime64_s (wchar_t *_Buf,size_t _SizeInWords,const __time64_t *_Time);



  wchar_t *__attribute__((__cdecl__)) _wctime(const time_t *_Time) ;
# 1404 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\wchar.h" 3
  errno_t __attribute__((__cdecl__)) _wctime_s(wchar_t *, size_t, const time_t *);
# 1416 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\wchar.h" 3
  typedef int mbstate_t;
  typedef wchar_t _Wint_t;

  wint_t __attribute__((__cdecl__)) btowc(int);
  size_t __attribute__((__cdecl__)) mbrlen(const char * __restrict__ _Ch,size_t _SizeInBytes,mbstate_t * __restrict__ _State);
  size_t __attribute__((__cdecl__)) mbrtowc(wchar_t * __restrict__ _DstCh,const char * __restrict__ _SrcCh,size_t _SizeInBytes,mbstate_t * __restrict__ _State);
  size_t __attribute__((__cdecl__)) mbsrtowcs(wchar_t * __restrict__ _Dest,const char ** __restrict__ _PSrc,size_t _Count,mbstate_t * __restrict__ _State) ;
  size_t __attribute__((__cdecl__)) wcrtomb(char * __restrict__ _Dest,wchar_t _Source,mbstate_t * __restrict__ _State) ;
  size_t __attribute__((__cdecl__)) wcsrtombs(char * __restrict__ _Dest,const wchar_t ** __restrict__ _PSource,size_t _Count,mbstate_t * __restrict__ _State) ;
  int __attribute__((__cdecl__)) wctob(wint_t _WCh);


  wchar_t *__attribute__((__cdecl__)) wmemset(wchar_t *s, wchar_t c, size_t n);
                wchar_t *__attribute__((__cdecl__)) wmemchr(const wchar_t *s, wchar_t c, size_t n);
  int __attribute__((__cdecl__)) wmemcmp(const wchar_t *s1, const wchar_t *s2,size_t n);
  wchar_t *__attribute__((__cdecl__)) wmemcpy(wchar_t * __restrict__ s1,const wchar_t * __restrict__ s2,size_t n) ;
  wchar_t * __attribute__((__cdecl__)) wmempcpy (wchar_t *_Dst, const wchar_t *_Src, size_t _Size);
  wchar_t *__attribute__((__cdecl__)) wmemmove(wchar_t *s1, const wchar_t *s2, size_t n) ;
  int __attribute__((__cdecl__)) fwide(FILE *stream,int mode);
  int __attribute__((__cdecl__)) mbsinit(const mbstate_t *ps);
  __extension__ long long __attribute__((__cdecl__)) wcstoll(const wchar_t * __restrict__ nptr,wchar_t ** __restrict__ endptr, int base);
  __extension__ unsigned long long __attribute__((__cdecl__)) wcstoull(const wchar_t * __restrict__ nptr,wchar_t ** __restrict__ endptr, int base);


  void *__attribute__((__cdecl__)) memmove(void *_Dst,const void *_Src,size_t _MaxCount);
  void *__attribute__((__cdecl__)) memcpy(void * __restrict__ _Dst,const void * __restrict__ _Src,size_t _MaxCount) ;
# 1491 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\wchar.h" 3
int __attribute__((__cdecl__)) __mingw_str_wide_utf8 (const wchar_t * const wptr, char **mbptr, size_t * buflen);
# 1505 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\wchar.h" 3
int __attribute__((__cdecl__)) __mingw_str_utf8_wide (const char *const mbptr, wchar_t ** wptr, size_t * buflen);
# 1514 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\wchar.h" 3
void __attribute__((__cdecl__)) __mingw_str_free(void *ptr);




}


#pragma pack(pop)


# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\sec_api/wchar_s.h" 1 3








# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\wchar.h" 1 3
# 10 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\sec_api/wchar_s.h" 2 3
# 1525 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\wchar.h" 2 3

# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\_mingw_print_pop.h" 1 3
# 1527 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\wchar.h" 2 3
# 45 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\cwchar" 2 3
# 62 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\cwchar" 3
namespace std
{
  using ::mbstate_t;
}
# 135 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\cwchar" 3
namespace std
{


  using ::wint_t;

  using ::btowc;
  using ::fgetwc;
  using ::fgetws;
  using ::fputwc;
  using ::fputws;
  using ::fwide;
  using ::fwprintf;
  using ::fwscanf;
  using ::getwc;
  using ::getwchar;
  using ::mbrlen;
  using ::mbrtowc;
  using ::mbsinit;
  using ::mbsrtowcs;
  using ::putwc;
  using ::putwchar;

  using ::swprintf;

  using ::swscanf;
  using ::ungetwc;
  using ::vfwprintf;

  using ::vfwscanf;


  using ::vswprintf;


  using ::vswscanf;

  using ::vwprintf;

  using ::vwscanf;

  using ::wcrtomb;
  using ::wcscat;
  using ::wcscmp;
  using ::wcscoll;
  using ::wcscpy;
  using ::wcscspn;
  using ::wcsftime;
  using ::wcslen;
  using ::wcsncat;
  using ::wcsncmp;
  using ::wcsncpy;
  using ::wcsrtombs;
  using ::wcsspn;
  using ::wcstod;

  using ::wcstof;

  using ::wcstok;
  using ::wcstol;
  using ::wcstoul;
  using ::wcsxfrm;
  using ::wctob;
  using ::wmemcmp;
  using ::wmemcpy;
  using ::wmemmove;
  using ::wmemset;
  using ::wprintf;
  using ::wscanf;
  using ::wcschr;
  using ::wcspbrk;
  using ::wcsrchr;
  using ::wcsstr;
  using ::wmemchr;


  inline wchar_t*
  wcschr(wchar_t* __p, wchar_t __c)
  { return wcschr(const_cast<const wchar_t*>(__p), __c); }

  inline wchar_t*
  wcspbrk(wchar_t* __s1, const wchar_t* __s2)
  { return wcspbrk(const_cast<const wchar_t*>(__s1), __s2); }

  inline wchar_t*
  wcsrchr(wchar_t* __p, wchar_t __c)
  { return wcsrchr(const_cast<const wchar_t*>(__p), __c); }

  inline wchar_t*
  wcsstr(wchar_t* __s1, const wchar_t* __s2)
  { return wcsstr(const_cast<const wchar_t*>(__s1), __s2); }

  inline wchar_t*
  wmemchr(wchar_t* __p, wchar_t __c, size_t __n)
  { return wmemchr(const_cast<const wchar_t*>(__p), __c, __n); }



}







namespace __gnu_cxx
{





  using ::wcstold;
# 257 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\cwchar" 3
  using ::wcstoll;
  using ::wcstoull;

}

namespace std
{
  using ::__gnu_cxx::wcstold;
  using ::__gnu_cxx::wcstoll;
  using ::__gnu_cxx::wcstoull;
}
# 277 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\cwchar" 3
namespace std
{

  using std::wcstof;


  using std::vfwscanf;


  using std::vswscanf;


  using std::vwscanf;



  using std::wcstold;
  using std::wcstoll;
  using std::wcstoull;

}
# 41 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/postypes.h" 2 3
# 68 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/postypes.h" 3
namespace std
{
# 90 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/postypes.h" 3
  typedef long long streamoff;







  typedef ptrdiff_t streamsize;
# 111 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/postypes.h" 3
  template<typename _StateT>
    class fpos
    {
    private:
      streamoff _M_off;
      _StateT _M_state;

    public:




      fpos()
      : _M_off(0), _M_state() { }
# 133 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/postypes.h" 3
      fpos(streamoff __off)
      : _M_off(__off), _M_state() { }


      operator streamoff() const { return _M_off; }


      void
      state(_StateT __st)
      { _M_state = __st; }


      _StateT
      state() const
      { return _M_state; }





      fpos&
      operator+=(streamoff __off)
      {
 _M_off += __off;
 return *this;
      }





      fpos&
      operator-=(streamoff __off)
      {
 _M_off -= __off;
 return *this;
      }







      fpos
      operator+(streamoff __off) const
      {
 fpos __pos(*this);
 __pos += __off;
 return __pos;
      }







      fpos
      operator-(streamoff __off) const
      {
 fpos __pos(*this);
 __pos -= __off;
 return __pos;
      }






      streamoff
      operator-(const fpos& __other) const
      { return _M_off - __other._M_off; }
    };






  template<typename _StateT>
    inline bool
    operator==(const fpos<_StateT>& __lhs, const fpos<_StateT>& __rhs)
    { return streamoff(__lhs) == streamoff(__rhs); }

  template<typename _StateT>
    inline bool
    operator!=(const fpos<_StateT>& __lhs, const fpos<_StateT>& __rhs)
    { return streamoff(__lhs) != streamoff(__rhs); }





  typedef fpos<mbstate_t> streampos;

  typedef fpos<mbstate_t> wstreampos;



  typedef fpos<mbstate_t> u16streampos;

  typedef fpos<mbstate_t> u32streampos;



}
# 41 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\iosfwd" 2 3

namespace std
{
# 74 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\iosfwd" 3
  class ios_base;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ios;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_streambuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_istream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ostream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_iostream;


namespace __cxx11 {

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
     typename _Alloc = allocator<_CharT> >
    class basic_stringbuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
    typename _Alloc = allocator<_CharT> >
    class basic_istringstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
    typename _Alloc = allocator<_CharT> >
    class basic_ostringstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
    typename _Alloc = allocator<_CharT> >
    class basic_stringstream;

}

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_filebuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ifstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ofstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_fstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class istreambuf_iterator;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class ostreambuf_iterator;



  typedef basic_ios<char> ios;


  typedef basic_streambuf<char> streambuf;


  typedef basic_istream<char> istream;


  typedef basic_ostream<char> ostream;


  typedef basic_iostream<char> iostream;


  typedef basic_stringbuf<char> stringbuf;


  typedef basic_istringstream<char> istringstream;


  typedef basic_ostringstream<char> ostringstream;


  typedef basic_stringstream<char> stringstream;


  typedef basic_filebuf<char> filebuf;


  typedef basic_ifstream<char> ifstream;


  typedef basic_ofstream<char> ofstream;


  typedef basic_fstream<char> fstream;



  typedef basic_ios<wchar_t> wios;


  typedef basic_streambuf<wchar_t> wstreambuf;


  typedef basic_istream<wchar_t> wistream;


  typedef basic_ostream<wchar_t> wostream;


  typedef basic_iostream<wchar_t> wiostream;


  typedef basic_stringbuf<wchar_t> wstringbuf;


  typedef basic_istringstream<wchar_t> wistringstream;


  typedef basic_ostringstream<wchar_t> wostringstream;


  typedef basic_stringstream<wchar_t> wstringstream;


  typedef basic_filebuf<wchar_t> wfilebuf;


  typedef basic_ifstream<wchar_t> wifstream;


  typedef basic_ofstream<wchar_t> wofstream;


  typedef basic_fstream<wchar_t> wfstream;




}
# 39 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\ios" 2 3
# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\exception" 1 3
# 34 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\exception" 3

#pragma GCC visibility push(default)



# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/exception.h" 1 3
# 35 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/exception.h" 3

#pragma GCC visibility push(default)



extern "C++" {

namespace std
{
# 60 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/exception.h" 3
  class exception
  {
  public:
    exception() noexcept { }
    virtual ~exception() noexcept;



    virtual const char*
    what() const noexcept;
  };

}

}

#pragma GCC visibility pop
# 39 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\exception" 2 3

extern "C++" {

namespace std
{


  class bad_exception : public exception
  {
  public:
    bad_exception() noexcept { }



    virtual ~bad_exception() noexcept;


    virtual const char*
    what() const noexcept;
  };


  typedef void (*terminate_handler) ();


  typedef void (*unexpected_handler) ();


  terminate_handler set_terminate(terminate_handler) noexcept;



  terminate_handler get_terminate() noexcept;




  void terminate() noexcept __attribute__ ((__noreturn__));


  unexpected_handler set_unexpected(unexpected_handler) noexcept;



  unexpected_handler get_unexpected() noexcept;




  void unexpected() __attribute__ ((__noreturn__));
# 102 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\exception" 3
  bool uncaught_exception() noexcept __attribute__ ((__pure__));




  int uncaught_exceptions() noexcept __attribute__ ((__pure__));



}

namespace __gnu_cxx
{
# 133 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\exception" 3
  void __verbose_terminate_handler();


}

}

#pragma GCC visibility pop



# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/exception_ptr.h" 1 3
# 34 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/exception_ptr.h" 3
#pragma GCC visibility push(default)



# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/exception_defines.h" 1 3
# 38 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/exception_ptr.h" 2 3
# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/cxxabi_init_exception.h" 1 3
# 35 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/cxxabi_init_exception.h" 3

#pragma GCC visibility push(default)


# 1 "D:\\Xilinx\\Vitis_HLS\\2023.1\\win64\\tools\\clang-3.9-csynth\\lib\\clang\\7.0.0\\include\\stddef.h" 1 3
# 51 "D:\\Xilinx\\Vitis_HLS\\2023.1\\win64\\tools\\clang-3.9-csynth\\lib\\clang\\7.0.0\\include\\stddef.h" 3
typedef long int ptrdiff_t;
# 62 "D:\\Xilinx\\Vitis_HLS\\2023.1\\win64\\tools\\clang-3.9-csynth\\lib\\clang\\7.0.0\\include\\stddef.h" 3
typedef long unsigned int size_t;
# 118 "D:\\Xilinx\\Vitis_HLS\\2023.1\\win64\\tools\\clang-3.9-csynth\\lib\\clang\\7.0.0\\include\\stddef.h" 3
# 1 "D:\\Xilinx\\Vitis_HLS\\2023.1\\win64\\tools\\clang-3.9-csynth\\lib\\clang\\7.0.0\\include/__stddef_max_align_t.h" 1 3
# 35 "D:\\Xilinx\\Vitis_HLS\\2023.1\\win64\\tools\\clang-3.9-csynth\\lib\\clang\\7.0.0\\include/__stddef_max_align_t.h" 3
typedef struct {
  long long __clang_max_align_nonce1
      __attribute__((__aligned__(__alignof__(long long))));
  long double __clang_max_align_nonce2
      __attribute__((__aligned__(__alignof__(long double))));
} max_align_t;
# 119 "D:\\Xilinx\\Vitis_HLS\\2023.1\\win64\\tools\\clang-3.9-csynth\\lib\\clang\\7.0.0\\include\\stddef.h" 2 3
# 39 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/cxxabi_init_exception.h" 2 3
# 50 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/cxxabi_init_exception.h" 3
namespace std
{
  class type_info;
}

namespace __cxxabiv1
{
  struct __cxa_refcounted_exception;

  extern "C"
    {

      void*
      __cxa_allocate_exception(size_t) noexcept;

      void
      __cxa_free_exception(void*) noexcept;


      __cxa_refcounted_exception*
      __cxa_init_primary_exception(void *object, std::type_info *tinfo,
                void ( *dest) (void *)) noexcept;

    }
}



#pragma GCC visibility pop
# 39 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/exception_ptr.h" 2 3
# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\typeinfo" 1 3
# 33 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\typeinfo" 3



# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/hash_bytes.h" 1 3
# 34 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/hash_bytes.h" 3



namespace std
{







  size_t
  _Hash_bytes(const void* __ptr, size_t __len, size_t __seed);





  size_t
  _Fnv_hash_bytes(const void* __ptr, size_t __len, size_t __seed);


}
# 37 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\typeinfo" 2 3


#pragma GCC visibility push(default)

extern "C++" {

namespace __cxxabiv1
{
  class __class_type_info;
}
# 80 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\typeinfo" 3
namespace std
{






  class type_info
  {
  public:




    virtual ~type_info();



    const char* name() const noexcept
    { return __name[0] == '*' ? __name + 1 : __name; }
# 115 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\typeinfo" 3
    bool before(const type_info& __arg) const noexcept
    { return (__name[0] == '*' && __arg.__name[0] == '*')
 ? __name < __arg.__name
 : __builtin_strcmp (__name, __arg.__name) < 0; }

    bool operator==(const type_info& __arg) const noexcept
    {
      return ((__name == __arg.__name)
       || (__name[0] != '*' &&
    __builtin_strcmp (__name, __arg.__name) == 0));
    }
# 136 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\typeinfo" 3
    bool operator!=(const type_info& __arg) const noexcept
    { return !operator==(__arg); }


    size_t hash_code() const noexcept
    {

      return _Hash_bytes(name(), __builtin_strlen(name()),
    static_cast<size_t>(0xc70f6907UL));



    }



    virtual bool __is_pointer_p() const;


    virtual bool __is_function_p() const;







    virtual bool __do_catch(const type_info *__thr_type, void **__thr_obj,
       unsigned __outer) const;


    virtual bool __do_upcast(const __cxxabiv1::__class_type_info *__target,
        void **__obj_ptr) const;

  protected:
    const char *__name;

    explicit type_info(const char *__n): __name(__n) { }

  private:

    type_info& operator=(const type_info&);
    type_info(const type_info&);
  };







  class bad_cast : public exception
  {
  public:
    bad_cast() noexcept { }



    virtual ~bad_cast() noexcept;


    virtual const char* what() const noexcept;
  };





  class bad_typeid : public exception
  {
  public:
    bad_typeid () noexcept { }



    virtual ~bad_typeid() noexcept;


    virtual const char* what() const noexcept;
  };
}

}

#pragma GCC visibility pop
# 40 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/exception_ptr.h" 2 3
# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\new" 1 3
# 38 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\new" 3


# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\exception" 1 3
# 41 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\new" 2 3

#pragma GCC visibility push(default)

extern "C++" {

namespace std
{






  class bad_alloc : public exception
  {
  public:
    bad_alloc() throw() { }



    virtual ~bad_alloc() throw();


    virtual const char* what() const throw();
  };


  class bad_array_new_length : public bad_alloc
  {
  public:
    bad_array_new_length() throw() { }



    virtual ~bad_array_new_length() throw();


    virtual const char* what() const throw();
  };






  struct nothrow_t
  {

    explicit nothrow_t() = default;

  };

  extern const nothrow_t nothrow;



  typedef void (*new_handler)();



  new_handler set_new_handler(new_handler) throw();



  new_handler get_new_handler() noexcept;

}
# 120 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\new" 3
void* operator new(std::size_t)
  __attribute__((__externally_visible__));
void* operator new[](std::size_t)
  __attribute__((__externally_visible__));
void operator delete(void*) noexcept
  __attribute__((__externally_visible__));
void operator delete[](void*) noexcept
  __attribute__((__externally_visible__));






void* operator new(std::size_t, const std::nothrow_t&) noexcept
  __attribute__((__externally_visible__));
void* operator new[](std::size_t, const std::nothrow_t&) noexcept
  __attribute__((__externally_visible__));
void operator delete(void*, const std::nothrow_t&) noexcept
  __attribute__((__externally_visible__));
void operator delete[](void*, const std::nothrow_t&) noexcept
  __attribute__((__externally_visible__));
# 168 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\new" 3
inline void* operator new(std::size_t, void* __p) noexcept
{ return __p; }
inline void* operator new[](std::size_t, void* __p) noexcept
{ return __p; }


inline void operator delete (void*, void*) noexcept { }
inline void operator delete[](void*, void*) noexcept { }

}
# 216 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\new" 3
#pragma GCC visibility pop
# 41 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/exception_ptr.h" 2 3

extern "C++" {

namespace std
{
  class type_info;





  namespace __exception_ptr
  {
    class exception_ptr;
  }

  using __exception_ptr::exception_ptr;





  exception_ptr current_exception() noexcept;

  template<typename _Ex>
  exception_ptr make_exception_ptr(_Ex) noexcept;


  void rethrow_exception(exception_ptr) __attribute__ ((__noreturn__));

  namespace __exception_ptr
  {
    using std::rethrow_exception;





    class exception_ptr
    {
      void* _M_exception_object;

      explicit exception_ptr(void* __e) noexcept;

      void _M_addref() noexcept;
      void _M_release() noexcept;

      void *_M_get() const noexcept __attribute__ ((__pure__));

      friend exception_ptr std::current_exception() noexcept;
      friend void std::rethrow_exception(exception_ptr);
      template<typename _Ex>
      friend exception_ptr std::make_exception_ptr(_Ex) noexcept;

    public:
      exception_ptr() noexcept;

      exception_ptr(const exception_ptr&) noexcept;


      exception_ptr(nullptr_t) noexcept
      : _M_exception_object(0)
      { }

      exception_ptr(exception_ptr&& __o) noexcept
      : _M_exception_object(__o._M_exception_object)
      { __o._M_exception_object = 0; }
# 117 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/exception_ptr.h" 3
      exception_ptr&
      operator=(const exception_ptr&) noexcept;


      exception_ptr&
      operator=(exception_ptr&& __o) noexcept
      {
        exception_ptr(static_cast<exception_ptr&&>(__o)).swap(*this);
        return *this;
      }


      ~exception_ptr() noexcept;

      void
      swap(exception_ptr&) noexcept;
# 144 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/exception_ptr.h" 3
      explicit operator bool() const
      { return _M_exception_object; }


      friend bool
      operator==(const exception_ptr&, const exception_ptr&)
 noexcept __attribute__ ((__pure__));

      const class std::type_info*
      __cxa_exception_type() const noexcept
 __attribute__ ((__pure__));
    };

    bool
    operator==(const exception_ptr&, const exception_ptr&)
      noexcept __attribute__ ((__pure__));

    bool
    operator!=(const exception_ptr&, const exception_ptr&)
      noexcept __attribute__ ((__pure__));

    inline void
    swap(exception_ptr& __lhs, exception_ptr& __rhs)
    { __lhs.swap(__rhs); }

    template<typename _Ex>
      inline void
      __dest_thunk(void* __x)
      { static_cast<_Ex*>(__x)->~_Ex(); }

  }


  template<typename _Ex>
    exception_ptr
    make_exception_ptr(_Ex __ex) noexcept
    {
# 206 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/exception_ptr.h" 3
      return exception_ptr();

    }


}

}

#pragma GCC visibility pop
# 144 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\exception" 2 3
# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/nested_exception.h" 1 3
# 33 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/nested_exception.h" 3
#pragma GCC visibility push(default)







# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/move.h" 1 3
# 34 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/move.h" 3
# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/concept_check.h" 1 3
# 34 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/concept_check.h" 3
# 35 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/move.h" 2 3

namespace std
{







  template<typename _Tp>
    inline constexpr _Tp*
    __addressof(_Tp& __r) noexcept
    { return __builtin_addressof(__r); }




}


# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\type_traits" 1 3
# 33 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\type_traits" 3







namespace std
{
# 56 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\type_traits" 3
  template<typename _Tp, _Tp __v>
    struct integral_constant
    {
      static constexpr _Tp value = __v;
      typedef _Tp value_type;
      typedef integral_constant<_Tp, __v> type;
      constexpr operator value_type() const noexcept { return value; }




      constexpr value_type operator()() const noexcept { return value; }

    };

  template<typename _Tp, _Tp __v>
    constexpr _Tp integral_constant<_Tp, __v>::value;


  typedef integral_constant<bool, true> true_type;


  typedef integral_constant<bool, false> false_type;

  template<bool __v>
    using __bool_constant = integral_constant<bool, __v>;
# 91 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\type_traits" 3
  template<bool, typename, typename>
    struct conditional;

  template<typename...>
    struct __or_;

  template<>
    struct __or_<>
    : public false_type
    { };

  template<typename _B1>
    struct __or_<_B1>
    : public _B1
    { };

  template<typename _B1, typename _B2>
    struct __or_<_B1, _B2>
    : public conditional<_B1::value, _B1, _B2>::type
    { };

  template<typename _B1, typename _B2, typename _B3, typename... _Bn>
    struct __or_<_B1, _B2, _B3, _Bn...>
    : public conditional<_B1::value, _B1, __or_<_B2, _B3, _Bn...>>::type
    { };

  template<typename...>
    struct __and_;

  template<>
    struct __and_<>
    : public true_type
    { };

  template<typename _B1>
    struct __and_<_B1>
    : public _B1
    { };

  template<typename _B1, typename _B2>
    struct __and_<_B1, _B2>
    : public conditional<_B1::value, _B2, _B1>::type
    { };

  template<typename _B1, typename _B2, typename _B3, typename... _Bn>
    struct __and_<_B1, _B2, _B3, _Bn...>
    : public conditional<_B1::value, __and_<_B2, _B3, _Bn...>, _B1>::type
    { };

  template<typename _Pp>
    struct __not_
    : public __bool_constant<!bool(_Pp::value)>
    { };
# 180 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\type_traits" 3
  template<typename _Tp>
    struct __success_type
    { typedef _Tp type; };

  struct __failure_type
  { };



  template<typename>
    struct remove_cv;

  template<typename>
    struct __is_void_helper
    : public false_type { };

  template<>
    struct __is_void_helper<void>
    : public true_type { };


  template<typename _Tp>
    struct is_void
    : public __is_void_helper<typename remove_cv<_Tp>::type>::type
    { };

  template<typename>
    struct __is_integral_helper
    : public false_type { };

  template<>
    struct __is_integral_helper<bool>
    : public true_type { };

  template<>
    struct __is_integral_helper<char>
    : public true_type { };

  template<>
    struct __is_integral_helper<signed char>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned char>
    : public true_type { };


  template<>
    struct __is_integral_helper<wchar_t>
    : public true_type { };


  template<>
    struct __is_integral_helper<char16_t>
    : public true_type { };

  template<>
    struct __is_integral_helper<char32_t>
    : public true_type { };

  template<>
    struct __is_integral_helper<short>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned short>
    : public true_type { };

  template<>
    struct __is_integral_helper<int>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned int>
    : public true_type { };

  template<>
    struct __is_integral_helper<long>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned long>
    : public true_type { };

  template<>
    struct __is_integral_helper<long long>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned long long>
    : public true_type { };




  template<>
    struct __is_integral_helper<__int128>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned __int128>
    : public true_type { };
# 312 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\type_traits" 3
  template<typename _Tp>
    struct is_integral
    : public __is_integral_helper<typename remove_cv<_Tp>::type>::type
    { };

  template<typename>
    struct __is_floating_point_helper
    : public false_type { };

  template<>
    struct __is_floating_point_helper<float>
    : public true_type { };

  template<>
    struct __is_floating_point_helper<double>
    : public true_type { };

  template<>
    struct __is_floating_point_helper<long double>
    : public true_type { };
# 340 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\type_traits" 3
  template<typename _Tp>
    struct is_floating_point
    : public __is_floating_point_helper<typename remove_cv<_Tp>::type>::type
    { };


  template<typename>
    struct is_array
    : public false_type { };

  template<typename _Tp, std::size_t _Size>
    struct is_array<_Tp[_Size]>
    : public true_type { };

  template<typename _Tp>
    struct is_array<_Tp[]>
    : public true_type { };

  template<typename>
    struct __is_pointer_helper
    : public false_type { };

  template<typename _Tp>
    struct __is_pointer_helper<_Tp*>
    : public true_type { };


  template<typename _Tp>
    struct is_pointer
    : public __is_pointer_helper<typename remove_cv<_Tp>::type>::type
    { };


  template<typename>
    struct is_lvalue_reference
    : public false_type { };

  template<typename _Tp>
    struct is_lvalue_reference<_Tp&>
    : public true_type { };


  template<typename>
    struct is_rvalue_reference
    : public false_type { };

  template<typename _Tp>
    struct is_rvalue_reference<_Tp&&>
    : public true_type { };

  template<typename>
    struct is_function;

  template<typename>
    struct __is_member_object_pointer_helper
    : public false_type { };

  template<typename _Tp, typename _Cp>
    struct __is_member_object_pointer_helper<_Tp _Cp::*>
    : public integral_constant<bool, !is_function<_Tp>::value> { };


  template<typename _Tp>
    struct is_member_object_pointer
    : public __is_member_object_pointer_helper<
    typename remove_cv<_Tp>::type>::type
    { };

  template<typename>
    struct __is_member_function_pointer_helper
    : public false_type { };

  template<typename _Tp, typename _Cp>
    struct __is_member_function_pointer_helper<_Tp _Cp::*>
    : public integral_constant<bool, is_function<_Tp>::value> { };


  template<typename _Tp>
    struct is_member_function_pointer
    : public __is_member_function_pointer_helper<
    typename remove_cv<_Tp>::type>::type
    { };


  template<typename _Tp>
    struct is_enum
    : public integral_constant<bool, __is_enum(_Tp)>
    { };


  template<typename _Tp>
    struct is_union
    : public integral_constant<bool, __is_union(_Tp)>
    { };


  template<typename _Tp>
    struct is_class
    : public integral_constant<bool, __is_class(_Tp)>
    { };


  template<typename>
    struct is_function
    : public false_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) & >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) && >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) & >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) && >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) const >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) const & >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) const && >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) const >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) const & >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) const && >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) volatile >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) volatile & >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) volatile && >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) volatile >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) volatile & >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) volatile && >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) const volatile >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) const volatile & >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) const volatile && >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) const volatile >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) const volatile & >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) const volatile && >
    : public true_type { };



  template<typename>
    struct __is_null_pointer_helper
    : public false_type { };

  template<>
    struct __is_null_pointer_helper<std::nullptr_t>
    : public true_type { };


  template<typename _Tp>
    struct is_null_pointer
    : public __is_null_pointer_helper<typename remove_cv<_Tp>::type>::type
    { };


  template<typename _Tp>
    struct __is_nullptr_t
    : public is_null_pointer<_Tp>
    { };




  template<typename _Tp>
    struct is_reference
    : public __or_<is_lvalue_reference<_Tp>,
                   is_rvalue_reference<_Tp>>::type
    { };


  template<typename _Tp>
    struct is_arithmetic
    : public __or_<is_integral<_Tp>, is_floating_point<_Tp>>::type
    { };


  template<typename _Tp>
    struct is_fundamental
    : public __or_<is_arithmetic<_Tp>, is_void<_Tp>,
     is_null_pointer<_Tp>>::type
    { };


  template<typename _Tp>
    struct is_object
    : public __not_<__or_<is_function<_Tp>, is_reference<_Tp>,
                          is_void<_Tp>>>::type
    { };

  template<typename>
    struct is_member_pointer;


  template<typename _Tp>
    struct is_scalar
    : public __or_<is_arithmetic<_Tp>, is_enum<_Tp>, is_pointer<_Tp>,
                   is_member_pointer<_Tp>, is_null_pointer<_Tp>>::type
    { };


  template<typename _Tp>
    struct is_compound
    : public integral_constant<bool, !is_fundamental<_Tp>::value> { };

  template<typename _Tp>
    struct __is_member_pointer_helper
    : public false_type { };

  template<typename _Tp, typename _Cp>
    struct __is_member_pointer_helper<_Tp _Cp::*>
    : public true_type { };


  template<typename _Tp>
    struct is_member_pointer
    : public __is_member_pointer_helper<typename remove_cv<_Tp>::type>::type
    { };



  template<typename _Tp>
    struct __is_referenceable
    : public __or_<is_object<_Tp>, is_reference<_Tp>>::type
    { };

  template<typename _Res, typename... _Args >
    struct __is_referenceable<_Res(_Args...) >
    : public true_type
    { };

  template<typename _Res, typename... _Args >
    struct __is_referenceable<_Res(_Args......) >
    : public true_type
    { };




  template<typename>
    struct is_const
    : public false_type { };

  template<typename _Tp>
    struct is_const<_Tp const>
    : public true_type { };


  template<typename>
    struct is_volatile
    : public false_type { };

  template<typename _Tp>
    struct is_volatile<_Tp volatile>
    : public true_type { };


  template<typename _Tp>
    struct is_trivial
    : public integral_constant<bool, __is_trivial(_Tp)>
    { };


  template<typename _Tp>
    struct is_trivially_copyable
    : public integral_constant<bool, __is_trivially_copyable(_Tp)>
    { };


  template<typename _Tp>
    struct is_standard_layout
    : public integral_constant<bool, __is_standard_layout(_Tp)>
    { };



  template<typename _Tp>
    struct is_pod
    : public integral_constant<bool, __is_pod(_Tp)>
    { };


  template<typename _Tp>
    struct is_literal_type
    : public integral_constant<bool, __is_literal_type(_Tp)>
    { };


  template<typename _Tp>
    struct is_empty
    : public integral_constant<bool, __is_empty(_Tp)>
    { };


  template<typename _Tp>
    struct is_polymorphic
    : public integral_constant<bool, __is_polymorphic(_Tp)>
    { };




  template<typename _Tp>
    struct is_final
    : public integral_constant<bool, __is_final(_Tp)>
    { };



  template<typename _Tp>
    struct is_abstract
    : public integral_constant<bool, __is_abstract(_Tp)>
    { };

  template<typename _Tp,
    bool = is_arithmetic<_Tp>::value>
    struct __is_signed_helper
    : public false_type { };

  template<typename _Tp>
    struct __is_signed_helper<_Tp, true>
    : public integral_constant<bool, _Tp(-1) < _Tp(0)>
    { };


  template<typename _Tp>
    struct is_signed
    : public __is_signed_helper<_Tp>::type
    { };


  template<typename _Tp>
    struct is_unsigned
    : public __and_<is_arithmetic<_Tp>, __not_<is_signed<_Tp>>>
    { };
# 747 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\type_traits" 3
  template<typename _Tp, typename _Up = _Tp&&>
    _Up
    __declval(int);

  template<typename _Tp>
    _Tp
    __declval(long);

  template<typename _Tp>
    auto declval() noexcept -> decltype(__declval<_Tp>(0));

  template<typename, unsigned = 0>
    struct extent;

  template<typename>
    struct remove_all_extents;

  template<typename _Tp>
    struct __is_array_known_bounds
    : public integral_constant<bool, (extent<_Tp>::value > 0)>
    { };

  template<typename _Tp>
    struct __is_array_unknown_bounds
    : public __and_<is_array<_Tp>, __not_<extent<_Tp>>>
    { };






  struct __do_is_destructible_impl
  {
    template<typename _Tp, typename = decltype(declval<_Tp&>().~_Tp())>
      static true_type __test(int);

    template<typename>
      static false_type __test(...);
  };

  template<typename _Tp>
    struct __is_destructible_impl
    : public __do_is_destructible_impl
    {
      typedef decltype(__test<_Tp>(0)) type;
    };

  template<typename _Tp,
           bool = __or_<is_void<_Tp>,
                        __is_array_unknown_bounds<_Tp>,
                        is_function<_Tp>>::value,
           bool = __or_<is_reference<_Tp>, is_scalar<_Tp>>::value>
    struct __is_destructible_safe;

  template<typename _Tp>
    struct __is_destructible_safe<_Tp, false, false>
    : public __is_destructible_impl<typename
               remove_all_extents<_Tp>::type>::type
    { };

  template<typename _Tp>
    struct __is_destructible_safe<_Tp, true, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_destructible_safe<_Tp, false, true>
    : public true_type { };


  template<typename _Tp>
    struct is_destructible
    : public __is_destructible_safe<_Tp>::type
    { };





  struct __do_is_nt_destructible_impl
  {
    template<typename _Tp>
      static integral_constant<bool, noexcept(declval<_Tp&>().~_Tp())>
        __test(int);

    template<typename>
      static false_type __test(...);
  };

  template<typename _Tp>
    struct __is_nt_destructible_impl
    : public __do_is_nt_destructible_impl
    {
      typedef decltype(__test<_Tp>(0)) type;
    };

  template<typename _Tp,
           bool = __or_<is_void<_Tp>,
                        __is_array_unknown_bounds<_Tp>,
                        is_function<_Tp>>::value,
           bool = __or_<is_reference<_Tp>, is_scalar<_Tp>>::value>
    struct __is_nt_destructible_safe;

  template<typename _Tp>
    struct __is_nt_destructible_safe<_Tp, false, false>
    : public __is_nt_destructible_impl<typename
               remove_all_extents<_Tp>::type>::type
    { };

  template<typename _Tp>
    struct __is_nt_destructible_safe<_Tp, true, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_nt_destructible_safe<_Tp, false, true>
    : public true_type { };


  template<typename _Tp>
    struct is_nothrow_destructible
    : public __is_nt_destructible_safe<_Tp>::type
    { };

  struct __do_is_default_constructible_impl
  {
    template<typename _Tp, typename = decltype(_Tp())>
      static true_type __test(int);

    template<typename>
      static false_type __test(...);
  };

  template<typename _Tp>
    struct __is_default_constructible_impl
    : public __do_is_default_constructible_impl
    {
      typedef decltype(__test<_Tp>(0)) type;
    };

  template<typename _Tp>
    struct __is_default_constructible_atom
    : public __and_<__not_<is_void<_Tp>>,
                    __is_default_constructible_impl<_Tp>>
    { };

  template<typename _Tp, bool = is_array<_Tp>::value>
    struct __is_default_constructible_safe;






  template<typename _Tp>
    struct __is_default_constructible_safe<_Tp, true>
    : public __and_<__is_array_known_bounds<_Tp>,
      __is_default_constructible_atom<typename
                      remove_all_extents<_Tp>::type>>
    { };

  template<typename _Tp>
    struct __is_default_constructible_safe<_Tp, false>
    : public __is_default_constructible_atom<_Tp>::type
    { };


  template<typename _Tp>
    struct is_default_constructible
    : public __is_default_constructible_safe<_Tp>::type
    { };


  template<typename _Tp, typename... _Args>
    struct is_constructible
      : public __bool_constant<__is_constructible(_Tp, _Args...)>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_copy_constructible_impl;

  template<typename _Tp>
    struct __is_copy_constructible_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_copy_constructible_impl<_Tp, true>
    : public is_constructible<_Tp, const _Tp&>
    { };


  template<typename _Tp>
    struct is_copy_constructible
    : public __is_copy_constructible_impl<_Tp>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_move_constructible_impl;

  template<typename _Tp>
    struct __is_move_constructible_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_move_constructible_impl<_Tp, true>
    : public is_constructible<_Tp, _Tp&&>
    { };


  template<typename _Tp>
    struct is_move_constructible
    : public __is_move_constructible_impl<_Tp>
    { };

  template<typename _Tp>
    struct __is_nt_default_constructible_atom
    : public integral_constant<bool, noexcept(_Tp())>
    { };

  template<typename _Tp, bool = is_array<_Tp>::value>
    struct __is_nt_default_constructible_impl;

  template<typename _Tp>
    struct __is_nt_default_constructible_impl<_Tp, true>
    : public __and_<__is_array_known_bounds<_Tp>,
      __is_nt_default_constructible_atom<typename
                      remove_all_extents<_Tp>::type>>
    { };

  template<typename _Tp>
    struct __is_nt_default_constructible_impl<_Tp, false>
    : public __is_nt_default_constructible_atom<_Tp>
    { };


  template<typename _Tp>
    struct is_nothrow_default_constructible
    : public __and_<is_default_constructible<_Tp>,
                    __is_nt_default_constructible_impl<_Tp>>
    { };

  template<typename _Tp, typename... _Args>
    struct __is_nt_constructible_impl
    : public integral_constant<bool, noexcept(_Tp(declval<_Args>()...))>
    { };

  template<typename _Tp, typename _Arg>
    struct __is_nt_constructible_impl<_Tp, _Arg>
    : public integral_constant<bool,
                               noexcept(static_cast<_Tp>(declval<_Arg>()))>
    { };

  template<typename _Tp>
    struct __is_nt_constructible_impl<_Tp>
    : public is_nothrow_default_constructible<_Tp>
    { };


  template<typename _Tp, typename... _Args>
    struct is_nothrow_constructible
    : public __and_<is_constructible<_Tp, _Args...>,
      __is_nt_constructible_impl<_Tp, _Args...>>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_nothrow_copy_constructible_impl;

  template<typename _Tp>
    struct __is_nothrow_copy_constructible_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_nothrow_copy_constructible_impl<_Tp, true>
    : public is_nothrow_constructible<_Tp, const _Tp&>
    { };


  template<typename _Tp>
    struct is_nothrow_copy_constructible
    : public __is_nothrow_copy_constructible_impl<_Tp>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_nothrow_move_constructible_impl;

  template<typename _Tp>
    struct __is_nothrow_move_constructible_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_nothrow_move_constructible_impl<_Tp, true>
    : public is_nothrow_constructible<_Tp, _Tp&&>
    { };


  template<typename _Tp>
    struct is_nothrow_move_constructible
    : public __is_nothrow_move_constructible_impl<_Tp>
    { };


  template<typename _Tp, typename _Up>
    struct is_assignable
      : public __bool_constant<__is_assignable(_Tp, _Up)>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_copy_assignable_impl;

  template<typename _Tp>
    struct __is_copy_assignable_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_copy_assignable_impl<_Tp, true>
    : public is_assignable<_Tp&, const _Tp&>
    { };


  template<typename _Tp>
    struct is_copy_assignable
    : public __is_copy_assignable_impl<_Tp>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_move_assignable_impl;

  template<typename _Tp>
    struct __is_move_assignable_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_move_assignable_impl<_Tp, true>
    : public is_assignable<_Tp&, _Tp&&>
    { };


  template<typename _Tp>
    struct is_move_assignable
    : public __is_move_assignable_impl<_Tp>
    { };

  template<typename _Tp, typename _Up>
    struct __is_nt_assignable_impl
    : public integral_constant<bool, noexcept(declval<_Tp>() = declval<_Up>())>
    { };


  template<typename _Tp, typename _Up>
    struct is_nothrow_assignable
    : public __and_<is_assignable<_Tp, _Up>,
      __is_nt_assignable_impl<_Tp, _Up>>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_nt_copy_assignable_impl;

  template<typename _Tp>
    struct __is_nt_copy_assignable_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_nt_copy_assignable_impl<_Tp, true>
    : public is_nothrow_assignable<_Tp&, const _Tp&>
    { };


  template<typename _Tp>
    struct is_nothrow_copy_assignable
    : public __is_nt_copy_assignable_impl<_Tp>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_nt_move_assignable_impl;

  template<typename _Tp>
    struct __is_nt_move_assignable_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_nt_move_assignable_impl<_Tp, true>
    : public is_nothrow_assignable<_Tp&, _Tp&&>
    { };


  template<typename _Tp>
    struct is_nothrow_move_assignable
    : public __is_nt_move_assignable_impl<_Tp>
    { };


  template<typename _Tp, typename... _Args>
    struct is_trivially_constructible
    : public __and_<is_constructible<_Tp, _Args...>, __bool_constant<
        __is_trivially_constructible(_Tp, _Args...)>>::type
    { };


  template<typename _Tp>
    struct is_trivially_default_constructible
    : public is_trivially_constructible<_Tp>::type
    { };

  struct __do_is_implicitly_default_constructible_impl
  {
    template <typename _Tp>
    static void __helper(const _Tp&);

    template <typename _Tp>
    static true_type __test(const _Tp&,
                            decltype(__helper<const _Tp&>({}))* = 0);

    static false_type __test(...);
  };

  template<typename _Tp>
    struct __is_implicitly_default_constructible_impl
    : public __do_is_implicitly_default_constructible_impl
    {
      typedef decltype(__test(declval<_Tp>())) type;
    };

  template<typename _Tp>
    struct __is_implicitly_default_constructible_safe
    : public __is_implicitly_default_constructible_impl<_Tp>::type
    { };

  template <typename _Tp>
    struct __is_implicitly_default_constructible
    : public __and_<is_default_constructible<_Tp>,
      __is_implicitly_default_constructible_safe<_Tp>>
    { };



  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_trivially_copy_constructible_impl;

  template<typename _Tp>
    struct __is_trivially_copy_constructible_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_trivially_copy_constructible_impl<_Tp, true>
    : public __and_<is_copy_constructible<_Tp>,
      integral_constant<bool,
   __is_trivially_constructible(_Tp, const _Tp&)>>
    { };

  template<typename _Tp>
    struct is_trivially_copy_constructible
    : public __is_trivially_copy_constructible_impl<_Tp>
    { };



  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_trivially_move_constructible_impl;

  template<typename _Tp>
    struct __is_trivially_move_constructible_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_trivially_move_constructible_impl<_Tp, true>
    : public __and_<is_move_constructible<_Tp>,
      integral_constant<bool,
   __is_trivially_constructible(_Tp, _Tp&&)>>
    { };

  template<typename _Tp>
    struct is_trivially_move_constructible
    : public __is_trivially_move_constructible_impl<_Tp>
    { };


  template<typename _Tp, typename _Up>
    struct is_trivially_assignable
    : public __bool_constant<__is_trivially_assignable(_Tp, _Up)>
    { };



  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_trivially_copy_assignable_impl;

  template<typename _Tp>
    struct __is_trivially_copy_assignable_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_trivially_copy_assignable_impl<_Tp, true>
    : public __and_<is_copy_assignable<_Tp>,
      integral_constant<bool,
   __is_trivially_assignable(_Tp&, const _Tp&)>>
    { };

  template<typename _Tp>
    struct is_trivially_copy_assignable
    : public __is_trivially_copy_assignable_impl<_Tp>
    { };



  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_trivially_move_assignable_impl;

  template<typename _Tp>
    struct __is_trivially_move_assignable_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_trivially_move_assignable_impl<_Tp, true>
    : public __and_<is_move_assignable<_Tp>,
      integral_constant<bool,
   __is_trivially_assignable(_Tp&, _Tp&&)>>
    { };

  template<typename _Tp>
    struct is_trivially_move_assignable
    : public __is_trivially_move_assignable_impl<_Tp>
    { };


  template<typename _Tp>
    struct is_trivially_destructible
    : public __and_<is_destructible<_Tp>, integral_constant<bool,
         __has_trivial_destructor(_Tp)>>
    { };



  template<typename _Tp>
    struct has_virtual_destructor
    : public integral_constant<bool, __has_virtual_destructor(_Tp)>
    { };





  template<typename _Tp>
    struct alignment_of
    : public integral_constant<std::size_t, alignof(_Tp)> { };


  template<typename>
    struct rank
    : public integral_constant<std::size_t, 0> { };

  template<typename _Tp, std::size_t _Size>
    struct rank<_Tp[_Size]>
    : public integral_constant<std::size_t, 1 + rank<_Tp>::value> { };

  template<typename _Tp>
    struct rank<_Tp[]>
    : public integral_constant<std::size_t, 1 + rank<_Tp>::value> { };


  template<typename, unsigned _Uint>
    struct extent
    : public integral_constant<std::size_t, 0> { };

  template<typename _Tp, unsigned _Uint, std::size_t _Size>
    struct extent<_Tp[_Size], _Uint>
    : public integral_constant<std::size_t,
          _Uint == 0 ? _Size : extent<_Tp,
          _Uint - 1>::value>
    { };

  template<typename _Tp, unsigned _Uint>
    struct extent<_Tp[], _Uint>
    : public integral_constant<std::size_t,
          _Uint == 0 ? 0 : extent<_Tp,
             _Uint - 1>::value>
    { };





  template<typename, typename>
    struct is_same
    : public false_type { };

  template<typename _Tp>
    struct is_same<_Tp, _Tp>
    : public true_type { };


  template<typename _Base, typename _Derived>
    struct is_base_of
    : public integral_constant<bool, __is_base_of(_Base, _Derived)>
    { };

  template<typename _From, typename _To,
           bool = __or_<is_void<_From>, is_function<_To>,
                        is_array<_To>>::value>
    struct __is_convertible_helper
    { typedef typename is_void<_To>::type type; };

  template<typename _From, typename _To>
    class __is_convertible_helper<_From, _To, false>
    {
       template<typename _To1>
 static void __test_aux(_To1);

      template<typename _From1, typename _To1,
        typename = decltype(__test_aux<_To1>(std::declval<_From1>()))>
 static true_type
 __test(int);

      template<typename, typename>
 static false_type
 __test(...);

    public:
      typedef decltype(__test<_From, _To>(0)) type;
    };



  template<typename _From, typename _To>
    struct is_convertible
    : public __is_convertible_helper<_From, _To>::type
    { };





  template<typename _Tp>
    struct remove_const
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_const<_Tp const>
    { typedef _Tp type; };


  template<typename _Tp>
    struct remove_volatile
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_volatile<_Tp volatile>
    { typedef _Tp type; };


  template<typename _Tp>
    struct remove_cv
    {
      typedef typename
      remove_const<typename remove_volatile<_Tp>::type>::type type;
    };


  template<typename _Tp>
    struct add_const
    { typedef _Tp const type; };


  template<typename _Tp>
    struct add_volatile
    { typedef _Tp volatile type; };


  template<typename _Tp>
    struct add_cv
    {
      typedef typename
      add_const<typename add_volatile<_Tp>::type>::type type;
    };






  template<typename _Tp>
    using remove_const_t = typename remove_const<_Tp>::type;


  template<typename _Tp>
    using remove_volatile_t = typename remove_volatile<_Tp>::type;


  template<typename _Tp>
    using remove_cv_t = typename remove_cv<_Tp>::type;


  template<typename _Tp>
    using add_const_t = typename add_const<_Tp>::type;


  template<typename _Tp>
    using add_volatile_t = typename add_volatile<_Tp>::type;


  template<typename _Tp>
    using add_cv_t = typename add_cv<_Tp>::type;





  template<typename _Tp>
    struct remove_reference
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_reference<_Tp&>
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_reference<_Tp&&>
    { typedef _Tp type; };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __add_lvalue_reference_helper
    { typedef _Tp type; };

  template<typename _Tp>
    struct __add_lvalue_reference_helper<_Tp, true>
    { typedef _Tp& type; };


  template<typename _Tp>
    struct add_lvalue_reference
    : public __add_lvalue_reference_helper<_Tp>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __add_rvalue_reference_helper
    { typedef _Tp type; };

  template<typename _Tp>
    struct __add_rvalue_reference_helper<_Tp, true>
    { typedef _Tp&& type; };


  template<typename _Tp>
    struct add_rvalue_reference
    : public __add_rvalue_reference_helper<_Tp>
    { };



  template<typename _Tp>
    using remove_reference_t = typename remove_reference<_Tp>::type;


  template<typename _Tp>
    using add_lvalue_reference_t = typename add_lvalue_reference<_Tp>::type;


  template<typename _Tp>
    using add_rvalue_reference_t = typename add_rvalue_reference<_Tp>::type;





  template<typename _Unqualified, bool _IsConst, bool _IsVol>
    struct __cv_selector;

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, false, false>
    { typedef _Unqualified __type; };

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, false, true>
    { typedef volatile _Unqualified __type; };

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, true, false>
    { typedef const _Unqualified __type; };

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, true, true>
    { typedef const volatile _Unqualified __type; };

  template<typename _Qualified, typename _Unqualified,
    bool _IsConst = is_const<_Qualified>::value,
    bool _IsVol = is_volatile<_Qualified>::value>
    class __match_cv_qualifiers
    {
      typedef __cv_selector<_Unqualified, _IsConst, _IsVol> __match;

    public:
      typedef typename __match::__type __type;
    };


  template<typename _Tp>
    struct __make_unsigned
    { typedef _Tp __type; };

  template<>
    struct __make_unsigned<char>
    { typedef unsigned char __type; };

  template<>
    struct __make_unsigned<signed char>
    { typedef unsigned char __type; };

  template<>
    struct __make_unsigned<short>
    { typedef unsigned short __type; };

  template<>
    struct __make_unsigned<int>
    { typedef unsigned int __type; };

  template<>
    struct __make_unsigned<long>
    { typedef unsigned long __type; };

  template<>
    struct __make_unsigned<long long>
    { typedef unsigned long long __type; };


  template<>
    struct __make_unsigned<__int128>
    { typedef unsigned __int128 __type; };
# 1590 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\type_traits" 3
  template<typename _Tp,
    bool _IsInt = is_integral<_Tp>::value,
    bool _IsEnum = is_enum<_Tp>::value>
    class __make_unsigned_selector;

  template<typename _Tp>
    class __make_unsigned_selector<_Tp, true, false>
    {
      typedef __make_unsigned<typename remove_cv<_Tp>::type> __unsignedt;
      typedef typename __unsignedt::__type __unsigned_type;
      typedef __match_cv_qualifiers<_Tp, __unsigned_type> __cv_unsigned;

    public:
      typedef typename __cv_unsigned::__type __type;
    };

  template<typename _Tp>
    class __make_unsigned_selector<_Tp, false, true>
    {

      typedef unsigned char __smallest;
      static const bool __b0 = sizeof(_Tp) <= sizeof(__smallest);
      static const bool __b1 = sizeof(_Tp) <= sizeof(unsigned short);
      static const bool __b2 = sizeof(_Tp) <= sizeof(unsigned int);
      static const bool __b3 = sizeof(_Tp) <= sizeof(unsigned long);
      typedef conditional<__b3, unsigned long, unsigned long long> __cond3;
      typedef typename __cond3::type __cond3_type;
      typedef conditional<__b2, unsigned int, __cond3_type> __cond2;
      typedef typename __cond2::type __cond2_type;
      typedef conditional<__b1, unsigned short, __cond2_type> __cond1;
      typedef typename __cond1::type __cond1_type;

      typedef typename conditional<__b0, __smallest, __cond1_type>::type
 __unsigned_type;
      typedef __match_cv_qualifiers<_Tp, __unsigned_type> __cv_unsigned;

    public:
      typedef typename __cv_unsigned::__type __type;
    };





  template<typename _Tp>
    struct make_unsigned
    { typedef typename __make_unsigned_selector<_Tp>::__type type; };


  template<>
    struct make_unsigned<bool>;



  template<typename _Tp>
    struct __make_signed
    { typedef _Tp __type; };

  template<>
    struct __make_signed<char>
    { typedef signed char __type; };

  template<>
    struct __make_signed<unsigned char>
    { typedef signed char __type; };

  template<>
    struct __make_signed<unsigned short>
    { typedef signed short __type; };

  template<>
    struct __make_signed<unsigned int>
    { typedef signed int __type; };

  template<>
    struct __make_signed<unsigned long>
    { typedef signed long __type; };

  template<>
    struct __make_signed<unsigned long long>
    { typedef signed long long __type; };


  template<>
    struct __make_signed<unsigned __int128>
    { typedef __int128 __type; };
# 1694 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\type_traits" 3
  template<typename _Tp,
    bool _IsInt = is_integral<_Tp>::value,
    bool _IsEnum = is_enum<_Tp>::value>
    class __make_signed_selector;

  template<typename _Tp>
    class __make_signed_selector<_Tp, true, false>
    {
      typedef __make_signed<typename remove_cv<_Tp>::type> __signedt;
      typedef typename __signedt::__type __signed_type;
      typedef __match_cv_qualifiers<_Tp, __signed_type> __cv_signed;

    public:
      typedef typename __cv_signed::__type __type;
    };

  template<typename _Tp>
    class __make_signed_selector<_Tp, false, true>
    {
      typedef typename __make_unsigned_selector<_Tp>::__type __unsigned_type;

    public:
      typedef typename __make_signed_selector<__unsigned_type>::__type __type;
    };





  template<typename _Tp>
    struct make_signed
    { typedef typename __make_signed_selector<_Tp>::__type type; };


  template<>
    struct make_signed<bool>;



  template<typename _Tp>
    using make_signed_t = typename make_signed<_Tp>::type;


  template<typename _Tp>
    using make_unsigned_t = typename make_unsigned<_Tp>::type;





  template<typename _Tp>
    struct remove_extent
    { typedef _Tp type; };

  template<typename _Tp, std::size_t _Size>
    struct remove_extent<_Tp[_Size]>
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_extent<_Tp[]>
    { typedef _Tp type; };


  template<typename _Tp>
    struct remove_all_extents
    { typedef _Tp type; };

  template<typename _Tp, std::size_t _Size>
    struct remove_all_extents<_Tp[_Size]>
    { typedef typename remove_all_extents<_Tp>::type type; };

  template<typename _Tp>
    struct remove_all_extents<_Tp[]>
    { typedef typename remove_all_extents<_Tp>::type type; };



  template<typename _Tp>
    using remove_extent_t = typename remove_extent<_Tp>::type;


  template<typename _Tp>
    using remove_all_extents_t = typename remove_all_extents<_Tp>::type;




  template<typename _Tp, typename>
    struct __remove_pointer_helper
    { typedef _Tp type; };

  template<typename _Tp, typename _Up>
    struct __remove_pointer_helper<_Tp, _Up*>
    { typedef _Up type; };


  template<typename _Tp>
    struct remove_pointer
    : public __remove_pointer_helper<_Tp, typename remove_cv<_Tp>::type>
    { };


  template<typename _Tp, bool = __or_<__is_referenceable<_Tp>,
          is_void<_Tp>>::value>
    struct __add_pointer_helper
    { typedef _Tp type; };

  template<typename _Tp>
    struct __add_pointer_helper<_Tp, true>
    { typedef typename remove_reference<_Tp>::type* type; };

  template<typename _Tp>
    struct add_pointer
    : public __add_pointer_helper<_Tp>
    { };



  template<typename _Tp>
    using remove_pointer_t = typename remove_pointer<_Tp>::type;


  template<typename _Tp>
    using add_pointer_t = typename add_pointer<_Tp>::type;


  template<std::size_t _Len>
    struct __aligned_storage_msa
    {
      union __type
      {
 unsigned char __data[_Len];
 struct __attribute__((__aligned__)) { } __align;
      };
    };
# 1840 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\type_traits" 3
  template<std::size_t _Len, std::size_t _Align =
    __alignof__(typename __aligned_storage_msa<_Len>::__type)>
    struct aligned_storage
    {
      union type
      {
 unsigned char __data[_Len];
 struct __attribute__((__aligned__((_Align)))) { } __align;
      };
    };

  template <typename... _Types>
    struct __strictest_alignment
    {
      static const size_t _S_alignment = 0;
      static const size_t _S_size = 0;
    };

  template <typename _Tp, typename... _Types>
    struct __strictest_alignment<_Tp, _Types...>
    {
      static const size_t _S_alignment =
        alignof(_Tp) > __strictest_alignment<_Types...>::_S_alignment
 ? alignof(_Tp) : __strictest_alignment<_Types...>::_S_alignment;
      static const size_t _S_size =
        sizeof(_Tp) > __strictest_alignment<_Types...>::_S_size
 ? sizeof(_Tp) : __strictest_alignment<_Types...>::_S_size;
    };
# 1879 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\type_traits" 3
  template <size_t _Len, typename... _Types>
    struct aligned_union
    {
    private:
      static_assert(sizeof...(_Types) != 0, "At least one type is required");

      using __strictest = __strictest_alignment<_Types...>;
      static const size_t _S_len = _Len > __strictest::_S_size
 ? _Len : __strictest::_S_size;
    public:

      static const size_t alignment_value = __strictest::_S_alignment;

      typedef typename aligned_storage<_S_len, alignment_value>::type type;
    };

  template <size_t _Len, typename... _Types>
    const size_t aligned_union<_Len, _Types...>::alignment_value;



  template<typename _Up,
    bool _IsArray = is_array<_Up>::value,
    bool _IsFunction = is_function<_Up>::value>
    struct __decay_selector;


  template<typename _Up>
    struct __decay_selector<_Up, false, false>
    { typedef typename remove_cv<_Up>::type __type; };

  template<typename _Up>
    struct __decay_selector<_Up, true, false>
    { typedef typename remove_extent<_Up>::type* __type; };

  template<typename _Up>
    struct __decay_selector<_Up, false, true>
    { typedef typename add_pointer<_Up>::type __type; };


  template<typename _Tp>
    class decay
    {
      typedef typename remove_reference<_Tp>::type __remove_type;

    public:
      typedef typename __decay_selector<__remove_type>::__type type;
    };

  template<typename _Tp>
    class reference_wrapper;


  template<typename _Tp>
    struct __strip_reference_wrapper
    {
      typedef _Tp __type;
    };

  template<typename _Tp>
    struct __strip_reference_wrapper<reference_wrapper<_Tp> >
    {
      typedef _Tp& __type;
    };

  template<typename _Tp>
    struct __decay_and_strip
    {
      typedef typename __strip_reference_wrapper<
 typename decay<_Tp>::type>::__type __type;
    };




  template<bool, typename _Tp = void>
    struct enable_if
    { };


  template<typename _Tp>
    struct enable_if<true, _Tp>
    { typedef _Tp type; };

  template<typename... _Cond>
    using _Require = typename enable_if<__and_<_Cond...>::value>::type;



  template<bool _Cond, typename _Iftrue, typename _Iffalse>
    struct conditional
    { typedef _Iftrue type; };


  template<typename _Iftrue, typename _Iffalse>
    struct conditional<false, _Iftrue, _Iffalse>
    { typedef _Iffalse type; };


  template<typename... _Tp>
    struct common_type;



  struct __do_common_type_impl
  {
    template<typename _Tp, typename _Up>
      static __success_type<typename decay<decltype
       (true ? std::declval<_Tp>()
        : std::declval<_Up>())>::type> _S_test(int);

    template<typename, typename>
      static __failure_type _S_test(...);
  };

  template<typename _Tp, typename _Up>
    struct __common_type_impl
    : private __do_common_type_impl
    {
      typedef decltype(_S_test<_Tp, _Up>(0)) type;
    };

  struct __do_member_type_wrapper
  {
    template<typename _Tp>
      static __success_type<typename _Tp::type> _S_test(int);

    template<typename>
      static __failure_type _S_test(...);
  };

  template<typename _Tp>
    struct __member_type_wrapper
    : private __do_member_type_wrapper
    {
      typedef decltype(_S_test<_Tp>(0)) type;
    };

  template<typename _CTp, typename... _Args>
    struct __expanded_common_type_wrapper
    {
      typedef common_type<typename _CTp::type, _Args...> type;
    };

  template<typename... _Args>
    struct __expanded_common_type_wrapper<__failure_type, _Args...>
    { typedef __failure_type type; };

  template<typename _Tp>
    struct common_type<_Tp>
    { typedef typename decay<_Tp>::type type; };

  template<typename _Tp, typename _Up>
    struct common_type<_Tp, _Up>
    : public __common_type_impl<_Tp, _Up>::type
    { };

  template<typename _Tp, typename _Up, typename... _Vp>
    struct common_type<_Tp, _Up, _Vp...>
    : public __expanded_common_type_wrapper<typename __member_type_wrapper<
               common_type<_Tp, _Up>>::type, _Vp...>::type
    { };


  template<typename _Tp>
    struct underlying_type
    {
      typedef __underlying_type(_Tp) type;
    };

  template<typename _Tp>
    struct __declval_protector
    {
      static const bool __stop = false;
    };

  template<typename _Tp>
    auto declval() noexcept -> decltype(__declval<_Tp>(0))
    {
      static_assert(__declval_protector<_Tp>::__stop,
      "declval() must not be used!");
      return __declval<_Tp>(0);
    }
# 2072 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\type_traits" 3
  template<>
    struct __make_unsigned<wchar_t>
    {
      using __type
 = typename __make_unsigned_selector<wchar_t, false, true>::__type;
    };

  template<>
    struct __make_signed<wchar_t>
    {
      using __type
 = typename __make_signed_selector<wchar_t, false, true>::__type;
    };


  template<>
    struct __make_unsigned<char16_t>
    {
      using __type
 = typename __make_unsigned_selector<char16_t, false, true>::__type;
    };

  template<>
    struct __make_signed<char16_t>
    {
      using __type
 = typename __make_signed_selector<char16_t, false, true>::__type;
    };

  template<>
    struct __make_unsigned<char32_t>
    {
      using __type
 = typename __make_unsigned_selector<char32_t, false, true>::__type;
    };

  template<>
    struct __make_signed<char32_t>
    {
      using __type
 = typename __make_signed_selector<char32_t, false, true>::__type;
    };



  template<typename _Signature>
    class result_of;





  struct __invoke_memfun_ref { };
  struct __invoke_memfun_deref { };
  struct __invoke_memobj_ref { };
  struct __invoke_memobj_deref { };
  struct __invoke_other { };


  template<typename _Tp, typename _Tag>
    struct __result_of_success : __success_type<_Tp>
    { using __invoke_type = _Tag; };


  struct __result_of_memfun_ref_impl
  {
    template<typename _Fp, typename _Tp1, typename... _Args>
      static __result_of_success<decltype(
      (std::declval<_Tp1>().*std::declval<_Fp>())(std::declval<_Args>()...)
      ), __invoke_memfun_ref> _S_test(int);

    template<typename...>
      static __failure_type _S_test(...);
  };

  template<typename _MemPtr, typename _Arg, typename... _Args>
    struct __result_of_memfun_ref
    : private __result_of_memfun_ref_impl
    {
      typedef decltype(_S_test<_MemPtr, _Arg, _Args...>(0)) type;
    };


  struct __result_of_memfun_deref_impl
  {
    template<typename _Fp, typename _Tp1, typename... _Args>
      static __result_of_success<decltype(
      ((*std::declval<_Tp1>()).*std::declval<_Fp>())(std::declval<_Args>()...)
      ), __invoke_memfun_deref> _S_test(int);

    template<typename...>
      static __failure_type _S_test(...);
  };

  template<typename _MemPtr, typename _Arg, typename... _Args>
    struct __result_of_memfun_deref
    : private __result_of_memfun_deref_impl
    {
      typedef decltype(_S_test<_MemPtr, _Arg, _Args...>(0)) type;
    };


  struct __result_of_memobj_ref_impl
  {
    template<typename _Fp, typename _Tp1>
      static __result_of_success<decltype(
      std::declval<_Tp1>().*std::declval<_Fp>()
      ), __invoke_memobj_ref> _S_test(int);

    template<typename, typename>
      static __failure_type _S_test(...);
  };

  template<typename _MemPtr, typename _Arg>
    struct __result_of_memobj_ref
    : private __result_of_memobj_ref_impl
    {
      typedef decltype(_S_test<_MemPtr, _Arg>(0)) type;
    };


  struct __result_of_memobj_deref_impl
  {
    template<typename _Fp, typename _Tp1>
      static __result_of_success<decltype(
      (*std::declval<_Tp1>()).*std::declval<_Fp>()
      ), __invoke_memobj_deref> _S_test(int);

    template<typename, typename>
      static __failure_type _S_test(...);
  };

  template<typename _MemPtr, typename _Arg>
    struct __result_of_memobj_deref
    : private __result_of_memobj_deref_impl
    {
      typedef decltype(_S_test<_MemPtr, _Arg>(0)) type;
    };

  template<typename _MemPtr, typename _Arg>
    struct __result_of_memobj;

  template<typename _Res, typename _Class, typename _Arg>
    struct __result_of_memobj<_Res _Class::*, _Arg>
    {
      typedef typename remove_cv<typename remove_reference<
        _Arg>::type>::type _Argval;
      typedef _Res _Class::* _MemPtr;
      typedef typename conditional<__or_<is_same<_Argval, _Class>,
        is_base_of<_Class, _Argval>>::value,
        __result_of_memobj_ref<_MemPtr, _Arg>,
        __result_of_memobj_deref<_MemPtr, _Arg>
      >::type::type type;
    };

  template<typename _MemPtr, typename _Arg, typename... _Args>
    struct __result_of_memfun;

  template<typename _Res, typename _Class, typename _Arg, typename... _Args>
    struct __result_of_memfun<_Res _Class::*, _Arg, _Args...>
    {
      typedef typename remove_cv<typename remove_reference<
        _Arg>::type>::type _Argval;
      typedef _Res _Class::* _MemPtr;
      typedef typename conditional<__or_<is_same<_Argval, _Class>,
        is_base_of<_Class, _Argval>>::value,
        __result_of_memfun_ref<_MemPtr, _Arg, _Args...>,
        __result_of_memfun_deref<_MemPtr, _Arg, _Args...>
      >::type::type type;
    };






  template<typename _Tp, typename _Up = typename decay<_Tp>::type>
    struct __inv_unwrap
    {
      using type = _Tp;
    };

  template<typename _Tp, typename _Up>
    struct __inv_unwrap<_Tp, reference_wrapper<_Up>>
    {
      using type = _Up&;
    };

  template<bool, bool, typename _Functor, typename... _ArgTypes>
    struct __result_of_impl
    {
      typedef __failure_type type;
    };

  template<typename _MemPtr, typename _Arg>
    struct __result_of_impl<true, false, _MemPtr, _Arg>
    : public __result_of_memobj<typename decay<_MemPtr>::type,
    typename __inv_unwrap<_Arg>::type>
    { };

  template<typename _MemPtr, typename _Arg, typename... _Args>
    struct __result_of_impl<false, true, _MemPtr, _Arg, _Args...>
    : public __result_of_memfun<typename decay<_MemPtr>::type,
    typename __inv_unwrap<_Arg>::type, _Args...>
    { };


  struct __result_of_other_impl
  {
    template<typename _Fn, typename... _Args>
      static __result_of_success<decltype(
      std::declval<_Fn>()(std::declval<_Args>()...)
      ), __invoke_other> _S_test(int);

    template<typename...>
      static __failure_type _S_test(...);
  };

  template<typename _Functor, typename... _ArgTypes>
    struct __result_of_impl<false, false, _Functor, _ArgTypes...>
    : private __result_of_other_impl
    {
      typedef decltype(_S_test<_Functor, _ArgTypes...>(0)) type;
    };


  template<typename _Functor, typename... _ArgTypes>
    struct __invoke_result
    : public __result_of_impl<
        is_member_object_pointer<
          typename remove_reference<_Functor>::type
        >::value,
        is_member_function_pointer<
          typename remove_reference<_Functor>::type
        >::value,
 _Functor, _ArgTypes...
      >::type
    { };

  template<typename _Functor, typename... _ArgTypes>
    struct result_of<_Functor(_ArgTypes...)>
    : public __invoke_result<_Functor, _ArgTypes...>
    { };



  template<size_t _Len, size_t _Align =
     __alignof__(typename __aligned_storage_msa<_Len>::__type)>
    using aligned_storage_t = typename aligned_storage<_Len, _Align>::type;

  template <size_t _Len, typename... _Types>
    using aligned_union_t = typename aligned_union<_Len, _Types...>::type;


  template<typename _Tp>
    using decay_t = typename decay<_Tp>::type;


  template<bool _Cond, typename _Tp = void>
    using enable_if_t = typename enable_if<_Cond, _Tp>::type;


  template<bool _Cond, typename _Iftrue, typename _Iffalse>
    using conditional_t = typename conditional<_Cond, _Iftrue, _Iffalse>::type;


  template<typename... _Tp>
    using common_type_t = typename common_type<_Tp...>::type;


  template<typename _Tp>
    using underlying_type_t = typename underlying_type<_Tp>::type;


  template<typename _Tp>
    using result_of_t = typename result_of<_Tp>::type;



  template<bool _Cond, typename _Tp = void>
    using __enable_if_t = typename enable_if<_Cond, _Tp>::type;


  template<typename...> using __void_t = void;




  template<typename...> using void_t = void;



  template<typename _Default, typename _AlwaysVoid,
    template<typename...> class _Op, typename... _Args>
    struct __detector
    {
      using value_t = false_type;
      using type = _Default;
    };


  template<typename _Default, template<typename...> class _Op,
     typename... _Args>
    struct __detector<_Default, __void_t<_Op<_Args...>>, _Op, _Args...>
    {
      using value_t = true_type;
      using type = _Op<_Args...>;
    };


  template<typename _Default, template<typename...> class _Op,
    typename... _Args>
    using __detected_or = __detector<_Default, void, _Op, _Args...>;


  template<typename _Default, template<typename...> class _Op,
    typename... _Args>
    using __detected_or_t
      = typename __detected_or<_Default, _Op, _Args...>::type;
# 2408 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\type_traits" 3
  template <typename _Tp>
    struct __is_swappable;

  template <typename _Tp>
    struct __is_nothrow_swappable;

  template<typename... _Elements>
    class tuple;

  template<typename>
    struct __is_tuple_like_impl : false_type
    { };

  template<typename... _Tps>
    struct __is_tuple_like_impl<tuple<_Tps...>> : true_type
    { };


  template<typename _Tp>
    struct __is_tuple_like
    : public __is_tuple_like_impl<typename remove_cv<
      typename remove_reference<_Tp>::type>::type>::type
    { };

  template<typename _Tp>
    inline
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
         is_move_constructible<_Tp>,
         is_move_assignable<_Tp>>::value>::type
    swap(_Tp&, _Tp&)
    noexcept(__and_<is_nothrow_move_constructible<_Tp>,
             is_nothrow_move_assignable<_Tp>>::value);

  template<typename _Tp, size_t _Nm>
    inline
    typename enable_if<__is_swappable<_Tp>::value>::type
    swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])
    noexcept(__is_nothrow_swappable<_Tp>::value);

  namespace __swappable_details {
    using std::swap;

    struct __do_is_swappable_impl
    {
      template<typename _Tp, typename
               = decltype(swap(std::declval<_Tp&>(), std::declval<_Tp&>()))>
        static true_type __test(int);

      template<typename>
        static false_type __test(...);
    };

    struct __do_is_nothrow_swappable_impl
    {
      template<typename _Tp>
        static __bool_constant<
          noexcept(swap(std::declval<_Tp&>(), std::declval<_Tp&>()))
        > __test(int);

      template<typename>
        static false_type __test(...);
    };

  }

  template<typename _Tp>
    struct __is_swappable_impl
    : public __swappable_details::__do_is_swappable_impl
    {
      typedef decltype(__test<_Tp>(0)) type;
    };

  template<typename _Tp>
    struct __is_nothrow_swappable_impl
    : public __swappable_details::__do_is_nothrow_swappable_impl
    {
      typedef decltype(__test<_Tp>(0)) type;
    };

  template<typename _Tp>
    struct __is_swappable
    : public __is_swappable_impl<_Tp>::type
    { };

  template<typename _Tp>
    struct __is_nothrow_swappable
    : public __is_nothrow_swappable_impl<_Tp>::type
    { };






  template<typename _Tp>
    struct is_swappable
    : public __is_swappable_impl<_Tp>::type
    { };


  template<typename _Tp>
    struct is_nothrow_swappable
    : public __is_nothrow_swappable_impl<_Tp>::type
    { };



  template<typename _Tp>
                      constexpr bool is_swappable_v =
      is_swappable<_Tp>::value;


  template<typename _Tp>
                      constexpr bool is_nothrow_swappable_v =
      is_nothrow_swappable<_Tp>::value;


  namespace __swappable_with_details {
    using std::swap;

    struct __do_is_swappable_with_impl
    {
      template<typename _Tp, typename _Up, typename
               = decltype(swap(std::declval<_Tp>(), std::declval<_Up>())),
               typename
               = decltype(swap(std::declval<_Up>(), std::declval<_Tp>()))>
        static true_type __test(int);

      template<typename, typename>
        static false_type __test(...);
    };

    struct __do_is_nothrow_swappable_with_impl
    {
      template<typename _Tp, typename _Up>
        static __bool_constant<
          noexcept(swap(std::declval<_Tp>(), std::declval<_Up>()))
          &&
          noexcept(swap(std::declval<_Up>(), std::declval<_Tp>()))
        > __test(int);

      template<typename, typename>
        static false_type __test(...);
    };

  }

  template<typename _Tp, typename _Up>
    struct __is_swappable_with_impl
    : public __swappable_with_details::__do_is_swappable_with_impl
    {
      typedef decltype(__test<_Tp, _Up>(0)) type;
    };


  template<typename _Tp>
    struct __is_swappable_with_impl<_Tp&, _Tp&>
    : public __swappable_details::__do_is_swappable_impl
    {
      typedef decltype(__test<_Tp&>(0)) type;
    };

  template<typename _Tp, typename _Up>
    struct __is_nothrow_swappable_with_impl
    : public __swappable_with_details::__do_is_nothrow_swappable_with_impl
    {
      typedef decltype(__test<_Tp, _Up>(0)) type;
    };


  template<typename _Tp>
    struct __is_nothrow_swappable_with_impl<_Tp&, _Tp&>
    : public __swappable_details::__do_is_nothrow_swappable_impl
    {
      typedef decltype(__test<_Tp&>(0)) type;
    };


  template<typename _Tp, typename _Up>
    struct is_swappable_with
    : public __is_swappable_with_impl<_Tp, _Up>::type
    { };


  template<typename _Tp, typename _Up>
    struct is_nothrow_swappable_with
    : public __is_nothrow_swappable_with_impl<_Tp, _Up>::type
    { };



  template<typename _Tp, typename _Up>
                      constexpr bool is_swappable_with_v =
      is_swappable_with<_Tp, _Up>::value;


  template<typename _Tp, typename _Up>
                      constexpr bool is_nothrow_swappable_with_v =
      is_nothrow_swappable_with<_Tp, _Up>::value;






  template<typename _Result, typename _Ret, typename = void>
    struct __is_invocable_impl : false_type { };

  template<typename _Result, typename _Ret>
    struct __is_invocable_impl<_Result, _Ret, __void_t<typename _Result::type>>
    : __or_<is_void<_Ret>, is_convertible<typename _Result::type, _Ret>>::type
    { };

  template<typename _Fn, typename... _ArgTypes>
    struct __is_invocable
    : __is_invocable_impl<__invoke_result<_Fn, _ArgTypes...>, void>::type
    { };

  template<typename _Fn, typename _Tp, typename... _Args>
    constexpr bool __call_is_nt(__invoke_memfun_ref)
    {
      using _Up = typename __inv_unwrap<_Tp>::type;
      return noexcept((std::declval<_Up>().*std::declval<_Fn>())(
     std::declval<_Args>()...));
    }

  template<typename _Fn, typename _Tp, typename... _Args>
    constexpr bool __call_is_nt(__invoke_memfun_deref)
    {
      return noexcept(((*std::declval<_Tp>()).*std::declval<_Fn>())(
     std::declval<_Args>()...));
    }

  template<typename _Fn, typename _Tp>
    constexpr bool __call_is_nt(__invoke_memobj_ref)
    {
      using _Up = typename __inv_unwrap<_Tp>::type;
      return noexcept(std::declval<_Up>().*std::declval<_Fn>());
    }

  template<typename _Fn, typename _Tp>
    constexpr bool __call_is_nt(__invoke_memobj_deref)
    {
      return noexcept((*std::declval<_Tp>()).*std::declval<_Fn>());
    }

  template<typename _Fn, typename... _Args>
    constexpr bool __call_is_nt(__invoke_other)
    {
      return noexcept(std::declval<_Fn>()(std::declval<_Args>()...));
    }

  template<typename _Result, typename _Fn, typename... _Args>
    struct __call_is_nothrow
    : __bool_constant<
 std::__call_is_nt<_Fn, _Args...>(typename _Result::__invoke_type{})
      >
    { };

  template<typename _Fn, typename... _Args>
    using __call_is_nothrow_
      = __call_is_nothrow<__invoke_result<_Fn, _Args...>, _Fn, _Args...>;


  template<typename _Fn, typename... _Args>
    struct __is_nothrow_invocable
    : __and_<__is_invocable<_Fn, _Args...>,
             __call_is_nothrow_<_Fn, _Args...>>::type
    { };

  struct __nonesuch {
    __nonesuch() = delete;
    ~__nonesuch() = delete;
    __nonesuch(__nonesuch const&) = delete;
    void operator=(__nonesuch const&) = delete;
  };
# 2974 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\type_traits" 3
}
# 56 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/move.h" 2 3

namespace std
{
# 72 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/move.h" 3
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    { return static_cast<_Tp&&>(__t); }







  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type&& __t) noexcept
    {
      static_assert(!std::is_lvalue_reference<_Tp>::value, "template argument"
      " substituting _Tp is an lvalue reference type");
      return static_cast<_Tp&&>(__t);
    }






  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }


  template<typename _Tp>
    struct __move_if_noexcept_cond
    : public __and_<__not_<is_nothrow_move_constructible<_Tp>>,
                    is_copy_constructible<_Tp>>::type { };
# 116 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/move.h" 3
  template<typename _Tp>
    constexpr typename
    conditional<__move_if_noexcept_cond<_Tp>::value, const _Tp&, _Tp&&>::type
    move_if_noexcept(_Tp& __x) noexcept
    { return std::move(__x); }
# 136 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/move.h" 3
  template<typename _Tp>
    inline _Tp*
    addressof(_Tp& __r) noexcept
    { return std::__addressof(__r); }



  template<typename _Tp>
    const _Tp* addressof(const _Tp&&) = delete;


  template <typename _Tp, typename _Up = _Tp>
    inline _Tp
    __exchange(_Tp& __obj, _Up&& __new_val)
    {
      _Tp __old_val = std::move(__obj);
      __obj = std::forward<_Up>(__new_val);
      return __old_val;
    }
# 176 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/move.h" 3
  template<typename _Tp>
    inline

    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
         is_move_constructible<_Tp>,
         is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
    noexcept(__and_<is_nothrow_move_constructible<_Tp>,
             is_nothrow_move_assignable<_Tp>>::value)




    {



      _Tp __tmp = std::move(__a);
      __a = std::move(__b);
      __b = std::move(__tmp);
    }




  template<typename _Tp, size_t _Nm>
    inline

    typename enable_if<__is_swappable<_Tp>::value>::type
    swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])
    noexcept(__is_nothrow_swappable<_Tp>::value)




    {
      for (size_t __n = 0; __n < _Nm; ++__n)
 swap(__a[__n], __b[__n]);
    }



}
# 41 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/nested_exception.h" 2 3

extern "C++" {

namespace std
{






  class nested_exception
  {
    exception_ptr _M_ptr;

  public:
    nested_exception() noexcept : _M_ptr(current_exception()) { }

    nested_exception(const nested_exception&) noexcept = default;

    nested_exception& operator=(const nested_exception&) noexcept = default;

    virtual ~nested_exception() noexcept;

    [[noreturn]]
    void
    rethrow_nested() const
    {
      if (_M_ptr)
 rethrow_exception(_M_ptr);
      std::terminate();
    }

    exception_ptr
    nested_ptr() const noexcept
    { return _M_ptr; }
  };

  template<typename _Except>
    struct _Nested_exception : public _Except, public nested_exception
    {
      explicit _Nested_exception(const _Except& __ex)
      : _Except(__ex)
      { }

      explicit _Nested_exception(_Except&& __ex)
      : _Except(static_cast<_Except&&>(__ex))
      { }
    };




  template<typename _Tp>
    [[noreturn]]
    inline void
    __throw_with_nested_impl(_Tp&& __t, true_type)
    {
      using _Up = typename remove_reference<_Tp>::type;
      throw _Nested_exception<_Up>{std::forward<_Tp>(__t)};
    }

  template<typename _Tp>
    [[noreturn]]
    inline void
    __throw_with_nested_impl(_Tp&& __t, false_type)
    { throw std::forward<_Tp>(__t); }



  template<typename _Tp>
    [[noreturn]]
    inline void
    throw_with_nested(_Tp&& __t)
    {
      using _Up = typename decay<_Tp>::type;
      using _CopyConstructible
 = __and_<is_copy_constructible<_Up>, is_move_constructible<_Up>>;
      static_assert(_CopyConstructible::value,
   "throw_with_nested argument must be CopyConstructible");
      using __nest = __and_<is_class<_Up>, __bool_constant<!__is_final(_Up)>,
       __not_<is_base_of<nested_exception, _Up>>>;
      std::__throw_with_nested_impl(std::forward<_Tp>(__t), __nest{});
    }


  template<typename _Tp>
    using __rethrow_if_nested_cond = typename enable_if<
      __and_<is_polymorphic<_Tp>,
      __or_<__not_<is_base_of<nested_exception, _Tp>>,
     is_convertible<_Tp*, nested_exception*>>>::value
    >::type;


  template<typename _Ex>
    inline __rethrow_if_nested_cond<_Ex>
    __rethrow_if_nested_impl(const _Ex* __ptr)
    {
      if (auto __ne_ptr = dynamic_cast<const nested_exception*>(__ptr))
 __ne_ptr->rethrow_nested();
    }


  inline void
  __rethrow_if_nested_impl(const void*)
  { }


  template<typename _Ex>
    inline void
    rethrow_if_nested(const _Ex& __ex)
    { std::__rethrow_if_nested_impl(std::__addressof(__ex)); }


}

}



#pragma GCC visibility pop
# 145 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\exception" 2 3
# 40 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\ios" 2 3
# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/char_traits.h" 1 3
# 38 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/char_traits.h" 3

# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/stl_algobase.h" 1 3
# 60 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/stl_algobase.h" 3
# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/functexcept.h" 1 3
# 42 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/functexcept.h" 3
namespace std
{



  void
  __throw_bad_exception(void) __attribute__((__noreturn__));


  void
  __throw_bad_alloc(void) __attribute__((__noreturn__));


  void
  __throw_bad_cast(void) __attribute__((__noreturn__));

  void
  __throw_bad_typeid(void) __attribute__((__noreturn__));


  void
  __throw_logic_error(const char*) __attribute__((__noreturn__));

  void
  __throw_domain_error(const char*) __attribute__((__noreturn__));

  void
  __throw_invalid_argument(const char*) __attribute__((__noreturn__));

  void
  __throw_length_error(const char*) __attribute__((__noreturn__));

  void
  __throw_out_of_range(const char*) __attribute__((__noreturn__));

  void
  __throw_out_of_range_fmt(const char*, ...) __attribute__((__noreturn__))
    __attribute__((__format__(__gnu_printf__, 1, 2)));

  void
  __throw_runtime_error(const char*) __attribute__((__noreturn__));

  void
  __throw_range_error(const char*) __attribute__((__noreturn__));

  void
  __throw_overflow_error(const char*) __attribute__((__noreturn__));

  void
  __throw_underflow_error(const char*) __attribute__((__noreturn__));


  void
  __throw_ios_failure(const char*) __attribute__((__noreturn__));

  void
  __throw_system_error(int) __attribute__((__noreturn__));

  void
  __throw_future_error(int) __attribute__((__noreturn__));


  void
  __throw_bad_function_call() __attribute__((__noreturn__));


}
# 61 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/stl_algobase.h" 2 3
# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/cpp_type_traits.h" 1 3
# 36 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/cpp_type_traits.h" 3
# 67 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/cpp_type_traits.h" 3
extern "C++" {

namespace std
{


  struct __true_type { };
  struct __false_type { };

  template<bool>
    struct __truth_type
    { typedef __false_type __type; };

  template<>
    struct __truth_type<true>
    { typedef __true_type __type; };



  template<class _Sp, class _Tp>
    struct __traitor
    {
      enum { __value = bool(_Sp::__value) || bool(_Tp::__value) };
      typedef typename __truth_type<__value>::__type __type;
    };


  template<typename, typename>
    struct __are_same
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Tp>
    struct __are_same<_Tp, _Tp>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<typename _Tp>
    struct __is_void
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_void<void>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_integer
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };





  template<>
    struct __is_integer<bool>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<signed char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_integer<wchar_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };



  template<>
    struct __is_integer<char16_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<char32_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_integer<short>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned short>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<int>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned int>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<long long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned long long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };
# 261 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/cpp_type_traits.h" 3
template<> struct __is_integer<__int128> { enum { __value = 1 }; typedef __true_type __type; }; template<> struct __is_integer<unsigned __int128> { enum { __value = 1 }; typedef __true_type __type; };
# 278 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/cpp_type_traits.h" 3
  template<typename _Tp>
    struct __is_floating
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };


  template<>
    struct __is_floating<float>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_floating<double>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_floating<long double>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_pointer
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Tp>
    struct __is_pointer<_Tp*>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_arithmetic
    : public __traitor<__is_integer<_Tp>, __is_floating<_Tp> >
    { };




  template<typename _Tp>
    struct __is_scalar
    : public __traitor<__is_arithmetic<_Tp>, __is_pointer<_Tp> >
    { };




  template<typename _Tp>
    struct __is_char
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_char<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_char<wchar_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<typename _Tp>
    struct __is_byte
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_byte<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_byte<signed char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_byte<unsigned char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };
# 408 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/cpp_type_traits.h" 3
  template<typename _Tp>
    struct __is_move_iterator
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };



  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
    { return __it; }


}
}
# 62 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/stl_algobase.h" 2 3
# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\ext/type_traits.h" 1 3
# 33 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\ext/type_traits.h" 3




extern "C++" {

namespace __gnu_cxx
{



  template<bool, typename>
    struct __enable_if
    { };

  template<typename _Tp>
    struct __enable_if<true, _Tp>
    { typedef _Tp __type; };



  template<bool _Cond, typename _Iftrue, typename _Iffalse>
    struct __conditional_type
    { typedef _Iftrue __type; };

  template<typename _Iftrue, typename _Iffalse>
    struct __conditional_type<false, _Iftrue, _Iffalse>
    { typedef _Iffalse __type; };



  template<typename _Tp>
    struct __add_unsigned
    {
    private:
      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;

    public:
      typedef typename __if_type::__type __type;
    };

  template<>
    struct __add_unsigned<char>
    { typedef unsigned char __type; };

  template<>
    struct __add_unsigned<signed char>
    { typedef unsigned char __type; };

  template<>
    struct __add_unsigned<short>
    { typedef unsigned short __type; };

  template<>
    struct __add_unsigned<int>
    { typedef unsigned int __type; };

  template<>
    struct __add_unsigned<long>
    { typedef unsigned long __type; };

  template<>
    struct __add_unsigned<long long>
    { typedef unsigned long long __type; };


  template<>
    struct __add_unsigned<bool>;

  template<>
    struct __add_unsigned<wchar_t>;



  template<typename _Tp>
    struct __remove_unsigned
    {
    private:
      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;

    public:
      typedef typename __if_type::__type __type;
    };

  template<>
    struct __remove_unsigned<char>
    { typedef signed char __type; };

  template<>
    struct __remove_unsigned<unsigned char>
    { typedef signed char __type; };

  template<>
    struct __remove_unsigned<unsigned short>
    { typedef short __type; };

  template<>
    struct __remove_unsigned<unsigned int>
    { typedef int __type; };

  template<>
    struct __remove_unsigned<unsigned long>
    { typedef long __type; };

  template<>
    struct __remove_unsigned<unsigned long long>
    { typedef long long __type; };


  template<>
    struct __remove_unsigned<bool>;

  template<>
    struct __remove_unsigned<wchar_t>;



  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
    { return __ptr == 0; }

  template<typename _Type>
    inline bool
    __is_null_pointer(_Type)
    { return false; }


  inline bool
  __is_null_pointer(std::nullptr_t)
  { return true; }



  template<typename _Tp, bool = std::__is_integer<_Tp>::__value>
    struct __promote
    { typedef double __type; };




  template<typename _Tp>
    struct __promote<_Tp, false>
    { };

  template<>
    struct __promote<long double>
    { typedef long double __type; };

  template<>
    struct __promote<double>
    { typedef double __type; };

  template<>
    struct __promote<float>
    { typedef float __type; };

  template<typename _Tp, typename _Up,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type>
    struct __promote_2
    {
      typedef __typeof__(_Tp2() + _Up2()) __type;
    };

  template<typename _Tp, typename _Up, typename _Vp,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type,
           typename _Vp2 = typename __promote<_Vp>::__type>
    struct __promote_3
    {
      typedef __typeof__(_Tp2() + _Up2() + _Vp2()) __type;
    };

  template<typename _Tp, typename _Up, typename _Vp, typename _Wp,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type,
           typename _Vp2 = typename __promote<_Vp>::__type,
           typename _Wp2 = typename __promote<_Wp>::__type>
    struct __promote_4
    {
      typedef __typeof__(_Tp2() + _Up2() + _Vp2() + _Wp2()) __type;
    };


}
}
# 63 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/stl_algobase.h" 2 3
# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\ext/numeric_traits.h" 1 3
# 33 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\ext/numeric_traits.h" 3




namespace __gnu_cxx
{
# 54 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\ext/numeric_traits.h" 3
  template<typename _Value>
    struct __numeric_traits_integer
    {

      static const _Value __min = (((_Value)(-1) < 0) ? (_Value)1 << (sizeof(_Value) * 8 - ((_Value)(-1) < 0)) : (_Value)0);
      static const _Value __max = (((_Value)(-1) < 0) ? (((((_Value)1 << ((sizeof(_Value) * 8 - ((_Value)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(_Value)0);



      static const bool __is_signed = ((_Value)(-1) < 0);
      static const int __digits = (sizeof(_Value) * 8 - ((_Value)(-1) < 0));
    };

  template<typename _Value>
    const _Value __numeric_traits_integer<_Value>::__min;

  template<typename _Value>
    const _Value __numeric_traits_integer<_Value>::__max;

  template<typename _Value>
    const bool __numeric_traits_integer<_Value>::__is_signed;

  template<typename _Value>
    const int __numeric_traits_integer<_Value>::__digits;
# 99 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\ext/numeric_traits.h" 3
  template<typename _Value>
    struct __numeric_traits_floating
    {

      static const int __max_digits10 = (2 + (std::__are_same<_Value, float>::__value ? 24 : std::__are_same<_Value, double>::__value ? 53 : 53) * 643L / 2136);


      static const bool __is_signed = true;
      static const int __digits10 = (std::__are_same<_Value, float>::__value ? 6 : std::__are_same<_Value, double>::__value ? 15 : 15);
      static const int __max_exponent10 = (std::__are_same<_Value, float>::__value ? 38 : std::__are_same<_Value, double>::__value ? 308 : 308);
    };

  template<typename _Value>
    const int __numeric_traits_floating<_Value>::__max_digits10;

  template<typename _Value>
    const bool __numeric_traits_floating<_Value>::__is_signed;

  template<typename _Value>
    const int __numeric_traits_floating<_Value>::__digits10;

  template<typename _Value>
    const int __numeric_traits_floating<_Value>::__max_exponent10;

  template<typename _Value>
    struct __numeric_traits
    : public __conditional_type<std::__is_integer<_Value>::__value,
    __numeric_traits_integer<_Value>,
    __numeric_traits_floating<_Value> >::__type
    { };


}
# 64 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/stl_algobase.h" 2 3
# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/stl_pair.h" 1 3
# 65 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/stl_pair.h" 3
namespace std
{
# 76 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/stl_pair.h" 3
  struct piecewise_construct_t { explicit piecewise_construct_t() = default; };


                    constexpr piecewise_construct_t piecewise_construct =
    piecewise_construct_t();


  template<typename...>
    class tuple;

  template<std::size_t...>
    struct _Index_tuple;






  template <bool, typename _T1, typename _T2>
    struct _PCC
    {
      template <typename _U1, typename _U2>
      static constexpr bool _ConstructiblePair()
      {
 return __and_<is_constructible<_T1, const _U1&>,
        is_constructible<_T2, const _U2&>>::value;
      }

      template <typename _U1, typename _U2>
      static constexpr bool _ImplicitlyConvertiblePair()
      {
 return __and_<is_convertible<const _U1&, _T1>,
        is_convertible<const _U2&, _T2>>::value;
      }

      template <typename _U1, typename _U2>
      static constexpr bool _MoveConstructiblePair()
      {
 return __and_<is_constructible<_T1, _U1&&>,
        is_constructible<_T2, _U2&&>>::value;
      }

      template <typename _U1, typename _U2>
      static constexpr bool _ImplicitlyMoveConvertiblePair()
      {
 return __and_<is_convertible<_U1&&, _T1>,
        is_convertible<_U2&&, _T2>>::value;
      }

      template <bool __implicit, typename _U1, typename _U2>
      static constexpr bool _CopyMovePair()
      {
 using __do_converts = __and_<is_convertible<const _U1&, _T1>,
      is_convertible<_U2&&, _T2>>;
 using __converts = typename conditional<__implicit,
           __do_converts,
           __not_<__do_converts>>::type;
 return __and_<is_constructible<_T1, const _U1&>,
        is_constructible<_T2, _U2&&>,
        __converts
        >::value;
      }

      template <bool __implicit, typename _U1, typename _U2>
      static constexpr bool _MoveCopyPair()
      {
 using __do_converts = __and_<is_convertible<_U1&&, _T1>,
      is_convertible<const _U2&, _T2>>;
 using __converts = typename conditional<__implicit,
           __do_converts,
           __not_<__do_converts>>::type;
 return __and_<is_constructible<_T1, _U1&&>,
        is_constructible<_T2, const _U2&&>,
        __converts
        >::value;
      }
  };

  template <typename _T1, typename _T2>
    struct _PCC<false, _T1, _T2>
    {
      template <typename _U1, typename _U2>
      static constexpr bool _ConstructiblePair()
      {
 return false;
      }

      template <typename _U1, typename _U2>
      static constexpr bool _ImplicitlyConvertiblePair()
      {
 return false;
      }

      template <typename _U1, typename _U2>
      static constexpr bool _MoveConstructiblePair()
      {
 return false;
      }

      template <typename _U1, typename _U2>
      static constexpr bool _ImplicitlyMoveConvertiblePair()
      {
 return false;
      }
  };




  struct __nonesuch_no_braces : std::__nonesuch {
    explicit __nonesuch_no_braces(const __nonesuch&) = delete;
  };


  template<typename _U1, typename _U2> class __pair_base
  {

    template<typename _T1, typename _T2> friend struct pair;
    __pair_base() = default;
    ~__pair_base() = default;
    __pair_base(const __pair_base&) = default;
    __pair_base& operator=(const __pair_base&) = delete;

  };







  template<typename _T1, typename _T2>
    struct pair
    : private __pair_base<_T1, _T2>
    {
      typedef _T1 first_type;
      typedef _T2 second_type;

      _T1 first;
      _T2 second;






      template <typename _U1 = _T1,
                typename _U2 = _T2,
                typename enable_if<__and_<
                                     __is_implicitly_default_constructible<_U1>,
                                     __is_implicitly_default_constructible<_U2>>
                                   ::value, bool>::type = true>

      constexpr pair()
      : first(), second() { }


      template <typename _U1 = _T1,
                typename _U2 = _T2,
                typename enable_if<__and_<
                       is_default_constructible<_U1>,
                       is_default_constructible<_U2>,
                       __not_<
                         __and_<__is_implicitly_default_constructible<_U1>,
                                __is_implicitly_default_constructible<_U2>>>>
                                   ::value, bool>::type = false>
      explicit constexpr pair()
      : first(), second() { }
# 252 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/stl_pair.h" 3
      using _PCCP = _PCC<true, _T1, _T2>;

      template<typename _U1 = _T1, typename _U2=_T2, typename
        enable_if<_PCCP::template
      _ConstructiblePair<_U1, _U2>()
                  && _PCCP::template
      _ImplicitlyConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
      constexpr pair(const _T1& __a, const _T2& __b)
      : first(__a), second(__b) { }

       template<typename _U1 = _T1, typename _U2=_T2, typename
  enable_if<_PCCP::template
       _ConstructiblePair<_U1, _U2>()
                   && !_PCCP::template
       _ImplicitlyConvertiblePair<_U1, _U2>(),
                         bool>::type=false>
      explicit constexpr pair(const _T1& __a, const _T2& __b)
      : first(__a), second(__b) { }
# 280 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/stl_pair.h" 3
      template <typename _U1, typename _U2>
        using _PCCFP = _PCC<!is_same<_T1, _U1>::value
       || !is_same<_T2, _U2>::value,
       _T1, _T2>;

      template<typename _U1, typename _U2, typename
        enable_if<_PCCFP<_U1, _U2>::template
      _ConstructiblePair<_U1, _U2>()
                  && _PCCFP<_U1, _U2>::template
      _ImplicitlyConvertiblePair<_U1, _U2>(),
     bool>::type=true>
        constexpr pair(const pair<_U1, _U2>& __p)
        : first(__p.first), second(__p.second) { }

      template<typename _U1, typename _U2, typename
        enable_if<_PCCFP<_U1, _U2>::template
      _ConstructiblePair<_U1, _U2>()
    && !_PCCFP<_U1, _U2>::template
      _ImplicitlyConvertiblePair<_U1, _U2>(),
                         bool>::type=false>
 explicit constexpr pair(const pair<_U1, _U2>& __p)
 : first(__p.first), second(__p.second) { }

      constexpr pair(const pair&) = default;
      constexpr pair(pair&&) = default;


      template<typename _U1, typename
        enable_if<_PCCP::template
      _MoveCopyPair<true, _U1, _T2>(),
                         bool>::type=true>
       constexpr pair(_U1&& __x, const _T2& __y)
       : first(std::forward<_U1>(__x)), second(__y) { }

      template<typename _U1, typename
        enable_if<_PCCP::template
      _MoveCopyPair<false, _U1, _T2>(),
                         bool>::type=false>
       explicit constexpr pair(_U1&& __x, const _T2& __y)
       : first(std::forward<_U1>(__x)), second(__y) { }

      template<typename _U2, typename
        enable_if<_PCCP::template
      _CopyMovePair<true, _T1, _U2>(),
                         bool>::type=true>
       constexpr pair(const _T1& __x, _U2&& __y)
       : first(__x), second(std::forward<_U2>(__y)) { }

      template<typename _U2, typename
        enable_if<_PCCP::template
      _CopyMovePair<false, _T1, _U2>(),
                         bool>::type=false>
       explicit pair(const _T1& __x, _U2&& __y)
       : first(__x), second(std::forward<_U2>(__y)) { }

      template<typename _U1, typename _U2, typename
        enable_if<_PCCP::template
      _MoveConstructiblePair<_U1, _U2>()
     && _PCCP::template
      _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
 constexpr pair(_U1&& __x, _U2&& __y)
 : first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }

      template<typename _U1, typename _U2, typename
        enable_if<_PCCP::template
      _MoveConstructiblePair<_U1, _U2>()
     && !_PCCP::template
      _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=false>
 explicit constexpr pair(_U1&& __x, _U2&& __y)
 : first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }


      template<typename _U1, typename _U2, typename
        enable_if<_PCCFP<_U1, _U2>::template
      _MoveConstructiblePair<_U1, _U2>()
     && _PCCFP<_U1, _U2>::template
      _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
 constexpr pair(pair<_U1, _U2>&& __p)
 : first(std::forward<_U1>(__p.first)),
   second(std::forward<_U2>(__p.second)) { }

      template<typename _U1, typename _U2, typename
        enable_if<_PCCFP<_U1, _U2>::template
      _MoveConstructiblePair<_U1, _U2>()
     && !_PCCFP<_U1, _U2>::template
      _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=false>
 explicit constexpr pair(pair<_U1, _U2>&& __p)
 : first(std::forward<_U1>(__p.first)),
   second(std::forward<_U2>(__p.second)) { }

      template<typename... _Args1, typename... _Args2>
        pair(piecewise_construct_t, tuple<_Args1...>, tuple<_Args2...>);

      pair&
      operator=(typename conditional<
  __and_<is_copy_assignable<_T1>,
         is_copy_assignable<_T2>>::value,
  const pair&, const __nonesuch_no_braces&>::type __p)
      {
 first = __p.first;
 second = __p.second;
 return *this;
      }

      pair&
      operator=(typename conditional<
  __and_<is_move_assignable<_T1>,
         is_move_assignable<_T2>>::value,
  pair&&, __nonesuch_no_braces&&>::type __p)
      noexcept(__and_<is_nothrow_move_assignable<_T1>,
        is_nothrow_move_assignable<_T2>>::value)
      {
 first = std::forward<first_type>(__p.first);
 second = std::forward<second_type>(__p.second);
 return *this;
      }

      template<typename _U1, typename _U2>
      typename enable_if<__and_<is_assignable<_T1&, const _U1&>,
    is_assignable<_T2&, const _U2&>>::value,
    pair&>::type
 operator=(const pair<_U1, _U2>& __p)
 {
   first = __p.first;
   second = __p.second;
   return *this;
 }

      template<typename _U1, typename _U2>
      typename enable_if<__and_<is_assignable<_T1&, _U1&&>,
    is_assignable<_T2&, _U2&&>>::value,
    pair&>::type
 operator=(pair<_U1, _U2>&& __p)
 {
   first = std::forward<_U1>(__p.first);
   second = std::forward<_U2>(__p.second);
   return *this;
 }

      void
      swap(pair& __p)
      noexcept(__and_<__is_nothrow_swappable<_T1>,
                      __is_nothrow_swappable<_T2>>::value)
      {
 using std::swap;
 swap(first, __p.first);
 swap(second, __p.second);
      }

    private:
      template<typename... _Args1, std::size_t... _Indexes1,
               typename... _Args2, std::size_t... _Indexes2>
        pair(tuple<_Args1...>&, tuple<_Args2...>&,
             _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>);

    };






  template<typename _T1, typename _T2>
    inline constexpr bool
    operator==(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __x.first == __y.first && __x.second == __y.second; }


  template<typename _T1, typename _T2>
    inline constexpr bool
    operator<(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __x.first < __y.first
      || (!(__y.first < __x.first) && __x.second < __y.second); }


  template<typename _T1, typename _T2>
    inline constexpr bool
    operator!=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__x == __y); }


  template<typename _T1, typename _T2>
    inline constexpr bool
    operator>(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __y < __x; }


  template<typename _T1, typename _T2>
    inline constexpr bool
    operator<=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__y < __x); }


  template<typename _T1, typename _T2>
    inline constexpr bool
    operator>=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__x < __y); }





  template<typename _T1, typename _T2>
    inline


    typename enable_if<__and_<__is_swappable<_T1>,
                              __is_swappable<_T2>>::value>::type



    swap(pair<_T1, _T2>& __x, pair<_T1, _T2>& __y)
    noexcept(noexcept(__x.swap(__y)))
    { __x.swap(__y); }


  template<typename _T1, typename _T2>
    typename enable_if<!__and_<__is_swappable<_T1>,
          __is_swappable<_T2>>::value>::type
    swap(pair<_T1, _T2>&, pair<_T1, _T2>&) = delete;
# 521 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/stl_pair.h" 3
  template<typename _T1, typename _T2>
    constexpr pair<typename __decay_and_strip<_T1>::__type,
                   typename __decay_and_strip<_T2>::__type>
    make_pair(_T1&& __x, _T2&& __y)
    {
      typedef typename __decay_and_strip<_T1>::__type __ds_type1;
      typedef typename __decay_and_strip<_T2>::__type __ds_type2;
      typedef pair<__ds_type1, __ds_type2> __pair_type;
      return __pair_type(std::forward<_T1>(__x), std::forward<_T2>(__y));
    }
# 541 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/stl_pair.h" 3
}
# 65 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/stl_algobase.h" 2 3
# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/stl_iterator_base_types.h" 1 3
# 63 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/stl_iterator_base_types.h" 3







namespace std
{
# 89 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/stl_iterator_base_types.h" 3
  struct input_iterator_tag { };


  struct output_iterator_tag { };


  struct forward_iterator_tag : public input_iterator_tag { };



  struct bidirectional_iterator_tag : public forward_iterator_tag { };



  struct random_access_iterator_tag : public bidirectional_iterator_tag { };
# 116 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/stl_iterator_base_types.h" 3
  template<typename _Category, typename _Tp, typename _Distance = ptrdiff_t,
           typename _Pointer = _Tp*, typename _Reference = _Tp&>
    struct iterator
    {

      typedef _Category iterator_category;

      typedef _Tp value_type;

      typedef _Distance difference_type;

      typedef _Pointer pointer;

      typedef _Reference reference;
    };
# 143 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/stl_iterator_base_types.h" 3
  template<typename _Iterator, typename = __void_t<>>
    struct __iterator_traits { };

  template<typename _Iterator>
    struct __iterator_traits<_Iterator,
        __void_t<typename _Iterator::iterator_category,
          typename _Iterator::value_type,
          typename _Iterator::difference_type,
          typename _Iterator::pointer,
          typename _Iterator::reference>>
    {
      typedef typename _Iterator::iterator_category iterator_category;
      typedef typename _Iterator::value_type value_type;
      typedef typename _Iterator::difference_type difference_type;
      typedef typename _Iterator::pointer pointer;
      typedef typename _Iterator::reference reference;
    };

  template<typename _Iterator>
    struct iterator_traits
    : public __iterator_traits<_Iterator> { };
# 177 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/stl_iterator_base_types.h" 3
  template<typename _Tp>
    struct iterator_traits<_Tp*>
    {
      typedef random_access_iterator_tag iterator_category;
      typedef _Tp value_type;
      typedef ptrdiff_t difference_type;
      typedef _Tp* pointer;
      typedef _Tp& reference;
    };


  template<typename _Tp>
    struct iterator_traits<const _Tp*>
    {
      typedef random_access_iterator_tag iterator_category;
      typedef _Tp value_type;
      typedef ptrdiff_t difference_type;
      typedef const _Tp* pointer;
      typedef const _Tp& reference;
    };





  template<typename _Iter>
    inline constexpr
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
    { return typename iterator_traits<_Iter>::iterator_category(); }
# 231 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/stl_iterator_base_types.h" 3
  template<typename _InIter>
    using _RequireInputIter = typename
      enable_if<is_convertible<typename
  iterator_traits<_InIter>::iterator_category,
          input_iterator_tag>::value>::type;



}
# 66 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/stl_algobase.h" 2 3
# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/stl_iterator_base_funcs.h" 1 3
# 63 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/stl_iterator_base_funcs.h" 3


# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\debug/assertions.h" 1 3
# 66 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/stl_iterator_base_funcs.h" 2 3

namespace std
{




  template <typename> struct _List_iterator;
  template <typename> struct _List_const_iterator;


  template<typename _InputIterator>
    inline constexpr
    typename iterator_traits<_InputIterator>::difference_type
    __distance(_InputIterator __first, _InputIterator __last,
               input_iterator_tag)
    {



      typename iterator_traits<_InputIterator>::difference_type __n = 0;
      while (__first != __last)
 {
   ++__first;
   ++__n;
 }
      return __n;
    }

  template<typename _RandomAccessIterator>
    inline constexpr
    typename iterator_traits<_RandomAccessIterator>::difference_type
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
               random_access_iterator_tag)
    {



      return __last - __first;
    }



  template<typename _Tp>
    ptrdiff_t
    __distance(std::_List_iterator<_Tp>,
        std::_List_iterator<_Tp>,
        input_iterator_tag);

  template<typename _Tp>
    ptrdiff_t
    __distance(std::_List_const_iterator<_Tp>,
        std::_List_const_iterator<_Tp>,
        input_iterator_tag);
# 135 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/stl_iterator_base_funcs.h" 3
  template<typename _InputIterator>
    inline
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
    {

      return std::__distance(__first, __last,
        std::__iterator_category(__first));
    }

  template<typename _InputIterator, typename _Distance>
    inline constexpr void
    __advance(_InputIterator& __i, _Distance __n, input_iterator_tag)
    {


                                ;
      while (__n--)
 ++__i;
    }

  template<typename _BidirectionalIterator, typename _Distance>
    inline constexpr void
    __advance(_BidirectionalIterator& __i, _Distance __n,
       bidirectional_iterator_tag)
    {



      if (__n > 0)
        while (__n--)
   ++__i;
      else
        while (__n++)
   --__i;
    }

  template<typename _RandomAccessIterator, typename _Distance>
    inline constexpr void
    __advance(_RandomAccessIterator& __i, _Distance __n,
              random_access_iterator_tag)
    {



      if (__builtin_constant_p(__n) && __n == 1)
 ++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
 --__i;
      else
 __i += __n;
    }
# 200 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/stl_iterator_base_funcs.h" 3
  template<typename _InputIterator, typename _Distance>
    inline void
    advance(_InputIterator& __i, _Distance __n)
    {

      typename iterator_traits<_InputIterator>::difference_type __d = __n;
      std::__advance(__i, __d, std::__iterator_category(__i));
    }



  template<typename _InputIterator>
    inline _InputIterator
    next(_InputIterator __x, typename
  iterator_traits<_InputIterator>::difference_type __n = 1)
    {


      std::advance(__x, __n);
      return __x;
    }

  template<typename _BidirectionalIterator>
    inline _BidirectionalIterator
    prev(_BidirectionalIterator __x, typename
  iterator_traits<_BidirectionalIterator>::difference_type __n = 1)
    {



      std::advance(__x, -__n);
      return __x;
    }




}
# 67 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/stl_algobase.h" 2 3
# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/stl_iterator.h" 1 3
# 66 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/stl_iterator.h" 3
# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/ptr_traits.h" 1 3
# 37 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/ptr_traits.h" 3
namespace std
{


  class __undefined;


  template<typename _Tp>
    struct __get_first_arg
    { using type = __undefined; };

  template<template<typename, typename...> class _Template, typename _Tp,
           typename... _Types>
    struct __get_first_arg<_Template<_Tp, _Types...>>
    { using type = _Tp; };

  template<typename _Tp>
    using __get_first_arg_t = typename __get_first_arg<_Tp>::type;


  template<typename _Tp, typename _Up>
    struct __replace_first_arg
    { };

  template<template<typename, typename...> class _Template, typename _Up,
           typename _Tp, typename... _Types>
    struct __replace_first_arg<_Template<_Tp, _Types...>, _Up>
    { using type = _Template<_Up, _Types...>; };

  template<typename _Tp, typename _Up>
    using __replace_first_arg_t = typename __replace_first_arg<_Tp, _Up>::type;

  template<typename _Tp>
    using __make_not_void
      = typename conditional<is_void<_Tp>::value, __undefined, _Tp>::type;





  template<typename _Ptr>
    struct pointer_traits
    {
    private:
      template<typename _Tp>
 using __element_type = typename _Tp::element_type;

      template<typename _Tp>
 using __difference_type = typename _Tp::difference_type;

      template<typename _Tp, typename _Up, typename = void>
 struct __rebind : __replace_first_arg<_Tp, _Up> { };

      template<typename _Tp, typename _Up>
 struct __rebind<_Tp, _Up, __void_t<typename _Tp::template rebind<_Up>>>
 { using type = typename _Tp::template rebind<_Up>; };

    public:

      using pointer = _Ptr;


      using element_type
 = __detected_or_t<__get_first_arg_t<_Ptr>, __element_type, _Ptr>;


      using difference_type
 = __detected_or_t<ptrdiff_t, __difference_type, _Ptr>;


      template<typename _Up>
        using rebind = typename __rebind<_Ptr, _Up>::type;

      static _Ptr
      pointer_to(__make_not_void<element_type>& __e)
      { return _Ptr::pointer_to(__e); }

      static_assert(!is_same<element_type, __undefined>::value,
   "pointer type defines element_type or is like SomePointer<T, Args>");
    };





  template<typename _Tp>
    struct pointer_traits<_Tp*>
    {

      typedef _Tp* pointer;

      typedef _Tp element_type;

      typedef ptrdiff_t difference_type;

      template<typename _Up>
        using rebind = _Up*;






      static pointer
      pointer_to(__make_not_void<element_type>& __r) noexcept
      { return std::addressof(__r); }
    };


  template<typename _Ptr, typename _Tp>
    using __ptr_rebind = typename pointer_traits<_Ptr>::template rebind<_Tp>;

  template<typename _Tp>
    constexpr _Tp*
    __to_address(_Tp* __ptr) noexcept
    {
      static_assert(!std::is_function<_Tp>::value, "not a function pointer");
      return __ptr;
    }


  template<typename _Ptr>
    constexpr typename std::pointer_traits<_Ptr>::element_type*
    __to_address(const _Ptr& __ptr)
    { return std::__to_address(__ptr.operator->()); }
# 199 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/ptr_traits.h" 3
}
# 67 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/stl_iterator.h" 2 3





namespace std
{
# 100 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/stl_iterator.h" 3
  template<typename _Iterator>
    class reverse_iterator
    : public iterator<typename iterator_traits<_Iterator>::iterator_category,
        typename iterator_traits<_Iterator>::value_type,
        typename iterator_traits<_Iterator>::difference_type,
        typename iterator_traits<_Iterator>::pointer,
                      typename iterator_traits<_Iterator>::reference>
    {
    protected:
      _Iterator current;

      typedef iterator_traits<_Iterator> __traits_type;

    public:
      typedef _Iterator iterator_type;
      typedef typename __traits_type::difference_type difference_type;
      typedef typename __traits_type::pointer pointer;
      typedef typename __traits_type::reference reference;
# 127 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/stl_iterator.h" 3
      reverse_iterator() : current() { }




      explicit
      reverse_iterator(iterator_type __x) : current(__x) { }





      reverse_iterator(const reverse_iterator& __x)
      : current(__x.current) { }





      template<typename _Iter>

        reverse_iterator(const reverse_iterator<_Iter>& __x)
 : current(__x.base()) { }




                           iterator_type
      base() const
      { return current; }
# 168 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/stl_iterator.h" 3
                           reference
      operator*() const
      {
 _Iterator __tmp = current;
 return *--__tmp;
      }
# 182 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/stl_iterator.h" 3
                           pointer
      operator->() const
      { return std::__addressof(operator*()); }






                           reverse_iterator&
      operator++()
      {
 --current;
 return *this;
      }






                           reverse_iterator
      operator++(int)
      {
 reverse_iterator __tmp = *this;
 --current;
 return __tmp;
      }






                           reverse_iterator&
      operator--()
      {
 ++current;
 return *this;
      }






                           reverse_iterator
      operator--(int)
      {
 reverse_iterator __tmp = *this;
 ++current;
 return __tmp;
      }






                           reverse_iterator
      operator+(difference_type __n) const
      { return reverse_iterator(current - __n); }







                           reverse_iterator&
      operator+=(difference_type __n)
      {
 current -= __n;
 return *this;
      }






                           reverse_iterator
      operator-(difference_type __n) const
      { return reverse_iterator(current + __n); }







                           reverse_iterator&
      operator-=(difference_type __n)
      {
 current += __n;
 return *this;
      }






                           reference
      operator[](difference_type __n) const
      { return *(*this + __n); }
    };
# 300 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/stl_iterator.h" 3
  template<typename _Iterator>
    inline bool
    operator==(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return __x.base() == __y.base(); }

  template<typename _Iterator>
    inline bool
    operator<(const reverse_iterator<_Iterator>& __x,
       const reverse_iterator<_Iterator>& __y)
    { return __y.base() < __x.base(); }

  template<typename _Iterator>
    inline bool
    operator!=(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return !(__x == __y); }

  template<typename _Iterator>
    inline bool
    operator>(const reverse_iterator<_Iterator>& __x,
       const reverse_iterator<_Iterator>& __y)
    { return __y < __x; }

  template<typename _Iterator>
    inline bool
    operator<=(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return !(__y < __x); }

  template<typename _Iterator>
    inline bool
    operator>=(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return !(__x < __y); }



  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator==(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return __x.base() == __y.base(); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator<(const reverse_iterator<_IteratorL>& __x,
       const reverse_iterator<_IteratorR>& __y)
    { return __y.base() < __x.base(); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator!=(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return !(__x == __y); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator>(const reverse_iterator<_IteratorL>& __x,
       const reverse_iterator<_IteratorR>& __y)
    { return __y < __x; }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator<=(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return !(__y < __x); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator>=(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return !(__x < __y); }
# 390 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/stl_iterator.h" 3
  template<typename _IteratorL, typename _IteratorR>
    inline auto
    operator-(const reverse_iterator<_IteratorL>& __x,
       const reverse_iterator<_IteratorR>& __y)
    -> decltype(__y.base() - __x.base())
    { return __y.base() - __x.base(); }


  template<typename _Iterator>
    inline reverse_iterator<_Iterator>
    operator+(typename reverse_iterator<_Iterator>::difference_type __n,
       const reverse_iterator<_Iterator>& __x)
    { return reverse_iterator<_Iterator>(__x.base() - __n); }



  template<typename _Iterator>
    inline reverse_iterator<_Iterator>
    __make_reverse_iterator(_Iterator __i)
    { return reverse_iterator<_Iterator>(__i); }







  template<typename _Iterator>
    inline reverse_iterator<_Iterator>
    make_reverse_iterator(_Iterator __i)
    { return reverse_iterator<_Iterator>(__i); }




  template<typename _Iterator>
    auto
    __niter_base(reverse_iterator<_Iterator> __it)
    -> decltype(__make_reverse_iterator(__niter_base(__it.base())))
    { return __make_reverse_iterator(__niter_base(__it.base())); }

  template<typename _Iterator>
    struct __is_move_iterator<reverse_iterator<_Iterator> >
      : __is_move_iterator<_Iterator>
    { };

  template<typename _Iterator>
    auto
    __miter_base(reverse_iterator<_Iterator> __it)
    -> decltype(__make_reverse_iterator(__miter_base(__it.base())))
    { return __make_reverse_iterator(__miter_base(__it.base())); }
# 454 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/stl_iterator.h" 3
  template<typename _Container>
    class back_insert_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _Container* container;

    public:

      typedef _Container container_type;


      explicit
      back_insert_iterator(_Container& __x)
      : container(std::__addressof(__x)) { }
# 489 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/stl_iterator.h" 3
      back_insert_iterator&
      operator=(const typename _Container::value_type& __value)
      {
 container->push_back(__value);
 return *this;
      }

      back_insert_iterator&
      operator=(typename _Container::value_type&& __value)
      {
 container->push_back(std::move(__value));
 return *this;
      }



      back_insert_iterator&
      operator*()
      { return *this; }


      back_insert_iterator&
      operator++()
      { return *this; }


      back_insert_iterator
      operator++(int)
      { return *this; }
    };
# 531 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/stl_iterator.h" 3
  template<typename _Container>
    inline back_insert_iterator<_Container>
    back_inserter(_Container& __x)
    { return back_insert_iterator<_Container>(__x); }
# 546 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/stl_iterator.h" 3
  template<typename _Container>
    class front_insert_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _Container* container;

    public:

      typedef _Container container_type;


      explicit front_insert_iterator(_Container& __x)
      : container(std::__addressof(__x)) { }
# 580 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/stl_iterator.h" 3
      front_insert_iterator&
      operator=(const typename _Container::value_type& __value)
      {
 container->push_front(__value);
 return *this;
      }

      front_insert_iterator&
      operator=(typename _Container::value_type&& __value)
      {
 container->push_front(std::move(__value));
 return *this;
      }



      front_insert_iterator&
      operator*()
      { return *this; }


      front_insert_iterator&
      operator++()
      { return *this; }


      front_insert_iterator
      operator++(int)
      { return *this; }
    };
# 622 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/stl_iterator.h" 3
  template<typename _Container>
    inline front_insert_iterator<_Container>
    front_inserter(_Container& __x)
    { return front_insert_iterator<_Container>(__x); }
# 641 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/stl_iterator.h" 3
  template<typename _Container>
    class insert_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _Container* container;
      typename _Container::iterator iter;

    public:

      typedef _Container container_type;





      insert_iterator(_Container& __x, typename _Container::iterator __i)
      : container(std::__addressof(__x)), iter(__i) {}
# 692 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/stl_iterator.h" 3
      insert_iterator&
      operator=(const typename _Container::value_type& __value)
      {
 iter = container->insert(iter, __value);
 ++iter;
 return *this;
      }

      insert_iterator&
      operator=(typename _Container::value_type&& __value)
      {
 iter = container->insert(iter, std::move(__value));
 ++iter;
 return *this;
      }



      insert_iterator&
      operator*()
      { return *this; }


      insert_iterator&
      operator++()
      { return *this; }


      insert_iterator&
      operator++(int)
      { return *this; }
    };
# 737 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/stl_iterator.h" 3
  template<typename _Container, typename _Iterator>
    inline insert_iterator<_Container>
    inserter(_Container& __x, _Iterator __i)
    {
      return insert_iterator<_Container>(__x,
      typename _Container::iterator(__i));
    }




}

namespace __gnu_cxx
{
# 761 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/stl_iterator.h" 3
  using std::iterator_traits;
  using std::iterator;
  template<typename _Iterator, typename _Container>
    class __normal_iterator
    {
    protected:
      _Iterator _M_current;

      typedef iterator_traits<_Iterator> __traits_type;

    public:
      typedef _Iterator iterator_type;
      typedef typename __traits_type::iterator_category iterator_category;
      typedef typename __traits_type::value_type value_type;
      typedef typename __traits_type::difference_type difference_type;
      typedef typename __traits_type::reference reference;
      typedef typename __traits_type::pointer pointer;

      constexpr __normal_iterator() noexcept
      : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) noexcept
      : _M_current(__i) { }


      template<typename _Iter>
        __normal_iterator(const __normal_iterator<_Iter,
     typename __enable_if<
              (std::__are_same<_Iter, typename _Container::pointer>::__value),
        _Container>::__type>& __i) noexcept
        : _M_current(__i.base()) { }


      reference
      operator*() const noexcept
      { return *_M_current; }

      pointer
      operator->() const noexcept
      { return _M_current; }

      __normal_iterator&
      operator++() noexcept
      {
 ++_M_current;
 return *this;
      }

      __normal_iterator
      operator++(int) noexcept
      { return __normal_iterator(_M_current++); }


      __normal_iterator&
      operator--() noexcept
      {
 --_M_current;
 return *this;
      }

      __normal_iterator
      operator--(int) noexcept
      { return __normal_iterator(_M_current--); }


      reference
      operator[](difference_type __n) const noexcept
      { return _M_current[__n]; }

      __normal_iterator&
      operator+=(difference_type __n) noexcept
      { _M_current += __n; return *this; }

      __normal_iterator
      operator+(difference_type __n) const noexcept
      { return __normal_iterator(_M_current + __n); }

      __normal_iterator&
      operator-=(difference_type __n) noexcept
      { _M_current -= __n; return *this; }

      __normal_iterator
      operator-(difference_type __n) const noexcept
      { return __normal_iterator(_M_current - __n); }

      const _Iterator&
      base() const noexcept
      { return _M_current; }
    };
# 861 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/stl_iterator.h" 3
  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept
    { return __lhs.base() == __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() == __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() != __rhs.base(); }


  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator<(const __normal_iterator<_IteratorL, _Container>& __lhs,
       const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept
    { return __lhs.base() < __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator<(const __normal_iterator<_Iterator, _Container>& __lhs,
       const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() < __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator>(const __normal_iterator<_IteratorL, _Container>& __lhs,
       const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept
    { return __lhs.base() > __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator>(const __normal_iterator<_Iterator, _Container>& __lhs,
       const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() > __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator<=(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept
    { return __lhs.base() <= __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator<=(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() <= __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator>=(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept
    { return __lhs.base() >= __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator>=(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() >= __rhs.base(); }





  template<typename _IteratorL, typename _IteratorR, typename _Container>


    inline auto
    operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,
       const __normal_iterator<_IteratorR, _Container>& __rhs) noexcept
    -> decltype(__lhs.base() - __rhs.base())





    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
       const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline __normal_iterator<_Iterator, _Container>
    operator+(typename __normal_iterator<_Iterator, _Container>::difference_type
       __n, const __normal_iterator<_Iterator, _Container>& __i)
    noexcept
    { return __normal_iterator<_Iterator, _Container>(__i.base() + __n); }


}

namespace std
{


  template<typename _Iterator, typename _Container>
    _Iterator
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
    { return __it.base(); }
# 1006 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/stl_iterator.h" 3
  template<typename _Iterator>
    class move_iterator
    {
    protected:
      _Iterator _M_current;

      typedef iterator_traits<_Iterator> __traits_type;
      typedef typename __traits_type::reference __base_ref;

    public:
      typedef _Iterator iterator_type;
      typedef typename __traits_type::iterator_category iterator_category;
      typedef typename __traits_type::value_type value_type;
      typedef typename __traits_type::difference_type difference_type;

      typedef _Iterator pointer;


      typedef typename conditional<is_reference<__base_ref>::value,
    typename remove_reference<__base_ref>::type&&,
    __base_ref>::type reference;


      move_iterator()
      : _M_current() { }

      explicit
      move_iterator(iterator_type __i)
      : _M_current(__i) { }

      template<typename _Iter>

 move_iterator(const move_iterator<_Iter>& __i)
 : _M_current(__i.base()) { }

                           iterator_type
      base() const
      { return _M_current; }

                           reference
      operator*() const
      { return static_cast<reference>(*_M_current); }

                           pointer
      operator->() const
      { return _M_current; }

                           move_iterator&
      operator++()
      {
 ++_M_current;
 return *this;
      }

                           move_iterator
      operator++(int)
      {
 move_iterator __tmp = *this;
 ++_M_current;
 return __tmp;
      }

                           move_iterator&
      operator--()
      {
 --_M_current;
 return *this;
      }

                           move_iterator
      operator--(int)
      {
 move_iterator __tmp = *this;
 --_M_current;
 return __tmp;
      }

                           move_iterator
      operator+(difference_type __n) const
      { return move_iterator(_M_current + __n); }

                           move_iterator&
      operator+=(difference_type __n)
      {
 _M_current += __n;
 return *this;
      }

                           move_iterator
      operator-(difference_type __n) const
      { return move_iterator(_M_current - __n); }

                           move_iterator&
      operator-=(difference_type __n)
      {
 _M_current -= __n;
 return *this;
      }

                           reference
      operator[](difference_type __n) const
      { return std::move(_M_current[__n]); }
    };




  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator==(const move_iterator<_IteratorL>& __x,
        const move_iterator<_IteratorR>& __y)
    { return __x.base() == __y.base(); }

  template<typename _Iterator>
    inline bool
    operator==(const move_iterator<_Iterator>& __x,
        const move_iterator<_Iterator>& __y)
    { return __x.base() == __y.base(); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator!=(const move_iterator<_IteratorL>& __x,
        const move_iterator<_IteratorR>& __y)
    { return !(__x == __y); }

  template<typename _Iterator>
    inline bool
    operator!=(const move_iterator<_Iterator>& __x,
        const move_iterator<_Iterator>& __y)
    { return !(__x == __y); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator<(const move_iterator<_IteratorL>& __x,
       const move_iterator<_IteratorR>& __y)
    { return __x.base() < __y.base(); }

  template<typename _Iterator>
    inline bool
    operator<(const move_iterator<_Iterator>& __x,
       const move_iterator<_Iterator>& __y)
    { return __x.base() < __y.base(); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator<=(const move_iterator<_IteratorL>& __x,
        const move_iterator<_IteratorR>& __y)
    { return !(__y < __x); }

  template<typename _Iterator>
    inline bool
    operator<=(const move_iterator<_Iterator>& __x,
        const move_iterator<_Iterator>& __y)
    { return !(__y < __x); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator>(const move_iterator<_IteratorL>& __x,
       const move_iterator<_IteratorR>& __y)
    { return __y < __x; }

  template<typename _Iterator>
    inline bool
    operator>(const move_iterator<_Iterator>& __x,
       const move_iterator<_Iterator>& __y)
    { return __y < __x; }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator>=(const move_iterator<_IteratorL>& __x,
        const move_iterator<_IteratorR>& __y)
    { return !(__x < __y); }

  template<typename _Iterator>
    inline bool
    operator>=(const move_iterator<_Iterator>& __x,
        const move_iterator<_Iterator>& __y)
    { return !(__x < __y); }


  template<typename _IteratorL, typename _IteratorR>
    inline auto
    operator-(const move_iterator<_IteratorL>& __x,
       const move_iterator<_IteratorR>& __y)
    -> decltype(__x.base() - __y.base())
    { return __x.base() - __y.base(); }

  template<typename _Iterator>
    inline move_iterator<_Iterator>
    operator+(typename move_iterator<_Iterator>::difference_type __n,
       const move_iterator<_Iterator>& __x)
    { return __x + __n; }

  template<typename _Iterator>
    inline move_iterator<_Iterator>
    make_move_iterator(_Iterator __i)
    { return move_iterator<_Iterator>(__i); }

  template<typename _Iterator, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond
      <typename iterator_traits<_Iterator>::value_type>::value,
                _Iterator, move_iterator<_Iterator>>::type>
    inline _ReturnType
    __make_move_if_noexcept_iterator(_Iterator __i)
    { return _ReturnType(__i); }



  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
      const _Tp*, move_iterator<_Tp*>>::type>
    inline _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
    { return _ReturnType(__i); }



  template<typename _Iterator>
    auto
    __niter_base(move_iterator<_Iterator> __it)
    -> decltype(make_move_iterator(__niter_base(__it.base())))
    { return make_move_iterator(__niter_base(__it.base())); }

  template<typename _Iterator>
    struct __is_move_iterator<move_iterator<_Iterator> >
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
# 1272 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/stl_iterator.h" 3
}
# 68 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/stl_algobase.h" 2 3

# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\debug/debug.h" 1 3
# 48 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\debug/debug.h" 3
namespace std
{
  namespace __debug { }
}




namespace __gnu_debug
{
  using namespace std::__debug;
}
# 70 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/stl_algobase.h" 2 3

# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/predefined_ops.h" 1 3
# 33 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/predefined_ops.h" 3
namespace __gnu_cxx
{
namespace __ops
{
  struct _Iter_less_iter
  {
    template<typename _Iterator1, typename _Iterator2>
      constexpr
      bool
      operator()(_Iterator1 __it1, _Iterator2 __it2) const
      { return *__it1 < *__it2; }
  };

  constexpr
  inline _Iter_less_iter
  __iter_less_iter()
  { return _Iter_less_iter(); }

  struct _Iter_less_val
  {

    constexpr _Iter_less_val() = default;




    explicit
    _Iter_less_val(_Iter_less_iter) { }

    template<typename _Iterator, typename _Value>
      bool
      operator()(_Iterator __it, _Value& __val) const
      { return *__it < __val; }
  };

  inline _Iter_less_val
  __iter_less_val()
  { return _Iter_less_val(); }

  inline _Iter_less_val
  __iter_comp_val(_Iter_less_iter)
  { return _Iter_less_val(); }

  struct _Val_less_iter
  {

    constexpr _Val_less_iter() = default;




    explicit
    _Val_less_iter(_Iter_less_iter) { }

    template<typename _Value, typename _Iterator>
      bool
      operator()(_Value& __val, _Iterator __it) const
      { return __val < *__it; }
  };

  inline _Val_less_iter
  __val_less_iter()
  { return _Val_less_iter(); }

  inline _Val_less_iter
  __val_comp_iter(_Iter_less_iter)
  { return _Val_less_iter(); }

  struct _Iter_equal_to_iter
  {
    template<typename _Iterator1, typename _Iterator2>
      bool
      operator()(_Iterator1 __it1, _Iterator2 __it2) const
      { return *__it1 == *__it2; }
  };

  inline _Iter_equal_to_iter
  __iter_equal_to_iter()
  { return _Iter_equal_to_iter(); }

  struct _Iter_equal_to_val
  {
    template<typename _Iterator, typename _Value>
      bool
      operator()(_Iterator __it, _Value& __val) const
      { return *__it == __val; }
  };

  inline _Iter_equal_to_val
  __iter_equal_to_val()
  { return _Iter_equal_to_val(); }

  inline _Iter_equal_to_val
  __iter_comp_val(_Iter_equal_to_iter)
  { return _Iter_equal_to_val(); }

  template<typename _Compare>
    struct _Iter_comp_iter
    {
      _Compare _M_comp;

      explicit constexpr
      _Iter_comp_iter(_Compare __comp)
 : _M_comp(std::move(__comp))
      { }

      template<typename _Iterator1, typename _Iterator2>
        constexpr
        bool
        operator()(_Iterator1 __it1, _Iterator2 __it2)
        { return bool(_M_comp(*__it1, *__it2)); }
    };

  template<typename _Compare>
    constexpr
    inline _Iter_comp_iter<_Compare>
    __iter_comp_iter(_Compare __comp)
    { return _Iter_comp_iter<_Compare>(std::move(__comp)); }

  template<typename _Compare>
    struct _Iter_comp_val
    {
      _Compare _M_comp;

      explicit
      _Iter_comp_val(_Compare __comp)
 : _M_comp(std::move(__comp))
      { }

      explicit
      _Iter_comp_val(const _Iter_comp_iter<_Compare>& __comp)
 : _M_comp(__comp._M_comp)
      { }


      explicit
      _Iter_comp_val(_Iter_comp_iter<_Compare>&& __comp)
 : _M_comp(std::move(__comp._M_comp))
      { }


      template<typename _Iterator, typename _Value>
 bool
 operator()(_Iterator __it, _Value& __val)
 { return bool(_M_comp(*__it, __val)); }
    };

  template<typename _Compare>
   inline _Iter_comp_val<_Compare>
    __iter_comp_val(_Compare __comp)
    { return _Iter_comp_val<_Compare>(std::move(__comp)); }

  template<typename _Compare>
    inline _Iter_comp_val<_Compare>
    __iter_comp_val(_Iter_comp_iter<_Compare> __comp)
    { return _Iter_comp_val<_Compare>(std::move(__comp)); }

  template<typename _Compare>
    struct _Val_comp_iter
    {
      _Compare _M_comp;

      explicit
      _Val_comp_iter(_Compare __comp)
 : _M_comp(std::move(__comp))
      { }

      explicit
      _Val_comp_iter(const _Iter_comp_iter<_Compare>& __comp)
 : _M_comp(__comp._M_comp)
      { }


      explicit
      _Val_comp_iter(_Iter_comp_iter<_Compare>&& __comp)
 : _M_comp(std::move(__comp._M_comp))
      { }


      template<typename _Value, typename _Iterator>
 bool
 operator()(_Value& __val, _Iterator __it)
 { return bool(_M_comp(__val, *__it)); }
    };

  template<typename _Compare>
    inline _Val_comp_iter<_Compare>
    __val_comp_iter(_Compare __comp)
    { return _Val_comp_iter<_Compare>(std::move(__comp)); }

  template<typename _Compare>
    inline _Val_comp_iter<_Compare>
    __val_comp_iter(_Iter_comp_iter<_Compare> __comp)
    { return _Val_comp_iter<_Compare>(std::move(__comp)); }

  template<typename _Value>
    struct _Iter_equals_val
    {
      _Value& _M_value;

      explicit
      _Iter_equals_val(_Value& __value)
 : _M_value(__value)
      { }

      template<typename _Iterator>
 bool
 operator()(_Iterator __it)
 { return *__it == _M_value; }
    };

  template<typename _Value>
    inline _Iter_equals_val<_Value>
    __iter_equals_val(_Value& __val)
    { return _Iter_equals_val<_Value>(__val); }

  template<typename _Iterator1>
    struct _Iter_equals_iter
    {
      _Iterator1 _M_it1;

      explicit
      _Iter_equals_iter(_Iterator1 __it1)
 : _M_it1(__it1)
      { }

      template<typename _Iterator2>
 bool
 operator()(_Iterator2 __it2)
 { return *__it2 == *_M_it1; }
    };

  template<typename _Iterator>
    inline _Iter_equals_iter<_Iterator>
    __iter_comp_iter(_Iter_equal_to_iter, _Iterator __it)
    { return _Iter_equals_iter<_Iterator>(__it); }

  template<typename _Predicate>
    struct _Iter_pred
    {
      _Predicate _M_pred;

      explicit
      _Iter_pred(_Predicate __pred)
 : _M_pred(std::move(__pred))
      { }

      template<typename _Iterator>
 bool
 operator()(_Iterator __it)
 { return bool(_M_pred(*__it)); }
    };

  template<typename _Predicate>
    inline _Iter_pred<_Predicate>
    __pred_iter(_Predicate __pred)
    { return _Iter_pred<_Predicate>(std::move(__pred)); }

  template<typename _Compare, typename _Value>
    struct _Iter_comp_to_val
    {
      _Compare _M_comp;
      _Value& _M_value;

      _Iter_comp_to_val(_Compare __comp, _Value& __value)
 : _M_comp(std::move(__comp)), _M_value(__value)
      { }

      template<typename _Iterator>
 bool
 operator()(_Iterator __it)
 { return bool(_M_comp(*__it, _M_value)); }
    };

  template<typename _Compare, typename _Value>
    _Iter_comp_to_val<_Compare, _Value>
    __iter_comp_val(_Compare __comp, _Value &__val)
    {
      return _Iter_comp_to_val<_Compare, _Value>(std::move(__comp), __val);
    }

  template<typename _Compare, typename _Iterator1>
    struct _Iter_comp_to_iter
    {
      _Compare _M_comp;
      _Iterator1 _M_it1;

      _Iter_comp_to_iter(_Compare __comp, _Iterator1 __it1)
 : _M_comp(std::move(__comp)), _M_it1(__it1)
      { }

      template<typename _Iterator2>
 bool
 operator()(_Iterator2 __it2)
 { return bool(_M_comp(*__it2, *_M_it1)); }
    };

  template<typename _Compare, typename _Iterator>
    inline _Iter_comp_to_iter<_Compare, _Iterator>
    __iter_comp_iter(_Iter_comp_iter<_Compare> __comp, _Iterator __it)
    {
      return _Iter_comp_to_iter<_Compare, _Iterator>(
   std::move(__comp._M_comp), __it);
    }

  template<typename _Predicate>
    struct _Iter_negate
    {
      _Predicate _M_pred;

      explicit
      _Iter_negate(_Predicate __pred)
 : _M_pred(std::move(__pred))
      { }

      template<typename _Iterator>
 bool
 operator()(_Iterator __it)
 { return !bool(_M_pred(*__it)); }
    };

  template<typename _Predicate>
    inline _Iter_negate<_Predicate>
    __negate(_Iter_pred<_Predicate> __pred)
    { return _Iter_negate<_Predicate>(std::move(__pred._M_pred)); }

}
}
# 72 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/stl_algobase.h" 2 3

namespace std
{
# 118 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/stl_algobase.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
    inline void
    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
    {
# 148 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/stl_algobase.h" 3
      swap(*__a, *__b);

    }
# 164 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/stl_algobase.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
    _ForwardIterator2
    swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
  _ForwardIterator2 __first2)
    {





                                                       ;

      for (; __first1 != __last1; ++__first1, (void)++__first2)
 std::iter_swap(__first1, __first2);
      return __first2;
    }
# 192 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/stl_algobase.h" 3
  template<typename _Tp>
    constexpr
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
    {



      if (__b < __a)
 return __b;
      return __a;
    }
# 216 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/stl_algobase.h" 3
  template<typename _Tp>
    constexpr
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
    {



      if (__a < __b)
 return __b;
      return __a;
    }
# 240 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/stl_algobase.h" 3
  template<typename _Tp, typename _Compare>
    constexpr
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b, _Compare __comp)
    {

      if (__comp(__b, __a))
 return __b;
      return __a;
    }
# 262 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/stl_algobase.h" 3
  template<typename _Tp, typename _Compare>
    constexpr
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b, _Compare __comp)
    {

      if (__comp(__a, __b))
 return __b;
      return __a;
    }



  template<typename _Iterator>
    inline _Iterator
    __niter_base(_Iterator __it)
    { return __it; }







  template<bool, bool, typename>
    struct __copy_move
    {
      template<typename _II, typename _OI>
 static _OI
 __copy_m(_II __first, _II __last, _OI __result)
 {
   for (; __first != __last; ++__result, (void)++__first)
     *__result = *__first;
   return __result;
 }
    };


  template<typename _Category>
    struct __copy_move<true, false, _Category>
    {
      template<typename _II, typename _OI>
 static _OI
 __copy_m(_II __first, _II __last, _OI __result)
 {
   for (; __first != __last; ++__result, (void)++__first)
     *__result = std::move(*__first);
   return __result;
 }
    };


  template<>
    struct __copy_move<false, false, random_access_iterator_tag>
    {
      template<typename _II, typename _OI>
 static _OI
 __copy_m(_II __first, _II __last, _OI __result)
 {
   typedef typename iterator_traits<_II>::difference_type _Distance;
   for(_Distance __n = __last - __first; __n > 0; --__n)
     {
       *__result = *__first;
       ++__first;
       ++__result;
     }
   return __result;
 }
    };


  template<>
    struct __copy_move<true, false, random_access_iterator_tag>
    {
      template<typename _II, typename _OI>
 static _OI
 __copy_m(_II __first, _II __last, _OI __result)
 {
   typedef typename iterator_traits<_II>::difference_type _Distance;
   for(_Distance __n = __last - __first; __n > 0; --__n)
     {
       *__result = std::move(*__first);
       ++__first;
       ++__result;
     }
   return __result;
 }
    };


  template<bool _IsMove>
    struct __copy_move<_IsMove, true, random_access_iterator_tag>
    {
      template<typename _Tp>
 static _Tp*
 __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 {

   using __assignable = conditional<_IsMove,
        is_move_assignable<_Tp>,
        is_copy_assignable<_Tp>>;

   static_assert( __assignable::type::value, "type is not assignable" );

   const ptrdiff_t _Num = __last - __first;
   if (_Num)
     __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   return __result + _Num;
 }
    };

  template<bool _IsMove, typename _II, typename _OI>
    inline _OI
    __copy_move_a(_II __first, _II __last, _OI __result)
    {
      typedef typename iterator_traits<_II>::value_type _ValueTypeI;
      typedef typename iterator_traits<_OI>::value_type _ValueTypeO;
      typedef typename iterator_traits<_II>::iterator_category _Category;
      const bool __simple = (__is_trivial(_ValueTypeI)
        && __is_pointer<_II>::__value
        && __is_pointer<_OI>::__value
        && __are_same<_ValueTypeI, _ValueTypeO>::__value);

      return std::__copy_move<_IsMove, __simple,
         _Category>::__copy_m(__first, __last, __result);
    }



  template<typename _CharT>
    struct char_traits;

  template<typename _CharT, typename _Traits>
    class istreambuf_iterator;

  template<typename _CharT, typename _Traits>
    class ostreambuf_iterator;

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
      ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
    __copy_move_a2(_CharT*, _CharT*,
     ostreambuf_iterator<_CharT, char_traits<_CharT> >);

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
      ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
    __copy_move_a2(const _CharT*, const _CharT*,
     ostreambuf_iterator<_CharT, char_traits<_CharT> >);

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
        _CharT*>::__type
    __copy_move_a2(istreambuf_iterator<_CharT, char_traits<_CharT> >,
     istreambuf_iterator<_CharT, char_traits<_CharT> >, _CharT*);

  template<bool _IsMove, typename _II, typename _OI>
    inline _OI
    __copy_move_a2(_II __first, _II __last, _OI __result)
    {
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
          std::__niter_base(__last),
          std::__niter_base(__result)));
    }
# 444 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/stl_algobase.h" 3
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
    {




                                                     ;

      return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
       (std::__miter_base(__first), std::__miter_base(__last),
        __result));
    }
# 477 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/stl_algobase.h" 3
  template<typename _II, typename _OI>
    inline _OI
    move(_II __first, _II __last, _OI __result)
    {




                                                     ;

      return std::__copy_move_a2<true>(std::__miter_base(__first),
           std::__miter_base(__last), __result);
    }






  template<bool, bool, typename>
    struct __copy_move_backward
    {
      template<typename _BI1, typename _BI2>
 static _BI2
 __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 {
   while (__first != __last)
     *--__result = *--__last;
   return __result;
 }
    };


  template<typename _Category>
    struct __copy_move_backward<true, false, _Category>
    {
      template<typename _BI1, typename _BI2>
 static _BI2
 __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 {
   while (__first != __last)
     *--__result = std::move(*--__last);
   return __result;
 }
    };


  template<>
    struct __copy_move_backward<false, false, random_access_iterator_tag>
    {
      template<typename _BI1, typename _BI2>
 static _BI2
 __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 {
   typename iterator_traits<_BI1>::difference_type __n;
   for (__n = __last - __first; __n > 0; --__n)
     *--__result = *--__last;
   return __result;
 }
    };


  template<>
    struct __copy_move_backward<true, false, random_access_iterator_tag>
    {
      template<typename _BI1, typename _BI2>
 static _BI2
 __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 {
   typename iterator_traits<_BI1>::difference_type __n;
   for (__n = __last - __first; __n > 0; --__n)
     *--__result = std::move(*--__last);
   return __result;
 }
    };


  template<bool _IsMove>
    struct __copy_move_backward<_IsMove, true, random_access_iterator_tag>
    {
      template<typename _Tp>
 static _Tp*
 __copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 {

   using __assignable = conditional<_IsMove,
        is_move_assignable<_Tp>,
        is_copy_assignable<_Tp>>;

   static_assert( __assignable::type::value, "type is not assignable" );

   const ptrdiff_t _Num = __last - __first;
   if (_Num)
     __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   return __result - _Num;
 }
    };

  template<bool _IsMove, typename _BI1, typename _BI2>
    inline _BI2
    __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)
    {
      typedef typename iterator_traits<_BI1>::value_type _ValueType1;
      typedef typename iterator_traits<_BI2>::value_type _ValueType2;
      typedef typename iterator_traits<_BI1>::iterator_category _Category;
      const bool __simple = (__is_trivial(_ValueType1)
        && __is_pointer<_BI1>::__value
        && __is_pointer<_BI2>::__value
        && __are_same<_ValueType1, _ValueType2>::__value);

      return std::__copy_move_backward<_IsMove, __simple,
           _Category>::__copy_move_b(__first,
         __last,
         __result);
    }

  template<bool _IsMove, typename _BI1, typename _BI2>
    inline _BI2
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
    {
      return _BI2(std::__copy_move_backward_a<_IsMove>
    (std::__niter_base(__first), std::__niter_base(__last),
     std::__niter_base(__result)));
    }
# 620 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/stl_algobase.h" 3
  template<typename _BI1, typename _BI2>
    inline _BI2
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
    {






                                                     ;

      return (std::__copy_move_backward_a2<__is_move_iterator<_BI1>::__value>
       (std::__miter_base(__first), std::__miter_base(__last),
        __result));
    }
# 656 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/stl_algobase.h" 3
  template<typename _BI1, typename _BI2>
    inline _BI2
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
    {






                                                     ;

      return std::__copy_move_backward_a2<true>(std::__miter_base(__first),
      std::__miter_base(__last),
      __result);
    }






  template<typename _ForwardIterator, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
       const _Tp& __value)
    {
      for (; __first != __last; ++__first)
 *__first = __value;
    }

  template<typename _ForwardIterator, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
      const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
 *__first = __tmp;
    }


  template<typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_byte<_Tp>::__value, void>::__type
    __fill_a(_Tp* __first, _Tp* __last, const _Tp& __c)
    {
      const _Tp __tmp = __c;
      if (const size_t __len = __last - __first)
 __builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
    }
# 722 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/stl_algobase.h" 3
  template<typename _ForwardIterator, typename _Tp>
    inline void
    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
    {



                                                     ;

      std::__fill_a(std::__niter_base(__first), std::__niter_base(__last),
      __value);
    }

  template<typename _OutputIterator, typename _Size, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value, _OutputIterator>::__type
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value)
    {
      for (__decltype(__n + 0) __niter = __n;
    __niter > 0; --__niter, (void) ++__first)
 *__first = __value;
      return __first;
    }

  template<typename _OutputIterator, typename _Size, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, _OutputIterator>::__type
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (__decltype(__n + 0) __niter = __n;
    __niter > 0; --__niter, (void) ++__first)
 *__first = __tmp;
      return __first;
    }

  template<typename _Size, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_byte<_Tp>::__value, _Tp*>::__type
    __fill_n_a(_Tp* __first, _Size __n, const _Tp& __c)
    {
      std::__fill_a(__first, __first + __n, __c);
      return __first + __n;
    }
# 782 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/stl_algobase.h" 3
  template<typename _OI, typename _Size, typename _Tp>
    inline _OI
    fill_n(_OI __first, _Size __n, const _Tp& __value)
    {



      return _OI(std::__fill_n_a(std::__niter_base(__first), __n, __value));
    }

  template<bool _BoolType>
    struct __equal
    {
      template<typename _II1, typename _II2>
 static bool
 equal(_II1 __first1, _II1 __last1, _II2 __first2)
 {
   for (; __first1 != __last1; ++__first1, (void) ++__first2)
     if (!(*__first1 == *__first2))
       return false;
   return true;
 }
    };

  template<>
    struct __equal<true>
    {
      template<typename _Tp>
 static bool
 equal(const _Tp* __first1, const _Tp* __last1, const _Tp* __first2)
 {
   if (const size_t __len = (__last1 - __first1))
     return !__builtin_memcmp(__first1, __first2, sizeof(_Tp) * __len);
   return true;
 }
    };

  template<typename _II1, typename _II2>
    inline bool
    __equal_aux(_II1 __first1, _II1 __last1, _II2 __first2)
    {
      typedef typename iterator_traits<_II1>::value_type _ValueType1;
      typedef typename iterator_traits<_II2>::value_type _ValueType2;
      const bool __simple = ((__is_integer<_ValueType1>::__value
         || __is_pointer<_ValueType1>::__value)
        && __is_pointer<_II1>::__value
        && __is_pointer<_II2>::__value
        && __are_same<_ValueType1, _ValueType2>::__value);

      return std::__equal<__simple>::equal(__first1, __last1, __first2);
    }

  template<typename, typename>
    struct __lc_rai
    {
      template<typename _II1, typename _II2>
 static _II1
 __newlast1(_II1, _II1 __last1, _II2, _II2)
 { return __last1; }

      template<typename _II>
 static bool
 __cnd2(_II __first, _II __last)
 { return __first != __last; }
    };

  template<>
    struct __lc_rai<random_access_iterator_tag, random_access_iterator_tag>
    {
      template<typename _RAI1, typename _RAI2>
 static _RAI1
 __newlast1(_RAI1 __first1, _RAI1 __last1,
     _RAI2 __first2, _RAI2 __last2)
 {
   const typename iterator_traits<_RAI1>::difference_type
     __diff1 = __last1 - __first1;
   const typename iterator_traits<_RAI2>::difference_type
     __diff2 = __last2 - __first2;
   return __diff2 < __diff1 ? __first1 + __diff2 : __last1;
 }

      template<typename _RAI>
 static bool
 __cnd2(_RAI, _RAI)
 { return true; }
    };

  template<typename _II1, typename _II2, typename _Compare>
    bool
    __lexicographical_compare_impl(_II1 __first1, _II1 __last1,
       _II2 __first2, _II2 __last2,
       _Compare __comp)
    {
      typedef typename iterator_traits<_II1>::iterator_category _Category1;
      typedef typename iterator_traits<_II2>::iterator_category _Category2;
      typedef std::__lc_rai<_Category1, _Category2> __rai_type;

      __last1 = __rai_type::__newlast1(__first1, __last1, __first2, __last2);
      for (; __first1 != __last1 && __rai_type::__cnd2(__first2, __last2);
    ++__first1, (void)++__first2)
 {
   if (__comp(__first1, __first2))
     return true;
   if (__comp(__first2, __first1))
     return false;
 }
      return __first1 == __last1 && __first2 != __last2;
    }

  template<bool _BoolType>
    struct __lexicographical_compare
    {
      template<typename _II1, typename _II2>
 static bool __lc(_II1, _II1, _II2, _II2);
    };

  template<bool _BoolType>
    template<typename _II1, typename _II2>
      bool
      __lexicographical_compare<_BoolType>::
      __lc(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)
      {
 return std::__lexicographical_compare_impl(__first1, __last1,
         __first2, __last2,
     __gnu_cxx::__ops::__iter_less_iter());
      }

  template<>
    struct __lexicographical_compare<true>
    {
      template<typename _Tp, typename _Up>
 static bool
 __lc(const _Tp* __first1, const _Tp* __last1,
      const _Up* __first2, const _Up* __last2)
 {
   const size_t __len1 = __last1 - __first1;
   const size_t __len2 = __last2 - __first2;
   if (const size_t __len = std::min(__len1, __len2))
     if (int __result = __builtin_memcmp(__first1, __first2, __len))
       return __result < 0;
   return __len1 < __len2;
 }
    };

  template<typename _II1, typename _II2>
    inline bool
    __lexicographical_compare_aux(_II1 __first1, _II1 __last1,
      _II2 __first2, _II2 __last2)
    {
      typedef typename iterator_traits<_II1>::value_type _ValueType1;
      typedef typename iterator_traits<_II2>::value_type _ValueType2;
      const bool __simple =
 (__is_byte<_ValueType1>::__value && __is_byte<_ValueType2>::__value
  && !__gnu_cxx::__numeric_traits<_ValueType1>::__is_signed
  && !__gnu_cxx::__numeric_traits<_ValueType2>::__is_signed
  && __is_pointer<_II1>::__value
  && __is_pointer<_II2>::__value);

      return std::__lexicographical_compare<__simple>::__lc(__first1, __last1,
           __first2, __last2);
    }

  template<typename _ForwardIterator, typename _Tp, typename _Compare>
    _ForwardIterator
    __lower_bound(_ForwardIterator __first, _ForwardIterator __last,
    const _Tp& __val, _Compare __comp)
    {
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 {
   _DistanceType __half = __len >> 1;
   _ForwardIterator __middle = __first;
   std::advance(__middle, __half);
   if (__comp(__middle, __val))
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
   else
     __len = __half;
 }
      return __first;
    }
# 982 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/stl_algobase.h" 3
  template<typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    lower_bound(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val)
    {




                                                                  ;

      return std::__lower_bound(__first, __last, __val,
    __gnu_cxx::__ops::__iter_less_val());
    }



  inline constexpr int
  __lg(int __n)
  { return sizeof(int) * 8 - 1 - __builtin_clz(__n); }

  inline constexpr unsigned
  __lg(unsigned __n)
  { return sizeof(int) * 8 - 1 - __builtin_clz(__n); }

  inline constexpr long
  __lg(long __n)
  { return sizeof(long) * 8 - 1 - __builtin_clzl(__n); }

  inline constexpr unsigned long
  __lg(unsigned long __n)
  { return sizeof(long) * 8 - 1 - __builtin_clzl(__n); }

  inline constexpr long long
  __lg(long long __n)
  { return sizeof(long long) * 8 - 1 - __builtin_clzll(__n); }

  inline constexpr unsigned long long
  __lg(unsigned long long __n)
  { return sizeof(long long) * 8 - 1 - __builtin_clzll(__n); }
# 1037 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/stl_algobase.h" 3
  template<typename _II1, typename _II2>
    inline bool
    equal(_II1 __first1, _II1 __last1, _II2 __first2)
    {






                                                       ;

      return std::__equal_aux(std::__niter_base(__first1),
         std::__niter_base(__last1),
         std::__niter_base(__first2));
    }
# 1069 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/stl_algobase.h" 3
  template<typename _IIter1, typename _IIter2, typename _BinaryPredicate>
    inline bool
    equal(_IIter1 __first1, _IIter1 __last1,
   _IIter2 __first2, _BinaryPredicate __binary_pred)
    {



                                                       ;

      for (; __first1 != __last1; ++__first1, (void)++__first2)
 if (!bool(__binary_pred(*__first1, *__first2)))
   return false;
      return true;
    }



  template<typename _II1, typename _II2>
    inline bool
    __equal4(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)
    {
      using _RATag = random_access_iterator_tag;
      using _Cat1 = typename iterator_traits<_II1>::iterator_category;
      using _Cat2 = typename iterator_traits<_II2>::iterator_category;
      using _RAIters = __and_<is_same<_Cat1, _RATag>, is_same<_Cat2, _RATag>>;
      if (_RAIters())
 {
   auto __d1 = std::distance(__first1, __last1);
   auto __d2 = std::distance(__first2, __last2);
   if (__d1 != __d2)
     return false;
   return std::equal(__first1, __last1, __first2);
 }

      for (; __first1 != __last1 && __first2 != __last2;
   ++__first1, (void)++__first2)
 if (!(*__first1 == *__first2))
   return false;
      return __first1 == __last1 && __first2 == __last2;
    }


  template<typename _II1, typename _II2, typename _BinaryPredicate>
    inline bool
    __equal4(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2,
      _BinaryPredicate __binary_pred)
    {
      using _RATag = random_access_iterator_tag;
      using _Cat1 = typename iterator_traits<_II1>::iterator_category;
      using _Cat2 = typename iterator_traits<_II2>::iterator_category;
      using _RAIters = __and_<is_same<_Cat1, _RATag>, is_same<_Cat2, _RATag>>;
      if (_RAIters())
 {
   auto __d1 = std::distance(__first1, __last1);
   auto __d2 = std::distance(__first2, __last2);
   if (__d1 != __d2)
     return false;
   return std::equal(__first1, __last1, __first2,
           __binary_pred);
 }

      for (; __first1 != __last1 && __first2 != __last2;
   ++__first1, (void)++__first2)
 if (!bool(__binary_pred(*__first1, *__first2)))
   return false;
      return __first1 == __last1 && __first2 == __last2;
    }
# 1156 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/stl_algobase.h" 3
  template<typename _II1, typename _II2>
    inline bool
    equal(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)
    {






                                                       ;
                                                       ;

      return std::__equal4(__first1, __last1, __first2, __last2);
    }
# 1188 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/stl_algobase.h" 3
  template<typename _IIter1, typename _IIter2, typename _BinaryPredicate>
    inline bool
    equal(_IIter1 __first1, _IIter1 __last1,
   _IIter2 __first2, _IIter2 __last2, _BinaryPredicate __binary_pred)
    {



                                                       ;
                                                       ;

      return std::__equal4(__first1, __last1, __first2, __last2,
          __binary_pred);
    }
# 1219 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/stl_algobase.h" 3
  template<typename _II1, typename _II2>
    inline bool
    lexicographical_compare(_II1 __first1, _II1 __last1,
       _II2 __first2, _II2 __last2)
    {
# 1233 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/stl_algobase.h" 3
                                                       ;
                                                       ;

      return std::__lexicographical_compare_aux(std::__niter_base(__first1),
      std::__niter_base(__last1),
      std::__niter_base(__first2),
      std::__niter_base(__last2));
    }
# 1255 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/stl_algobase.h" 3
  template<typename _II1, typename _II2, typename _Compare>
    inline bool
    lexicographical_compare(_II1 __first1, _II1 __last1,
       _II2 __first2, _II2 __last2, _Compare __comp)
    {



                                                       ;
                                                       ;

      return std::__lexicographical_compare_impl
 (__first1, __last1, __first2, __last2,
  __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _InputIterator1, typename _InputIterator2,
    typename _BinaryPredicate>
    pair<_InputIterator1, _InputIterator2>
    __mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
        _InputIterator2 __first2, _BinaryPredicate __binary_pred)
    {
      while (__first1 != __last1 && __binary_pred(__first1, __first2))
 {
   ++__first1;
   ++__first2;
 }
      return pair<_InputIterator1, _InputIterator2>(__first1, __first2);
    }
# 1298 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/stl_algobase.h" 3
  template<typename _InputIterator1, typename _InputIterator2>
    inline pair<_InputIterator1, _InputIterator2>
    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2)
    {






                                                       ;

      return std::__mismatch(__first1, __last1, __first2,
        __gnu_cxx::__ops::__iter_equal_to_iter());
    }
# 1331 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/stl_algobase.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _BinaryPredicate>
    inline pair<_InputIterator1, _InputIterator2>
    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _BinaryPredicate __binary_pred)
    {



                                                       ;

      return std::__mismatch(__first1, __last1, __first2,
 __gnu_cxx::__ops::__iter_comp_iter(__binary_pred));
    }



  template<typename _InputIterator1, typename _InputIterator2,
    typename _BinaryPredicate>
    pair<_InputIterator1, _InputIterator2>
    __mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
        _InputIterator2 __first2, _InputIterator2 __last2,
        _BinaryPredicate __binary_pred)
    {
      while (__first1 != __last1 && __first2 != __last2
      && __binary_pred(__first1, __first2))
 {
   ++__first1;
   ++__first2;
 }
      return pair<_InputIterator1, _InputIterator2>(__first1, __first2);
    }
# 1378 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/stl_algobase.h" 3
  template<typename _InputIterator1, typename _InputIterator2>
    inline pair<_InputIterator1, _InputIterator2>
    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _InputIterator2 __last2)
    {






                                                       ;
                                                       ;

      return std::__mismatch(__first1, __last1, __first2, __last2,
        __gnu_cxx::__ops::__iter_equal_to_iter());
    }
# 1413 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/stl_algobase.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _BinaryPredicate>
    inline pair<_InputIterator1, _InputIterator2>
    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _InputIterator2 __last2,
      _BinaryPredicate __binary_pred)
    {



                                                       ;
                                                       ;

      return std::__mismatch(__first1, __last1, __first2, __last2,
        __gnu_cxx::__ops::__iter_comp_iter(__binary_pred));
    }




}
# 40 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/char_traits.h" 2 3

# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\cwchar" 1 3
# 40 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\cwchar" 3
# 42 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/char_traits.h" 2 3





namespace __gnu_cxx
{
# 61 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/char_traits.h" 3
  template<typename _CharT>
    struct _Char_types
    {
      typedef unsigned long int_type;
      typedef std::streampos pos_type;
      typedef std::streamoff off_type;
      typedef std::mbstate_t state_type;
    };
# 86 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/char_traits.h" 3
  template<typename _CharT>
    struct char_traits
    {
      typedef _CharT char_type;
      typedef typename _Char_types<_CharT>::int_type int_type;
      typedef typename _Char_types<_CharT>::pos_type pos_type;
      typedef typename _Char_types<_CharT>::off_type off_type;
      typedef typename _Char_types<_CharT>::state_type state_type;

      static constexpr void
      assign(char_type& __c1, const char_type& __c2)
      { __c1 = __c2; }

      static constexpr bool
      eq(const char_type& __c1, const char_type& __c2)
      { return __c1 == __c2; }

      static constexpr bool
      lt(const char_type& __c1, const char_type& __c2)
      { return __c1 < __c2; }

      static constexpr int
      compare(const char_type* __s1, const char_type* __s2, std::size_t __n);

      static constexpr std::size_t
      length(const char_type* __s);

      static constexpr const char_type*
      find(const char_type* __s, std::size_t __n, const char_type& __a);

      static char_type*
      move(char_type* __s1, const char_type* __s2, std::size_t __n);

      static char_type*
      copy(char_type* __s1, const char_type* __s2, std::size_t __n);

      static char_type*
      assign(char_type* __s, std::size_t __n, char_type __a);

      static constexpr char_type
      to_char_type(const int_type& __c)
      { return static_cast<char_type>(__c); }

      static constexpr int_type
      to_int_type(const char_type& __c)
      { return static_cast<int_type>(__c); }

      static constexpr bool
      eq_int_type(const int_type& __c1, const int_type& __c2)
      { return __c1 == __c2; }

      static constexpr int_type
      eof()
      { return static_cast<int_type>(-1); }

      static constexpr int_type
      not_eof(const int_type& __c)
      { return !eq_int_type(__c, eof()) ? __c : to_int_type(char_type()); }
    };

  template<typename _CharT>
    constexpr int
    char_traits<_CharT>::
    compare(const char_type* __s1, const char_type* __s2, std::size_t __n)
    {
      for (std::size_t __i = 0; __i < __n; ++__i)
 if (lt(__s1[__i], __s2[__i]))
   return -1;
 else if (lt(__s2[__i], __s1[__i]))
   return 1;
      return 0;
    }

  template<typename _CharT>
    constexpr std::size_t
    char_traits<_CharT>::
    length(const char_type* __p)
    {
      std::size_t __i = 0;
      while (!eq(__p[__i], char_type()))
        ++__i;
      return __i;
    }

  template<typename _CharT>
    constexpr const typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    find(const char_type* __s, std::size_t __n, const char_type& __a)
    {
      for (std::size_t __i = 0; __i < __n; ++__i)
        if (eq(__s[__i], __a))
          return __s + __i;
      return 0;
    }

  template<typename _CharT>
    typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    move(char_type* __s1, const char_type* __s2, std::size_t __n)
    {
      if (__n == 0)
 return __s1;
      return static_cast<_CharT*>(__builtin_memmove(__s1, __s2,
          __n * sizeof(char_type)));
    }

  template<typename _CharT>
    typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    copy(char_type* __s1, const char_type* __s2, std::size_t __n)
    {

      std::copy(__s2, __s2 + __n, __s1);
      return __s1;
    }

  template<typename _CharT>
    typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    assign(char_type* __s, std::size_t __n, char_type __a)
    {

      std::fill_n(__s, __n, __a);
      return __s;
    }


}

namespace std
{
# 270 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/char_traits.h" 3
  template<class _CharT>
    struct char_traits : public __gnu_cxx::char_traits<_CharT>
    { };



  template<>
    struct char_traits<char>
    {
      typedef char char_type;
      typedef int int_type;
      typedef streampos pos_type;
      typedef streamoff off_type;
      typedef mbstate_t state_type;

      static void
      assign(char_type& __c1, const char_type& __c2) noexcept
      { __c1 = __c2; }

      static constexpr bool
      eq(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr bool
      lt(const char_type& __c1, const char_type& __c2) noexcept
      {

 return (static_cast<unsigned char>(__c1)
  < static_cast<unsigned char>(__c2));
      }

      static int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      {






 if (__n == 0)
   return 0;
 return __builtin_memcmp(__s1, __s2, __n);
      }

      static size_t
      length(const char_type* __s)
      {




 return __builtin_strlen(__s);
      }

      static const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
      {






 if (__n == 0)
   return 0;
 return static_cast<const char_type*>(__builtin_memchr(__s, __a, __n));
      }

      static char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return __s1;
 return static_cast<char_type*>(__builtin_memmove(__s1, __s2, __n));
      }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return __s1;
 return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
      }

      static char_type*
      assign(char_type* __s, size_t __n, char_type __a)
      {
 if (__n == 0)
   return __s;
 return static_cast<char_type*>(__builtin_memset(__s, __a, __n));
      }

      static constexpr char_type
      to_char_type(const int_type& __c) noexcept
      { return static_cast<char_type>(__c); }



      static constexpr int_type
      to_int_type(const char_type& __c) noexcept
      { return static_cast<int_type>(static_cast<unsigned char>(__c)); }

      static constexpr bool
      eq_int_type(const int_type& __c1, const int_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr int_type
      eof() noexcept
      { return static_cast<int_type>(-1); }

      static constexpr int_type
      not_eof(const int_type& __c) noexcept
      { return (__c == eof()) ? 0 : __c; }
  };




  template<>
    struct char_traits<wchar_t>
    {
      typedef wchar_t char_type;
      typedef wint_t int_type;
      typedef streamoff off_type;
      typedef wstreampos pos_type;
      typedef mbstate_t state_type;

      static void
      assign(char_type& __c1, const char_type& __c2) noexcept
      { __c1 = __c2; }

      static constexpr bool
      eq(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr bool
      lt(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 < __c2; }

      static int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      {






 if (__n == 0)
   return 0;
 else
   return wmemcmp(__s1, __s2, __n);
      }

      static size_t
      length(const char_type* __s)
      {





   return wcslen(__s);
      }

      static const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
      {






 if (__n == 0)
   return 0;
 else
   return wmemchr(__s, __a, __n);
      }

      static char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return __s1;
 return wmemmove(__s1, __s2, __n);
      }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return __s1;
 return wmemcpy(__s1, __s2, __n);
      }

      static char_type*
      assign(char_type* __s, size_t __n, char_type __a)
      {
 if (__n == 0)
   return __s;
 return wmemset(__s, __a, __n);
      }

      static constexpr char_type
      to_char_type(const int_type& __c) noexcept
      { return char_type(__c); }

      static constexpr int_type
      to_int_type(const char_type& __c) noexcept
      { return int_type(__c); }

      static constexpr bool
      eq_int_type(const int_type& __c1, const int_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr int_type
      eof() noexcept
      { return static_cast<int_type>((wint_t)(0xFFFF)); }

      static constexpr int_type
      not_eof(const int_type& __c) noexcept
      { return eq_int_type(__c, eof()) ? 0 : __c; }
  };



}





# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\cstdint" 1 3
# 33 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\cstdint" 3








# 1 "D:\\Xilinx\\Vitis_HLS\\2023.1\\win64\\tools\\clang-3.9-csynth\\lib\\clang\\7.0.0\\include\\stdint.h" 1 3
# 63 "D:\\Xilinx\\Vitis_HLS\\2023.1\\win64\\tools\\clang-3.9-csynth\\lib\\clang\\7.0.0\\include\\stdint.h" 3
# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\stdint.h" 1 3
# 32 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\stdint.h" 3
# 1 "D:\\Xilinx\\Vitis_HLS\\2023.1\\win64\\tools\\clang-3.9-csynth\\lib\\clang\\7.0.0\\include\\stddef.h" 1 3
# 33 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\stdint.h" 2 3


typedef signed char int8_t;
typedef unsigned char uint8_t;
typedef short int16_t;
typedef unsigned short uint16_t;
typedef int int32_t;
typedef unsigned uint32_t;
__extension__ typedef long long int64_t;
__extension__ typedef unsigned long long uint64_t;


typedef signed char int_least8_t;
typedef unsigned char uint_least8_t;
typedef short int_least16_t;
typedef unsigned short uint_least16_t;
typedef int int_least32_t;
typedef unsigned uint_least32_t;
__extension__ typedef long long int_least64_t;
__extension__ typedef unsigned long long uint_least64_t;





typedef signed char int_fast8_t;
typedef unsigned char uint_fast8_t;
typedef short int_fast16_t;
typedef unsigned short uint_fast16_t;
typedef int int_fast32_t;
typedef unsigned int uint_fast32_t;
__extension__ typedef long long int_fast64_t;
__extension__ typedef unsigned long long uint_fast64_t;


__extension__ typedef long long intmax_t;
__extension__ typedef unsigned long long uintmax_t;
# 64 "D:\\Xilinx\\Vitis_HLS\\2023.1\\win64\\tools\\clang-3.9-csynth\\lib\\clang\\7.0.0\\include\\stdint.h" 2 3
# 42 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\cstdint" 2 3




namespace std
{
  using ::int8_t;
  using ::int16_t;
  using ::int32_t;
  using ::int64_t;

  using ::int_fast8_t;
  using ::int_fast16_t;
  using ::int_fast32_t;
  using ::int_fast64_t;

  using ::int_least8_t;
  using ::int_least16_t;
  using ::int_least32_t;
  using ::int_least64_t;

  using ::intmax_t;
  using ::intptr_t;

  using ::uint8_t;
  using ::uint16_t;
  using ::uint32_t;
  using ::uint64_t;

  using ::uint_fast8_t;
  using ::uint_fast16_t;
  using ::uint_fast32_t;
  using ::uint_fast64_t;

  using ::uint_least8_t;
  using ::uint_least16_t;
  using ::uint_least32_t;
  using ::uint_least64_t;

  using ::uintmax_t;
  using ::uintptr_t;
}
# 504 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/char_traits.h" 2 3

namespace std
{


  template<>
    struct char_traits<char16_t>
    {
      typedef char16_t char_type;
      typedef uint_least16_t int_type;
      typedef streamoff off_type;
      typedef u16streampos pos_type;
      typedef mbstate_t state_type;

      static void
      assign(char_type& __c1, const char_type& __c2) noexcept
      { __c1 = __c2; }

      static constexpr bool
      eq(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr bool
      lt(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 < __c2; }

      static int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   if (lt(__s1[__i], __s2[__i]))
     return -1;
   else if (lt(__s2[__i], __s1[__i]))
     return 1;
 return 0;
      }

      static size_t
      length(const char_type* __s)
      {
 size_t __i = 0;
 while (!eq(__s[__i], char_type()))
   ++__i;
 return __i;
      }

      static const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   if (eq(__s[__i], __a))
     return __s + __i;
 return 0;
      }

      static char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return __s1;
 return (static_cast<char_type*>
  (__builtin_memmove(__s1, __s2, __n * sizeof(char_type))));
      }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return __s1;
 return (static_cast<char_type*>
  (__builtin_memcpy(__s1, __s2, __n * sizeof(char_type))));
      }

      static char_type*
      assign(char_type* __s, size_t __n, char_type __a)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   assign(__s[__i], __a);
 return __s;
      }

      static constexpr char_type
      to_char_type(const int_type& __c) noexcept
      { return char_type(__c); }

      static constexpr int_type
      to_int_type(const char_type& __c) noexcept
      { return __c == eof() ? int_type(0xfffd) : int_type(__c); }

      static constexpr bool
      eq_int_type(const int_type& __c1, const int_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr int_type
      eof() noexcept
      { return static_cast<int_type>(-1); }

      static constexpr int_type
      not_eof(const int_type& __c) noexcept
      { return eq_int_type(__c, eof()) ? 0 : __c; }
    };

  template<>
    struct char_traits<char32_t>
    {
      typedef char32_t char_type;
      typedef uint_least32_t int_type;
      typedef streamoff off_type;
      typedef u32streampos pos_type;
      typedef mbstate_t state_type;

      static void
      assign(char_type& __c1, const char_type& __c2) noexcept
      { __c1 = __c2; }

      static constexpr bool
      eq(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr bool
      lt(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 < __c2; }

      static int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   if (lt(__s1[__i], __s2[__i]))
     return -1;
   else if (lt(__s2[__i], __s1[__i]))
     return 1;
 return 0;
      }

      static size_t
      length(const char_type* __s)
      {
 size_t __i = 0;
 while (!eq(__s[__i], char_type()))
   ++__i;
 return __i;
      }

      static const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   if (eq(__s[__i], __a))
     return __s + __i;
 return 0;
      }

      static char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return __s1;
 return (static_cast<char_type*>
  (__builtin_memmove(__s1, __s2, __n * sizeof(char_type))));
      }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return __s1;
 return (static_cast<char_type*>
  (__builtin_memcpy(__s1, __s2, __n * sizeof(char_type))));
      }

      static char_type*
      assign(char_type* __s, size_t __n, char_type __a)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   assign(__s[__i], __a);
 return __s;
      }

      static constexpr char_type
      to_char_type(const int_type& __c) noexcept
      { return char_type(__c); }

      static constexpr int_type
      to_int_type(const char_type& __c) noexcept
      { return int_type(__c); }

      static constexpr bool
      eq_int_type(const int_type& __c1, const int_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr int_type
      eof() noexcept
      { return static_cast<int_type>(-1); }

      static constexpr int_type
      not_eof(const int_type& __c) noexcept
      { return eq_int_type(__c, eof()) ? 0 : __c; }
    };


}
# 41 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\ios" 2 3
# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/localefwd.h" 1 3
# 38 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/localefwd.h" 3


# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\x86_64-w64-mingw32\\bits/c++locale.h" 1 3
# 40 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\x86_64-w64-mingw32\\bits/c++locale.h" 3

# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\clocale" 1 3
# 40 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\clocale" 3


# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\locale.h" 1 3
# 12 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\locale.h" 3
# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\stdio.h" 1 3
# 11 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\stdio.h" 3
# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\_mingw_print_push.h" 1 3
# 12 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\stdio.h" 2 3

#pragma pack(push,_CRT_PACKING)


extern "C" {
# 82 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\stdio.h" 3
__attribute__ ((__dllimport__)) FILE *__attribute__((__cdecl__)) __acrt_iob_func(unsigned index);


  __attribute__ ((__dllimport__)) FILE *__attribute__((__cdecl__)) __iob_func(void);
# 104 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\stdio.h" 3
  __extension__ typedef long fpos_t;
# 162 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\stdio.h" 3
extern
  __attribute__((__format__ (gnu_scanf, 2, 3))) __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_sscanf(const char * __restrict__ _Src,const char * __restrict__ _Format,...);
extern
  __attribute__((__format__ (gnu_scanf, 2, 0))) __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_vsscanf (const char * __restrict__ _Str,const char * __restrict__ Format,va_list argp);
extern
  __attribute__((__format__ (gnu_scanf, 1, 2))) __attribute__ ((__nonnull__ (1)))
  int __attribute__((__cdecl__)) __mingw_scanf(const char * __restrict__ _Format,...);
extern
  __attribute__((__format__ (gnu_scanf, 1, 0))) __attribute__ ((__nonnull__ (1)))
  int __attribute__((__cdecl__)) __mingw_vscanf(const char * __restrict__ Format, va_list argp);
extern
  __attribute__((__format__ (gnu_scanf, 2, 3))) __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_fscanf(FILE * __restrict__ _File,const char * __restrict__ _Format,...);
extern
  __attribute__((__format__ (gnu_scanf, 2, 0))) __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_vfscanf (FILE * __restrict__ fp, const char * __restrict__ Format,va_list argp);

extern
  __attribute__((__format__ (gnu_printf, 3, 0))) __attribute__ ((__nonnull__ (3)))
  int __attribute__((__cdecl__)) __mingw_vsnprintf(char * __restrict__ _DstBuf,size_t _MaxCount,const char * __restrict__ _Format,
                               va_list _ArgList);
extern
  __attribute__((__format__ (gnu_printf, 3, 4))) __attribute__ ((__nonnull__ (3)))
  int __attribute__((__cdecl__)) __mingw_snprintf(char * __restrict__ s, size_t n, const char * __restrict__ format, ...);
extern
  __attribute__((__format__ (gnu_printf, 1, 2))) __attribute__ ((__nonnull__ (1)))
  int __attribute__((__cdecl__)) __mingw_printf(const char * __restrict__ , ... ) __attribute__ ((__nothrow__));
extern
  __attribute__((__format__ (gnu_printf, 1, 0))) __attribute__ ((__nonnull__ (1)))
  int __attribute__((__cdecl__)) __mingw_vprintf (const char * __restrict__ , va_list) __attribute__ ((__nothrow__));
extern
  __attribute__((__format__ (gnu_printf, 2, 3))) __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_fprintf (FILE * __restrict__ , const char * __restrict__ , ...) __attribute__ ((__nothrow__));
extern
  __attribute__((__format__ (gnu_printf, 2, 0))) __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_vfprintf (FILE * __restrict__ , const char * __restrict__ , va_list) __attribute__ ((__nothrow__));
extern
  __attribute__((__format__ (gnu_printf, 2, 3))) __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_sprintf (char * __restrict__ , const char * __restrict__ , ...) __attribute__ ((__nothrow__));
extern
  __attribute__((__format__ (gnu_printf, 2, 0))) __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_vsprintf (char * __restrict__ , const char * __restrict__ , va_list) __attribute__ ((__nothrow__));
extern
  __attribute__((__format__ (gnu_printf, 2, 3))) __attribute__((nonnull (1,2)))
  int __attribute__((__cdecl__)) __mingw_asprintf(char ** __restrict__ , const char * __restrict__ , ...) __attribute__ ((__nothrow__));
extern
  __attribute__((__format__ (gnu_printf, 2, 0))) __attribute__((nonnull (1,2)))
  int __attribute__((__cdecl__)) __mingw_vasprintf(char ** __restrict__ , const char * __restrict__ , va_list) __attribute__ ((__nothrow__));
# 262 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\stdio.h" 3
extern "C++" {


static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
__attribute__((__format__ (gnu_scanf, 2, 3))) __attribute__ ((__nonnull__ (2)))
int sscanf(const char *__source, const char *__format, ...)
{
  int __retval;
  __builtin_va_list __local_argv; __builtin_va_start( __local_argv, __format );
  __retval = __mingw_vsscanf( __source, __format, __local_argv );
  __builtin_va_end( __local_argv );
  return __retval;
}

static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
__attribute__((__format__ (gnu_scanf, 1, 2))) __attribute__ ((__nonnull__ (1)))
int scanf(const char *__format, ...)
{
  int __retval;
  __builtin_va_list __local_argv; __builtin_va_start( __local_argv, __format );
  __retval = __mingw_vfscanf( (__acrt_iob_func(0)), __format, __local_argv );
  __builtin_va_end( __local_argv );
  return __retval;
}

static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
__attribute__((__format__ (gnu_scanf, 2, 3))) __attribute__ ((__nonnull__ (2)))
int fscanf(FILE *__stream, const char *__format, ...)
{
  int __retval;
  __builtin_va_list __local_argv; __builtin_va_start( __local_argv, __format );
  __retval = __mingw_vfscanf( __stream, __format, __local_argv );
  __builtin_va_end( __local_argv );
  return __retval;
}



#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wshadow"


static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
__attribute__((__format__ (gnu_scanf, 2, 0))) __attribute__ ((__nonnull__ (2)))
int vsscanf (const char *__source, const char *__format, __builtin_va_list __local_argv)
{
  return __mingw_vsscanf( __source, __format, __local_argv );
}

static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
__attribute__((__format__ (gnu_scanf, 1, 0))) __attribute__ ((__nonnull__ (1)))
int vscanf(const char *__format, __builtin_va_list __local_argv)
{
  return __mingw_vfscanf( (__acrt_iob_func(0)), __format, __local_argv );
}

static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
__attribute__((__format__ (gnu_scanf, 2, 0))) __attribute__ ((__nonnull__ (2)))
int vfscanf (FILE *__stream, const char *__format, __builtin_va_list __local_argv)
{
  return __mingw_vfscanf( __stream, __format, __local_argv );
}


#pragma GCC diagnostic pop





static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
__attribute__((__format__ (gnu_printf, 2, 3))) __attribute__ ((__nonnull__ (2)))
int fprintf (FILE *__stream, const char *__format, ...)
{
  int __retval;
  __builtin_va_list __local_argv; __builtin_va_start( __local_argv, __format );
  __retval = __mingw_vfprintf( __stream, __format, __local_argv );
  __builtin_va_end( __local_argv );
  return __retval;
}

static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
__attribute__((__format__ (gnu_printf, 1, 2))) __attribute__ ((__nonnull__ (1)))
int printf (const char *__format, ...)
{
  int __retval;
  __builtin_va_list __local_argv; __builtin_va_start( __local_argv, __format );
  __retval = __mingw_vfprintf( (__acrt_iob_func(1)), __format, __local_argv );
  __builtin_va_end( __local_argv );
  return __retval;
}

static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
__attribute__((__format__ (gnu_printf, 2, 3))) __attribute__ ((__nonnull__ (2)))
int sprintf (char *__stream, const char *__format, ...)
{
  int __retval;
  __builtin_va_list __local_argv; __builtin_va_start( __local_argv, __format );
  __retval = __mingw_vsprintf( __stream, __format, __local_argv );
  __builtin_va_end( __local_argv );
  return __retval;
}

static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
__attribute__((__format__ (gnu_printf, 2, 0))) __attribute__ ((__nonnull__ (2)))
int vfprintf (FILE *__stream, const char *__format, __builtin_va_list __local_argv)
{
  return __mingw_vfprintf( __stream, __format, __local_argv );
}

static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
__attribute__((__format__ (gnu_printf, 1, 0))) __attribute__ ((__nonnull__ (1)))
int vprintf (const char *__format, __builtin_va_list __local_argv)
{
  return __mingw_vfprintf( (__acrt_iob_func(1)), __format, __local_argv );
}

static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
__attribute__((__format__ (gnu_printf, 2, 0))) __attribute__ ((__nonnull__ (2)))
int vsprintf (char *__stream, const char *__format, __builtin_va_list __local_argv)
{
  return __mingw_vsprintf( __stream, __format, __local_argv );
}

static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
__attribute__((__format__ (gnu_printf, 3, 4))) __attribute__ ((__nonnull__ (3)))
int snprintf (char *__stream, size_t __n, const char *__format, ...)
{
  int __retval;
  __builtin_va_list __local_argv; __builtin_va_start( __local_argv, __format );
  __retval = __mingw_vsnprintf( __stream, __n, __format, __local_argv );
  __builtin_va_end( __local_argv );
  return __retval;
}

static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
__attribute__((__format__ (gnu_printf, 3, 0))) __attribute__ ((__nonnull__ (3)))
int vsnprintf (char *__stream, size_t __n, const char *__format, __builtin_va_list __local_argv)
{
  return __mingw_vsnprintf( __stream, __n, __format, __local_argv );
}
# 411 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\stdio.h" 3
}
# 571 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\stdio.h" 3
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _filbuf(FILE *_File);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _flsbuf(int _Ch,FILE *_File);



  __attribute__ ((__dllimport__)) FILE *__attribute__((__cdecl__)) _fsopen(const char *_Filename,const char *_Mode,int _ShFlag);

  void __attribute__((__cdecl__)) clearerr(FILE *_File);
  int __attribute__((__cdecl__)) fclose(FILE *_File);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fcloseall(void);



  __attribute__ ((__dllimport__)) FILE *__attribute__((__cdecl__)) _fdopen(int _FileHandle,const char *_Mode);

  int __attribute__((__cdecl__)) feof(FILE *_File);
  int __attribute__((__cdecl__)) ferror(FILE *_File);
  int __attribute__((__cdecl__)) fflush(FILE *_File);
  int __attribute__((__cdecl__)) fgetc(FILE *_File);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fgetchar(void);
  int __attribute__((__cdecl__)) fgetpos(FILE * __restrict__ _File ,fpos_t * __restrict__ _Pos);
  int __attribute__((__cdecl__)) fgetpos64(FILE * __restrict__ _File ,fpos_t * __restrict__ _Pos);
  char *__attribute__((__cdecl__)) fgets(char * __restrict__ _Buf,int _MaxCount,FILE * __restrict__ _File);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fileno(FILE *_File);



  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _tempnam(const char *_DirName,const char *_FilePrefix);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _flushall(void);
  FILE *__attribute__((__cdecl__)) fopen(const char * __restrict__ _Filename,const char * __restrict__ _Mode) ;
  FILE *fopen64(const char * __restrict__ filename,const char * __restrict__ mode);
  int __attribute__((__cdecl__)) fputc(int _Ch,FILE *_File);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fputchar(int _Ch);
  int __attribute__((__cdecl__)) fputs(const char * __restrict__ _Str,FILE * __restrict__ _File);
  size_t __attribute__((__cdecl__)) fread(void * __restrict__ _DstBuf,size_t _ElementSize,size_t _Count,FILE * __restrict__ _File);
  FILE *__attribute__((__cdecl__)) freopen(const char * __restrict__ _Filename,const char * __restrict__ _Mode,FILE * __restrict__ _File) ;
  int __attribute__((__cdecl__)) fsetpos(FILE *_File,const fpos_t *_Pos);
  int __attribute__((__cdecl__)) fsetpos64(FILE *_File,const fpos_t *_Pos);
  int __attribute__((__cdecl__)) fseek(FILE *_File,long _Offset,int _Origin);
  long __attribute__((__cdecl__)) ftell(FILE *_File);
# 631 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\stdio.h" 3
  __extension__ int __attribute__((__cdecl__)) _fseeki64(FILE *_File,long _Offset,int _Origin);
  __extension__ long __attribute__((__cdecl__)) _ftelli64(FILE *_File);
  int fseeko64(FILE* stream, _off64_t offset, int whence);
  int fseeko(FILE* stream, _off_t offset, int whence);

  _off_t ftello(FILE * stream);
  _off64_t ftello64(FILE * stream);
# 654 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\stdio.h" 3
  size_t __attribute__((__cdecl__)) fwrite(const void * __restrict__ _Str,size_t _Size,size_t _Count,FILE * __restrict__ _File);
  int __attribute__((__cdecl__)) getc(FILE *_File);
  int __attribute__((__cdecl__)) getchar(void);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _getmaxstdio(void);
  char *__attribute__((__cdecl__)) gets(char *_Buffer) ;
  int __attribute__((__cdecl__)) _getw(FILE *_File);


  void __attribute__((__cdecl__)) perror(const char *_ErrMsg);

  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _pclose(FILE *_File);
  __attribute__ ((__dllimport__)) FILE *__attribute__((__cdecl__)) _popen(const char *_Command,const char *_Mode);




  int __attribute__((__cdecl__)) putc(int _Ch,FILE *_File);
  int __attribute__((__cdecl__)) putchar(int _Ch);
  int __attribute__((__cdecl__)) puts(const char *_Str);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _putw(int _Word,FILE *_File);


  int __attribute__((__cdecl__)) remove(const char *_Filename);
  int __attribute__((__cdecl__)) rename(const char *_OldFilename,const char *_NewFilename);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _unlink(const char *_Filename);

  int __attribute__((__cdecl__)) unlink(const char *_Filename) ;


  void __attribute__((__cdecl__)) rewind(FILE *_File);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _rmtmp(void);
  void __attribute__((__cdecl__)) setbuf(FILE * __restrict__ _File,char * __restrict__ _Buffer) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _setmaxstdio(int _Max);
  __attribute__ ((__dllimport__)) unsigned int __attribute__((__cdecl__)) _set_output_format(unsigned int _Format);
  __attribute__ ((__dllimport__)) unsigned int __attribute__((__cdecl__)) _get_output_format(void);
  int __attribute__((__cdecl__)) setvbuf(FILE * __restrict__ _File,char * __restrict__ _Buf,int _Mode,size_t _Size);
# 712 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\stdio.h" 3
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _scprintf(const char * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _snscanf(const char * __restrict__ _Src,size_t _MaxCount,const char * __restrict__ _Format,...) ;

  FILE *__attribute__((__cdecl__)) tmpfile(void) ;
  char *__attribute__((__cdecl__)) tmpnam(char *_Buffer);
  int __attribute__((__cdecl__)) ungetc(int _Ch,FILE *_File);
# 734 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\stdio.h" 3
  __attribute__((__format__ (ms_printf, 3, 4))) __attribute__ ((__nonnull__ (3)))
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _snprintf(char * __restrict__ _Dest,size_t _Count,const char * __restrict__ _Format,...) ;
  __attribute__((__format__ (ms_printf, 3, 0))) __attribute__ ((__nonnull__ (3)))
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vsnprintf(char * __restrict__ _Dest,size_t _Count,const char * __restrict__ _Format,va_list _Args) ;
# 811 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\stdio.h" 3
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vscprintf(const char * __restrict__ _Format,va_list _ArgList);


  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _set_printf_count_output(int _Value);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _get_printf_count_output(void);
# 1293 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\stdio.h" 3
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _lock_file(FILE *_File);
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _unlock_file(FILE *_File);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fclose_nolock(FILE *_File);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fflush_nolock(FILE *_File);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _fread_nolock(void * __restrict__ _DstBuf,size_t _ElementSize,size_t _Count,FILE * __restrict__ _File);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fseek_nolock(FILE *_File,long _Offset,int _Origin);
  __attribute__ ((__dllimport__)) long __attribute__((__cdecl__)) _ftell_nolock(FILE *_File);
  __extension__ __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fseeki64_nolock(FILE *_File,long _Offset,int _Origin);
  __extension__ __attribute__ ((__dllimport__)) long __attribute__((__cdecl__)) _ftelli64_nolock(FILE *_File);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _fwrite_nolock(const void * __restrict__ _DstBuf,size_t _Size,size_t _Count,FILE * __restrict__ _File);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _ungetc_nolock(int _Ch,FILE *_File);





  char *__attribute__((__cdecl__)) tempnam(const char *_Directory,const char *_FilePrefix) ;
  int __attribute__((__cdecl__)) fcloseall(void) ;
  FILE *__attribute__((__cdecl__)) fdopen(int _FileHandle,const char *_Format) ;
  int __attribute__((__cdecl__)) fgetchar(void) ;
  int __attribute__((__cdecl__)) fileno(FILE *_File) ;
  int __attribute__((__cdecl__)) flushall(void) ;
  int __attribute__((__cdecl__)) fputchar(int _Ch) ;
  int __attribute__((__cdecl__)) getw(FILE *_File) ;
  int __attribute__((__cdecl__)) putw(int _Ch,FILE *_File) ;
  int __attribute__((__cdecl__)) rmtmp(void) ;
# 1388 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\stdio.h" 3
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _spawnv(int _Mode,const char *_Filename,const char *const *_ArgList);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _spawnve(int _Mode,const char *_Filename,const char *const *_ArgList,const char *const *_Env);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _spawnvp(int _Mode,const char *_Filename,const char *const *_ArgList);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _spawnvpe(int _Mode,const char *_Filename,const char *const *_ArgList,const char *const *_Env);



}


#pragma pack(pop)


# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\sec_api/stdio_s.h" 1 3








# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\stdio.h" 1 3
# 10 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\sec_api/stdio_s.h" 2 3
# 1401 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\stdio.h" 2 3

# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\_mingw_print_pop.h" 1 3
# 1403 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\stdio.h" 2 3
# 13 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\locale.h" 2 3


#pragma pack(push,_CRT_PACKING)


extern "C" {
# 45 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\locale.h" 3
  struct lconv {
    char *decimal_point;
    char *thousands_sep;
    char *grouping;
    char *int_curr_symbol;
    char *currency_symbol;
    char *mon_decimal_point;
    char *mon_thousands_sep;
    char *mon_grouping;
    char *positive_sign;
    char *negative_sign;
    char int_frac_digits;
    char frac_digits;
    char p_cs_precedes;
    char p_sep_by_space;
    char n_cs_precedes;
    char n_sep_by_space;
    char p_sign_posn;
    char n_sign_posn;
  };
# 79 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\locale.h" 3
  int __attribute__((__cdecl__)) _configthreadlocale(int _Flag);
  char *__attribute__((__cdecl__)) setlocale(int _Category,const char *_Locale);
  __attribute__ ((__dllimport__)) struct lconv *__attribute__((__cdecl__)) localeconv(void);
  __attribute__ ((__dllimport__)) _locale_t __attribute__((__cdecl__)) _get_current_locale(void);
  _locale_t __attribute__((__cdecl__)) _create_locale(int _Category,const char *_Locale);
  void __attribute__((__cdecl__)) _free_locale(_locale_t _Locale);
  _locale_t __attribute__((__cdecl__)) __get_current_locale(void);
  _locale_t __attribute__((__cdecl__)) __create_locale(int _Category,const char *_Locale);
  void __attribute__((__cdecl__)) __free_locale(_locale_t _Locale);







}


#pragma pack(pop)
# 43 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\clocale" 2 3








namespace std
{
  using ::lconv;
  using ::setlocale;
  using ::localeconv;
}
# 42 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\x86_64-w64-mingw32\\bits/c++locale.h" 2 3



namespace std
{


  typedef int* __c_locale;





  inline int
  __convert_from_v(const __c_locale&, char* __out,
     const int __size __attribute__((__unused__)),
     const char* __fmt, ...)
  {
    char* __old = std::setlocale(4, 0);
    char* __sav = 0;
    if (__builtin_strcmp(__old, "C"))
      {
 const size_t __len = __builtin_strlen(__old) + 1;
 __sav = new char[__len];
 __builtin_memcpy(__sav, __old, __len);
 std::setlocale(4, "C");
      }

    __builtin_va_list __args;
    __builtin_va_start(__args, __fmt);


    const int __ret = __mingw_vsnprintf(__out, __size, __fmt, __args);




    __builtin_va_end(__args);

    if (__sav)
      {
 std::setlocale(4, __sav);
 delete [] __sav;
      }
    return __ret;
  }


}
# 41 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/localefwd.h" 2 3

# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\cctype" 1 3
# 40 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\cctype" 3


# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\ctype.h" 1 3
# 12 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\ctype.h" 3
extern "C" {
# 80 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\ctype.h" 3
  extern const unsigned char __newclmap[];
  extern const unsigned char __newcumap[];
  extern pthreadlocinfo __ptlocinfo;
  extern pthreadmbcinfo __ptmbcinfo;
  extern int __globallocalestatus;
  extern int __locale_changed;
  extern struct threadlocaleinfostruct __initiallocinfo;
  extern _locale_tstruct __initiallocalestructinfo;
  pthreadlocinfo __attribute__((__cdecl__)) __updatetlocinfo(void);
  pthreadmbcinfo __attribute__((__cdecl__)) __updatetmbcinfo(void);
# 108 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\ctype.h" 3
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _isctype(int _C,int _Type);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _isctype_l(int _C,int _Type,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) isalpha(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _isalpha_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) isupper(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _isupper_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) islower(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _islower_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) isdigit(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _isdigit_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) isxdigit(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _isxdigit_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) isspace(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _isspace_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) ispunct(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _ispunct_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) isalnum(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _isalnum_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) isprint(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _isprint_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) isgraph(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _isgraph_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) iscntrl(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iscntrl_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) toupper(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) tolower(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _tolower(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _tolower_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _toupper(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _toupper_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) __isascii(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) __toascii(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) __iscsymf(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) __iscsym(int _C);


int __attribute__((__cdecl__)) isblank(int _C);
# 203 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\ctype.h" 3
  extern int * __imp___mb_cur_max;




__attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) ___mb_cur_max_func(void);
# 286 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\ctype.h" 3
}
# 43 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\cctype" 2 3
# 62 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\cctype" 3
namespace std
{
  using ::isalnum;
  using ::isalpha;
  using ::iscntrl;
  using ::isdigit;
  using ::isgraph;
  using ::islower;
  using ::isprint;
  using ::ispunct;
  using ::isspace;
  using ::isupper;
  using ::isxdigit;
  using ::tolower;
  using ::toupper;
}







namespace std
{
  using ::isblank;
}
# 43 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/localefwd.h" 2 3

namespace std
{
# 55 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/localefwd.h" 3
  class locale;

  template<typename _Facet>
    bool
    has_facet(const locale&) throw();

  template<typename _Facet>
    const _Facet&
    use_facet(const locale&);


  template<typename _CharT>
    bool
    isspace(_CharT, const locale&);

  template<typename _CharT>
    bool
    isprint(_CharT, const locale&);

  template<typename _CharT>
    bool
    iscntrl(_CharT, const locale&);

  template<typename _CharT>
    bool
    isupper(_CharT, const locale&);

  template<typename _CharT>
    bool
    islower(_CharT, const locale&);

  template<typename _CharT>
    bool
    isalpha(_CharT, const locale&);

  template<typename _CharT>
    bool
    isdigit(_CharT, const locale&);

  template<typename _CharT>
    bool
    ispunct(_CharT, const locale&);

  template<typename _CharT>
    bool
    isxdigit(_CharT, const locale&);

  template<typename _CharT>
    bool
    isalnum(_CharT, const locale&);

  template<typename _CharT>
    bool
    isgraph(_CharT, const locale&);


  template<typename _CharT>
    bool
    isblank(_CharT, const locale&);


  template<typename _CharT>
    _CharT
    toupper(_CharT, const locale&);

  template<typename _CharT>
    _CharT
    tolower(_CharT, const locale&);


  class ctype_base;
  template<typename _CharT>
    class ctype;
  template<> class ctype<char>;

  template<> class ctype<wchar_t>;

  template<typename _CharT>
    class ctype_byname;


  class codecvt_base;
  template<typename _InternT, typename _ExternT, typename _StateT>
    class codecvt;
  template<> class codecvt<char, char, mbstate_t>;

  template<> class codecvt<wchar_t, char, mbstate_t>;

  template<typename _InternT, typename _ExternT, typename _StateT>
    class codecvt_byname;



  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class num_get;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class num_put;

namespace __cxx11 {
  template<typename _CharT> class numpunct;
  template<typename _CharT> class numpunct_byname;
}

namespace __cxx11 {

  template<typename _CharT>
    class collate;
  template<typename _CharT>
    class collate_byname;
}


  class time_base;
namespace __cxx11 {
  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class time_get;
  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class time_get_byname;
}
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class time_put;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class time_put_byname;


  class money_base;
namespace __cxx11 {
  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class money_get;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class money_put;
}
namespace __cxx11 {
  template<typename _CharT, bool _Intl = false>
    class moneypunct;
  template<typename _CharT, bool _Intl = false>
    class moneypunct_byname;
}


  class messages_base;
namespace __cxx11 {
  template<typename _CharT>
    class messages;
  template<typename _CharT>
    class messages_byname;
}


}
# 42 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\ios" 2 3
# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/ios_base.h" 1 3
# 38 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/ios_base.h" 3

# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\ext/atomicity.h" 1 3
# 33 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\ext/atomicity.h" 3


# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\x86_64-w64-mingw32\\bits/gthr.h" 1 3
# 30 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\x86_64-w64-mingw32\\bits/gthr.h" 3
#pragma GCC visibility push(default)
# 148 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\x86_64-w64-mingw32\\bits/gthr.h" 3
# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\x86_64-w64-mingw32\\bits/gthr-default.h" 1 3
# 69 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\x86_64-w64-mingw32\\bits/gthr-default.h" 3
# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\errno.h" 1 3
# 12 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\errno.h" 3
extern "C" {




__attribute__ ((__dllimport__)) extern int *__attribute__((__cdecl__)) _errno(void);


errno_t __attribute__((__cdecl__)) _set_errno(int _Value);
errno_t __attribute__((__cdecl__)) _get_errno(int *_Value);
# 239 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\errno.h" 3
}
# 70 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\x86_64-w64-mingw32\\bits/gthr-default.h" 2 3

# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\_mingw.h" 1 3
# 72 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\x86_64-w64-mingw32\\bits/gthr-default.h" 2 3
# 339 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\x86_64-w64-mingw32\\bits/gthr-default.h" 3
extern "C" {


typedef unsigned long __gthread_key_t;

typedef struct {
  int done;
  long started;
} __gthread_once_t;

typedef struct {
  long counter;
  void *sema;
} __gthread_mutex_t;

typedef struct {
  long counter;
  long depth;
  unsigned long owner;
  void *sema;
} __gthread_recursive_mutex_t;
# 373 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\x86_64-w64-mingw32\\bits/gthr-default.h" 3
extern int _CRT_MT;
extern int __mingwthr_key_dtor (unsigned long, void (*) (void *));
# 400 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\x86_64-w64-mingw32\\bits/gthr-default.h" 3
static inline int
__gthread_active_p (void)
{

  return _CRT_MT;



}







extern int __gthr_win32_once (__gthread_once_t *, void (*) (void));
extern int __gthr_win32_key_create (__gthread_key_t *, void (*) (void*));
extern int __gthr_win32_key_delete (__gthread_key_t);
extern void * __gthr_win32_getspecific (__gthread_key_t);
extern int __gthr_win32_setspecific (__gthread_key_t, const void *);
extern void __gthr_win32_mutex_init_function (__gthread_mutex_t *);
extern int __gthr_win32_mutex_lock (__gthread_mutex_t *);
extern int __gthr_win32_mutex_trylock (__gthread_mutex_t *);
extern int __gthr_win32_mutex_unlock (__gthread_mutex_t *);
extern void
  __gthr_win32_recursive_mutex_init_function (__gthread_recursive_mutex_t *);
extern int __gthr_win32_recursive_mutex_lock (__gthread_recursive_mutex_t *);
extern int
  __gthr_win32_recursive_mutex_trylock (__gthread_recursive_mutex_t *);
extern int __gthr_win32_recursive_mutex_unlock (__gthread_recursive_mutex_t *);
extern void __gthr_win32_mutex_destroy (__gthread_mutex_t *);
extern int
  __gthr_win32_recursive_mutex_destroy (__gthread_recursive_mutex_t *);

static inline int
__gthread_once (__gthread_once_t *__once, void (*__func) (void))
{
  if (__gthread_active_p ())
    return __gthr_win32_once (__once, __func);
  else
    return -1;
}

static inline int
__gthread_key_create (__gthread_key_t *__key, void (*__dtor) (void *))
{
  return __gthr_win32_key_create (__key, __dtor);
}

static inline int
__gthread_key_delete (__gthread_key_t __key)
{
  return __gthr_win32_key_delete (__key);
}

static inline void *
__gthread_getspecific (__gthread_key_t __key)
{
  return __gthr_win32_getspecific (__key);
}

static inline int
__gthread_setspecific (__gthread_key_t __key, const void *__ptr)
{
  return __gthr_win32_setspecific (__key, __ptr);
}

static inline void
__gthread_mutex_init_function (__gthread_mutex_t *__mutex)
{
  __gthr_win32_mutex_init_function (__mutex);
}

static inline void
__gthread_mutex_destroy (__gthread_mutex_t *__mutex)
{
  __gthr_win32_mutex_destroy (__mutex);
}

static inline int
__gthread_mutex_lock (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthr_win32_mutex_lock (__mutex);
  else
    return 0;
}

static inline int
__gthread_mutex_trylock (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthr_win32_mutex_trylock (__mutex);
  else
    return 0;
}

static inline int
__gthread_mutex_unlock (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthr_win32_mutex_unlock (__mutex);
  else
    return 0;
}

static inline void
__gthread_recursive_mutex_init_function (__gthread_recursive_mutex_t *__mutex)
{
   __gthr_win32_recursive_mutex_init_function (__mutex);
}

static inline int
__gthread_recursive_mutex_lock (__gthread_recursive_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthr_win32_recursive_mutex_lock (__mutex);
  else
    return 0;
}

static inline int
__gthread_recursive_mutex_trylock (__gthread_recursive_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthr_win32_recursive_mutex_trylock (__mutex);
  else
    return 0;
}

static inline int
__gthread_recursive_mutex_unlock (__gthread_recursive_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthr_win32_recursive_mutex_unlock (__mutex);
  else
    return 0;
}

static inline int
__gthread_recursive_mutex_destroy (__gthread_recursive_mutex_t *__mutex)
{
  return __gthr_win32_recursive_mutex_destroy (__mutex);
}
# 782 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\x86_64-w64-mingw32\\bits/gthr-default.h" 3
}
# 149 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\x86_64-w64-mingw32\\bits/gthr.h" 2 3


#pragma GCC visibility pop
# 36 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\ext/atomicity.h" 2 3
# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\x86_64-w64-mingw32\\bits/atomic_word.h" 1 3
# 32 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\x86_64-w64-mingw32\\bits/atomic_word.h" 3
typedef int _Atomic_word;
# 37 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\ext/atomicity.h" 2 3

namespace __gnu_cxx
{







  static inline _Atomic_word
  __exchange_and_add(volatile _Atomic_word* __mem, int __val)
  { return __atomic_fetch_add(__mem, __val, 4); }

  static inline void
  __atomic_add(volatile _Atomic_word* __mem, int __val)
  { __atomic_fetch_add(__mem, __val, 4); }
# 64 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\ext/atomicity.h" 3
  static inline _Atomic_word
  __exchange_and_add_single(_Atomic_word* __mem, int __val)
  {
    _Atomic_word __result = *__mem;
    *__mem += __val;
    return __result;
  }

  static inline void
  __atomic_add_single(_Atomic_word* __mem, int __val)
  { *__mem += __val; }

  static inline _Atomic_word
  __attribute__ ((__unused__))
  __exchange_and_add_dispatch(_Atomic_word* __mem, int __val)
  {

    if (__gthread_active_p())
      return __exchange_and_add(__mem, __val);
    else
      return __exchange_and_add_single(__mem, __val);



  }

  static inline void
  __attribute__ ((__unused__))
  __atomic_add_dispatch(_Atomic_word* __mem, int __val)
  {

    if (__gthread_active_p())
      __atomic_add(__mem, __val);
    else
      __atomic_add_single(__mem, __val);



  }


}
# 40 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/ios_base.h" 2 3

# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_classes.h" 1 3
# 38 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_classes.h" 3


# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\string" 1 3
# 37 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\string" 3




# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/allocator.h" 1 3
# 46 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/allocator.h" 3
# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\x86_64-w64-mingw32\\bits/c++allocator.h" 1 3
# 33 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\x86_64-w64-mingw32\\bits/c++allocator.h" 3
# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\ext/new_allocator.h" 1 3
# 40 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\ext/new_allocator.h" 3
namespace __gnu_cxx
{


  using std::size_t;
  using std::ptrdiff_t;
# 57 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\ext/new_allocator.h" 3
  template<typename _Tp>
    class new_allocator
    {
    public:
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Tp* pointer;
      typedef const _Tp* const_pointer;
      typedef _Tp& reference;
      typedef const _Tp& const_reference;
      typedef _Tp value_type;

      template<typename _Tp1>
 struct rebind
 { typedef new_allocator<_Tp1> other; };




      typedef std::true_type propagate_on_container_move_assignment;


      new_allocator() noexcept { }

      new_allocator(const new_allocator&) noexcept { }

      template<typename _Tp1>
 new_allocator(const new_allocator<_Tp1>&) noexcept { }

      ~new_allocator() noexcept { }

      pointer
      address(reference __x) const noexcept
      { return std::__addressof(__x); }

      const_pointer
      address(const_reference __x) const noexcept
      { return std::__addressof(__x); }



      pointer
      allocate(size_type __n, const void* = static_cast<const void*>(0))
      {
 if (__n > this->max_size())
   std::__throw_bad_alloc();
# 111 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\ext/new_allocator.h" 3
 return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }


      void
      deallocate(pointer __p, size_type)
      {







 ::operator delete(__p);
      }

      size_type
      max_size() const noexcept
      { return size_t(-1) / sizeof(_Tp); }


      template<typename _Up, typename... _Args>
 void
 construct(_Up* __p, _Args&&... __args)
 { ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
 void
 destroy(_Up* __p) { __p->~_Up(); }
# 151 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\ext/new_allocator.h" 3
    };

  template<typename _Tp>
    inline bool
    operator==(const new_allocator<_Tp>&, const new_allocator<_Tp>&)
    { return true; }

  template<typename _Tp>
    inline bool
    operator!=(const new_allocator<_Tp>&, const new_allocator<_Tp>&)
    { return false; }


}
# 34 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\x86_64-w64-mingw32\\bits/c++allocator.h" 2 3


namespace std
{
# 47 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\x86_64-w64-mingw32\\bits/c++allocator.h" 3
  template<typename _Tp>
    using __allocator_base = __gnu_cxx::new_allocator<_Tp>;
}
# 47 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/allocator.h" 2 3
# 57 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/allocator.h" 3
namespace std
{
# 67 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/allocator.h" 3
  template<>
    class allocator<void>
    {
    public:
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef void* pointer;
      typedef const void* const_pointer;
      typedef void value_type;

      template<typename _Tp1>
 struct rebind
 { typedef allocator<_Tp1> other; };




      typedef true_type propagate_on_container_move_assignment;

      typedef true_type is_always_equal;

      template<typename _Up, typename... _Args>
 void
 construct(_Up* __p, _Args&&... __args)
 { ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
 void
 destroy(_Up* __p) { __p->~_Up(); }

    };
# 107 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/allocator.h" 3
  template<typename _Tp>
    class allocator : public __allocator_base<_Tp>
    {
   public:
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Tp* pointer;
      typedef const _Tp* const_pointer;
      typedef _Tp& reference;
      typedef const _Tp& const_reference;
      typedef _Tp value_type;

      template<typename _Tp1>
 struct rebind
 { typedef allocator<_Tp1> other; };




      typedef true_type propagate_on_container_move_assignment;

      typedef true_type is_always_equal;


      allocator() throw() { }

      allocator(const allocator& __a) throw()
      : __allocator_base<_Tp>(__a) { }

      template<typename _Tp1>
 allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }


    };

  template<typename _T1, typename _T2>
    inline bool
    operator==(const allocator<_T1>&, const allocator<_T2>&)
    noexcept
    { return true; }

  template<typename _Tp>
    inline bool
    operator==(const allocator<_Tp>&, const allocator<_Tp>&)
    noexcept
    { return true; }

  template<typename _T1, typename _T2>
    inline bool
    operator!=(const allocator<_T1>&, const allocator<_T2>&)
    noexcept
    { return false; }

  template<typename _Tp>
    inline bool
    operator!=(const allocator<_Tp>&, const allocator<_Tp>&)
    noexcept
    { return false; }



  template<typename _Tp>
    class allocator<const _Tp>
    {
    public:
      typedef _Tp value_type;
      template<typename _Up> allocator(const allocator<_Up>&) { }
    };

  template<typename _Tp>
    class allocator<volatile _Tp>
    {
    public:
      typedef _Tp value_type;
      template<typename _Up> allocator(const allocator<_Up>&) { }
    };

  template<typename _Tp>
    class allocator<const volatile _Tp>
    {
    public:
      typedef _Tp value_type;
      template<typename _Up> allocator(const allocator<_Up>&) { }
    };






  extern template class allocator<char>;
  extern template class allocator<wchar_t>;






  template<typename _Alloc, bool = __is_empty(_Alloc)>
    struct __alloc_swap
    { static void _S_do_it(_Alloc&, _Alloc&) noexcept { } };

  template<typename _Alloc>
    struct __alloc_swap<_Alloc, false>
    {
      static void
      _S_do_it(_Alloc& __one, _Alloc& __two) noexcept
      {

 if (__one != __two)
   swap(__one, __two);
      }
    };


  template<typename _Alloc, bool = __is_empty(_Alloc)>
    struct __alloc_neq
    {
      static bool
      _S_do_it(const _Alloc&, const _Alloc&)
      { return false; }
    };

  template<typename _Alloc>
    struct __alloc_neq<_Alloc, false>
    {
      static bool
      _S_do_it(const _Alloc& __one, const _Alloc& __two)
      { return __one != __two; }
    };


  template<typename _Tp, bool
    = __or_<is_copy_constructible<typename _Tp::value_type>,
            is_nothrow_move_constructible<typename _Tp::value_type>>::value>
    struct __shrink_to_fit_aux
    { static bool _S_do_it(_Tp&) noexcept { return false; } };

  template<typename _Tp>
    struct __shrink_to_fit_aux<_Tp, true>
    {
      static bool
      _S_do_it(_Tp& __c) noexcept
      {
# 264 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/allocator.h" 3
 return false;

      }
    };



}
# 42 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\string" 2 3


# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/ostream_insert.h" 1 3
# 34 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/ostream_insert.h" 3


# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/cxxabi_forced.h" 1 3
# 35 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/cxxabi_forced.h" 3

#pragma GCC visibility push(default)


namespace __cxxabiv1
{







  class __forced_unwind
  {
    virtual ~__forced_unwind() throw();


    virtual void __pure_dummy() = 0;
  };
}


#pragma GCC visibility pop
# 37 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/ostream_insert.h" 2 3

namespace std
{


  template<typename _CharT, typename _Traits>
    inline void
    __ostream_write(basic_ostream<_CharT, _Traits>& __out,
      const _CharT* __s, streamsize __n)
    {
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const streamsize __put = __out.rdbuf()->sputn(__s, __n);
      if (__put != __n)
 __out.setstate(__ios_base::badbit);
    }

  template<typename _CharT, typename _Traits>
    inline void
    __ostream_fill(basic_ostream<_CharT, _Traits>& __out, streamsize __n)
    {
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const _CharT __c = __out.fill();
      for (; __n > 0; --__n)
 {
   const typename _Traits::int_type __put = __out.rdbuf()->sputc(__c);
   if (_Traits::eq_int_type(__put, _Traits::eof()))
     {
       __out.setstate(__ios_base::badbit);
       break;
     }
 }
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    __ostream_insert(basic_ostream<_CharT, _Traits>& __out,
       const _CharT* __s, streamsize __n)
    {
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      typename __ostream_type::sentry __cerb(__out);
      if (__cerb)
 {
   if (true)
     {
       const streamsize __w = __out.width();
       if (__w > __n)
  {
    const bool __left = ((__out.flags()
     & __ios_base::adjustfield)
           == __ios_base::left);
    if (!__left)
      __ostream_fill(__out, __w - __n);
    if (__out.good())
      __ostream_write(__out, __s, __n);
    if (__left && __out.good())
      __ostream_fill(__out, __w - __n);
  }
       else
  __ostream_write(__out, __s, __n);
       __out.width(0);
     }
   if (false)
     {
       __out._M_setstate(__ios_base::badbit);
                              ;
     }
   if (false)
     { __out._M_setstate(__ios_base::badbit); }
 }
      return __out;
    }




  extern template ostream& __ostream_insert(ostream&, const char*, streamsize);


  extern template wostream& __ostream_insert(wostream&, const wchar_t*,
          streamsize);




}
# 45 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\string" 2 3



# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/stl_function.h" 1 3
# 63 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/stl_function.h" 3
namespace std
{
# 104 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/stl_function.h" 3
  template<typename _Arg, typename _Result>
    struct unary_function
    {

      typedef _Arg argument_type;


      typedef _Result result_type;
    };




  template<typename _Arg1, typename _Arg2, typename _Result>
    struct binary_function
    {

      typedef _Arg1 first_argument_type;


      typedef _Arg2 second_argument_type;


      typedef _Result result_type;
    };
# 144 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/stl_function.h" 3
  struct __is_transparent;

  template<typename _Tp = void>
    struct plus;

  template<typename _Tp = void>
    struct minus;

  template<typename _Tp = void>
    struct multiplies;

  template<typename _Tp = void>
    struct divides;

  template<typename _Tp = void>
    struct modulus;

  template<typename _Tp = void>
    struct negate;



  template<typename _Tp>
    struct plus : public binary_function<_Tp, _Tp, _Tp>
    {
      constexpr
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x + __y; }
    };


  template<typename _Tp>
    struct minus : public binary_function<_Tp, _Tp, _Tp>
    {
      constexpr
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x - __y; }
    };


  template<typename _Tp>
    struct multiplies : public binary_function<_Tp, _Tp, _Tp>
    {
      constexpr
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x * __y; }
    };


  template<typename _Tp>
    struct divides : public binary_function<_Tp, _Tp, _Tp>
    {
      constexpr
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x / __y; }
    };


  template<typename _Tp>
    struct modulus : public binary_function<_Tp, _Tp, _Tp>
    {
      constexpr
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x % __y; }
    };


  template<typename _Tp>
    struct negate : public unary_function<_Tp, _Tp>
    {
      constexpr
      _Tp
      operator()(const _Tp& __x) const
      { return -__x; }
    };





  template<>
    struct plus<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) + std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) + std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) + std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct minus<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) - std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) - std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) - std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct multiplies<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) * std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) * std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) * std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct divides<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) / std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) / std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) / std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct modulus<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) % std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) % std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) % std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct negate<void>
    {
      template <typename _Tp>
 constexpr
 auto
 operator()(_Tp&& __t) const
 noexcept(noexcept(-std::forward<_Tp>(__t)))
 -> decltype(-std::forward<_Tp>(__t))
 { return -std::forward<_Tp>(__t); }

      typedef __is_transparent is_transparent;
    };
# 330 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/stl_function.h" 3
  template<typename _Tp = void>
    struct equal_to;

  template<typename _Tp = void>
    struct not_equal_to;

  template<typename _Tp = void>
    struct greater;

  template<typename _Tp = void>
    struct less;

  template<typename _Tp = void>
    struct greater_equal;

  template<typename _Tp = void>
    struct less_equal;



  template<typename _Tp>
    struct equal_to : public binary_function<_Tp, _Tp, bool>
    {
      constexpr
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x == __y; }
    };


  template<typename _Tp>
    struct not_equal_to : public binary_function<_Tp, _Tp, bool>
    {
      constexpr
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x != __y; }
    };


  template<typename _Tp>
    struct greater : public binary_function<_Tp, _Tp, bool>
    {
      constexpr
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x > __y; }
    };


  template<typename _Tp>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      constexpr
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x < __y; }
    };


  template<typename _Tp>
    struct greater_equal : public binary_function<_Tp, _Tp, bool>
    {
      constexpr
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x >= __y; }
    };


  template<typename _Tp>
    struct less_equal : public binary_function<_Tp, _Tp, bool>
    {
      constexpr
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x <= __y; }
    };


  template<typename _Tp>
    struct greater<_Tp*> : public binary_function<_Tp*, _Tp*, bool>
    {
      constexpr bool
      operator()(_Tp* __x, _Tp* __y) const noexcept
      {
 if (__builtin_constant_p (__x > __y))
   return __x > __y;
 return (long unsigned int)__x > (long unsigned int)__y;
      }
    };


  template<typename _Tp>
    struct less<_Tp*> : public binary_function<_Tp*, _Tp*, bool>
    {
      constexpr bool
      operator()(_Tp* __x, _Tp* __y) const noexcept
      {
 if (__builtin_constant_p (__x < __y))
   return __x < __y;
 return (long unsigned int)__x < (long unsigned int)__y;
      }
    };


  template<typename _Tp>
    struct greater_equal<_Tp*> : public binary_function<_Tp*, _Tp*, bool>
    {
      constexpr bool
      operator()(_Tp* __x, _Tp* __y) const noexcept
      {
 if (__builtin_constant_p (__x >= __y))
   return __x >= __y;
 return (long unsigned int)__x >= (long unsigned int)__y;
      }
    };


  template<typename _Tp>
    struct less_equal<_Tp*> : public binary_function<_Tp*, _Tp*, bool>
    {
      constexpr bool
      operator()(_Tp* __x, _Tp* __y) const noexcept
      {
 if (__builtin_constant_p (__x <= __y))
   return __x <= __y;
 return (long unsigned int)__x <= (long unsigned int)__y;
      }
    };



  template<>
    struct equal_to<void>
    {
      template <typename _Tp, typename _Up>
 constexpr auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) == std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) == std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) == std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct not_equal_to<void>
    {
      template <typename _Tp, typename _Up>
 constexpr auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) != std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) != std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) != std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct greater<void>
    {
      template <typename _Tp, typename _Up>
 constexpr auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) > std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) > std::forward<_Up>(__u))
 {
   return _S_cmp(std::forward<_Tp>(__t), std::forward<_Up>(__u),
   __ptr_cmp<_Tp, _Up>{});
 }

      template<typename _Tp, typename _Up>
 constexpr bool
 operator()(_Tp* __t, _Up* __u) const noexcept
 { return greater<common_type_t<_Tp*, _Up*>>{}(__t, __u); }

      typedef __is_transparent is_transparent;

    private:
      template <typename _Tp, typename _Up>
 static constexpr decltype(auto)
 _S_cmp(_Tp&& __t, _Up&& __u, false_type)
 { return std::forward<_Tp>(__t) > std::forward<_Up>(__u); }

      template <typename _Tp, typename _Up>
 static constexpr bool
 _S_cmp(_Tp&& __t, _Up&& __u, true_type) noexcept
 {
   return greater<const volatile void*>{}(
       static_cast<const volatile void*>(std::forward<_Tp>(__t)),
       static_cast<const volatile void*>(std::forward<_Up>(__u)));
 }


      template<typename _Tp, typename _Up, typename = void>
 struct __not_overloaded2 : true_type { };


      template<typename _Tp, typename _Up>
 struct __not_overloaded2<_Tp, _Up, __void_t<
   decltype(std::declval<_Tp>().operator>(std::declval<_Up>()))>>
 : false_type { };


      template<typename _Tp, typename _Up, typename = void>
 struct __not_overloaded : __not_overloaded2<_Tp, _Up> { };


      template<typename _Tp, typename _Up>
 struct __not_overloaded<_Tp, _Up, __void_t<
   decltype(operator>(std::declval<_Tp>(), std::declval<_Up>()))>>
 : false_type { };

      template<typename _Tp, typename _Up>
 using __ptr_cmp = __and_<__not_overloaded<_Tp, _Up>,
       is_convertible<_Tp, const volatile void*>,
       is_convertible<_Up, const volatile void*>>;
    };


  template<>
    struct less<void>
    {
      template <typename _Tp, typename _Up>
 constexpr auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) < std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) < std::forward<_Up>(__u))
 {
   return _S_cmp(std::forward<_Tp>(__t), std::forward<_Up>(__u),
   __ptr_cmp<_Tp, _Up>{});
 }

      template<typename _Tp, typename _Up>
 constexpr bool
 operator()(_Tp* __t, _Up* __u) const noexcept
 { return less<common_type_t<_Tp*, _Up*>>{}(__t, __u); }

      typedef __is_transparent is_transparent;

    private:
      template <typename _Tp, typename _Up>
 static constexpr decltype(auto)
 _S_cmp(_Tp&& __t, _Up&& __u, false_type)
 { return std::forward<_Tp>(__t) < std::forward<_Up>(__u); }

      template <typename _Tp, typename _Up>
 static constexpr bool
 _S_cmp(_Tp&& __t, _Up&& __u, true_type) noexcept
 {
   return less<const volatile void*>{}(
       static_cast<const volatile void*>(std::forward<_Tp>(__t)),
       static_cast<const volatile void*>(std::forward<_Up>(__u)));
 }


      template<typename _Tp, typename _Up, typename = void>
 struct __not_overloaded2 : true_type { };


      template<typename _Tp, typename _Up>
 struct __not_overloaded2<_Tp, _Up, __void_t<
   decltype(std::declval<_Tp>().operator<(std::declval<_Up>()))>>
 : false_type { };


      template<typename _Tp, typename _Up, typename = void>
 struct __not_overloaded : __not_overloaded2<_Tp, _Up> { };


      template<typename _Tp, typename _Up>
 struct __not_overloaded<_Tp, _Up, __void_t<
   decltype(operator<(std::declval<_Tp>(), std::declval<_Up>()))>>
 : false_type { };

      template<typename _Tp, typename _Up>
 using __ptr_cmp = __and_<__not_overloaded<_Tp, _Up>,
       is_convertible<_Tp, const volatile void*>,
       is_convertible<_Up, const volatile void*>>;
    };


  template<>
    struct greater_equal<void>
    {
      template <typename _Tp, typename _Up>
 constexpr auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) >= std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) >= std::forward<_Up>(__u))
 {
   return _S_cmp(std::forward<_Tp>(__t), std::forward<_Up>(__u),
   __ptr_cmp<_Tp, _Up>{});
 }

      template<typename _Tp, typename _Up>
 constexpr bool
 operator()(_Tp* __t, _Up* __u) const noexcept
 { return greater_equal<common_type_t<_Tp*, _Up*>>{}(__t, __u); }

      typedef __is_transparent is_transparent;

    private:
      template <typename _Tp, typename _Up>
 static constexpr decltype(auto)
 _S_cmp(_Tp&& __t, _Up&& __u, false_type)
 { return std::forward<_Tp>(__t) >= std::forward<_Up>(__u); }

      template <typename _Tp, typename _Up>
 static constexpr bool
 _S_cmp(_Tp&& __t, _Up&& __u, true_type) noexcept
 {
   return greater_equal<const volatile void*>{}(
       static_cast<const volatile void*>(std::forward<_Tp>(__t)),
       static_cast<const volatile void*>(std::forward<_Up>(__u)));
 }


      template<typename _Tp, typename _Up, typename = void>
 struct __not_overloaded2 : true_type { };


      template<typename _Tp, typename _Up>
 struct __not_overloaded2<_Tp, _Up, __void_t<
   decltype(std::declval<_Tp>().operator>=(std::declval<_Up>()))>>
 : false_type { };


      template<typename _Tp, typename _Up, typename = void>
 struct __not_overloaded : __not_overloaded2<_Tp, _Up> { };


      template<typename _Tp, typename _Up>
 struct __not_overloaded<_Tp, _Up, __void_t<
   decltype(operator>=(std::declval<_Tp>(), std::declval<_Up>()))>>
 : false_type { };

      template<typename _Tp, typename _Up>
 using __ptr_cmp = __and_<__not_overloaded<_Tp, _Up>,
       is_convertible<_Tp, const volatile void*>,
       is_convertible<_Up, const volatile void*>>;
    };


  template<>
    struct less_equal<void>
    {
      template <typename _Tp, typename _Up>
 constexpr auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) <= std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) <= std::forward<_Up>(__u))
 {
   return _S_cmp(std::forward<_Tp>(__t), std::forward<_Up>(__u),
   __ptr_cmp<_Tp, _Up>{});
 }

      template<typename _Tp, typename _Up>
 constexpr bool
 operator()(_Tp* __t, _Up* __u) const noexcept
 { return less_equal<common_type_t<_Tp*, _Up*>>{}(__t, __u); }

      typedef __is_transparent is_transparent;

    private:
      template <typename _Tp, typename _Up>
 static constexpr decltype(auto)
 _S_cmp(_Tp&& __t, _Up&& __u, false_type)
 { return std::forward<_Tp>(__t) <= std::forward<_Up>(__u); }

      template <typename _Tp, typename _Up>
 static constexpr bool
 _S_cmp(_Tp&& __t, _Up&& __u, true_type) noexcept
 {
   return less_equal<const volatile void*>{}(
       static_cast<const volatile void*>(std::forward<_Tp>(__t)),
       static_cast<const volatile void*>(std::forward<_Up>(__u)));
 }


      template<typename _Tp, typename _Up, typename = void>
 struct __not_overloaded2 : true_type { };


      template<typename _Tp, typename _Up>
 struct __not_overloaded2<_Tp, _Up, __void_t<
   decltype(std::declval<_Tp>().operator<=(std::declval<_Up>()))>>
 : false_type { };


      template<typename _Tp, typename _Up, typename = void>
 struct __not_overloaded : __not_overloaded2<_Tp, _Up> { };


      template<typename _Tp, typename _Up>
 struct __not_overloaded<_Tp, _Up, __void_t<
   decltype(operator<=(std::declval<_Tp>(), std::declval<_Up>()))>>
 : false_type { };

      template<typename _Tp, typename _Up>
 using __ptr_cmp = __and_<__not_overloaded<_Tp, _Up>,
       is_convertible<_Tp, const volatile void*>,
       is_convertible<_Up, const volatile void*>>;
    };
# 750 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/stl_function.h" 3
  template<typename _Tp = void>
    struct logical_and;

  template<typename _Tp = void>
    struct logical_or;

  template<typename _Tp = void>
    struct logical_not;



  template<typename _Tp>
    struct logical_and : public binary_function<_Tp, _Tp, bool>
    {
      constexpr
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x && __y; }
    };


  template<typename _Tp>
    struct logical_or : public binary_function<_Tp, _Tp, bool>
    {
      constexpr
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x || __y; }
    };


  template<typename _Tp>
    struct logical_not : public unary_function<_Tp, bool>
    {
      constexpr
      bool
      operator()(const _Tp& __x) const
      { return !__x; }
    };



  template<>
    struct logical_and<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) && std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) && std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) && std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct logical_or<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) || std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) || std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) || std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct logical_not<void>
    {
      template <typename _Tp>
 constexpr
 auto
 operator()(_Tp&& __t) const
 noexcept(noexcept(!std::forward<_Tp>(__t)))
 -> decltype(!std::forward<_Tp>(__t))
 { return !std::forward<_Tp>(__t); }

      typedef __is_transparent is_transparent;
    };




  template<typename _Tp = void>
    struct bit_and;

  template<typename _Tp = void>
    struct bit_or;

  template<typename _Tp = void>
    struct bit_xor;

  template<typename _Tp = void>
    struct bit_not;




  template<typename _Tp>
    struct bit_and : public binary_function<_Tp, _Tp, _Tp>
    {
      constexpr
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x & __y; }
    };

  template<typename _Tp>
    struct bit_or : public binary_function<_Tp, _Tp, _Tp>
    {
      constexpr
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x | __y; }
    };

  template<typename _Tp>
    struct bit_xor : public binary_function<_Tp, _Tp, _Tp>
    {
      constexpr
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x ^ __y; }
    };

  template<typename _Tp>
    struct bit_not : public unary_function<_Tp, _Tp>
    {
    constexpr
      _Tp
      operator()(const _Tp& __x) const
      { return ~__x; }
    };


  template <>
    struct bit_and<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) & std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) & std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) & std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };

  template <>
    struct bit_or<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) | std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) | std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) | std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };

  template <>
    struct bit_xor<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) ^ std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) ^ std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) ^ std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };

  template <>
    struct bit_not<void>
    {
      template <typename _Tp>
 constexpr
 auto
 operator()(_Tp&& __t) const
 noexcept(noexcept(~std::forward<_Tp>(__t)))
 -> decltype(~std::forward<_Tp>(__t))
 { return ~std::forward<_Tp>(__t); }

      typedef __is_transparent is_transparent;
    };
# 978 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/stl_function.h" 3
  template<typename _Predicate>
    class unary_negate
    : public unary_function<typename _Predicate::argument_type, bool>
    {
    protected:
      _Predicate _M_pred;

    public:
      constexpr
      explicit
      unary_negate(const _Predicate& __x) : _M_pred(__x) { }

      constexpr
      bool
      operator()(const typename _Predicate::argument_type& __x) const
      { return !_M_pred(__x); }
    };


  template<typename _Predicate>
    constexpr
    inline unary_negate<_Predicate>
    not1(const _Predicate& __pred)
    { return unary_negate<_Predicate>(__pred); }


  template<typename _Predicate>
    class binary_negate
    : public binary_function<typename _Predicate::first_argument_type,
        typename _Predicate::second_argument_type, bool>
    {
    protected:
      _Predicate _M_pred;

    public:
      constexpr
      explicit
      binary_negate(const _Predicate& __x) : _M_pred(__x) { }

      constexpr
      bool
      operator()(const typename _Predicate::first_argument_type& __x,
   const typename _Predicate::second_argument_type& __y) const
      { return !_M_pred(__x, __y); }
    };


  template<typename _Predicate>
    constexpr
    inline binary_negate<_Predicate>
    not2(const _Predicate& __pred)
    { return binary_negate<_Predicate>(__pred); }
# 1055 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/stl_function.h" 3
  template<typename _Arg, typename _Result>
    class pointer_to_unary_function : public unary_function<_Arg, _Result>
    {
    protected:
      _Result (*_M_ptr)(_Arg);

    public:
      pointer_to_unary_function() { }

      explicit
      pointer_to_unary_function(_Result (*__x)(_Arg))
      : _M_ptr(__x) { }

      _Result
      operator()(_Arg __x) const
      { return _M_ptr(__x); }
    };


  template<typename _Arg, typename _Result>
    inline pointer_to_unary_function<_Arg, _Result>
    ptr_fun(_Result (*__x)(_Arg))
    { return pointer_to_unary_function<_Arg, _Result>(__x); }


  template<typename _Arg1, typename _Arg2, typename _Result>
    class pointer_to_binary_function
    : public binary_function<_Arg1, _Arg2, _Result>
    {
    protected:
      _Result (*_M_ptr)(_Arg1, _Arg2);

    public:
      pointer_to_binary_function() { }

      explicit
      pointer_to_binary_function(_Result (*__x)(_Arg1, _Arg2))
      : _M_ptr(__x) { }

      _Result
      operator()(_Arg1 __x, _Arg2 __y) const
      { return _M_ptr(__x, __y); }
    };


  template<typename _Arg1, typename _Arg2, typename _Result>
    inline pointer_to_binary_function<_Arg1, _Arg2, _Result>
    ptr_fun(_Result (*__x)(_Arg1, _Arg2))
    { return pointer_to_binary_function<_Arg1, _Arg2, _Result>(__x); }


  template<typename _Tp>
    struct _Identity
    : public unary_function<_Tp, _Tp>
    {
      _Tp&
      operator()(_Tp& __x) const
      { return __x; }

      const _Tp&
      operator()(const _Tp& __x) const
      { return __x; }
    };


  template<typename _Tp> struct _Identity<const _Tp> : _Identity<_Tp> { };

  template<typename _Pair>
    struct _Select1st
    : public unary_function<_Pair, typename _Pair::first_type>
    {
      typename _Pair::first_type&
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
      { return __x.first; }


      template<typename _Pair2>
        typename _Pair2::first_type&
        operator()(_Pair2& __x) const
        { return __x.first; }

      template<typename _Pair2>
        const typename _Pair2::first_type&
        operator()(const _Pair2& __x) const
        { return __x.first; }

    };

  template<typename _Pair>
    struct _Select2nd
    : public unary_function<_Pair, typename _Pair::second_type>
    {
      typename _Pair::second_type&
      operator()(_Pair& __x) const
      { return __x.second; }

      const typename _Pair::second_type&
      operator()(const _Pair& __x) const
      { return __x.second; }
    };
# 1178 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/stl_function.h" 3
  template<typename _Ret, typename _Tp>
    class mem_fun_t : public unary_function<_Tp*, _Ret>
    {
    public:
      explicit
      mem_fun_t(_Ret (_Tp::*__pf)())
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp* __p) const
      { return (__p->*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)();
    };



  template<typename _Ret, typename _Tp>
    class const_mem_fun_t : public unary_function<const _Tp*, _Ret>
    {
    public:
      explicit
      const_mem_fun_t(_Ret (_Tp::*__pf)() const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp* __p) const
      { return (__p->*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)() const;
    };



  template<typename _Ret, typename _Tp>
    class mem_fun_ref_t : public unary_function<_Tp, _Ret>
    {
    public:
      explicit
      mem_fun_ref_t(_Ret (_Tp::*__pf)())
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp& __r) const
      { return (__r.*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)();
  };



  template<typename _Ret, typename _Tp>
    class const_mem_fun_ref_t : public unary_function<_Tp, _Ret>
    {
    public:
      explicit
      const_mem_fun_ref_t(_Ret (_Tp::*__pf)() const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp& __r) const
      { return (__r.*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)() const;
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class mem_fun1_t : public binary_function<_Tp*, _Arg, _Ret>
    {
    public:
      explicit
      mem_fun1_t(_Ret (_Tp::*__pf)(_Arg))
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp* __p, _Arg __x) const
      { return (__p->*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg);
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class const_mem_fun1_t : public binary_function<const _Tp*, _Arg, _Ret>
    {
    public:
      explicit
      const_mem_fun1_t(_Ret (_Tp::*__pf)(_Arg) const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp* __p, _Arg __x) const
      { return (__p->*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg) const;
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class mem_fun1_ref_t : public binary_function<_Tp, _Arg, _Ret>
    {
    public:
      explicit
      mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg))
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp& __r, _Arg __x) const
      { return (__r.*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg);
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class const_mem_fun1_ref_t : public binary_function<_Tp, _Arg, _Ret>
    {
    public:
      explicit
      const_mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg) const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp& __r, _Arg __x) const
      { return (__r.*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg) const;
    };



  template<typename _Ret, typename _Tp>
    inline mem_fun_t<_Ret, _Tp>
    mem_fun(_Ret (_Tp::*__f)())
    { return mem_fun_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp>
    inline const_mem_fun_t<_Ret, _Tp>
    mem_fun(_Ret (_Tp::*__f)() const)
    { return const_mem_fun_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp>
    inline mem_fun_ref_t<_Ret, _Tp>
    mem_fun_ref(_Ret (_Tp::*__f)())
    { return mem_fun_ref_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp>
    inline const_mem_fun_ref_t<_Ret, _Tp>
    mem_fun_ref(_Ret (_Tp::*__f)() const)
    { return const_mem_fun_ref_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline mem_fun1_t<_Ret, _Tp, _Arg>
    mem_fun(_Ret (_Tp::*__f)(_Arg))
    { return mem_fun1_t<_Ret, _Tp, _Arg>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline const_mem_fun1_t<_Ret, _Tp, _Arg>
    mem_fun(_Ret (_Tp::*__f)(_Arg) const)
    { return const_mem_fun1_t<_Ret, _Tp, _Arg>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline mem_fun1_ref_t<_Ret, _Tp, _Arg>
    mem_fun_ref(_Ret (_Tp::*__f)(_Arg))
    { return mem_fun1_ref_t<_Ret, _Tp, _Arg>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline const_mem_fun1_ref_t<_Ret, _Tp, _Arg>
    mem_fun_ref(_Ret (_Tp::*__f)(_Arg) const)
    { return const_mem_fun1_ref_t<_Ret, _Tp, _Arg>(__f); }




}



# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\backward/binders.h" 1 3
# 60 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\backward/binders.h" 3
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

namespace std
{
# 107 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\backward/binders.h" 3
  template<typename _Operation>
    class binder1st
    : public unary_function<typename _Operation::second_argument_type,
       typename _Operation::result_type>
    {
    protected:
      _Operation op;
      typename _Operation::first_argument_type value;

    public:
      binder1st(const _Operation& __x,
  const typename _Operation::first_argument_type& __y)
      : op(__x), value(__y) { }

      typename _Operation::result_type
      operator()(const typename _Operation::second_argument_type& __x) const
      { return op(value, __x); }



      typename _Operation::result_type
      operator()(typename _Operation::second_argument_type& __x) const
      { return op(value, __x); }
    } __attribute__ ((__deprecated__));


  template<typename _Operation, typename _Tp>
    inline binder1st<_Operation>
    bind1st(const _Operation& __fn, const _Tp& __x)
    {
      typedef typename _Operation::first_argument_type _Arg1_type;
      return binder1st<_Operation>(__fn, _Arg1_type(__x));
    }


  template<typename _Operation>
    class binder2nd
    : public unary_function<typename _Operation::first_argument_type,
       typename _Operation::result_type>
    {
    protected:
      _Operation op;
      typename _Operation::second_argument_type value;

    public:
      binder2nd(const _Operation& __x,
  const typename _Operation::second_argument_type& __y)
      : op(__x), value(__y) { }

      typename _Operation::result_type
      operator()(const typename _Operation::first_argument_type& __x) const
      { return op(__x, value); }



      typename _Operation::result_type
      operator()(typename _Operation::first_argument_type& __x) const
      { return op(__x, value); }
    } __attribute__ ((__deprecated__));


  template<typename _Operation, typename _Tp>
    inline binder2nd<_Operation>
    bind2nd(const _Operation& __fn, const _Tp& __x)
    {
      typedef typename _Operation::second_argument_type _Arg2_type;
      return binder2nd<_Operation>(__fn, _Arg2_type(__x));
    }



}

#pragma GCC diagnostic pop
# 1369 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/stl_function.h" 2 3
# 49 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\string" 2 3


# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/range_access.h" 1 3
# 34 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/range_access.h" 3


# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\initializer_list" 1 3
# 34 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\initializer_list" 3





#pragma GCC visibility push(default)



namespace std
{

  template<class _E>
    class initializer_list
    {
    public:
      typedef _E value_type;
      typedef const _E& reference;
      typedef const _E& const_reference;
      typedef size_t size_type;
      typedef const _E* iterator;
      typedef const _E* const_iterator;

    private:
      iterator _M_array;
      size_type _M_len;


      constexpr initializer_list(const_iterator __a, size_type __l)
      : _M_array(__a), _M_len(__l) { }

    public:
      constexpr initializer_list() noexcept
      : _M_array(0), _M_len(0) { }


      constexpr size_type
      size() const noexcept { return _M_len; }


      constexpr const_iterator
      begin() const noexcept { return _M_array; }


      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
    };






  template<class _Tp>
    constexpr const _Tp*
    begin(initializer_list<_Tp> __ils) noexcept
    { return __ils.begin(); }






  template<class _Tp>
    constexpr const _Tp*
    end(initializer_list<_Tp> __ils) noexcept
    { return __ils.end(); }
}

#pragma GCC visibility pop
# 37 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/range_access.h" 2 3
namespace std
{







  template<typename _Container>
    inline auto
    begin(_Container& __cont) -> decltype(__cont.begin())
    { return __cont.begin(); }






  template<typename _Container>
    inline auto
    begin(const _Container& __cont) -> decltype(__cont.begin())
    { return __cont.begin(); }






  template<typename _Container>
    inline auto
    end(_Container& __cont) -> decltype(__cont.end())
    { return __cont.end(); }






  template<typename _Container>
    inline auto
    end(const _Container& __cont) -> decltype(__cont.end())
    { return __cont.end(); }





  template<typename _Tp, size_t _Nm>
    inline constexpr _Tp*
    begin(_Tp (&__arr)[_Nm])
    { return __arr; }






  template<typename _Tp, size_t _Nm>
    inline constexpr _Tp*
    end(_Tp (&__arr)[_Nm])
    { return __arr + _Nm; }



  template<typename _Tp> class valarray;

  template<typename _Tp> _Tp* begin(valarray<_Tp>&);
  template<typename _Tp> const _Tp* begin(const valarray<_Tp>&);
  template<typename _Tp> _Tp* end(valarray<_Tp>&);
  template<typename _Tp> const _Tp* end(const valarray<_Tp>&);






  template<typename _Container>
    inline constexpr auto
    cbegin(const _Container& __cont) noexcept(noexcept(std::begin(__cont)))
      -> decltype(std::begin(__cont))
    { return std::begin(__cont); }






  template<typename _Container>
    inline constexpr auto
    cend(const _Container& __cont) noexcept(noexcept(std::end(__cont)))
      -> decltype(std::end(__cont))
    { return std::end(__cont); }






  template<typename _Container>
    inline auto
    rbegin(_Container& __cont) -> decltype(__cont.rbegin())
    { return __cont.rbegin(); }






  template<typename _Container>
    inline auto
    rbegin(const _Container& __cont) -> decltype(__cont.rbegin())
    { return __cont.rbegin(); }






  template<typename _Container>
    inline auto
    rend(_Container& __cont) -> decltype(__cont.rend())
    { return __cont.rend(); }






  template<typename _Container>
    inline auto
    rend(const _Container& __cont) -> decltype(__cont.rend())
    { return __cont.rend(); }






  template<typename _Tp, size_t _Nm>
    inline reverse_iterator<_Tp*>
    rbegin(_Tp (&__arr)[_Nm])
    { return reverse_iterator<_Tp*>(__arr + _Nm); }






  template<typename _Tp, size_t _Nm>
    inline reverse_iterator<_Tp*>
    rend(_Tp (&__arr)[_Nm])
    { return reverse_iterator<_Tp*>(__arr); }






  template<typename _Tp>
    inline reverse_iterator<const _Tp*>
    rbegin(initializer_list<_Tp> __il)
    { return reverse_iterator<const _Tp*>(__il.end()); }






  template<typename _Tp>
    inline reverse_iterator<const _Tp*>
    rend(initializer_list<_Tp> __il)
    { return reverse_iterator<const _Tp*>(__il.begin()); }






  template<typename _Container>
    inline auto
    crbegin(const _Container& __cont) -> decltype(std::rbegin(__cont))
    { return std::rbegin(__cont); }






  template<typename _Container>
    inline auto
    crend(const _Container& __cont) -> decltype(std::rend(__cont))
    { return std::rend(__cont); }
# 324 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/range_access.h" 3
}
# 52 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\string" 2 3
# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 1 3
# 38 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3


# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\ext/alloc_traits.h" 1 3
# 33 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\ext/alloc_traits.h" 3



# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/alloc_traits.h" 1 3
# 41 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/alloc_traits.h" 3
namespace std
{


  struct __allocator_traits_base
  {
    template<typename _Tp, typename _Up, typename = void>
      struct __rebind : __replace_first_arg<_Tp, _Up> { };

    template<typename _Tp, typename _Up>
      struct __rebind<_Tp, _Up,
        __void_t<typename _Tp::template rebind<_Up>::other>>
      { using type = typename _Tp::template rebind<_Up>::other; };

  protected:
    template<typename _Tp>
      using __pointer = typename _Tp::pointer;
    template<typename _Tp>
      using __c_pointer = typename _Tp::const_pointer;
    template<typename _Tp>
      using __v_pointer = typename _Tp::void_pointer;
    template<typename _Tp>
      using __cv_pointer = typename _Tp::const_void_pointer;
    template<typename _Tp>
      using __pocca = typename _Tp::propagate_on_container_copy_assignment;
    template<typename _Tp>
      using __pocma = typename _Tp::propagate_on_container_move_assignment;
    template<typename _Tp>
      using __pocs = typename _Tp::propagate_on_container_swap;
    template<typename _Tp>
      using __equal = typename _Tp::is_always_equal;
  };

  template<typename _Alloc, typename _Up>
    using __alloc_rebind
      = typename __allocator_traits_base::template __rebind<_Alloc, _Up>::type;





  template<typename _Alloc>
    struct allocator_traits : __allocator_traits_base
    {

      typedef _Alloc allocator_type;

      typedef typename _Alloc::value_type value_type;






      using pointer = __detected_or_t<value_type*, __pointer, _Alloc>;

    private:

      template<template<typename> class _Func, typename _Tp, typename = void>
 struct _Ptr
 {
   using type = typename pointer_traits<pointer>::template rebind<_Tp>;
 };

      template<template<typename> class _Func, typename _Tp>
 struct _Ptr<_Func, _Tp, __void_t<_Func<_Alloc>>>
 {
   using type = _Func<_Alloc>;
 };


      template<typename _A2, typename _PtrT, typename = void>
 struct _Diff
 { using type = typename pointer_traits<_PtrT>::difference_type; };

      template<typename _A2, typename _PtrT>
 struct _Diff<_A2, _PtrT, __void_t<typename _A2::difference_type>>
 { using type = typename _A2::difference_type; };


      template<typename _A2, typename _DiffT, typename = void>
 struct _Size : make_unsigned<_DiffT> { };

      template<typename _A2, typename _DiffT>
 struct _Size<_A2, _DiffT, __void_t<typename _A2::size_type>>
 { using type = typename _A2::size_type; };

    public:






      using const_pointer = typename _Ptr<__c_pointer, const value_type>::type;







      using void_pointer = typename _Ptr<__v_pointer, void>::type;







      using const_void_pointer = typename _Ptr<__cv_pointer, const void>::type;







      using difference_type = typename _Diff<_Alloc, pointer>::type;







      using size_type = typename _Size<_Alloc, difference_type>::type;







      using propagate_on_container_copy_assignment
 = __detected_or_t<false_type, __pocca, _Alloc>;







      using propagate_on_container_move_assignment
 = __detected_or_t<false_type, __pocma, _Alloc>;







      using propagate_on_container_swap
 = __detected_or_t<false_type, __pocs, _Alloc>;







      using is_always_equal
 = __detected_or_t<typename is_empty<_Alloc>::type, __equal, _Alloc>;

      template<typename _Tp>
 using rebind_alloc = __alloc_rebind<_Alloc, _Tp>;
      template<typename _Tp>
 using rebind_traits = allocator_traits<rebind_alloc<_Tp>>;

    private:
      template<typename _Alloc2>
 static auto
 _S_allocate(_Alloc2& __a, size_type __n, const_void_pointer __hint, int)
 -> decltype(__a.allocate(__n, __hint))
 { return __a.allocate(__n, __hint); }

      template<typename _Alloc2>
 static pointer
 _S_allocate(_Alloc2& __a, size_type __n, const_void_pointer, ...)
 { return __a.allocate(__n); }

      template<typename _Tp, typename... _Args>
 struct __construct_helper
 {
   template<typename _Alloc2,
     typename = decltype(std::declval<_Alloc2*>()->construct(
    std::declval<_Tp*>(), std::declval<_Args>()...))>
     static true_type __test(int);

   template<typename>
     static false_type __test(...);

   using type = decltype(__test<_Alloc>(0));
 };

      template<typename _Tp, typename... _Args>
 using __has_construct
   = typename __construct_helper<_Tp, _Args...>::type;

      template<typename _Tp, typename... _Args>
 static _Require<__has_construct<_Tp, _Args...>>
 _S_construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 { __a.construct(__p, std::forward<_Args>(__args)...); }

      template<typename _Tp, typename... _Args>
 static
 _Require<__and_<__not_<__has_construct<_Tp, _Args...>>,
          is_constructible<_Tp, _Args...>>>
 _S_construct(_Alloc&, _Tp* __p, _Args&&... __args)
 { ::new((void*)__p) _Tp(std::forward<_Args>(__args)...); }

      template<typename _Alloc2, typename _Tp>
 static auto
 _S_destroy(_Alloc2& __a, _Tp* __p, int)
 -> decltype(__a.destroy(__p))
 { __a.destroy(__p); }

      template<typename _Alloc2, typename _Tp>
 static void
 _S_destroy(_Alloc2&, _Tp* __p, ...)
 { __p->~_Tp(); }

      template<typename _Alloc2>
 static auto
 _S_max_size(_Alloc2& __a, int)
 -> decltype(__a.max_size())
 { return __a.max_size(); }

      template<typename _Alloc2>
 static size_type
 _S_max_size(_Alloc2&, ...)
 {


   return __gnu_cxx::__numeric_traits<size_type>::__max
     / sizeof(value_type);
 }

      template<typename _Alloc2>
 static auto
 _S_select(_Alloc2& __a, int)
 -> decltype(__a.select_on_container_copy_construction())
 { return __a.select_on_container_copy_construction(); }

      template<typename _Alloc2>
 static _Alloc2
 _S_select(_Alloc2& __a, ...)
 { return __a; }

    public:
# 299 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/alloc_traits.h" 3
      static pointer
      allocate(_Alloc& __a, size_type __n)
      { return __a.allocate(__n); }
# 314 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/alloc_traits.h" 3
      static pointer
      allocate(_Alloc& __a, size_type __n, const_void_pointer __hint)
      { return _S_allocate(__a, __n, __hint, 0); }
# 326 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/alloc_traits.h" 3
      static void
      deallocate(_Alloc& __a, pointer __p, size_type __n)
      { __a.deallocate(__p, __n); }
# 341 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/alloc_traits.h" 3
      template<typename _Tp, typename... _Args>
 static auto construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 -> decltype(_S_construct(__a, __p, std::forward<_Args>(__args)...))
 { _S_construct(__a, __p, std::forward<_Args>(__args)...); }
# 354 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/alloc_traits.h" 3
      template<typename _Tp>
 static void destroy(_Alloc& __a, _Tp* __p)
 { _S_destroy(__a, __p, 0); }
# 366 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/alloc_traits.h" 3
      static size_type max_size(const _Alloc& __a) noexcept
      { return _S_max_size(__a, 0); }
# 377 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/alloc_traits.h" 3
      static _Alloc
      select_on_container_copy_construction(const _Alloc& __rhs)
      { return _S_select(__rhs, 0); }
    };


  template<typename _Tp>
    struct allocator_traits<allocator<_Tp>>
    {

      using allocator_type = allocator<_Tp>;

      using value_type = _Tp;


      using pointer = _Tp*;


      using const_pointer = const _Tp*;


      using void_pointer = void*;


      using const_void_pointer = const void*;


      using difference_type = std::ptrdiff_t;


      using size_type = std::size_t;


      using propagate_on_container_copy_assignment = false_type;


      using propagate_on_container_move_assignment = true_type;


      using propagate_on_container_swap = false_type;


      using is_always_equal = true_type;

      template<typename _Up>
 using rebind_alloc = allocator<_Up>;

      template<typename _Up>
 using rebind_traits = allocator_traits<allocator<_Up>>;
# 434 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/alloc_traits.h" 3
      static pointer
      allocate(allocator_type& __a, size_type __n)
      { return __a.allocate(__n); }
# 448 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/alloc_traits.h" 3
      static pointer
      allocate(allocator_type& __a, size_type __n, const_void_pointer __hint)
      { return __a.allocate(__n, __hint); }
# 460 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/alloc_traits.h" 3
      static void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
      { __a.deallocate(__p, __n); }
# 472 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/alloc_traits.h" 3
      template<typename _Up, typename... _Args>
 static void
 construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 { __a.construct(__p, std::forward<_Args>(__args)...); }
# 484 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/alloc_traits.h" 3
      template<typename _Up>
 static void
 destroy(allocator_type& __a, _Up* __p)
 { __a.destroy(__p); }






      static size_type
      max_size(const allocator_type& __a) noexcept
      { return __a.max_size(); }






      static allocator_type
      select_on_container_copy_construction(const allocator_type& __rhs)
      { return __rhs; }
    };


  template<typename _Alloc>
    inline void
    __do_alloc_on_copy(_Alloc& __one, const _Alloc& __two, true_type)
    { __one = __two; }

  template<typename _Alloc>
    inline void
    __do_alloc_on_copy(_Alloc&, const _Alloc&, false_type)
    { }

  template<typename _Alloc>
    inline void __alloc_on_copy(_Alloc& __one, const _Alloc& __two)
    {
      typedef allocator_traits<_Alloc> __traits;
      typedef typename __traits::propagate_on_container_copy_assignment __pocca;
      __do_alloc_on_copy(__one, __two, __pocca());
    }

  template<typename _Alloc>
    inline _Alloc __alloc_on_copy(const _Alloc& __a)
    {
      typedef allocator_traits<_Alloc> __traits;
      return __traits::select_on_container_copy_construction(__a);
    }

  template<typename _Alloc>
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
    { __one = std::move(__two); }

  template<typename _Alloc>
    inline void __do_alloc_on_move(_Alloc&, _Alloc&, false_type)
    { }

  template<typename _Alloc>
    inline void __alloc_on_move(_Alloc& __one, _Alloc& __two)
    {
      typedef allocator_traits<_Alloc> __traits;
      typedef typename __traits::propagate_on_container_move_assignment __pocma;
      __do_alloc_on_move(__one, __two, __pocma());
    }

  template<typename _Alloc>
    inline void __do_alloc_on_swap(_Alloc& __one, _Alloc& __two, true_type)
    {
      using std::swap;
      swap(__one, __two);
    }

  template<typename _Alloc>
    inline void __do_alloc_on_swap(_Alloc&, _Alloc&, false_type)
    { }

  template<typename _Alloc>
    inline void __alloc_on_swap(_Alloc& __one, _Alloc& __two)
    {
      typedef allocator_traits<_Alloc> __traits;
      typedef typename __traits::propagate_on_container_swap __pocs;
      __do_alloc_on_swap(__one, __two, __pocs());
    }

  template<typename _Alloc>
    class __is_copy_insertable_impl
    {
      typedef allocator_traits<_Alloc> _Traits;

      template<typename _Up, typename
        = decltype(_Traits::construct(std::declval<_Alloc&>(),
          std::declval<_Up*>(),
          std::declval<const _Up&>()))>
 static true_type
 _M_select(int);

      template<typename _Up>
 static false_type
 _M_select(...);

    public:
      typedef decltype(_M_select<typename _Alloc::value_type>(0)) type;
    };


  template<typename _Alloc>
    struct __is_copy_insertable
    : __is_copy_insertable_impl<_Alloc>::type
    { };


  template<typename _Tp>
    struct __is_copy_insertable<allocator<_Tp>>
    : is_copy_constructible<_Tp>
    { };


  template<typename _Alloc, typename = void>
    struct __is_allocator : false_type { };

  template<typename _Alloc>
    struct __is_allocator<_Alloc,
      __void_t<typename _Alloc::value_type,
        decltype(std::declval<_Alloc&>().allocate(size_t{}))>>
    : true_type { };

  template<typename _Alloc>
    using _RequireAllocator
      = typename enable_if<__is_allocator<_Alloc>::value, _Alloc>::type;


}
# 37 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\ext/alloc_traits.h" 2 3




namespace __gnu_cxx
{






template<typename _Alloc, typename = typename _Alloc::value_type>
  struct __alloc_traits

  : std::allocator_traits<_Alloc>

  {
    typedef _Alloc allocator_type;

    typedef std::allocator_traits<_Alloc> _Base_type;
    typedef typename _Base_type::value_type value_type;
    typedef typename _Base_type::pointer pointer;
    typedef typename _Base_type::const_pointer const_pointer;
    typedef typename _Base_type::size_type size_type;
    typedef typename _Base_type::difference_type difference_type;

    typedef value_type& reference;
    typedef const value_type& const_reference;
    using _Base_type::allocate;
    using _Base_type::deallocate;
    using _Base_type::construct;
    using _Base_type::destroy;
    using _Base_type::max_size;

  private:
    template<typename _Ptr>
      using __is_custom_pointer
 = std::__and_<std::is_same<pointer, _Ptr>,
        std::__not_<std::is_pointer<_Ptr>>>;

  public:

    template<typename _Ptr, typename... _Args>
      static typename std::enable_if<__is_custom_pointer<_Ptr>::value>::type
      construct(_Alloc& __a, _Ptr __p, _Args&&... __args)
      {
 _Base_type::construct(__a, std::__to_address(__p),
         std::forward<_Args>(__args)...);
      }


    template<typename _Ptr>
      static typename std::enable_if<__is_custom_pointer<_Ptr>::value>::type
      destroy(_Alloc& __a, _Ptr __p)
      { _Base_type::destroy(__a, std::__to_address(__p)); }

    static _Alloc _S_select_on_copy(const _Alloc& __a)
    { return _Base_type::select_on_container_copy_construction(__a); }

    static void _S_on_swap(_Alloc& __a, _Alloc& __b)
    { std::__alloc_on_swap(__a, __b); }

    static constexpr bool _S_propagate_on_copy_assign()
    { return _Base_type::propagate_on_container_copy_assignment::value; }

    static constexpr bool _S_propagate_on_move_assign()
    { return _Base_type::propagate_on_container_move_assignment::value; }

    static constexpr bool _S_propagate_on_swap()
    { return _Base_type::propagate_on_container_swap::value; }

    static constexpr bool _S_always_equal()
    { return _Base_type::is_always_equal::value; }

    static constexpr bool _S_nothrow_move()
    { return _S_propagate_on_move_assign() || _S_always_equal(); }

    template<typename _Tp>
      struct rebind
      { typedef typename _Base_type::template rebind_alloc<_Tp> other; };
# 158 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\ext/alloc_traits.h" 3
  };


}
# 41 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 2 3
# 52 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
namespace std
{



namespace __cxx11 {
# 76 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    class basic_string
    {
      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
 rebind<_CharT>::other _Char_alloc_type;
      typedef __gnu_cxx::__alloc_traits<_Char_alloc_type> _Alloc_traits;


    public:
      typedef _Traits traits_type;
      typedef typename _Traits::char_type value_type;
      typedef _Char_alloc_type allocator_type;
      typedef typename _Alloc_traits::size_type size_type;
      typedef typename _Alloc_traits::difference_type difference_type;
      typedef typename _Alloc_traits::reference reference;
      typedef typename _Alloc_traits::const_reference const_reference;
      typedef typename _Alloc_traits::pointer pointer;
      typedef typename _Alloc_traits::const_pointer const_pointer;
      typedef __gnu_cxx::__normal_iterator<pointer, basic_string> iterator;
      typedef __gnu_cxx::__normal_iterator<const_pointer, basic_string>
       const_iterator;
      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
      typedef std::reverse_iterator<iterator> reverse_iterator;


      static const size_type npos = static_cast<size_type>(-1);

    private:




      typedef const_iterator __const_iterator;
# 139 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
      struct _Alloc_hider : allocator_type
      {




 _Alloc_hider(pointer __dat, const _Alloc& __a)
 : allocator_type(__a), _M_p(__dat) { }

 _Alloc_hider(pointer __dat, _Alloc&& __a = _Alloc())
 : allocator_type(std::move(__a)), _M_p(__dat) { }


 pointer _M_p;
      };

      _Alloc_hider _M_dataplus;
      size_type _M_string_length;

      enum { _S_local_capacity = 15 / sizeof(_CharT) };

      union
      {
 _CharT _M_local_buf[_S_local_capacity + 1];
 size_type _M_allocated_capacity;
      };

      void
      _M_data(pointer __p)
      { _M_dataplus._M_p = __p; }

      void
      _M_length(size_type __length)
      { _M_string_length = __length; }

      pointer
      _M_data() const
      { return _M_dataplus._M_p; }

      pointer
      _M_local_data()
      {

 return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);



      }

      const_pointer
      _M_local_data() const
      {

 return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);



      }

      void
      _M_capacity(size_type __capacity)
      { _M_allocated_capacity = __capacity; }

      void
      _M_set_length(size_type __n)
      {
 _M_length(__n);
 traits_type::assign(_M_data()[__n], _CharT());
      }

      bool
      _M_is_local() const
      { return _M_data() == _M_local_data(); }


      pointer
      _M_create(size_type&, size_type);

      void
      _M_dispose()
      {
 if (!_M_is_local())
   _M_destroy(_M_allocated_capacity);
      }

      void
      _M_destroy(size_type __size) throw()
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }



      template<typename _InIterator>
        void
        _M_construct_aux(_InIterator __beg, _InIterator __end,
    std::__false_type)
 {
          typedef typename iterator_traits<_InIterator>::iterator_category _Tag;
          _M_construct(__beg, __end, _Tag());
 }



      template<typename _Integer>
        void
        _M_construct_aux(_Integer __beg, _Integer __end, std::__true_type)
 { _M_construct_aux_2(static_cast<size_type>(__beg), __end); }

      void
      _M_construct_aux_2(size_type __req, _CharT __c)
      { _M_construct(__req, __c); }

      template<typename _InIterator>
        void
        _M_construct(_InIterator __beg, _InIterator __end)
 {
   typedef typename std::__is_integer<_InIterator>::__type _Integral;
   _M_construct_aux(__beg, __end, _Integral());
        }


      template<typename _InIterator>
        void
        _M_construct(_InIterator __beg, _InIterator __end,
       std::input_iterator_tag);



      template<typename _FwdIterator>
        void
        _M_construct(_FwdIterator __beg, _FwdIterator __end,
       std::forward_iterator_tag);

      void
      _M_construct(size_type __req, _CharT __c);

      allocator_type&
      _M_get_allocator()
      { return _M_dataplus; }

      const allocator_type&
      _M_get_allocator() const
      { return _M_dataplus; }

    private:
# 298 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
      size_type
      _M_check(size_type __pos, const char* __s) const
      {
 if (__pos > this->size())
   __throw_out_of_range_fmt(("%s: __pos (which is %zu) > " "this->size() (which is %zu)"),

       __s, __pos, this->size());
 return __pos;
      }

      void
      _M_check_length(size_type __n1, size_type __n2, const char* __s) const
      {
 if (this->max_size() - (this->size() - __n1) < __n2)
   __throw_length_error((__s));
      }



      size_type
      _M_limit(size_type __pos, size_type __off) const noexcept
      {
 const bool __testoff = __off < this->size() - __pos;
 return __testoff ? __off : this->size() - __pos;
      }


      bool
      _M_disjunct(const _CharT* __s) const noexcept
      {
 return (less<const _CharT*>()(__s, _M_data())
  || less<const _CharT*>()(_M_data() + this->size(), __s));
      }



      static void
      _S_copy(_CharT* __d, const _CharT* __s, size_type __n)
      {
 if (__n == 1)
   traits_type::assign(*__d, *__s);
 else
   traits_type::copy(__d, __s, __n);
      }

      static void
      _S_move(_CharT* __d, const _CharT* __s, size_type __n)
      {
 if (__n == 1)
   traits_type::assign(*__d, *__s);
 else
   traits_type::move(__d, __s, __n);
      }

      static void
      _S_assign(_CharT* __d, size_type __n, _CharT __c)
      {
 if (__n == 1)
   traits_type::assign(*__d, __c);
 else
   traits_type::assign(__d, __n, __c);
      }



      template<class _Iterator>
        static void
        _S_copy_chars(_CharT* __p, _Iterator __k1, _Iterator __k2)
        {
   for (; __k1 != __k2; ++__k1, (void)++__p)
     traits_type::assign(*__p, *__k1);
 }

      static void
      _S_copy_chars(_CharT* __p, iterator __k1, iterator __k2) noexcept
      { _S_copy_chars(__p, __k1.base(), __k2.base()); }

      static void
      _S_copy_chars(_CharT* __p, const_iterator __k1, const_iterator __k2)
      noexcept
      { _S_copy_chars(__p, __k1.base(), __k2.base()); }

      static void
      _S_copy_chars(_CharT* __p, _CharT* __k1, _CharT* __k2) noexcept
      { _S_copy(__p, __k1, __k2 - __k1); }

      static void
      _S_copy_chars(_CharT* __p, const _CharT* __k1, const _CharT* __k2)
      noexcept
      { _S_copy(__p, __k1, __k2 - __k1); }

      static int
      _S_compare(size_type __n1, size_type __n2) noexcept
      {
 const difference_type __d = difference_type(__n1 - __n2);

 if (__d > __gnu_cxx::__numeric_traits<int>::__max)
   return __gnu_cxx::__numeric_traits<int>::__max;
 else if (__d < __gnu_cxx::__numeric_traits<int>::__min)
   return __gnu_cxx::__numeric_traits<int>::__min;
 else
   return int(__d);
      }

      void
      _M_assign(const basic_string&);

      void
      _M_mutate(size_type __pos, size_type __len1, const _CharT* __s,
  size_type __len2);

      void
      _M_erase(size_type __pos, size_type __n);

    public:







      basic_string()
      noexcept(is_nothrow_default_constructible<_Alloc>::value)
      : _M_dataplus(_M_local_data())
      { _M_set_length(0); }




      explicit
      basic_string(const _Alloc& __a) noexcept
      : _M_dataplus(_M_local_data(), __a)
      { _M_set_length(0); }





      basic_string(const basic_string& __str)
      : _M_dataplus(_M_local_data(),
      _Alloc_traits::_S_select_on_copy(__str._M_get_allocator()))
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
# 450 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
      basic_string(const basic_string& __str, size_type __pos,
     const _Alloc& __a = _Alloc())
      : _M_dataplus(_M_local_data(), __a)
      {
 const _CharT* __start = __str._M_data()
   + __str._M_check(__pos, "basic_string::basic_string");
 _M_construct(__start, __start + __str._M_limit(__pos, npos));
      }







      basic_string(const basic_string& __str, size_type __pos,
     size_type __n)
      : _M_dataplus(_M_local_data())
      {
 const _CharT* __start = __str._M_data()
   + __str._M_check(__pos, "basic_string::basic_string");
 _M_construct(__start, __start + __str._M_limit(__pos, __n));
      }
# 481 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
      basic_string(const basic_string& __str, size_type __pos,
     size_type __n, const _Alloc& __a)
      : _M_dataplus(_M_local_data(), __a)
      {
 const _CharT* __start
   = __str._M_data() + __str._M_check(__pos, "string::string");
 _M_construct(__start, __start + __str._M_limit(__pos, __n));
      }
# 499 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
      basic_string(const _CharT* __s, size_type __n,
     const _Alloc& __a = _Alloc())
      : _M_dataplus(_M_local_data(), __a)
      { _M_construct(__s, __s + __n); }
# 514 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      : _M_dataplus(_M_local_data(), __a)
      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
# 529 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
      basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc())
      : _M_dataplus(_M_local_data(), __a)
      { _M_construct(__n, __c); }
# 541 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
      basic_string(basic_string&& __str) noexcept
      : _M_dataplus(_M_local_data(), std::move(__str._M_get_allocator()))
      {
 if (__str._M_is_local())
   {
     traits_type::copy(_M_local_buf, __str._M_local_buf,
         _S_local_capacity + 1);
   }
 else
   {
     _M_data(__str._M_data());
     _M_capacity(__str._M_allocated_capacity);
   }




 _M_length(__str.length());
 __str._M_data(__str._M_local_data());
 __str._M_set_length(0);
      }






      basic_string(initializer_list<_CharT> __l, const _Alloc& __a = _Alloc())
      : _M_dataplus(_M_local_data(), __a)
      { _M_construct(__l.begin(), __l.end()); }

      basic_string(const basic_string& __str, const _Alloc& __a)
      : _M_dataplus(_M_local_data(), __a)
      { _M_construct(__str.begin(), __str.end()); }

      basic_string(basic_string&& __str, const _Alloc& __a)
      noexcept(_Alloc_traits::_S_always_equal())
      : _M_dataplus(_M_local_data(), __a)
      {
 if (__str._M_is_local())
   {
     traits_type::copy(_M_local_buf, __str._M_local_buf,
         _S_local_capacity + 1);
     _M_length(__str.length());
     __str._M_set_length(0);
   }
 else if (_Alloc_traits::_S_always_equal()
     || __str.get_allocator() == __a)
   {
     _M_data(__str._M_data());
     _M_length(__str.length());
     _M_capacity(__str._M_allocated_capacity);
     __str._M_data(__str._M_local_buf);
     __str._M_set_length(0);
   }
 else
   _M_construct(__str.begin(), __str.end());
      }
# 609 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
      template<typename _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>



        basic_string(_InputIterator __beg, _InputIterator __end,
       const _Alloc& __a = _Alloc())
 : _M_dataplus(_M_local_data(), __a)
 { _M_construct(__beg, __end); }
# 656 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
      ~basic_string()
      { _M_dispose(); }





      basic_string&
      operator=(const basic_string& __str)
      {

 if (_Alloc_traits::_S_propagate_on_copy_assign())
   {
     if (!_Alloc_traits::_S_always_equal() && !_M_is_local()
  && _M_get_allocator() != __str._M_get_allocator())
       {


  if (__str.size() <= _S_local_capacity)
    {
      _M_destroy(_M_allocated_capacity);
      _M_data(_M_local_data());
      _M_set_length(0);
    }
  else
    {
      const auto __len = __str.size();
      auto __alloc = __str._M_get_allocator();

      auto __ptr = _Alloc_traits::allocate(__alloc, __len + 1);
      _M_destroy(_M_allocated_capacity);
      _M_data(__ptr);
      _M_capacity(__len);
      _M_set_length(__len);
    }
       }
     std::__alloc_on_copy(_M_get_allocator(), __str._M_get_allocator());
   }

 return this->assign(__str);
      }





      basic_string&
      operator=(const _CharT* __s)
      { return this->assign(__s); }
# 713 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
      basic_string&
      operator=(_CharT __c)
      {
 this->assign(1, __c);
 return *this;
      }
# 731 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
      basic_string&
      operator=(basic_string&& __str)
      noexcept(_Alloc_traits::_S_nothrow_move())
      {
 if (!_M_is_local() && _Alloc_traits::_S_propagate_on_move_assign()
     && !_Alloc_traits::_S_always_equal()
     && _M_get_allocator() != __str._M_get_allocator())
   {

     _M_destroy(_M_allocated_capacity);
     _M_data(_M_local_data());
     _M_set_length(0);
   }

 std::__alloc_on_move(_M_get_allocator(), __str._M_get_allocator());

 if (__str._M_is_local())
   {

     if (__str.size())
       this->_S_copy(_M_data(), __str._M_data(), __str.size());
     _M_set_length(__str.size());
   }
 else if (_Alloc_traits::_S_propagate_on_move_assign()
     || _Alloc_traits::_S_always_equal()
     || _M_get_allocator() == __str._M_get_allocator())
   {

     pointer __data = nullptr;
     size_type __capacity;
     if (!_M_is_local())
       {
  if (_Alloc_traits::_S_always_equal())
    {

      __data = _M_data();
      __capacity = _M_allocated_capacity;
    }
  else
    _M_destroy(_M_allocated_capacity);
       }

     _M_data(__str._M_data());
     _M_length(__str.length());
     _M_capacity(__str._M_allocated_capacity);
     if (__data)
       {
  __str._M_data(__data);
  __str._M_capacity(__capacity);
       }
     else
       __str._M_data(__str._M_local_buf);
   }
 else
   assign(__str);
 __str.clear();
 return *this;
      }





      basic_string&
      operator=(initializer_list<_CharT> __l)
      {
 this->assign(__l.begin(), __l.size());
 return *this;
      }
# 825 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
      iterator
      begin() noexcept
      { return iterator(_M_data()); }





      const_iterator
      begin() const noexcept
      { return const_iterator(_M_data()); }





      iterator
      end() noexcept
      { return iterator(_M_data() + this->size()); }





      const_iterator
      end() const noexcept
      { return const_iterator(_M_data() + this->size()); }






      reverse_iterator
      rbegin() noexcept
      { return reverse_iterator(this->end()); }






      const_reverse_iterator
      rbegin() const noexcept
      { return const_reverse_iterator(this->end()); }






      reverse_iterator
      rend() noexcept
      { return reverse_iterator(this->begin()); }






      const_reverse_iterator
      rend() const noexcept
      { return const_reverse_iterator(this->begin()); }






      const_iterator
      cbegin() const noexcept
      { return const_iterator(this->_M_data()); }





      const_iterator
      cend() const noexcept
      { return const_iterator(this->_M_data() + this->size()); }






      const_reverse_iterator
      crbegin() const noexcept
      { return const_reverse_iterator(this->end()); }






      const_reverse_iterator
      crend() const noexcept
      { return const_reverse_iterator(this->begin()); }


    public:



      size_type
      size() const noexcept
      { return _M_string_length; }



      size_type
      length() const noexcept
      { return _M_string_length; }


      size_type
      max_size() const noexcept
      { return (_Alloc_traits::max_size(_M_get_allocator()) - 1) / 2; }
# 954 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
      void
      resize(size_type __n, _CharT __c);
# 967 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
      void
      resize(size_type __n)
      { this->resize(__n, _CharT()); }



      void
      shrink_to_fit() noexcept
      {
# 985 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
      }






      size_type
      capacity() const noexcept
      {
 return _M_is_local() ? size_type(_S_local_capacity)
                      : _M_allocated_capacity;
      }
# 1016 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
      void
      reserve(size_type __res_arg = 0);




      void
      clear() noexcept
      { _M_set_length(0); }





      bool
      empty() const noexcept
      { return this->size() == 0; }
# 1045 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
      const_reference
      operator[] (size_type __pos) const noexcept
      {
                                  ;
 return _M_data()[__pos];
      }
# 1062 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
      reference
      operator[](size_type __pos)
      {


                                  ;

                                                                   ;
 return _M_data()[__pos];
      }
# 1083 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
      const_reference
      at(size_type __n) const
      {
 if (__n >= this->size())
   __throw_out_of_range_fmt(("basic_string::at: __n " "(which is %zu) >= this->size() " "(which is %zu)"),


       __n, this->size());
 return _M_data()[__n];
      }
# 1104 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
      reference
      at(size_type __n)
      {
 if (__n >= size())
   __throw_out_of_range_fmt(("basic_string::at: __n " "(which is %zu) >= this->size() " "(which is %zu)"),


       __n, this->size());
 return _M_data()[__n];
      }






      reference
      front() noexcept
      {
                           ;
 return operator[](0);
      }





      const_reference
      front() const noexcept
      {
                           ;
 return operator[](0);
      }





      reference
      back() noexcept
      {
                           ;
 return operator[](this->size() - 1);
      }





      const_reference
      back() const noexcept
      {
                           ;
 return operator[](this->size() - 1);
      }
# 1167 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
      basic_string&
      operator+=(const basic_string& __str)
      { return this->append(__str); }






      basic_string&
      operator+=(const _CharT* __s)
      { return this->append(__s); }






      basic_string&
      operator+=(_CharT __c)
      {
 this->push_back(__c);
 return *this;
      }







      basic_string&
      operator+=(initializer_list<_CharT> __l)
      { return this->append(__l.begin(), __l.size()); }
# 1220 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
      basic_string&
      append(const basic_string& __str)
      { return _M_append(__str._M_data(), __str.size()); }
# 1237 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
      basic_string&
      append(const basic_string& __str, size_type __pos, size_type __n = npos)
      { return _M_append(__str._M_data()
    + __str._M_check(__pos, "basic_string::append"),
    __str._M_limit(__pos, __n)); }







      basic_string&
      append(const _CharT* __s, size_type __n)
      {
                                        ;
 _M_check_length(size_type(0), __n, "basic_string::append");
 return _M_append(__s, __n);
      }






      basic_string&
      append(const _CharT* __s)
      {
                               ;
 const size_type __n = traits_type::length(__s);
 _M_check_length(size_type(0), __n, "basic_string::append");
 return _M_append(__s, __n);
      }
# 1279 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
      basic_string&
      append(size_type __n, _CharT __c)
      { return _M_replace_aux(this->size(), size_type(0), __n, __c); }







      basic_string&
      append(initializer_list<_CharT> __l)
      { return this->append(__l.begin(), __l.size()); }
# 1303 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
      template<class _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>



        basic_string&
        append(_InputIterator __first, _InputIterator __last)
        { return this->replace(end(), end(), __first, __last); }
# 1348 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
      void
      push_back(_CharT __c)
      {
 const size_type __size = this->size();
 if (__size + 1 > this->capacity())
   this->_M_mutate(__size, size_type(0), 0, size_type(1));
 traits_type::assign(this->_M_data()[__size], __c);
 this->_M_set_length(__size + 1);
      }






      basic_string&
      assign(const basic_string& __str)
      {
 this->_M_assign(__str);
 return *this;
      }
# 1379 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
      basic_string&
      assign(basic_string&& __str)
      noexcept(_Alloc_traits::_S_nothrow_move())
      {


 return *this = std::move(__str);
      }
# 1402 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
      basic_string&
      assign(const basic_string& __str, size_type __pos, size_type __n = npos)
      { return _M_replace(size_type(0), this->size(), __str._M_data()
     + __str._M_check(__pos, "basic_string::assign"),
     __str._M_limit(__pos, __n)); }
# 1418 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
      basic_string&
      assign(const _CharT* __s, size_type __n)
      {
                                        ;
 return _M_replace(size_type(0), this->size(), __s, __n);
      }
# 1434 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
      basic_string&
      assign(const _CharT* __s)
      {
                               ;
 return _M_replace(size_type(0), this->size(), __s,
     traits_type::length(__s));
      }
# 1451 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
      basic_string&
      assign(size_type __n, _CharT __c)
      { return _M_replace_aux(size_type(0), this->size(), __n, __c); }
# 1464 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
      template<class _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>



        basic_string&
        assign(_InputIterator __first, _InputIterator __last)
        { return this->replace(begin(), end(), __first, __last); }







      basic_string&
      assign(initializer_list<_CharT> __l)
      { return this->assign(__l.begin(), __l.size()); }
# 1532 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
      iterator
      insert(const_iterator __p, size_type __n, _CharT __c)
      {
                                                         ;
 const size_type __pos = __p - begin();
 this->replace(__p, __p, __n, __c);
 return iterator(this->_M_data() + __pos);
      }
# 1574 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
      template<class _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>
 iterator
        insert(const_iterator __p, _InputIterator __beg, _InputIterator __end)
        {
                                                           ;
   const size_type __pos = __p - begin();
   this->replace(__p, __p, __beg, __end);
   return iterator(this->_M_data() + __pos);
 }
# 1610 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
      void
      insert(iterator __p, initializer_list<_CharT> __l)
      {
                                                         ;
 this->insert(__p - begin(), __l.begin(), __l.size());
      }
# 1630 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos1, const basic_string& __str)
      { return this->replace(__pos1, size_type(0),
        __str._M_data(), __str.size()); }
# 1653 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos1, const basic_string& __str,
      size_type __pos2, size_type __n = npos)
      { return this->replace(__pos1, size_type(0), __str._M_data()
        + __str._M_check(__pos2, "basic_string::insert"),
        __str._M_limit(__pos2, __n)); }
# 1676 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos, const _CharT* __s, size_type __n)
      { return this->replace(__pos, size_type(0), __s, __n); }
# 1695 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos, const _CharT* __s)
      {
                               ;
 return this->replace(__pos, size_type(0), __s,
        traits_type::length(__s));
      }
# 1719 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos, size_type __n, _CharT __c)
      { return _M_replace_aux(_M_check(__pos, "basic_string::insert"),
         size_type(0), __n, __c); }
# 1737 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
      iterator
      insert(__const_iterator __p, _CharT __c)
      {
                                                         ;
 const size_type __pos = __p - begin();
 _M_replace_aux(__pos, size_type(0), size_type(1), __c);
 return iterator(_M_data() + __pos);
      }
# 1797 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
      basic_string&
      erase(size_type __pos = 0, size_type __n = npos)
      {
 _M_check(__pos, "basic_string::erase");
 if (__n == npos)
   this->_M_set_length(__pos);
 else if (__n != 0)
   this->_M_erase(__pos, _M_limit(__pos, __n));
 return *this;
      }
# 1816 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
      iterator
      erase(__const_iterator __position)
      {

                           ;
 const size_type __pos = __position - begin();
 this->_M_erase(__pos, size_type(1));
 return iterator(_M_data() + __pos);
      }
# 1835 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
      iterator
      erase(__const_iterator __first, __const_iterator __last)
      {

                        ;
        const size_type __pos = __first - begin();
 if (__last == end())
   this->_M_set_length(__pos);
 else
   this->_M_erase(__pos, __last - __first);
 return iterator(this->_M_data() + __pos);
      }







      void
      pop_back() noexcept
      {
                           ;
 _M_erase(size() - 1, 1);
      }
# 1879 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n, const basic_string& __str)
      { return this->replace(__pos, __n, __str._M_data(), __str.size()); }
# 1901 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos1, size_type __n1, const basic_string& __str,
       size_type __pos2, size_type __n2 = npos)
      { return this->replace(__pos1, __n1, __str._M_data()
        + __str._M_check(__pos2, "basic_string::replace"),
        __str._M_limit(__pos2, __n2)); }
# 1926 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n1, const _CharT* __s,
       size_type __n2)
      {
                                         ;
 return _M_replace(_M_check(__pos, "basic_string::replace"),
     _M_limit(__pos, __n1), __s, __n2);
      }
# 1951 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n1, const _CharT* __s)
      {
                               ;
 return this->replace(__pos, __n1, __s, traits_type::length(__s));
      }
# 1975 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n1, size_type __n2, _CharT __c)
      { return _M_replace_aux(_M_check(__pos, "basic_string::replace"),
         _M_limit(__pos, __n1), __n2, __c); }
# 1993 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2,
       const basic_string& __str)
      { return this->replace(__i1, __i2, __str._M_data(), __str.size()); }
# 2013 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2,
       const _CharT* __s, size_type __n)
      {

                      ;
 return this->replace(__i1 - begin(), __i2 - __i1, __s, __n);
      }
# 2035 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2, const _CharT* __s)
      {
                               ;
 return this->replace(__i1, __i2, __s, traits_type::length(__s));
      }
# 2056 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2, size_type __n,
       _CharT __c)
      {

                      ;
 return _M_replace_aux(__i1 - begin(), __i2 - __i1, __n, __c);
      }
# 2081 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
      template<class _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>
        basic_string&
        replace(const_iterator __i1, const_iterator __i2,
  _InputIterator __k1, _InputIterator __k2)
        {

                        ;
                                             ;
   return this->_M_replace_dispatch(__i1, __i2, __k1, __k2,
        std::__false_type());
 }
# 2113 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2,
       _CharT* __k1, _CharT* __k2)
      {

                      ;
                                           ;
 return this->replace(__i1 - begin(), __i2 - __i1,
        __k1, __k2 - __k1);
      }

      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2,
       const _CharT* __k1, const _CharT* __k2)
      {

                      ;
                                           ;
 return this->replace(__i1 - begin(), __i2 - __i1,
        __k1, __k2 - __k1);
      }

      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2,
       iterator __k1, iterator __k2)
      {

                      ;
                                           ;
 return this->replace(__i1 - begin(), __i2 - __i1,
        __k1.base(), __k2 - __k1);
      }

      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2,
       const_iterator __k1, const_iterator __k2)
      {

                      ;
                                           ;
 return this->replace(__i1 - begin(), __i2 - __i1,
        __k1.base(), __k2 - __k1);
      }
# 2172 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
      basic_string& replace(const_iterator __i1, const_iterator __i2,
       initializer_list<_CharT> __l)
      { return this->replace(__i1, __i2, __l.begin(), __l.size()); }
# 2231 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
    private:
      template<class _Integer>
 basic_string&
 _M_replace_dispatch(const_iterator __i1, const_iterator __i2,
       _Integer __n, _Integer __val, __true_type)
        { return _M_replace_aux(__i1 - begin(), __i2 - __i1, __n, __val); }

      template<class _InputIterator>
 basic_string&
 _M_replace_dispatch(const_iterator __i1, const_iterator __i2,
       _InputIterator __k1, _InputIterator __k2,
       __false_type);

      basic_string&
      _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,
       _CharT __c);

      basic_string&
      _M_replace(size_type __pos, size_type __len1, const _CharT* __s,
   const size_type __len2);

      basic_string&
      _M_append(const _CharT* __s, size_type __n);

    public:
# 2269 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
      size_type
      copy(_CharT* __s, size_type __n, size_type __pos = 0) const;
# 2279 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
      void
      swap(basic_string& __s) noexcept;
# 2289 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
      const _CharT*
      c_str() const noexcept
      { return _M_data(); }
# 2301 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
      const _CharT*
      data() const noexcept
      { return _M_data(); }
# 2320 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
      allocator_type
      get_allocator() const noexcept
      { return _M_get_allocator(); }
# 2336 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
      size_type
      find(const _CharT* __s, size_type __pos, size_type __n) const
      noexcept;
# 2350 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
      size_type
      find(const basic_string& __str, size_type __pos = 0) const
      noexcept
      { return this->find(__str.data(), __pos, __str.size()); }
# 2382 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
      size_type
      find(const _CharT* __s, size_type __pos = 0) const noexcept
      {
                               ;
 return this->find(__s, __pos, traits_type::length(__s));
      }
# 2399 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
      size_type
      find(_CharT __c, size_type __pos = 0) const noexcept;
# 2412 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
      size_type
      rfind(const basic_string& __str, size_type __pos = npos) const
      noexcept
      { return this->rfind(__str.data(), __pos, __str.size()); }
# 2446 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
      size_type
      rfind(const _CharT* __s, size_type __pos, size_type __n) const
      noexcept;
# 2460 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
      size_type
      rfind(const _CharT* __s, size_type __pos = npos) const
      {
                               ;
 return this->rfind(__s, __pos, traits_type::length(__s));
      }
# 2477 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
      size_type
      rfind(_CharT __c, size_type __pos = npos) const noexcept;
# 2491 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
      size_type
      find_first_of(const basic_string& __str, size_type __pos = 0) const
      noexcept
      { return this->find_first_of(__str.data(), __pos, __str.size()); }
# 2526 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
      size_type
      find_first_of(const _CharT* __s, size_type __pos, size_type __n) const
      noexcept;
# 2540 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
      size_type
      find_first_of(const _CharT* __s, size_type __pos = 0) const
      noexcept
      {
                               ;
 return this->find_first_of(__s, __pos, traits_type::length(__s));
      }
# 2560 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
      size_type
      find_first_of(_CharT __c, size_type __pos = 0) const noexcept
      { return this->find(__c, __pos); }
# 2575 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
      size_type
      find_last_of(const basic_string& __str, size_type __pos = npos) const
      noexcept
      { return this->find_last_of(__str.data(), __pos, __str.size()); }
# 2610 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
      size_type
      find_last_of(const _CharT* __s, size_type __pos, size_type __n) const
      noexcept;
# 2624 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
      size_type
      find_last_of(const _CharT* __s, size_type __pos = npos) const
      noexcept
      {
                               ;
 return this->find_last_of(__s, __pos, traits_type::length(__s));
      }
# 2644 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
      size_type
      find_last_of(_CharT __c, size_type __pos = npos) const noexcept
      { return this->rfind(__c, __pos); }
# 2658 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
      size_type
      find_first_not_of(const basic_string& __str, size_type __pos = 0) const
      noexcept
      { return this->find_first_not_of(__str.data(), __pos, __str.size()); }
# 2693 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
      size_type
      find_first_not_of(const _CharT* __s, size_type __pos,
   size_type __n) const noexcept;
# 2707 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
      size_type
      find_first_not_of(const _CharT* __s, size_type __pos = 0) const
      noexcept
      {
                               ;
 return this->find_first_not_of(__s, __pos, traits_type::length(__s));
      }
# 2725 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
      size_type
      find_first_not_of(_CharT __c, size_type __pos = 0) const
      noexcept;
# 2740 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
      size_type
      find_last_not_of(const basic_string& __str, size_type __pos = npos) const
      noexcept
      { return this->find_last_not_of(__str.data(), __pos, __str.size()); }
# 2775 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
      size_type
      find_last_not_of(const _CharT* __s, size_type __pos,
         size_type __n) const noexcept;
# 2789 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
      size_type
      find_last_not_of(const _CharT* __s, size_type __pos = npos) const
      noexcept
      {
                               ;
 return this->find_last_not_of(__s, __pos, traits_type::length(__s));
      }
# 2807 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
      size_type
      find_last_not_of(_CharT __c, size_type __pos = npos) const
      noexcept;
# 2823 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
      basic_string
      substr(size_type __pos = 0, size_type __n = npos) const
      { return basic_string(*this,
       _M_check(__pos, "basic_string::substr"), __n); }
# 2842 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
      int
      compare(const basic_string& __str) const
      {
 const size_type __size = this->size();
 const size_type __osize = __str.size();
 const size_type __len = std::min(__size, __osize);

 int __r = traits_type::compare(_M_data(), __str.data(), __len);
 if (!__r)
   __r = _S_compare(__size, __osize);
 return __r;
      }
# 2935 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
      int
      compare(size_type __pos, size_type __n, const basic_string& __str) const;
# 2961 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
      int
      compare(size_type __pos1, size_type __n1, const basic_string& __str,
       size_type __pos2, size_type __n2 = npos) const;
# 2979 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
      int
      compare(const _CharT* __s) const noexcept;
# 3003 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
      int
      compare(size_type __pos, size_type __n1, const _CharT* __s) const;
# 3030 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
      int
      compare(size_type __pos, size_type __n1, const _CharT* __s,
       size_type __n2) const;


      template<typename, typename, typename> friend class basic_stringbuf;
    };
}
# 5925 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    {
      basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
      __str.append(__rhs);
      return __str;
    }







  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT,_Traits,_Alloc>
    operator+(const _CharT* __lhs,
       const basic_string<_CharT,_Traits,_Alloc>& __rhs);







  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT,_Traits,_Alloc>
    operator+(_CharT __lhs, const basic_string<_CharT,_Traits,_Alloc>& __rhs);







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const _CharT* __rhs)
    {
      basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
      __str.append(__rhs);
      return __str;
    }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs, _CharT __rhs)
    {
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type __size_type;
      __string_type __str(__lhs);
      __str.append(__size_type(1), __rhs);
      return __str;
    }


  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return std::move(__lhs.append(__rhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       basic_string<_CharT, _Traits, _Alloc>&& __rhs)
    { return std::move(__rhs.insert(0, __lhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
       basic_string<_CharT, _Traits, _Alloc>&& __rhs)
    {
      const auto __size = __lhs.size() + __rhs.size();
      const bool __cond = (__size > __lhs.capacity()
      && __size <= __rhs.capacity());
      return __cond ? std::move(__rhs.insert(0, __lhs))
             : std::move(__lhs.append(__rhs));
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const _CharT* __lhs,
       basic_string<_CharT, _Traits, _Alloc>&& __rhs)
    { return std::move(__rhs.insert(0, __lhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(_CharT __lhs,
       basic_string<_CharT, _Traits, _Alloc>&& __rhs)
    { return std::move(__rhs.insert(0, 1, __lhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
       const _CharT* __rhs)
    { return std::move(__lhs.append(__rhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
       _CharT __rhs)
    { return std::move(__lhs.append(1, __rhs)); }
# 6046 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    noexcept
    { return __lhs.compare(__rhs) == 0; }

  template<typename _CharT>
    inline
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, bool>::__type
    operator==(const basic_string<_CharT>& __lhs,
        const basic_string<_CharT>& __rhs) noexcept
    { return (__lhs.size() == __rhs.size()
       && !std::char_traits<_CharT>::compare(__lhs.data(), __rhs.data(),
          __lhs.size())); }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator==(const _CharT* __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) == 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return __lhs.compare(__rhs) == 0; }
# 6093 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    noexcept
    { return !(__lhs == __rhs); }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator!=(const _CharT* __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return !(__lhs == __rhs); }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return !(__lhs == __rhs); }
# 6131 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    noexcept
    { return __lhs.compare(__rhs) < 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const _CharT* __rhs)
    { return __lhs.compare(__rhs) < 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const _CharT* __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) > 0; }
# 6169 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    noexcept
    { return __lhs.compare(__rhs) > 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const _CharT* __rhs)
    { return __lhs.compare(__rhs) > 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>(const _CharT* __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) < 0; }
# 6207 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    noexcept
    { return __lhs.compare(__rhs) <= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return __lhs.compare(__rhs) <= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<=(const _CharT* __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) >= 0; }
# 6245 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    noexcept
    { return __lhs.compare(__rhs) >= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return __lhs.compare(__rhs) >= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>=(const _CharT* __lhs,
      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) <= 0; }
# 6283 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline void
    swap(basic_string<_CharT, _Traits, _Alloc>& __lhs,
  basic_string<_CharT, _Traits, _Alloc>& __rhs)
    noexcept(noexcept(__lhs.swap(__rhs)))
    { __lhs.swap(__rhs); }
# 6303 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __is,
        basic_string<_CharT, _Traits, _Alloc>& __str);

  template<>
    basic_istream<char>&
    operator>>(basic_istream<char>& __is, basic_string<char>& __str);
# 6321 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __os,
        const basic_string<_CharT, _Traits, _Alloc>& __str)
    {


      return __ostream_insert(__os, __str.data(), __str.size());
    }
# 6344 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>& __is,
     basic_string<_CharT, _Traits, _Alloc>& __str, _CharT __delim);
# 6361 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>& __is,
     basic_string<_CharT, _Traits, _Alloc>& __str)
    { return std::getline(__is, __str, __is.widen('\n')); }



  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>&& __is,
     basic_string<_CharT, _Traits, _Alloc>& __str, _CharT __delim)
    { return std::getline(__is, __str, __delim); }


  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>&& __is,
     basic_string<_CharT, _Traits, _Alloc>& __str)
    { return std::getline(__is, __str); }


  template<>
    basic_istream<char>&
    getline(basic_istream<char>& __in, basic_string<char>& __str,
     char __delim);


  template<>
    basic_istream<wchar_t>&
    getline(basic_istream<wchar_t>& __in, basic_string<wchar_t>& __str,
     wchar_t __delim);



}




# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\ext/string_conversions.h" 1 3
# 33 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\ext/string_conversions.h" 3








# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\cstdlib" 1 3
# 40 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\cstdlib" 3
# 75 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\cstdlib" 3
# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\stdlib.h" 1 3
# 10 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\stdlib.h" 3
# 1 "D:\\Xilinx\\Vitis_HLS\\2023.1\\win64\\tools\\clang-3.9-csynth\\lib\\clang\\7.0.0\\include\\limits.h" 1 3
# 37 "D:\\Xilinx\\Vitis_HLS\\2023.1\\win64\\tools\\clang-3.9-csynth\\lib\\clang\\7.0.0\\include\\limits.h" 3
# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\limits.h" 1 3
# 38 "D:\\Xilinx\\Vitis_HLS\\2023.1\\win64\\tools\\clang-3.9-csynth\\lib\\clang\\7.0.0\\include\\limits.h" 2 3
# 11 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\stdlib.h" 2 3
# 25 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\stdlib.h" 3
#pragma pack(push,_CRT_PACKING)


extern "C" {
# 49 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\stdlib.h" 3
  typedef int (__attribute__((__cdecl__)) *_onexit_t)(void);
# 59 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\stdlib.h" 3
  typedef struct _div_t {
    int quot;
    int rem;
  } div_t;

  typedef struct _ldiv_t {
    long quot;
    long rem;
  } ldiv_t;





#pragma pack(4)
 typedef struct {
    unsigned char ld[10];
  } _LDOUBLE;
#pragma pack()



 typedef struct {
    double x;
  } _CRT_DOUBLE;

  typedef struct {
    float f;
  } _CRT_FLOAT;




  typedef struct {
    long double x;
  } _LONGDOUBLE;



#pragma pack(4)
 typedef struct {
    unsigned char ld12[12];
  } _LDBL12;
#pragma pack()
# 142 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\stdlib.h" 3
 typedef void (__attribute__((__cdecl__)) *_purecall_handler)(void);

  __attribute__ ((__dllimport__)) _purecall_handler __attribute__((__cdecl__)) _set_purecall_handler(_purecall_handler _Handler);
  __attribute__ ((__dllimport__)) _purecall_handler __attribute__((__cdecl__)) _get_purecall_handler(void);

  typedef void (__attribute__((__cdecl__)) *_invalid_parameter_handler)(const wchar_t *,const wchar_t *,const wchar_t *,unsigned int,uintptr_t);
  __attribute__ ((__dllimport__)) _invalid_parameter_handler __attribute__((__cdecl__)) _set_invalid_parameter_handler(_invalid_parameter_handler _Handler);
  __attribute__ ((__dllimport__)) _invalid_parameter_handler __attribute__((__cdecl__)) _get_invalid_parameter_handler(void);
# 158 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\stdlib.h" 3
  __attribute__ ((__dllimport__)) unsigned long *__attribute__((__cdecl__)) __doserrno(void);

  errno_t __attribute__((__cdecl__)) _set_doserrno(unsigned long _Value);
  errno_t __attribute__((__cdecl__)) _get_doserrno(unsigned long *_Value);
# 172 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\stdlib.h" 3
  extern __attribute__((dllimport)) char *_sys_errlist[1];
  extern __attribute__((dllimport)) int _sys_nerr;





  __attribute__ ((__dllimport__)) char ***__attribute__((__cdecl__)) __p___argv(void);
  __attribute__ ((__dllimport__)) int *__attribute__((__cdecl__)) __p__fmode(void);
# 190 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\stdlib.h" 3
  errno_t __attribute__((__cdecl__)) _get_pgmptr(char **_Value);
  errno_t __attribute__((__cdecl__)) _get_wpgmptr(wchar_t **_Value);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _set_fmode(int _Mode);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _get_fmode(int *_PMode);
# 281 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\stdlib.h" 3
  extern int * __imp___argc;



  extern char *** __imp___argv;



  extern wchar_t *** __imp___wargv;





  extern char *** __imp__environ;




  extern wchar_t *** __imp__wenviron;





  extern char ** __imp__pgmptr;




  extern wchar_t ** __imp__wpgmptr;




  extern unsigned int * __imp__osplatform;




  extern unsigned int * __imp__osver;




  extern unsigned int * __imp__winver;




  extern unsigned int * __imp__winmajor;




  extern unsigned int * __imp__winminor;





  errno_t __attribute__((__cdecl__)) _get_osplatform(unsigned int *_Value);
  errno_t __attribute__((__cdecl__)) _get_osver(unsigned int *_Value);
  errno_t __attribute__((__cdecl__)) _get_winver(unsigned int *_Value);
  errno_t __attribute__((__cdecl__)) _get_winmajor(unsigned int *_Value);
  errno_t __attribute__((__cdecl__)) _get_winminor(unsigned int *_Value);




  extern "C++" {
    template <typename _CountofType,size_t _SizeOfArray> char (*__countof_helper( _CountofType (&_Array)[_SizeOfArray]))[_SizeOfArray];

  }





  void __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) exit(int _Code) __attribute__ ((__noreturn__));
  void __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _exit(int _Code) __attribute__ ((__noreturn__));



  void __attribute__((__cdecl__)) _Exit(int) __attribute__ ((__noreturn__));
# 374 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\stdlib.h" 3
  void __attribute__((__cdecl__)) __attribute__ ((__noreturn__)) abort(void);




  __attribute__ ((__dllimport__)) unsigned int __attribute__((__cdecl__)) _set_abort_behavior(unsigned int _Flags,unsigned int _Mask);



  int __attribute__((__cdecl__)) abs(int _X);
  long __attribute__((__cdecl__)) labs(long _X);


  __extension__ long __attribute__((__cdecl__)) _abs64(long);

  extern __inline__ __attribute__((__always_inline__,__gnu_inline__)) long __attribute__((__cdecl__)) _abs64(long x) {
    return __builtin_llabs(x);
  }


  int __attribute__((__cdecl__)) atexit(void (__attribute__((__cdecl__)) *)(void));


  double __attribute__((__cdecl__)) atof(const char *_String);
  double __attribute__((__cdecl__)) _atof_l(const char *_String,_locale_t _Locale);

  int __attribute__((__cdecl__)) atoi(const char *_Str);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _atoi_l(const char *_Str,_locale_t _Locale);
  long __attribute__((__cdecl__)) atol(const char *_Str);
  __attribute__ ((__dllimport__)) long __attribute__((__cdecl__)) _atol_l(const char *_Str,_locale_t _Locale);


  void *__attribute__((__cdecl__)) bsearch(const void *_Key,const void *_Base,size_t _NumOfElements,size_t _SizeOfElements,int (__attribute__((__cdecl__)) *_PtFuncCompare)(const void *,const void *));
  void __attribute__((__cdecl__)) qsort(void *_Base,size_t _NumOfElements,size_t _SizeOfElements,int (__attribute__((__cdecl__)) *_PtFuncCompare)(const void *,const void *));

  unsigned short __attribute__((__cdecl__)) _byteswap_ushort(unsigned short _Short);
  unsigned long __attribute__((__cdecl__)) _byteswap_ulong (unsigned long _Long);
  __extension__ unsigned long __attribute__((__cdecl__)) _byteswap_uint64(unsigned long _Int64);
  div_t __attribute__((__cdecl__)) div(int _Numerator,int _Denominator);
  char *__attribute__((__cdecl__)) getenv(const char *_VarName) ;
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _itoa(int _Value,char *_Dest,int _Radix);
  __extension__ __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _i64toa(long _Val,char *_DstBuf,int _Radix) ;
  __extension__ __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _ui64toa(unsigned long _Val,char *_DstBuf,int _Radix) ;
  __extension__ __attribute__ ((__dllimport__)) long __attribute__((__cdecl__)) _atoi64(const char *_String);
  __extension__ __attribute__ ((__dllimport__)) long __attribute__((__cdecl__)) _atoi64_l(const char *_String,_locale_t _Locale);
  __extension__ __attribute__ ((__dllimport__)) long __attribute__((__cdecl__)) _strtoi64(const char *_String,char **_EndPtr,int _Radix);
  __extension__ __attribute__ ((__dllimport__)) long __attribute__((__cdecl__)) _strtoi64_l(const char *_String,char **_EndPtr,int _Radix,_locale_t _Locale);
  __extension__ __attribute__ ((__dllimport__)) unsigned long __attribute__((__cdecl__)) _strtoui64(const char *_String,char **_EndPtr,int _Radix);
  __extension__ __attribute__ ((__dllimport__)) unsigned long __attribute__((__cdecl__)) _strtoui64_l(const char *_String,char **_EndPtr,int _Radix,_locale_t _Locale);
  ldiv_t __attribute__((__cdecl__)) ldiv(long _Numerator,long _Denominator);
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _ltoa(long _Value,char *_Dest,int _Radix) ;
  int __attribute__((__cdecl__)) mblen(const char *_Ch,size_t _MaxCount);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _mblen_l(const char *_Ch,size_t _MaxCount,_locale_t _Locale);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _mbstrlen(const char *_Str);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _mbstrlen_l(const char *_Str,_locale_t _Locale);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _mbstrnlen(const char *_Str,size_t _MaxCount);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _mbstrnlen_l(const char *_Str,size_t _MaxCount,_locale_t _Locale);
  int __attribute__((__cdecl__)) mbtowc(wchar_t * __restrict__ _DstCh,const char * __restrict__ _SrcCh,size_t _SrcSizeInBytes);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _mbtowc_l(wchar_t * __restrict__ _DstCh,const char * __restrict__ _SrcCh,size_t _SrcSizeInBytes,_locale_t _Locale);
  size_t __attribute__((__cdecl__)) mbstowcs(wchar_t * __restrict__ _Dest,const char * __restrict__ _Source,size_t _MaxCount);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _mbstowcs_l(wchar_t * __restrict__ _Dest,const char * __restrict__ _Source,size_t _MaxCount,_locale_t _Locale);
  int __attribute__((__cdecl__)) mkstemp(char *template_name);
  int __attribute__((__cdecl__)) rand(void);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _set_error_mode(int _Mode);
  void __attribute__((__cdecl__)) srand(unsigned int _Seed);
# 449 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\stdlib.h" 3
static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
double __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) strtod(const char * __restrict__ _Str,char ** __restrict__ _EndPtr)
{
  double __attribute__((__cdecl__)) __mingw_strtod (const char * __restrict__, char ** __restrict__);
  return __mingw_strtod( _Str, _EndPtr);
}

static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
float __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) strtof(const char * __restrict__ _Str,char ** __restrict__ _EndPtr)
{
  float __attribute__((__cdecl__)) __mingw_strtof (const char * __restrict__, char ** __restrict__);
  return __mingw_strtof( _Str, _EndPtr);
}






  long double __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) strtold(const char * __restrict__ , char ** __restrict__ );


  extern double __attribute__((__cdecl__)) __attribute__ ((__nothrow__))
  __strtod (const char * __restrict__ , char ** __restrict__);







  float __attribute__((__cdecl__)) __mingw_strtof (const char * __restrict__, char ** __restrict__);
  double __attribute__((__cdecl__)) __mingw_strtod (const char * __restrict__, char ** __restrict__);
  long double __attribute__((__cdecl__)) __mingw_strtold(const char * __restrict__, char ** __restrict__);

  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _strtod_l(const char * __restrict__ _Str,char ** __restrict__ _EndPtr,_locale_t _Locale);
  long __attribute__((__cdecl__)) strtol(const char * __restrict__ _Str,char ** __restrict__ _EndPtr,int _Radix);
  __attribute__ ((__dllimport__)) long __attribute__((__cdecl__)) _strtol_l(const char * __restrict__ _Str,char ** __restrict__ _EndPtr,int _Radix,_locale_t _Locale);
  unsigned long __attribute__((__cdecl__)) strtoul(const char * __restrict__ _Str,char ** __restrict__ _EndPtr,int _Radix);
  __attribute__ ((__dllimport__)) unsigned long __attribute__((__cdecl__)) _strtoul_l(const char * __restrict__ _Str,char ** __restrict__ _EndPtr,int _Radix,_locale_t _Locale);


  int __attribute__((__cdecl__)) system(const char *_Command);

  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _ultoa(unsigned long _Value,char *_Dest,int _Radix) ;
  int __attribute__((__cdecl__)) wctomb(char *_MbCh,wchar_t _WCh) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wctomb_l(char *_MbCh,wchar_t _WCh,_locale_t _Locale) ;
  size_t __attribute__((__cdecl__)) wcstombs(char * __restrict__ _Dest,const wchar_t * __restrict__ _Source,size_t _MaxCount) ;
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _wcstombs_l(char * __restrict__ _Dest,const wchar_t * __restrict__ _Source,size_t _MaxCount,_locale_t _Locale) ;



  void *__attribute__((__cdecl__)) calloc(size_t _NumOfElements,size_t _SizeOfElements);
  void __attribute__((__cdecl__)) free(void *_Memory);
  void *__attribute__((__cdecl__)) malloc(size_t _Size);
  void *__attribute__((__cdecl__)) realloc(void *_Memory,size_t _NewSize);
  __attribute__ ((__dllimport__)) void *__attribute__((__cdecl__)) _recalloc(void *_Memory,size_t _Count,size_t _Size);






  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _aligned_free(void *_Memory);
  __attribute__ ((__dllimport__)) void *__attribute__((__cdecl__)) _aligned_malloc(size_t _Size,size_t _Alignment);



  __attribute__ ((__dllimport__)) void *__attribute__((__cdecl__)) _aligned_offset_malloc(size_t _Size,size_t _Alignment,size_t _Offset);
  __attribute__ ((__dllimport__)) void *__attribute__((__cdecl__)) _aligned_realloc(void *_Memory,size_t _Size,size_t _Alignment);
  __attribute__ ((__dllimport__)) void *__attribute__((__cdecl__)) _aligned_recalloc(void *_Memory,size_t _Count,size_t _Size,size_t _Alignment);
  __attribute__ ((__dllimport__)) void *__attribute__((__cdecl__)) _aligned_offset_realloc(void *_Memory,size_t _Size,size_t _Alignment,size_t _Offset);
  __attribute__ ((__dllimport__)) void *__attribute__((__cdecl__)) _aligned_offset_recalloc(void *_Memory,size_t _Count,size_t _Size,size_t _Alignment,size_t _Offset);
# 579 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\stdlib.h" 3
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _putenv(const char *_EnvString);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wputenv(const wchar_t *_EnvString);



  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _fullpath(char *_FullPath,const char *_Path,size_t _SizeInBytes);
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _ecvt(double _Val,int _NumOfDigits,int *_PtDec,int *_PtSign) ;
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _fcvt(double _Val,int _NumOfDec,int *_PtDec,int *_PtSign) ;
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _gcvt(double _Val,int _NumOfDigits,char *_DstBuf) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _atodbl(_CRT_DOUBLE *_Result,char *_Str);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _atoldbl(_LDOUBLE *_Result,char *_Str);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _atoflt(_CRT_FLOAT *_Result,char *_Str);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _atodbl_l(_CRT_DOUBLE *_Result,char *_Str,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _atoldbl_l(_LDOUBLE *_Result,char *_Str,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _atoflt_l(_CRT_FLOAT *_Result,char *_Str,_locale_t _Locale);
# 609 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\stdlib.h" 3
unsigned long __attribute__((__cdecl__)) _lrotl(unsigned long,int);
unsigned long __attribute__((__cdecl__)) _lrotr(unsigned long,int);





  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _makepath(char *_Path,const char *_Drive,const char *_Dir,const char *_Filename,const char *_Ext);
  _onexit_t __attribute__((__cdecl__)) _onexit(_onexit_t _Func);
# 627 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\stdlib.h" 3
  __extension__ unsigned long __attribute__((__cdecl__)) _rotl64(unsigned long _Val,int _Shift);
  __extension__ unsigned long __attribute__((__cdecl__)) _rotr64(unsigned long Value,int Shift);






  unsigned int __attribute__((__cdecl__)) _rotr(unsigned int _Val,int _Shift);
  unsigned int __attribute__((__cdecl__)) _rotl(unsigned int _Val,int _Shift);


  __extension__ unsigned long __attribute__((__cdecl__)) _rotr64(unsigned long _Val,int _Shift);
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _searchenv(const char *_Filename,const char *_EnvVar,char *_ResultPath) ;
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _splitpath(const char *_FullPath,char *_Drive,char *_Dir,char *_Filename,char *_Ext) ;
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _swab(char *_Buf1,char *_Buf2,int _SizeInBytes);
# 656 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\stdlib.h" 3
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _beep(unsigned _Frequency,unsigned _Duration) __attribute__ ((__deprecated__));

  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _seterrormode(int _Mode) __attribute__ ((__deprecated__));
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _sleep(unsigned long _Duration) __attribute__ ((__deprecated__));
# 680 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\stdlib.h" 3
  char *__attribute__((__cdecl__)) ecvt(double _Val,int _NumOfDigits,int *_PtDec,int *_PtSign) ;
  char *__attribute__((__cdecl__)) fcvt(double _Val,int _NumOfDec,int *_PtDec,int *_PtSign) ;
  char *__attribute__((__cdecl__)) gcvt(double _Val,int _NumOfDigits,char *_DstBuf) ;
  char *__attribute__((__cdecl__)) itoa(int _Val,char *_DstBuf,int _Radix) ;
  char *__attribute__((__cdecl__)) ltoa(long _Val,char *_DstBuf,int _Radix) ;
  int __attribute__((__cdecl__)) putenv(const char *_EnvString) ;



  void __attribute__((__cdecl__)) swab(char *_Buf1,char *_Buf2,int _SizeInBytes) ;


  char *__attribute__((__cdecl__)) ultoa(unsigned long _Val,char *_Dstbuf,int _Radix) ;
  _onexit_t __attribute__((__cdecl__)) onexit(_onexit_t _Func);





  typedef struct { __extension__ long long quot, rem; } lldiv_t;

  __extension__ lldiv_t __attribute__((__cdecl__)) lldiv(long long, long long);

  __extension__ long long __attribute__((__cdecl__)) llabs(long long);




  __extension__ long long __attribute__((__cdecl__)) strtoll(const char * __restrict__, char ** __restrict, int);
  __extension__ unsigned long long __attribute__((__cdecl__)) strtoull(const char * __restrict__, char ** __restrict__, int);


  __extension__ long long __attribute__((__cdecl__)) atoll (const char *);


  __extension__ long long __attribute__((__cdecl__)) wtoll (const wchar_t *);
  __extension__ char *__attribute__((__cdecl__)) lltoa (long long, char *, int);
  __extension__ char *__attribute__((__cdecl__)) ulltoa (unsigned long long , char *, int);
  __extension__ wchar_t *__attribute__((__cdecl__)) lltow (long long, wchar_t *, int);
  __extension__ wchar_t *__attribute__((__cdecl__)) ulltow (unsigned long long, wchar_t *, int);
# 735 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\stdlib.h" 3
}


#pragma pack(pop)


# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\sec_api/stdlib_s.h" 1 3








# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\stdlib.h" 1 3
# 30 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\stdlib.h" 3
# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\stdlib.h" 1 3
# 31 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\stdlib.h" 2 3
# 10 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\sec_api/stdlib_s.h" 2 3
# 741 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\stdlib.h" 2 3
# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\malloc.h" 1 3
# 11 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\malloc.h" 3
#pragma pack(push,_CRT_PACKING)


extern "C" {
# 46 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\malloc.h" 3
  typedef struct _heapinfo {
    int *_pentry;
    size_t _size;
    int _useflag;
  } _HEAPINFO;


  extern unsigned int _amblksiz;
# 103 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\malloc.h" 3
void * __mingw_aligned_malloc (size_t _Size, size_t _Alignment);
void __mingw_aligned_free (void *_Memory);
void * __mingw_aligned_offset_realloc (void *_Memory, size_t _Size, size_t _Alignment, size_t _Offset);
void * __mingw_aligned_realloc (void *_Memory, size_t _Size, size_t _Offset);



  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _resetstkoflw (void);
  __attribute__ ((__dllimport__)) unsigned long __attribute__((__cdecl__)) _set_malloc_crt_max_wait(unsigned long _NewValue);

  __attribute__ ((__dllimport__)) void *__attribute__((__cdecl__)) _expand(void *_Memory,size_t _NewSize);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _msize(void *_Memory);






  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _get_sbh_threshold(void);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _set_sbh_threshold(size_t _NewValue);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _set_amblksiz(size_t _Value);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _get_amblksiz(size_t *_Value);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _heapadd(void *_Memory,size_t _Size);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _heapchk(void);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _heapmin(void);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _heapset(unsigned int _Fill);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _heapwalk(_HEAPINFO *_EntryInfo);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _heapused(size_t *_Used,size_t *_Commit);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _get_heap_handle(void);
# 144 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\malloc.h" 3
  static __inline void *_MarkAllocaS(void *_Ptr,unsigned int _Marker) {
    if(_Ptr) {
      *((unsigned int*)_Ptr) = _Marker;
      _Ptr = (char*)_Ptr + 16;
    }
    return _Ptr;
  }
# 163 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\malloc.h" 3
  static __inline void __attribute__((__cdecl__)) _freea(void *_Memory) {
    unsigned int _Marker;
    if(_Memory) {
      _Memory = (char*)_Memory - 16;
      _Marker = *(unsigned int *)_Memory;
      if(_Marker==0xDDDD) {
 free(_Memory);
      }





    }
  }
# 206 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\malloc.h" 3
}


#pragma pack(pop)
# 742 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\stdlib.h" 2 3
# 76 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\cstdlib" 2 3

# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/std_abs.h" 1 3
# 34 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/std_abs.h" 3
# 46 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/std_abs.h" 3
extern "C++"
{
namespace std
{


  using ::abs;


  inline long
  abs(long __i) { return __builtin_labs(__i); }



  inline long long
  abs(long long __x) { return __builtin_llabs (__x); }







  inline constexpr double
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline constexpr float
  abs(float __x)
  { return __builtin_fabsf(__x); }

  inline constexpr long double
  abs(long double __x)
  { return __builtin_fabsl(__x); }



  inline constexpr __int128
  abs(__int128 __x) { return __x >= 0 ? __x : -__x; }
# 107 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/std_abs.h" 3
}
}
# 78 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\cstdlib" 2 3
# 121 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\cstdlib" 3
extern "C++"
{
namespace std
{


  using ::div_t;
  using ::ldiv_t;

  using ::abort;



  using ::atexit;





  using ::atof;
  using ::atoi;
  using ::atol;
  using ::bsearch;
  using ::calloc;
  using ::div;
  using ::exit;
  using ::free;
  using ::getenv;
  using ::labs;
  using ::ldiv;
  using ::malloc;

  using ::mblen;
  using ::mbstowcs;
  using ::mbtowc;

  using ::qsort;





  using ::rand;
  using ::realloc;
  using ::srand;
  using ::strtod;
  using ::strtol;
  using ::strtoul;
  using ::system;

  using ::wcstombs;
  using ::wctomb;



  inline ldiv_t
  div(long __i, long __j) { return ldiv(__i, __j); }




}
# 195 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\cstdlib" 3
namespace __gnu_cxx
{



  using ::lldiv_t;





  using ::_Exit;



  using ::llabs;

  inline lldiv_t
  div(long long __n, long long __d)
  { lldiv_t __q; __q.quot = __n / __d; __q.rem = __n % __d; return __q; }

  using ::lldiv;
# 227 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\cstdlib" 3
  using ::atoll;
  using ::strtoll;
  using ::strtoull;

  using ::strtof;
  using ::strtold;


}

namespace std
{

  using ::__gnu_cxx::lldiv_t;

  using ::__gnu_cxx::_Exit;

  using ::__gnu_cxx::llabs;
  using ::__gnu_cxx::div;
  using ::__gnu_cxx::lldiv;

  using ::__gnu_cxx::atoll;
  using ::__gnu_cxx::strtof;
  using ::__gnu_cxx::strtoll;
  using ::__gnu_cxx::strtoull;
  using ::__gnu_cxx::strtold;
}



}
# 42 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\ext/string_conversions.h" 2 3
# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\cwchar" 1 3
# 40 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\cwchar" 3
# 43 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\ext/string_conversions.h" 2 3
# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\cstdio" 1 3
# 40 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\cstdio" 3
# 96 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\cstdio" 3
namespace std
{
  using ::FILE;
  using ::fpos_t;

  using ::clearerr;
  using ::fclose;
  using ::feof;
  using ::ferror;
  using ::fflush;
  using ::fgetc;
  using ::fgetpos;
  using ::fgets;
  using ::fopen;
  using ::fprintf;
  using ::fputc;
  using ::fputs;
  using ::fread;
  using ::freopen;
  using ::fscanf;
  using ::fseek;
  using ::fsetpos;
  using ::ftell;
  using ::fwrite;
  using ::getc;
  using ::getchar;




  using ::perror;
  using ::printf;
  using ::putc;
  using ::putchar;
  using ::puts;
  using ::remove;
  using ::rename;
  using ::rewind;
  using ::scanf;
  using ::setbuf;
  using ::setvbuf;
  using ::sprintf;
  using ::sscanf;
  using ::tmpfile;

  using ::tmpnam;

  using ::ungetc;
  using ::vfprintf;
  using ::vprintf;
  using ::vsprintf;
}
# 157 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\cstdio" 3
namespace __gnu_cxx
{
# 175 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\cstdio" 3
  using ::snprintf;
  using ::vfscanf;
  using ::vscanf;
  using ::vsnprintf;
  using ::vsscanf;

}

namespace std
{
  using ::__gnu_cxx::snprintf;
  using ::__gnu_cxx::vfscanf;
  using ::__gnu_cxx::vscanf;
  using ::__gnu_cxx::vsnprintf;
  using ::__gnu_cxx::vsscanf;
}
# 44 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\ext/string_conversions.h" 2 3
# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\cerrno" 1 3
# 40 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\cerrno" 3
# 45 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\ext/string_conversions.h" 2 3

namespace __gnu_cxx
{



  template<typename _TRet, typename _Ret = _TRet, typename _CharT,
    typename... _Base>
    _Ret
    __stoa(_TRet (*__convf) (const _CharT*, _CharT**, _Base...),
    const char* __name, const _CharT* __str, std::size_t* __idx,
    _Base... __base)
    {
      _Ret __ret;

      _CharT* __endptr;

      struct _Save_errno {
 _Save_errno() : _M_errno((*_errno())) { (*_errno()) = 0; }
 ~_Save_errno() { if ((*_errno()) == 0) (*_errno()) = _M_errno; }
 int _M_errno;
      } const __save_errno;

      struct _Range_chk {
   static bool
   _S_chk(_TRet, std::false_type) { return false; }

   static bool
   _S_chk(_TRet __val, std::true_type)
   {
     return __val < _TRet(__numeric_traits<int>::__min)
       || __val > _TRet(__numeric_traits<int>::__max);
   }
      };

      const _TRet __tmp = __convf(__str, &__endptr, __base...);

      if (__endptr == __str)
 std::__throw_invalid_argument(__name);
      else if ((*_errno()) == 34
   || _Range_chk::_S_chk(__tmp, std::is_same<_Ret, int>{}))
 std::__throw_out_of_range(__name);
      else
 __ret = __tmp;

      if (__idx)
 *__idx = __endptr - __str;

      return __ret;
    }


  template<typename _String, typename _CharT = typename _String::value_type>
    _String
    __to_xstring(int (*__convf) (_CharT*, std::size_t, const _CharT*,
     __builtin_va_list), std::size_t __n,
   const _CharT* __fmt, ...)
    {


      _CharT* __s = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
         * __n));

      __builtin_va_list __args;
      __builtin_va_start(__args, __fmt);

      const int __len = __convf(__s, __n, __fmt, __args);

      __builtin_va_end(__args);

      return _String(__s, __s + __len);
    }


}
# 6401 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 2 3

namespace std
{

namespace __cxx11 {



  inline int
  stoi(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa<long, int>(&std::strtol, "stoi", __str.c_str(),
     __idx, __base); }

  inline long
  stol(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::strtol, "stol", __str.c_str(),
        __idx, __base); }

  inline unsigned long
  stoul(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::strtoul, "stoul", __str.c_str(),
        __idx, __base); }

  inline long long
  stoll(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::strtoll, "stoll", __str.c_str(),
        __idx, __base); }

  inline unsigned long long
  stoull(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::strtoull, "stoull", __str.c_str(),
        __idx, __base); }


  inline float
  stof(const string& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::strtof, "stof", __str.c_str(), __idx); }

  inline double
  stod(const string& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::strtod, "stod", __str.c_str(), __idx); }

  inline long double
  stold(const string& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::strtold, "stold", __str.c_str(), __idx); }






  inline string
  to_string(int __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(int),
        "%d", __val); }

  inline string
  to_string(unsigned __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf,
        4 * sizeof(unsigned),
        "%u", __val); }

  inline string
  to_string(long __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(long),
        "%ld", __val); }

  inline string
  to_string(unsigned long __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf,
        4 * sizeof(unsigned long),
        "%lu", __val); }

  inline string
  to_string(long long __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf,
        4 * sizeof(long long),
        "%lld", __val); }

  inline string
  to_string(unsigned long long __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf,
        4 * sizeof(unsigned long long),
        "%llu", __val); }

  inline string
  to_string(float __val)
  {
    const int __n =
      __gnu_cxx::__numeric_traits<float>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, __n,
        "%f", __val);
  }

  inline string
  to_string(double __val)
  {
    const int __n =
      __gnu_cxx::__numeric_traits<double>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, __n,
        "%f", __val);
  }

  inline string
  to_string(long double __val)
  {
    const int __n =
      __gnu_cxx::__numeric_traits<long double>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, __n,
        "%Lf", __val);
  }



  inline int
  stoi(const wstring& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa<long, int>(&std::wcstol, "stoi", __str.c_str(),
     __idx, __base); }

  inline long
  stol(const wstring& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::wcstol, "stol", __str.c_str(),
        __idx, __base); }

  inline unsigned long
  stoul(const wstring& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::wcstoul, "stoul", __str.c_str(),
        __idx, __base); }

  inline long long
  stoll(const wstring& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::wcstoll, "stoll", __str.c_str(),
        __idx, __base); }

  inline unsigned long long
  stoull(const wstring& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::wcstoull, "stoull", __str.c_str(),
        __idx, __base); }


  inline float
  stof(const wstring& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::wcstof, "stof", __str.c_str(), __idx); }

  inline double
  stod(const wstring& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::wcstod, "stod", __str.c_str(), __idx); }

  inline long double
  stold(const wstring& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::wcstold, "stold", __str.c_str(), __idx); }



  inline wstring
  to_wstring(int __val)
  { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf, 4 * sizeof(int),
         L"%d", __val); }

  inline wstring
  to_wstring(unsigned __val)
  { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf,
         4 * sizeof(unsigned),
         L"%u", __val); }

  inline wstring
  to_wstring(long __val)
  { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf, 4 * sizeof(long),
         L"%ld", __val); }

  inline wstring
  to_wstring(unsigned long __val)
  { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf,
         4 * sizeof(unsigned long),
         L"%lu", __val); }

  inline wstring
  to_wstring(long long __val)
  { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf,
         4 * sizeof(long long),
         L"%lld", __val); }

  inline wstring
  to_wstring(unsigned long long __val)
  { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf,
         4 * sizeof(unsigned long long),
         L"%llu", __val); }

  inline wstring
  to_wstring(float __val)
  {
    const int __n =
      __gnu_cxx::__numeric_traits<float>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf, __n,
         L"%f", __val);
  }

  inline wstring
  to_wstring(double __val)
  {
    const int __n =
      __gnu_cxx::__numeric_traits<double>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf, __n,
         L"%f", __val);
  }

  inline wstring
  to_wstring(long double __val)
  {
    const int __n =
      __gnu_cxx::__numeric_traits<long double>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf, __n,
         L"%Lf", __val);
  }



}

}






# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/functional_hash.h" 1 3
# 34 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/functional_hash.h" 3



namespace std
{
# 49 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/functional_hash.h" 3
  template<typename _Result, typename _Arg>
    struct __hash_base
    {
      typedef _Result result_type ;
      typedef _Arg argument_type ;
    };


  template<typename _Tp>
    struct hash;

  template<typename _Tp, typename = void>
    struct __poison_hash
    {
      static constexpr bool __enable_hash_call = false;
    private:

      __poison_hash(__poison_hash&&);
      ~__poison_hash();
    };

  template<typename _Tp>
    struct __poison_hash<_Tp, __void_t<decltype(hash<_Tp>()(declval<_Tp>()))>>
    {
      static constexpr bool __enable_hash_call = true;
    };


  template<typename _Tp, bool = is_enum<_Tp>::value>
    struct __hash_enum
    {
    private:

      __hash_enum(__hash_enum&&);
      ~__hash_enum();
    };


  template<typename _Tp>
    struct __hash_enum<_Tp, true> : public __hash_base<size_t, _Tp>
    {
      size_t
      operator()(_Tp __val) const noexcept
      {
       using __type = typename underlying_type<_Tp>::type;
       return hash<__type>{}(static_cast<__type>(__val));
      }
    };



  template<typename _Tp>
    struct hash : __hash_enum<_Tp>
    { };


  template<typename _Tp>
    struct hash<_Tp*> : public __hash_base<size_t, _Tp*>
    {
      size_t
      operator()(_Tp* __p) const noexcept
      { return reinterpret_cast<size_t>(__p); }
    };
# 124 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/functional_hash.h" 3
  template<> struct hash<bool> : public __hash_base<size_t, bool> { size_t operator()(bool __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<char> : public __hash_base<size_t, char> { size_t operator()(char __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<signed char> : public __hash_base<size_t, signed char> { size_t operator()(signed char __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<unsigned char> : public __hash_base<size_t, unsigned char> { size_t operator()(unsigned char __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<wchar_t> : public __hash_base<size_t, wchar_t> { size_t operator()(wchar_t __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<char16_t> : public __hash_base<size_t, char16_t> { size_t operator()(char16_t __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<char32_t> : public __hash_base<size_t, char32_t> { size_t operator()(char32_t __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<short> : public __hash_base<size_t, short> { size_t operator()(short __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<int> : public __hash_base<size_t, int> { size_t operator()(int __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<long> : public __hash_base<size_t, long> { size_t operator()(long __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<long long> : public __hash_base<size_t, long long> { size_t operator()(long long __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<unsigned short> : public __hash_base<size_t, unsigned short> { size_t operator()(unsigned short __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<unsigned int> : public __hash_base<size_t, unsigned int> { size_t operator()(unsigned int __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<unsigned long> : public __hash_base<size_t, unsigned long> { size_t operator()(unsigned long __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<unsigned long long> : public __hash_base<size_t, unsigned long long> { size_t operator()(unsigned long long __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<__int128> : public __hash_base<size_t, __int128> { size_t operator()(__int128 __val) const noexcept { return static_cast<size_t>(__val); } };
  template<> struct hash<__int128 unsigned> : public __hash_base<size_t, __int128 unsigned> { size_t operator()(__int128 unsigned __val) const noexcept { return static_cast<size_t>(__val); } };
# 187 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/functional_hash.h" 3
  struct _Hash_impl
  {
    static size_t
    hash(const void* __ptr, size_t __clength,
  size_t __seed = static_cast<size_t>(0xc70f6907UL))
    { return _Hash_bytes(__ptr, __clength, __seed); }

    template<typename _Tp>
      static size_t
      hash(const _Tp& __val)
      { return hash(&__val, sizeof(__val)); }

    template<typename _Tp>
      static size_t
      __hash_combine(const _Tp& __val, size_t __hash)
      { return hash(&__val, sizeof(__val), __hash); }
  };


  struct _Fnv_hash_impl
  {
    static size_t
    hash(const void* __ptr, size_t __clength,
  size_t __seed = static_cast<size_t>(2166136261UL))
    { return _Fnv_hash_bytes(__ptr, __clength, __seed); }

    template<typename _Tp>
      static size_t
      hash(const _Tp& __val)
      { return hash(&__val, sizeof(__val)); }

    template<typename _Tp>
      static size_t
      __hash_combine(const _Tp& __val, size_t __hash)
      { return hash(&__val, sizeof(__val), __hash); }
  };


  template<>
    struct hash<float> : public __hash_base<size_t, float>
    {
      size_t
      operator()(float __val) const noexcept
      {

 return __val != 0.0f ? std::_Hash_impl::hash(__val) : 0;
      }
    };


  template<>
    struct hash<double> : public __hash_base<size_t, double>
    {
      size_t
      operator()(double __val) const noexcept
      {

 return __val != 0.0 ? std::_Hash_impl::hash(__val) : 0;
      }
    };


  template<>
    struct hash<long double>
    : public __hash_base<size_t, long double>
    {
      __attribute__ ((__pure__)) size_t
      operator()(long double __val) const noexcept;
    };







  template<typename _Hash>
    struct __is_fast_hash : public std::true_type
    { };

  template<>
    struct __is_fast_hash<hash<long double>> : public std::false_type
    { };


}
# 6627 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.h" 2 3

namespace std
{






  template<>
    struct hash<string>
    : public __hash_base<size_t, string>
    {
      size_t
      operator()(const string& __s) const noexcept
      { return std::_Hash_impl::hash(__s.data(), __s.length()); }
    };

  template<>
    struct __is_fast_hash<hash<string>> : std::false_type
    { };



  template<>
    struct hash<wstring>
    : public __hash_base<size_t, wstring>
    {
      size_t
      operator()(const wstring& __s) const noexcept
      { return std::_Hash_impl::hash(__s.data(),
                                     __s.length() * sizeof(wchar_t)); }
    };

  template<>
    struct __is_fast_hash<hash<wstring>> : std::false_type
    { };





  template<>
    struct hash<u16string>
    : public __hash_base<size_t, u16string>
    {
      size_t
      operator()(const u16string& __s) const noexcept
      { return std::_Hash_impl::hash(__s.data(),
                                     __s.length() * sizeof(char16_t)); }
    };

  template<>
    struct __is_fast_hash<hash<u16string>> : std::false_type
    { };


  template<>
    struct hash<u32string>
    : public __hash_base<size_t, u32string>
    {
      size_t
      operator()(const u32string& __s) const noexcept
      { return std::_Hash_impl::hash(__s.data(),
                                     __s.length() * sizeof(char32_t)); }
    };

  template<>
    struct __is_fast_hash<hash<u32string>> : std::false_type
    { };






  inline namespace literals
  {
  inline namespace string_literals
  {
#pragma GCC diagnostic push

 __attribute ((__abi_tag__ ("cxx11")))
    inline basic_string<char>
    operator""s(const char* __str, size_t __len)
    { return basic_string<char>{__str, __len}; }


    __attribute ((__abi_tag__ ("cxx11")))
    inline basic_string<wchar_t>
    operator""s(const wchar_t* __str, size_t __len)
    { return basic_string<wchar_t>{__str, __len}; }



    __attribute ((__abi_tag__ ("cxx11")))
    inline basic_string<char16_t>
    operator""s(const char16_t* __str, size_t __len)
    { return basic_string<char16_t>{__str, __len}; }

    __attribute ((__abi_tag__ ("cxx11")))
    inline basic_string<char32_t>
    operator""s(const char32_t* __str, size_t __len)
    { return basic_string<char32_t>{__str, __len}; }


#pragma GCC diagnostic pop
 }
  }




}
# 53 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\string" 2 3
# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.tcc" 1 3
# 43 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.tcc" 3



namespace std
{




  template<typename _CharT, typename _Traits, typename _Alloc>
    const typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::npos;

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    swap(basic_string& __s) noexcept
    {
      if (this == &__s)
 return;

      _Alloc_traits::_S_on_swap(_M_get_allocator(), __s._M_get_allocator());

      if (_M_is_local())
 if (__s._M_is_local())
   {
     if (length() && __s.length())
       {
  _CharT __tmp_data[_S_local_capacity + 1];
  traits_type::copy(__tmp_data, __s._M_local_buf,
      _S_local_capacity + 1);
  traits_type::copy(__s._M_local_buf, _M_local_buf,
      _S_local_capacity + 1);
  traits_type::copy(_M_local_buf, __tmp_data,
      _S_local_capacity + 1);
       }
     else if (__s.length())
       {
  traits_type::copy(_M_local_buf, __s._M_local_buf,
      _S_local_capacity + 1);
  _M_length(__s.length());
  __s._M_set_length(0);
  return;
       }
     else if (length())
       {
  traits_type::copy(__s._M_local_buf, _M_local_buf,
      _S_local_capacity + 1);
  __s._M_length(length());
  _M_set_length(0);
  return;
       }
   }
 else
   {
     const size_type __tmp_capacity = __s._M_allocated_capacity;
     traits_type::copy(__s._M_local_buf, _M_local_buf,
         _S_local_capacity + 1);
     _M_data(__s._M_data());
     __s._M_data(__s._M_local_buf);
     _M_capacity(__tmp_capacity);
   }
      else
 {
   const size_type __tmp_capacity = _M_allocated_capacity;
   if (__s._M_is_local())
     {
       traits_type::copy(_M_local_buf, __s._M_local_buf,
    _S_local_capacity + 1);
       __s._M_data(_M_data());
       _M_data(_M_local_buf);
     }
   else
     {
       pointer __tmp_ptr = _M_data();
       _M_data(__s._M_data());
       __s._M_data(__tmp_ptr);
       _M_capacity(__s._M_allocated_capacity);
     }
   __s._M_capacity(__tmp_capacity);
 }

      const size_type __tmp_length = length();
      _M_length(__s.length());
      __s._M_length(__tmp_length);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::pointer
    basic_string<_CharT, _Traits, _Alloc>::
    _M_create(size_type& __capacity, size_type __old_capacity)
    {


      if (__capacity > max_size())
 std::__throw_length_error(("basic_string::_M_create"));




      if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
 {
   __capacity = 2 * __old_capacity;

   if (__capacity > max_size())
     __capacity = max_size();
 }



      return _Alloc_traits::allocate(_M_get_allocator(), __capacity + 1);
    }





  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      void
      basic_string<_CharT, _Traits, _Alloc>::
      _M_construct(_InIterator __beg, _InIterator __end,
     std::input_iterator_tag)
      {
 size_type __len = 0;
 size_type __capacity = size_type(_S_local_capacity);

 while (__beg != __end && __len < __capacity)
   {
     _M_data()[__len++] = *__beg;
     ++__beg;
   }

 if (true)
   {
     while (__beg != __end)
       {
  if (__len == __capacity)
    {

      __capacity = __len + 1;
      pointer __another = _M_create(__capacity, __len);
      this->_S_copy(__another, _M_data(), __len);
      _M_dispose();
      _M_data(__another);
      _M_capacity(__capacity);
    }
  _M_data()[__len++] = *__beg;
  ++__beg;
       }
   }
 if (false)
   {
     _M_dispose();
                            ;
   }

 _M_set_length(__len);
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      void
      basic_string<_CharT, _Traits, _Alloc>::
      _M_construct(_InIterator __beg, _InIterator __end,
     std::forward_iterator_tag)
      {

 if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
   std::__throw_logic_error(("basic_string::" "_M_construct null not valid"));


 size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));

 if (__dnew > size_type(_S_local_capacity))
   {
     _M_data(_M_create(__dnew, size_type(0)));
     _M_capacity(__dnew);
   }


 if (true)
   { this->_S_copy_chars(_M_data(), __beg, __end); }
 if (false)
   {
     _M_dispose();
                            ;
   }

 _M_set_length(__dnew);
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    _M_construct(size_type __n, _CharT __c)
    {
      if (__n > size_type(_S_local_capacity))
 {
   _M_data(_M_create(__n, size_type(0)));
   _M_capacity(__n);
 }

      if (__n)
 this->_S_assign(_M_data(), __n, __c);

      _M_set_length(__n);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    _M_assign(const basic_string& __str)
    {
      if (this != &__str)
 {
   const size_type __rsize = __str.length();
   const size_type __capacity = capacity();

   if (__rsize > __capacity)
     {
       size_type __new_capacity = __rsize;
       pointer __tmp = _M_create(__new_capacity, __capacity);
       _M_dispose();
       _M_data(__tmp);
       _M_capacity(__new_capacity);
     }

   if (__rsize)
     this->_S_copy(_M_data(), __str._M_data(), __rsize);

   _M_set_length(__rsize);
 }
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    reserve(size_type __res)
    {

      if (__res < length())
 __res = length();

      const size_type __capacity = capacity();
      if (__res != __capacity)
 {
   if (__res > __capacity
       || __res > size_type(_S_local_capacity))
     {
       pointer __tmp = _M_create(__res, __capacity);
       this->_S_copy(__tmp, _M_data(), length() + 1);
       _M_dispose();
       _M_data(__tmp);
       _M_capacity(__res);
     }
   else if (!_M_is_local())
     {
       this->_S_copy(_M_local_data(), _M_data(), length() + 1);
       _M_destroy(__capacity);
       _M_data(_M_local_data());
     }
 }
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    _M_mutate(size_type __pos, size_type __len1, const _CharT* __s,
       size_type __len2)
    {
      const size_type __how_much = length() - __pos - __len1;

      size_type __new_capacity = length() + __len2 - __len1;
      pointer __r = _M_create(__new_capacity, capacity());

      if (__pos)
 this->_S_copy(__r, _M_data(), __pos);
      if (__s && __len2)
 this->_S_copy(__r + __pos, __s, __len2);
      if (__how_much)
 this->_S_copy(__r + __pos + __len2,
        _M_data() + __pos + __len1, __how_much);

      _M_dispose();
      _M_data(__r);
      _M_capacity(__new_capacity);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    _M_erase(size_type __pos, size_type __n)
    {
      const size_type __how_much = length() - __pos - __n;

      if (__how_much && __n)
 this->_S_move(_M_data() + __pos, _M_data() + __pos + __n, __how_much);

      _M_set_length(length() - __n);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    resize(size_type __n, _CharT __c)
    {
      const size_type __size = this->size();
      if (__size < __n)
 this->append(__n - __size, __c);
      else if (__n < __size)
 this->_M_set_length(__n);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    _M_append(const _CharT* __s, size_type __n)
    {
      const size_type __len = __n + this->size();

      if (__len <= this->capacity())
 {
   if (__n)
     this->_S_copy(this->_M_data() + this->size(), __s, __n);
 }
      else
 this->_M_mutate(this->size(), size_type(0), __s, __n);

      this->_M_set_length(__len);
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InputIterator>
      basic_string<_CharT, _Traits, _Alloc>&
      basic_string<_CharT, _Traits, _Alloc>::
      _M_replace_dispatch(const_iterator __i1, const_iterator __i2,
     _InputIterator __k1, _InputIterator __k2,
     std::__false_type)
      {
 const basic_string __s(__k1, __k2);
 const size_type __n1 = __i2 - __i1;
 return _M_replace(__i1 - begin(), __n1, __s._M_data(),
     __s.size());
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,
     _CharT __c)
    {
      _M_check_length(__n1, __n2, "basic_string::_M_replace_aux");

      const size_type __old_size = this->size();
      const size_type __new_size = __old_size + __n2 - __n1;

      if (__new_size <= this->capacity())
 {
   pointer __p = this->_M_data() + __pos1;

   const size_type __how_much = __old_size - __pos1 - __n1;
   if (__how_much && __n1 != __n2)
     this->_S_move(__p + __n2, __p + __n1, __how_much);
 }
      else
 this->_M_mutate(__pos1, __n1, 0, __n2);

      if (__n2)
 this->_S_assign(this->_M_data() + __pos1, __n2, __c);

      this->_M_set_length(__new_size);
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    _M_replace(size_type __pos, size_type __len1, const _CharT* __s,
        const size_type __len2)
    {
      _M_check_length(__len1, __len2, "basic_string::_M_replace");

      const size_type __old_size = this->size();
      const size_type __new_size = __old_size + __len2 - __len1;

      if (__new_size <= this->capacity())
 {
   pointer __p = this->_M_data() + __pos;

   const size_type __how_much = __old_size - __pos - __len1;
   if (_M_disjunct(__s))
     {
       if (__how_much && __len1 != __len2)
  this->_S_move(__p + __len2, __p + __len1, __how_much);
       if (__len2)
  this->_S_copy(__p, __s, __len2);
     }
   else
     {

       if (__len2 && __len2 <= __len1)
  this->_S_move(__p, __s, __len2);
       if (__how_much && __len1 != __len2)
  this->_S_move(__p + __len2, __p + __len1, __how_much);
       if (__len2 > __len1)
  {
    if (__s + __len2 <= __p + __len1)
      this->_S_move(__p, __s, __len2);
    else if (__s >= __p + __len1)
      this->_S_copy(__p, __s + __len2 - __len1, __len2);
    else
      {
        const size_type __nleft = (__p + __len1) - __s;
        this->_S_move(__p, __s, __nleft);
        this->_S_copy(__p + __nleft, __p + __len2,
        __len2 - __nleft);
      }
  }
     }
 }
      else
 this->_M_mutate(__pos, __len1, __s, __len2);

      this->_M_set_length(__new_size);
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    copy(_CharT* __s, size_type __n, size_type __pos) const
    {
      _M_check(__pos, "basic_string::copy");
      __n = _M_limit(__pos, __n);
                                             ;
      if (__n)
 _S_copy(__s, _M_data() + __pos, __n);

      return __n;
    }
# 1155 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.tcc" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(const _CharT* __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    {
                                      ;
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type __size_type;
      const __size_type __len = _Traits::length(__lhs);
      __string_type __str;
      __str.reserve(__len + __rhs.size());
      __str.append(__lhs, __len);
      __str.append(__rhs);
      return __str;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(_CharT __lhs, const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    {
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type __size_type;
      __string_type __str;
      const __size_type __len = __rhs.size();
      __str.reserve(__len + 1);
      __str.append(__size_type(1), __lhs);
      __str.append(__rhs);
      return __str;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find(const _CharT* __s, size_type __pos, size_type __n) const
    noexcept
    {
                                             ;
      const size_type __size = this->size();

      if (__n == 0)
 return __pos <= __size ? __pos : npos;
      if (__pos >= __size)
 return npos;

      const _CharT __elem0 = __s[0];
      const _CharT* const __data = data();
      const _CharT* __first = __data + __pos;
      const _CharT* const __last = __data + __size;
      size_type __len = __size - __pos;

      while (__len >= __n)
 {

   __first = traits_type::find(__first, __len - __n + 1, __elem0);
   if (!__first)
     return npos;



   if (traits_type::compare(__first, __s, __n) == 0)
     return __first - __data;
   __len = __last - ++__first;
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find(_CharT __c, size_type __pos) const noexcept
    {
      size_type __ret = npos;
      const size_type __size = this->size();
      if (__pos < __size)
 {
   const _CharT* __data = _M_data();
   const size_type __n = __size - __pos;
   const _CharT* __p = traits_type::find(__data + __pos, __n, __c);
   if (__p)
     __ret = __p - __data;
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    rfind(const _CharT* __s, size_type __pos, size_type __n) const
    noexcept
    {
                                             ;
      const size_type __size = this->size();
      if (__n <= __size)
 {
   __pos = std::min(size_type(__size - __n), __pos);
   const _CharT* __data = _M_data();
   do
     {
       if (traits_type::compare(__data + __pos, __s, __n) == 0)
  return __pos;
     }
   while (__pos-- > 0);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    rfind(_CharT __c, size_type __pos) const noexcept
    {
      size_type __size = this->size();
      if (__size)
 {
   if (--__size > __pos)
     __size = __pos;
   for (++__size; __size-- > 0; )
     if (traits_type::eq(_M_data()[__size], __c))
       return __size;
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_first_of(const _CharT* __s, size_type __pos, size_type __n) const
    noexcept
    {
                                             ;
      for (; __n && __pos < this->size(); ++__pos)
 {
   const _CharT* __p = traits_type::find(__s, __n, _M_data()[__pos]);
   if (__p)
     return __pos;
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_last_of(const _CharT* __s, size_type __pos, size_type __n) const
    noexcept
    {
                                             ;
      size_type __size = this->size();
      if (__size && __n)
 {
   if (--__size > __pos)
     __size = __pos;
   do
     {
       if (traits_type::find(__s, __n, _M_data()[__size]))
  return __size;
     }
   while (__size-- != 0);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_first_not_of(const _CharT* __s, size_type __pos, size_type __n) const
    noexcept
    {
                                             ;
      for (; __pos < this->size(); ++__pos)
 if (!traits_type::find(__s, __n, _M_data()[__pos]))
   return __pos;
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_first_not_of(_CharT __c, size_type __pos) const noexcept
    {
      for (; __pos < this->size(); ++__pos)
 if (!traits_type::eq(_M_data()[__pos], __c))
   return __pos;
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_last_not_of(const _CharT* __s, size_type __pos, size_type __n) const
    noexcept
    {
                                             ;
      size_type __size = this->size();
      if (__size)
 {
   if (--__size > __pos)
     __size = __pos;
   do
     {
       if (!traits_type::find(__s, __n, _M_data()[__size]))
  return __size;
     }
   while (__size--);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_last_not_of(_CharT __c, size_type __pos) const noexcept
    {
      size_type __size = this->size();
      if (__size)
 {
   if (--__size > __pos)
     __size = __pos;
   do
     {
       if (!traits_type::eq(_M_data()[__size], __c))
  return __size;
     }
   while (__size--);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string<_CharT, _Traits, _Alloc>::
    compare(size_type __pos, size_type __n, const basic_string& __str) const
    {
      _M_check(__pos, "basic_string::compare");
      __n = _M_limit(__pos, __n);
      const size_type __osize = __str.size();
      const size_type __len = std::min(__n, __osize);
      int __r = traits_type::compare(_M_data() + __pos, __str.data(), __len);
      if (!__r)
 __r = _S_compare(__n, __osize);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string<_CharT, _Traits, _Alloc>::
    compare(size_type __pos1, size_type __n1, const basic_string& __str,
     size_type __pos2, size_type __n2) const
    {
      _M_check(__pos1, "basic_string::compare");
      __str._M_check(__pos2, "basic_string::compare");
      __n1 = _M_limit(__pos1, __n1);
      __n2 = __str._M_limit(__pos2, __n2);
      const size_type __len = std::min(__n1, __n2);
      int __r = traits_type::compare(_M_data() + __pos1,
         __str.data() + __pos2, __len);
      if (!__r)
 __r = _S_compare(__n1, __n2);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string<_CharT, _Traits, _Alloc>::
    compare(const _CharT* __s) const noexcept
    {
                                    ;
      const size_type __size = this->size();
      const size_type __osize = traits_type::length(__s);
      const size_type __len = std::min(__size, __osize);
      int __r = traits_type::compare(_M_data(), __s, __len);
      if (!__r)
 __r = _S_compare(__size, __osize);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string <_CharT, _Traits, _Alloc>::
    compare(size_type __pos, size_type __n1, const _CharT* __s) const
    {
                                    ;
      _M_check(__pos, "basic_string::compare");
      __n1 = _M_limit(__pos, __n1);
      const size_type __osize = traits_type::length(__s);
      const size_type __len = std::min(__n1, __osize);
      int __r = traits_type::compare(_M_data() + __pos, __s, __len);
      if (!__r)
 __r = _S_compare(__n1, __osize);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string <_CharT, _Traits, _Alloc>::
    compare(size_type __pos, size_type __n1, const _CharT* __s,
     size_type __n2) const
    {
                                              ;
      _M_check(__pos, "basic_string::compare");
      __n1 = _M_limit(__pos, __n1);
      const size_type __len = std::min(__n1, __n2);
      int __r = traits_type::compare(_M_data() + __pos, __s, __len);
      if (!__r)
 __r = _S_compare(__n1, __n2);
      return __r;
    }


  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in,
        basic_string<_CharT, _Traits, _Alloc>& __str)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __istream_type::ios_base __ios_base;
      typedef typename __istream_type::int_type __int_type;
      typedef typename __string_type::size_type __size_type;
      typedef ctype<_CharT> __ctype_type;
      typedef typename __ctype_type::ctype_base __ctype_base;

      __size_type __extracted = 0;
      typename __ios_base::iostate __err = __ios_base::goodbit;
      typename __istream_type::sentry __cerb(__in, false);
      if (__cerb)
 {
   if (true)
     {

       __str.erase();
       _CharT __buf[128];
       __size_type __len = 0;
       const streamsize __w = __in.width();
       const __size_type __n = __w > 0 ? static_cast<__size_type>(__w)
                                : __str.max_size();
       const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());
       const __int_type __eof = _Traits::eof();
       __int_type __c = __in.rdbuf()->sgetc();

       while (__extracted < __n
       && !_Traits::eq_int_type(__c, __eof)
       && !__ct.is(__ctype_base::space,
     _Traits::to_char_type(__c)))
  {
    if (__len == sizeof(__buf) / sizeof(_CharT))
      {
        __str.append(__buf, sizeof(__buf) / sizeof(_CharT));
        __len = 0;
      }
    __buf[__len++] = _Traits::to_char_type(__c);
    ++__extracted;
    __c = __in.rdbuf()->snextc();
  }
       __str.append(__buf, __len);

       if (_Traits::eq_int_type(__c, __eof))
  __err |= __ios_base::eofbit;
       __in.width(0);
     }
   if (false)
     {
       __in._M_setstate(__ios_base::badbit);
                              ;
     }
   if (false)
     {



       __in._M_setstate(__ios_base::badbit);
     }
 }

      if (!__extracted)
 __err |= __ios_base::failbit;
      if (__err)
 __in.setstate(__err);
      return __in;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>& __in,
     basic_string<_CharT, _Traits, _Alloc>& __str, _CharT __delim)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __istream_type::ios_base __ios_base;
      typedef typename __istream_type::int_type __int_type;
      typedef typename __string_type::size_type __size_type;

      __size_type __extracted = 0;
      const __size_type __n = __str.max_size();
      typename __ios_base::iostate __err = __ios_base::goodbit;
      typename __istream_type::sentry __cerb(__in, true);
      if (__cerb)
 {
   if (true)
     {
       __str.erase();
       const __int_type __idelim = _Traits::to_int_type(__delim);
       const __int_type __eof = _Traits::eof();
       __int_type __c = __in.rdbuf()->sgetc();

       while (__extracted < __n
       && !_Traits::eq_int_type(__c, __eof)
       && !_Traits::eq_int_type(__c, __idelim))
  {
    __str += _Traits::to_char_type(__c);
    ++__extracted;
    __c = __in.rdbuf()->snextc();
  }

       if (_Traits::eq_int_type(__c, __eof))
  __err |= __ios_base::eofbit;
       else if (_Traits::eq_int_type(__c, __idelim))
  {
    ++__extracted;
    __in.rdbuf()->sbumpc();
  }
       else
  __err |= __ios_base::failbit;
     }
   if (false)
     {
       __in._M_setstate(__ios_base::badbit);
                              ;
     }
   if (false)
     {



       __in._M_setstate(__ios_base::badbit);
     }
 }
      if (!__extracted)
 __err |= __ios_base::failbit;
      if (__err)
 __in.setstate(__err);
      return __in;
    }
# 1607 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_string.tcc" 3
  extern template class basic_string<char>;







  extern template
    basic_istream<char>&
    operator>>(basic_istream<char>&, string&);
  extern template
    basic_ostream<char>&
    operator<<(basic_ostream<char>&, const string&);
  extern template
    basic_istream<char>&
    getline(basic_istream<char>&, string&, char);
  extern template
    basic_istream<char>&
    getline(basic_istream<char>&, string&);



  extern template class basic_string<wchar_t>;





  extern template
    basic_istream<wchar_t>&
    operator>>(basic_istream<wchar_t>&, wstring&);
  extern template
    basic_ostream<wchar_t>&
    operator<<(basic_ostream<wchar_t>&, const wstring&);
  extern template
    basic_istream<wchar_t>&
    getline(basic_istream<wchar_t>&, wstring&, wchar_t);
  extern template
    basic_istream<wchar_t>&
    getline(basic_istream<wchar_t>&, wstring&);




}
# 54 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\string" 2 3
# 41 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_classes.h" 2 3


namespace std
{
# 62 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_classes.h" 3
  class locale
  {
  public:


    typedef int category;


    class facet;
    class id;
    class _Impl;

    friend class facet;
    friend class _Impl;

    template<typename _Facet>
      friend bool
      has_facet(const locale&) throw();

    template<typename _Facet>
      friend const _Facet&
      use_facet(const locale&);

    template<typename _Cache>
      friend struct __use_cache;
# 98 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_classes.h" 3
    static const category none = 0;
    static const category ctype = 1L << 0;
    static const category numeric = 1L << 1;
    static const category collate = 1L << 2;
    static const category time = 1L << 3;
    static const category monetary = 1L << 4;
    static const category messages = 1L << 5;
    static const category all = (ctype | numeric | collate |
        time | monetary | messages);
# 117 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_classes.h" 3
    locale() throw();
# 126 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_classes.h" 3
    locale(const locale& __other) throw();
# 136 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_classes.h" 3
    explicit
    locale(const char* __s);
# 151 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_classes.h" 3
    locale(const locale& __base, const char* __s, category __cat);
# 162 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_classes.h" 3
    explicit
    locale(const std::string& __s) : locale(__s.c_str()) { }
# 177 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_classes.h" 3
    locale(const locale& __base, const std::string& __s, category __cat)
    : locale(__base, __s.c_str(), __cat) { }
# 192 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_classes.h" 3
    locale(const locale& __base, const locale& __add, category __cat);
# 205 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_classes.h" 3
    template<typename _Facet>
      locale(const locale& __other, _Facet* __f);


    ~locale() throw();
# 219 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_classes.h" 3
    const locale&
    operator=(const locale& __other) throw();
# 234 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_classes.h" 3
    template<typename _Facet>
      locale
      combine(const locale& __other) const;






    __attribute ((__abi_tag__ ("cxx11")))
    string
    name() const;
# 254 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_classes.h" 3
    bool
    operator==(const locale& __other) const throw();







    bool
    operator!=(const locale& __other) const throw()
    { return !(this->operator==(__other)); }
# 282 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_classes.h" 3
    template<typename _Char, typename _Traits, typename _Alloc>
      bool
      operator()(const basic_string<_Char, _Traits, _Alloc>& __s1,
   const basic_string<_Char, _Traits, _Alloc>& __s2) const;
# 298 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_classes.h" 3
    static locale
    global(const locale& __loc);




    static const locale&
    classic();

  private:

    _Impl* _M_impl;


    static _Impl* _S_classic;


    static _Impl* _S_global;





    static const char* const* const _S_categories;
# 333 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_classes.h" 3
    enum { _S_categories_size = 6 + 0 };


    static __gthread_once_t _S_once;


    explicit
    locale(_Impl*) throw();

    static void
    _S_initialize();

    static void
    _S_initialize_once() throw();

    static category
    _S_normalize_category(category);

    void
    _M_coalesce(const locale& __base, const locale& __add, category __cat);


    static const id* const _S_twinned_facets[];

  };
# 371 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_classes.h" 3
  class locale::facet
  {
  private:
    friend class locale;
    friend class locale::_Impl;

    mutable _Atomic_word _M_refcount;


    static __c_locale _S_c_locale;


    static const char _S_c_name[2];


    static __gthread_once_t _S_once;


    static void
    _S_initialize_once();

  protected:
# 402 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_classes.h" 3
    explicit
    facet(size_t __refs = 0) throw() : _M_refcount(__refs ? 1 : 0)
    { }


    virtual
    ~facet();

    static void
    _S_create_c_locale(__c_locale& __cloc, const char* __s,
         __c_locale __old = 0);

    static __c_locale
    _S_clone_c_locale(__c_locale& __cloc) throw();

    static void
    _S_destroy_c_locale(__c_locale& __cloc);

    static __c_locale
    _S_lc_ctype_c_locale(__c_locale __cloc, const char* __s);



    static __c_locale
    _S_get_c_locale();

    __attribute__ ((__const__)) static const char*
    _S_get_c_name() throw();
# 438 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_classes.h" 3
    facet(const facet&) = delete;

    facet&
    operator=(const facet&) = delete;


  private:
    void
    _M_add_reference() const throw()
    { __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1); }

    void
    _M_remove_reference() const throw()
    {

                                                           ;
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_refcount, -1) == 1)
 {
                                                              ;
   if (true)
     { delete this; }
   if (false)
     { }
 }
    }

    const facet* _M_sso_shim(const id*) const;
    const facet* _M_cow_shim(const id*) const;

  protected:
    class __shim;
  };
# 483 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_classes.h" 3
  class locale::id
  {
  private:
    friend class locale;
    friend class locale::_Impl;

    template<typename _Facet>
      friend const _Facet&
      use_facet(const locale&);

    template<typename _Facet>
      friend bool
      has_facet(const locale&) throw();




    mutable size_t _M_index;


    static _Atomic_word _S_refcount;

    void
    operator=(const id&);

    id(const id&);

  public:



    id() { }

    size_t
    _M_id() const throw();
  };



  class locale::_Impl
  {
  public:

    friend class locale;
    friend class locale::facet;

    template<typename _Facet>
      friend bool
      has_facet(const locale&) throw();

    template<typename _Facet>
      friend const _Facet&
      use_facet(const locale&);

    template<typename _Cache>
      friend struct __use_cache;

  private:

    _Atomic_word _M_refcount;
    const facet** _M_facets;
    size_t _M_facets_size;
    const facet** _M_caches;
    char** _M_names;
    static const locale::id* const _S_id_ctype[];
    static const locale::id* const _S_id_numeric[];
    static const locale::id* const _S_id_collate[];
    static const locale::id* const _S_id_time[];
    static const locale::id* const _S_id_monetary[];
    static const locale::id* const _S_id_messages[];
    static const locale::id* const* const _S_facet_categories[];

    void
    _M_add_reference() throw()
    { __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1); }

    void
    _M_remove_reference() throw()
    {

                                                           ;
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_refcount, -1) == 1)
 {
                                                              ;
   if (true)
     { delete this; }
   if (false)
     { }
 }
    }

    _Impl(const _Impl&, size_t);
    _Impl(const char*, size_t);
    _Impl(size_t) throw();

   ~_Impl() throw();

    _Impl(const _Impl&);

    void
    operator=(const _Impl&);

    bool
    _M_check_same_name()
    {
      bool __ret = true;
      if (_M_names[1])

 for (size_t __i = 0; __ret && __i < _S_categories_size - 1; ++__i)
   __ret = __builtin_strcmp(_M_names[__i], _M_names[__i + 1]) == 0;
      return __ret;
    }

    void
    _M_replace_categories(const _Impl*, category);

    void
    _M_replace_category(const _Impl*, const locale::id* const*);

    void
    _M_replace_facet(const _Impl*, const locale::id*);

    void
    _M_install_facet(const locale::id*, const facet*);

    template<typename _Facet>
      void
      _M_init_facet(_Facet* __facet)
      { _M_install_facet(&_Facet::id, __facet); }

    template<typename _Facet>
      void
      _M_init_facet_unchecked(_Facet* __facet)
      {
 __facet->_M_add_reference();
 _M_facets[_Facet::id._M_id()] = __facet;
      }

    void
    _M_install_cache(const facet*, size_t);

    void _M_init_extra(facet**);
    void _M_init_extra(void*, void*, const char*, const char*);
  };
# 641 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_classes.h" 3
  template<typename _CharT>
    class __cxx11:: collate : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;


    protected:


      __c_locale _M_c_locale_collate;

    public:

      static locale::id id;
# 668 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_classes.h" 3
      explicit
      collate(size_t __refs = 0)
      : facet(__refs), _M_c_locale_collate(_S_get_c_locale())
      { }
# 682 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_classes.h" 3
      explicit
      collate(__c_locale __cloc, size_t __refs = 0)
      : facet(__refs), _M_c_locale_collate(_S_clone_c_locale(__cloc))
      { }
# 699 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_classes.h" 3
      int
      compare(const _CharT* __lo1, const _CharT* __hi1,
       const _CharT* __lo2, const _CharT* __hi2) const
      { return this->do_compare(__lo1, __hi1, __lo2, __hi2); }
# 718 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_classes.h" 3
      string_type
      transform(const _CharT* __lo, const _CharT* __hi) const
      { return this->do_transform(__lo, __hi); }
# 732 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_classes.h" 3
      long
      hash(const _CharT* __lo, const _CharT* __hi) const
      { return this->do_hash(__lo, __hi); }


      int
      _M_compare(const _CharT*, const _CharT*) const throw();

      size_t
      _M_transform(_CharT*, const _CharT*, size_t) const throw();

  protected:

      virtual
      ~collate()
      { _S_destroy_c_locale(_M_c_locale_collate); }
# 761 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_classes.h" 3
      virtual int
      do_compare(const _CharT* __lo1, const _CharT* __hi1,
   const _CharT* __lo2, const _CharT* __hi2) const;
# 775 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_classes.h" 3
      virtual string_type
      do_transform(const _CharT* __lo, const _CharT* __hi) const;
# 788 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_classes.h" 3
      virtual long
      do_hash(const _CharT* __lo, const _CharT* __hi) const;
    };

  template<typename _CharT>
    locale::id collate<_CharT>::id;


  template<>
    int
    collate<char>::_M_compare(const char*, const char*) const throw();

  template<>
    size_t
    collate<char>::_M_transform(char*, const char*, size_t) const throw();


  template<>
    int
    collate<wchar_t>::_M_compare(const wchar_t*, const wchar_t*) const throw();

  template<>
    size_t
    collate<wchar_t>::_M_transform(wchar_t*, const wchar_t*, size_t) const throw();



  template<typename _CharT>
    class __cxx11:: collate_byname : public collate<_CharT>
    {
    public:


      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;


      explicit
      collate_byname(const char* __s, size_t __refs = 0)
      : collate<_CharT>(__refs)
      {
 if (__builtin_strcmp(__s, "C") != 0
     && __builtin_strcmp(__s, "POSIX") != 0)
   {
     this->_S_destroy_c_locale(this->_M_c_locale_collate);
     this->_S_create_c_locale(this->_M_c_locale_collate, __s);
   }
      }


      explicit
      collate_byname(const string& __s, size_t __refs = 0)
      : collate_byname(__s.c_str(), __refs) { }


    protected:
      virtual
      ~collate_byname() { }
    };


}


# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_classes.tcc" 1 3
# 38 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_classes.tcc" 3

namespace std
{


  template<typename _Facet>
    locale::
    locale(const locale& __other, _Facet* __f)
    {
      _M_impl = new _Impl(*__other._M_impl, 1);

      if (true)
 { _M_impl->_M_install_facet(&_Facet::id, __f); }
      if (false)
 {
   _M_impl->_M_remove_reference();
                          ;
 }
      delete [] _M_impl->_M_names[0];
      _M_impl->_M_names[0] = 0;
    }

  template<typename _Facet>
    locale
    locale::
    combine(const locale& __other) const
    {
      _Impl* __tmp = new _Impl(*_M_impl, 1);
      if (true)
 {
   __tmp->_M_replace_facet(__other._M_impl, &_Facet::id);
 }
      if (false)
 {
   __tmp->_M_remove_reference();
                          ;
 }
      return locale(__tmp);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    bool
    locale::
    operator()(const basic_string<_CharT, _Traits, _Alloc>& __s1,
        const basic_string<_CharT, _Traits, _Alloc>& __s2) const
    {
      typedef std::collate<_CharT> __collate_type;
      const __collate_type& __collate = use_facet<__collate_type>(*this);
      return (__collate.compare(__s1.data(), __s1.data() + __s1.length(),
    __s2.data(), __s2.data() + __s2.length()) < 0);
    }
# 102 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_classes.tcc" 3
  template<typename _Facet>
    bool
    has_facet(const locale& __loc) throw()
    {
      const size_t __i = _Facet::id._M_id();
      const locale::facet** __facets = __loc._M_impl->_M_facets;
      return (__i < __loc._M_impl->_M_facets_size

       && dynamic_cast<const _Facet*>(__facets[__i]));



    }
# 130 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_classes.tcc" 3
  template<typename _Facet>
    const _Facet&
    use_facet(const locale& __loc)
    {
      const size_t __i = _Facet::id._M_id();
      const locale::facet** __facets = __loc._M_impl->_M_facets;
      if (__i >= __loc._M_impl->_M_facets_size || !__facets[__i])
        __throw_bad_cast();

      return dynamic_cast<const _Facet&>(*__facets[__i]);



    }



  template<typename _CharT>
    int
    collate<_CharT>::_M_compare(const _CharT*, const _CharT*) const throw ()
    { return 0; }


  template<typename _CharT>
    size_t
    collate<_CharT>::_M_transform(_CharT*, const _CharT*, size_t) const throw ()
    { return 0; }

  template<typename _CharT>
    int
    collate<_CharT>::
    do_compare(const _CharT* __lo1, const _CharT* __hi1,
        const _CharT* __lo2, const _CharT* __hi2) const
    {


      const string_type __one(__lo1, __hi1);
      const string_type __two(__lo2, __hi2);

      const _CharT* __p = __one.c_str();
      const _CharT* __pend = __one.data() + __one.length();
      const _CharT* __q = __two.c_str();
      const _CharT* __qend = __two.data() + __two.length();




      for (;;)
 {
   const int __res = _M_compare(__p, __q);
   if (__res)
     return __res;

   __p += char_traits<_CharT>::length(__p);
   __q += char_traits<_CharT>::length(__q);
   if (__p == __pend && __q == __qend)
     return 0;
   else if (__p == __pend)
     return -1;
   else if (__q == __qend)
     return 1;

   __p++;
   __q++;
 }
    }

  template<typename _CharT>
    typename collate<_CharT>::string_type
    collate<_CharT>::
    do_transform(const _CharT* __lo, const _CharT* __hi) const
    {
      string_type __ret;


      const string_type __str(__lo, __hi);

      const _CharT* __p = __str.c_str();
      const _CharT* __pend = __str.data() + __str.length();

      size_t __len = (__hi - __lo) * 2;

      _CharT* __c = new _CharT[__len];

      if (true)
 {



   for (;;)
     {

       size_t __res = _M_transform(__c, __p, __len);


       if (__res >= __len)
  {
    __len = __res + 1;
    delete [] __c, __c = 0;
    __c = new _CharT[__len];
    __res = _M_transform(__c, __p, __len);
  }

       __ret.append(__c, __res);
       __p += char_traits<_CharT>::length(__p);
       if (__p == __pend)
  break;

       __p++;
       __ret.push_back(_CharT());
     }
 }
      if (false)
 {
   delete [] __c;
                          ;
 }

      delete [] __c;

      return __ret;
    }

  template<typename _CharT>
    long
    collate<_CharT>::
    do_hash(const _CharT* __lo, const _CharT* __hi) const
    {
      unsigned long __val = 0;
      for (; __lo < __hi; ++__lo)
 __val =
   *__lo + ((__val << 7)
     | (__val >> (__gnu_cxx::__numeric_traits<unsigned long>::
    __digits - 7)));
      return static_cast<long>(__val);
    }




  extern template class collate<char>;
  extern template class collate_byname<char>;

  extern template
    const collate<char>&
    use_facet<collate<char> >(const locale&);

  extern template
    bool
    has_facet<collate<char> >(const locale&);


  extern template class collate<wchar_t>;
  extern template class collate_byname<wchar_t>;

  extern template
    const collate<wchar_t>&
    use_facet<collate<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<collate<wchar_t> >(const locale&);




}
# 852 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_classes.h" 2 3
# 42 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/ios_base.h" 2 3




# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\system_error" 1 3
# 33 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\system_error" 3






# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\x86_64-w64-mingw32\\bits/error_constants.h" 1 3
# 34 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\x86_64-w64-mingw32\\bits/error_constants.h" 3
# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\cerrno" 1 3
# 40 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\cerrno" 3
# 35 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\x86_64-w64-mingw32\\bits/error_constants.h" 2 3

namespace std
{




  enum class errc
    {
      address_family_not_supported = 102,
      address_in_use = 100,
      address_not_available = 101,
      already_connected = 113,
      argument_list_too_long = 7,
      argument_out_of_domain = 33,
      bad_address = 14,
      bad_file_descriptor = 9,

      bad_message = 104,

      broken_pipe = 32,
      connection_aborted = 106,
      connection_already_in_progress = 103,
      connection_refused = 107,
      connection_reset = 108,
      cross_device_link = 18,
      destination_address_required = 109,
      device_or_resource_busy = 16,
      directory_not_empty = 41,
      executable_format_error = 8,
      file_exists = 17,
      file_too_large = 27,
      filename_too_long = 38,
      function_not_supported = 40,
      host_unreachable = 110,

      identifier_removed = 111,

      illegal_byte_sequence = 42,
      inappropriate_io_control_operation = 25,
      interrupted = 4,
      invalid_argument = 22,
      invalid_seek = 29,
      io_error = 5,
      is_a_directory = 21,
      message_size = 115,
      network_down = 116,
      network_reset = 117,
      network_unreachable = 118,
      no_buffer_space = 119,

      no_child_process = 10,


      no_link = 121,

      no_lock_available = 39,

      no_message_available = 120,




      no_protocol_option = 123,

      no_space_on_device = 28,


      no_stream_resources = 124,

      no_such_device_or_address = 6,
      no_such_device = 19,
      no_such_file_or_directory = 2,
      no_such_process = 3,
      not_a_directory = 20,
      not_a_socket = 128,

      not_a_stream = 125,

      not_connected = 126,
      not_enough_memory = 12,

      not_supported = 129,

      operation_canceled = 105,
      operation_in_progress = 112,

      operation_not_permitted = 1,

      operation_not_supported = 130,

      operation_would_block = 140,


      owner_dead = 133,

      permission_denied = 13,
      protocol_error = 134,
      protocol_not_supported = 135,
      read_only_file_system = 30,
      resource_deadlock_would_occur = 36,
      resource_unavailable_try_again = 11,
      result_out_of_range = 34,

      state_not_recoverable = 127,


      stream_timeout = 137,


      text_file_busy = 139,


      timed_out = 138,

      too_many_files_open_in_system = 23,
      too_many_files_open = 24,
      too_many_links = 31,
      too_many_symbolic_link_levels = 114,

      value_too_large = 132,

      wrong_protocol_type = 136
   };


}
# 40 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\system_error" 2 3

# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\stdexcept" 1 3
# 37 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\stdexcept" 3




namespace std
{





  struct __cow_string
  {
    union {
      const char* _M_p;
      char _M_bytes[sizeof(const char*)];
    };

    __cow_string();
    __cow_string(const std::string&);
    __cow_string(const char*, size_t);
    __cow_string(const __cow_string&) noexcept;
    __cow_string& operator=(const __cow_string&) noexcept;
    ~__cow_string();

    __cow_string(__cow_string&&) noexcept;
    __cow_string& operator=(__cow_string&&) noexcept;

  };

  typedef basic_string<char> __sso_string;
# 113 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\stdexcept" 3
  class logic_error : public exception
  {
    __cow_string _M_msg;

  public:

    explicit
    logic_error(const string& __arg) ;


    explicit
    logic_error(const char*) ;



    logic_error(const logic_error&) noexcept;
    logic_error& operator=(const logic_error&) noexcept;


    virtual ~logic_error() noexcept;



    virtual const char*
    what() const noexcept;





  };



  class domain_error : public logic_error
  {
  public:
    explicit domain_error(const string& __arg) ;

    explicit domain_error(const char*) ;

    virtual ~domain_error() noexcept;
  };


  class invalid_argument : public logic_error
  {
  public:
    explicit invalid_argument(const string& __arg) ;

    explicit invalid_argument(const char*) ;

    virtual ~invalid_argument() noexcept;
  };



  class length_error : public logic_error
  {
  public:
    explicit length_error(const string& __arg) ;

    explicit length_error(const char*) ;

    virtual ~length_error() noexcept;
  };



  class out_of_range : public logic_error
  {
  public:
    explicit out_of_range(const string& __arg) ;

    explicit out_of_range(const char*) ;

    virtual ~out_of_range() noexcept;
  };






  class runtime_error : public exception
  {
    __cow_string _M_msg;

  public:

    explicit
    runtime_error(const string& __arg) ;


    explicit
    runtime_error(const char*) ;



    runtime_error(const runtime_error&) noexcept;
    runtime_error& operator=(const runtime_error&) noexcept;


    virtual ~runtime_error() noexcept;



    virtual const char*
    what() const noexcept;





  };


  class range_error : public runtime_error
  {
  public:
    explicit range_error(const string& __arg) ;

    explicit range_error(const char*) ;

    virtual ~range_error() noexcept;
  };


  class overflow_error : public runtime_error
  {
  public:
    explicit overflow_error(const string& __arg) ;

    explicit overflow_error(const char*) ;

    virtual ~overflow_error() noexcept;
  };


  class underflow_error : public runtime_error
  {
  public:
    explicit underflow_error(const string& __arg) ;

    explicit underflow_error(const char*) ;

    virtual ~underflow_error() noexcept;
  };




}
# 42 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\system_error" 2 3

namespace std
{


  class error_code;
  class error_condition;
  class system_error;


  template<typename _Tp>
    struct is_error_code_enum : public false_type { };


  template<typename _Tp>
    struct is_error_condition_enum : public false_type { };

  template<>
    struct is_error_condition_enum<errc>
    : public true_type { };
# 71 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\system_error" 3
  inline namespace _V2 {


  class error_category
  {
  public:
    constexpr error_category() noexcept = default;

    virtual ~error_category();

    error_category(const error_category&) = delete;
    error_category& operator=(const error_category&) = delete;

    virtual const char*
    name() const noexcept = 0;






  private:
    __attribute ((__abi_tag__ ("cxx11")))
    virtual __cow_string
    _M_message(int) const;

  public:
    __attribute ((__abi_tag__ ("cxx11")))
    virtual string
    message(int) const = 0;
# 110 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\system_error" 3
  public:
    virtual error_condition
    default_error_condition(int __i) const noexcept;

    virtual bool
    equivalent(int __i, const error_condition& __cond) const noexcept;

    virtual bool
    equivalent(const error_code& __code, int __i) const noexcept;

    bool
    operator<(const error_category& __other) const noexcept
    { return less<const error_category*>()(this, &__other); }

    bool
    operator==(const error_category& __other) const noexcept
    { return this == &__other; }

    bool
    operator!=(const error_category& __other) const noexcept
    { return this != &__other; }
  };


  __attribute__ ((__const__)) const error_category& system_category() noexcept;
  __attribute__ ((__const__)) const error_category& generic_category() noexcept;

  }

  error_code make_error_code(errc) noexcept;

  template<typename _Tp>
    struct hash;



  struct error_code
  {
    error_code() noexcept
    : _M_value(0), _M_cat(&system_category()) { }

    error_code(int __v, const error_category& __cat) noexcept
    : _M_value(__v), _M_cat(&__cat) { }

    template<typename _ErrorCodeEnum, typename = typename
      enable_if<is_error_code_enum<_ErrorCodeEnum>::value>::type>
      error_code(_ErrorCodeEnum __e) noexcept
      { *this = make_error_code(__e); }

    void
    assign(int __v, const error_category& __cat) noexcept
    {
      _M_value = __v;
      _M_cat = &__cat;
    }

    void
    clear() noexcept
    { assign(0, system_category()); }


    template<typename _ErrorCodeEnum>
      typename enable_if<is_error_code_enum<_ErrorCodeEnum>::value,
    error_code&>::type
      operator=(_ErrorCodeEnum __e) noexcept
      { return *this = make_error_code(__e); }

    int
    value() const noexcept { return _M_value; }

    const error_category&
    category() const noexcept { return *_M_cat; }

    error_condition
    default_error_condition() const noexcept;

    __attribute ((__abi_tag__ ("cxx11")))
    string
    message() const
    { return category().message(value()); }

    explicit operator bool() const noexcept
    { return _M_value != 0; }


  private:
    friend class hash<error_code>;

    int _M_value;
    const error_category* _M_cat;
  };


  inline error_code
  make_error_code(errc __e) noexcept
  { return error_code(static_cast<int>(__e), generic_category()); }

  inline bool
  operator<(const error_code& __lhs, const error_code& __rhs) noexcept
  {
    return (__lhs.category() < __rhs.category()
     || (__lhs.category() == __rhs.category()
  && __lhs.value() < __rhs.value()));
  }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __os, const error_code& __e)
    { return (__os << __e.category().name() << ':' << __e.value()); }

  error_condition make_error_condition(errc) noexcept;



  struct error_condition
  {
    error_condition() noexcept
    : _M_value(0), _M_cat(&generic_category()) { }

    error_condition(int __v, const error_category& __cat) noexcept
    : _M_value(__v), _M_cat(&__cat) { }

    template<typename _ErrorConditionEnum, typename = typename
  enable_if<is_error_condition_enum<_ErrorConditionEnum>::value>::type>
      error_condition(_ErrorConditionEnum __e) noexcept
      { *this = make_error_condition(__e); }

    void
    assign(int __v, const error_category& __cat) noexcept
    {
      _M_value = __v;
      _M_cat = &__cat;
    }


    template<typename _ErrorConditionEnum>
      typename enable_if<is_error_condition_enum
    <_ErrorConditionEnum>::value, error_condition&>::type
      operator=(_ErrorConditionEnum __e) noexcept
      { return *this = make_error_condition(__e); }

    void
    clear() noexcept
    { assign(0, generic_category()); }


    int
    value() const noexcept { return _M_value; }

    const error_category&
    category() const noexcept { return *_M_cat; }

    __attribute ((__abi_tag__ ("cxx11")))
    string
    message() const
    { return category().message(value()); }

    explicit operator bool() const noexcept
    { return _M_value != 0; }


  private:
    int _M_value;
    const error_category* _M_cat;
  };


  inline error_condition
  make_error_condition(errc __e) noexcept
  { return error_condition(static_cast<int>(__e), generic_category()); }

  inline bool
  operator<(const error_condition& __lhs,
     const error_condition& __rhs) noexcept
  {
    return (__lhs.category() < __rhs.category()
     || (__lhs.category() == __rhs.category()
  && __lhs.value() < __rhs.value()));
  }


  inline bool
  operator==(const error_code& __lhs, const error_code& __rhs) noexcept
  { return (__lhs.category() == __rhs.category()
     && __lhs.value() == __rhs.value()); }

  inline bool
  operator==(const error_code& __lhs, const error_condition& __rhs) noexcept
  {
    return (__lhs.category().equivalent(__lhs.value(), __rhs)
     || __rhs.category().equivalent(__lhs, __rhs.value()));
  }

  inline bool
  operator==(const error_condition& __lhs, const error_code& __rhs) noexcept
  {
    return (__rhs.category().equivalent(__rhs.value(), __lhs)
     || __lhs.category().equivalent(__rhs, __lhs.value()));
  }

  inline bool
  operator==(const error_condition& __lhs,
      const error_condition& __rhs) noexcept
  {
    return (__lhs.category() == __rhs.category()
     && __lhs.value() == __rhs.value());
  }

  inline bool
  operator!=(const error_code& __lhs, const error_code& __rhs) noexcept
  { return !(__lhs == __rhs); }

  inline bool
  operator!=(const error_code& __lhs, const error_condition& __rhs) noexcept
  { return !(__lhs == __rhs); }

  inline bool
  operator!=(const error_condition& __lhs, const error_code& __rhs) noexcept
  { return !(__lhs == __rhs); }

  inline bool
  operator!=(const error_condition& __lhs,
      const error_condition& __rhs) noexcept
  { return !(__lhs == __rhs); }







  class system_error : public std::runtime_error
  {
  private:
    error_code _M_code;

  public:
    system_error(error_code __ec = error_code())
    : runtime_error(__ec.message()), _M_code(__ec) { }

    system_error(error_code __ec, const string& __what)
    : runtime_error(__what + ": " + __ec.message()), _M_code(__ec) { }

    system_error(error_code __ec, const char* __what)
    : runtime_error(__what + (": " + __ec.message())), _M_code(__ec) { }

    system_error(int __v, const error_category& __ecat, const char* __what)
    : system_error(error_code(__v, __ecat), __what) { }

    system_error(int __v, const error_category& __ecat)
    : runtime_error(error_code(__v, __ecat).message()),
      _M_code(__v, __ecat) { }

    system_error(int __v, const error_category& __ecat, const string& __what)
    : runtime_error(__what + ": " + error_code(__v, __ecat).message()),
      _M_code(__v, __ecat) { }

    virtual ~system_error() noexcept;

    const error_code&
    code() const noexcept { return _M_code; }
  };


}



namespace std
{





  template<>
    struct hash<error_code>
    : public __hash_base<size_t, error_code>
    {
      size_t
      operator()(const error_code& __e) const noexcept
      {
 const size_t __tmp = std::_Hash_impl::hash(__e._M_value);
 return std::_Hash_impl::__hash_combine(__e._M_cat, __tmp);
      }
    };
# 415 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\system_error" 3
}
# 47 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/ios_base.h" 2 3


namespace std
{






  enum _Ios_Fmtflags
    {
      _S_boolalpha = 1L << 0,
      _S_dec = 1L << 1,
      _S_fixed = 1L << 2,
      _S_hex = 1L << 3,
      _S_internal = 1L << 4,
      _S_left = 1L << 5,
      _S_oct = 1L << 6,
      _S_right = 1L << 7,
      _S_scientific = 1L << 8,
      _S_showbase = 1L << 9,
      _S_showpoint = 1L << 10,
      _S_showpos = 1L << 11,
      _S_skipws = 1L << 12,
      _S_unitbuf = 1L << 13,
      _S_uppercase = 1L << 14,
      _S_adjustfield = _S_left | _S_right | _S_internal,
      _S_basefield = _S_dec | _S_oct | _S_hex,
      _S_floatfield = _S_scientific | _S_fixed,
      _S_ios_fmtflags_end = 1L << 16,
      _S_ios_fmtflags_max = 2147483647,
      _S_ios_fmtflags_min = ~2147483647
    };

  inline constexpr _Ios_Fmtflags
  operator&(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
  { return _Ios_Fmtflags(static_cast<int>(__a) & static_cast<int>(__b)); }

  inline constexpr _Ios_Fmtflags
  operator|(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
  { return _Ios_Fmtflags(static_cast<int>(__a) | static_cast<int>(__b)); }

  inline constexpr _Ios_Fmtflags
  operator^(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
  { return _Ios_Fmtflags(static_cast<int>(__a) ^ static_cast<int>(__b)); }

  inline constexpr _Ios_Fmtflags
  operator~(_Ios_Fmtflags __a)
  { return _Ios_Fmtflags(~static_cast<int>(__a)); }

  inline const _Ios_Fmtflags&
  operator|=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)
  { return __a = __a | __b; }

  inline const _Ios_Fmtflags&
  operator&=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)
  { return __a = __a & __b; }

  inline const _Ios_Fmtflags&
  operator^=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)
  { return __a = __a ^ __b; }


  enum _Ios_Openmode
    {
      _S_app = 1L << 0,
      _S_ate = 1L << 1,
      _S_bin = 1L << 2,
      _S_in = 1L << 3,
      _S_out = 1L << 4,
      _S_trunc = 1L << 5,
      _S_ios_openmode_end = 1L << 16,
      _S_ios_openmode_max = 2147483647,
      _S_ios_openmode_min = ~2147483647
    };

  inline constexpr _Ios_Openmode
  operator&(_Ios_Openmode __a, _Ios_Openmode __b)
  { return _Ios_Openmode(static_cast<int>(__a) & static_cast<int>(__b)); }

  inline constexpr _Ios_Openmode
  operator|(_Ios_Openmode __a, _Ios_Openmode __b)
  { return _Ios_Openmode(static_cast<int>(__a) | static_cast<int>(__b)); }

  inline constexpr _Ios_Openmode
  operator^(_Ios_Openmode __a, _Ios_Openmode __b)
  { return _Ios_Openmode(static_cast<int>(__a) ^ static_cast<int>(__b)); }

  inline constexpr _Ios_Openmode
  operator~(_Ios_Openmode __a)
  { return _Ios_Openmode(~static_cast<int>(__a)); }

  inline const _Ios_Openmode&
  operator|=(_Ios_Openmode& __a, _Ios_Openmode __b)
  { return __a = __a | __b; }

  inline const _Ios_Openmode&
  operator&=(_Ios_Openmode& __a, _Ios_Openmode __b)
  { return __a = __a & __b; }

  inline const _Ios_Openmode&
  operator^=(_Ios_Openmode& __a, _Ios_Openmode __b)
  { return __a = __a ^ __b; }


  enum _Ios_Iostate
    {
      _S_goodbit = 0,
      _S_badbit = 1L << 0,
      _S_eofbit = 1L << 1,
      _S_failbit = 1L << 2,
      _S_ios_iostate_end = 1L << 16,
      _S_ios_iostate_max = 2147483647,
      _S_ios_iostate_min = ~2147483647
    };

  inline constexpr _Ios_Iostate
  operator&(_Ios_Iostate __a, _Ios_Iostate __b)
  { return _Ios_Iostate(static_cast<int>(__a) & static_cast<int>(__b)); }

  inline constexpr _Ios_Iostate
  operator|(_Ios_Iostate __a, _Ios_Iostate __b)
  { return _Ios_Iostate(static_cast<int>(__a) | static_cast<int>(__b)); }

  inline constexpr _Ios_Iostate
  operator^(_Ios_Iostate __a, _Ios_Iostate __b)
  { return _Ios_Iostate(static_cast<int>(__a) ^ static_cast<int>(__b)); }

  inline constexpr _Ios_Iostate
  operator~(_Ios_Iostate __a)
  { return _Ios_Iostate(~static_cast<int>(__a)); }

  inline const _Ios_Iostate&
  operator|=(_Ios_Iostate& __a, _Ios_Iostate __b)
  { return __a = __a | __b; }

  inline const _Ios_Iostate&
  operator&=(_Ios_Iostate& __a, _Ios_Iostate __b)
  { return __a = __a & __b; }

  inline const _Ios_Iostate&
  operator^=(_Ios_Iostate& __a, _Ios_Iostate __b)
  { return __a = __a ^ __b; }


  enum _Ios_Seekdir
    {
      _S_beg = 0,
      _S_cur = 1,
      _S_end = 2,
      _S_ios_seekdir_end = 1L << 16
    };



  enum class io_errc { stream = 1 };

  template <> struct is_error_code_enum<io_errc> : public true_type { };

  const error_category& iostream_category() noexcept;

  inline error_code
  make_error_code(io_errc __e) noexcept
  { return error_code(static_cast<int>(__e), iostream_category()); }

  inline error_condition
  make_error_condition(io_errc __e) noexcept
  { return error_condition(static_cast<int>(__e), iostream_category()); }
# 228 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/ios_base.h" 3
  class ios_base
  {
# 246 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/ios_base.h" 3
  public:
# 255 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/ios_base.h" 3
    class __attribute ((__abi_tag__ ("cxx11"))) failure : public system_error
    {
    public:
      explicit
      failure(const string& __str);


      explicit
      failure(const string&, const error_code&);

      explicit
      failure(const char*, const error_code& = io_errc::stream);


      virtual
      ~failure() throw();

      virtual const char*
      what() const throw();
    };
# 323 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/ios_base.h" 3
    typedef _Ios_Fmtflags fmtflags;


    static const fmtflags boolalpha = _S_boolalpha;


    static const fmtflags dec = _S_dec;


    static const fmtflags fixed = _S_fixed;


    static const fmtflags hex = _S_hex;




    static const fmtflags internal = _S_internal;



    static const fmtflags left = _S_left;


    static const fmtflags oct = _S_oct;



    static const fmtflags right = _S_right;


    static const fmtflags scientific = _S_scientific;



    static const fmtflags showbase = _S_showbase;



    static const fmtflags showpoint = _S_showpoint;


    static const fmtflags showpos = _S_showpos;


    static const fmtflags skipws = _S_skipws;


    static const fmtflags unitbuf = _S_unitbuf;



    static const fmtflags uppercase = _S_uppercase;


    static const fmtflags adjustfield = _S_adjustfield;


    static const fmtflags basefield = _S_basefield;


    static const fmtflags floatfield = _S_floatfield;
# 398 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/ios_base.h" 3
    typedef _Ios_Iostate iostate;



    static const iostate badbit = _S_badbit;


    static const iostate eofbit = _S_eofbit;




    static const iostate failbit = _S_failbit;


    static const iostate goodbit = _S_goodbit;
# 429 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/ios_base.h" 3
    typedef _Ios_Openmode openmode;


    static const openmode app = _S_app;


    static const openmode ate = _S_ate;




    static const openmode binary = _S_bin;


    static const openmode in = _S_in;


    static const openmode out = _S_out;


    static const openmode trunc = _S_trunc;
# 461 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/ios_base.h" 3
    typedef _Ios_Seekdir seekdir;


    static const seekdir beg = _S_beg;


    static const seekdir cur = _S_cur;


    static const seekdir end = _S_end;



    typedef int io_state;
    typedef int open_mode;
    typedef int seek_dir;

    typedef std::streampos streampos;
    typedef std::streamoff streamoff;
# 489 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/ios_base.h" 3
    enum event
    {
      erase_event,
      imbue_event,
      copyfmt_event
    };
# 506 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/ios_base.h" 3
    typedef void (*event_callback) (event __e, ios_base& __b, int __i);
# 518 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/ios_base.h" 3
    void
    register_callback(event_callback __fn, int __index);

  protected:
    streamsize _M_precision;
    streamsize _M_width;
    fmtflags _M_flags;
    iostate _M_exception;
    iostate _M_streambuf_state;



    struct _Callback_list
    {

      _Callback_list* _M_next;
      ios_base::event_callback _M_fn;
      int _M_index;
      _Atomic_word _M_refcount;

      _Callback_list(ios_base::event_callback __fn, int __index,
       _Callback_list* __cb)
      : _M_next(__cb), _M_fn(__fn), _M_index(__index), _M_refcount(0) { }

      void
      _M_add_reference() { __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1); }


      int
      _M_remove_reference()
      {

                                                             ;
        int __res = __gnu_cxx::__exchange_and_add_dispatch(&_M_refcount, -1);
        if (__res == 0)
          {
                                                                ;
          }
        return __res;
      }
    };

     _Callback_list* _M_callbacks;

    void
    _M_call_callbacks(event __ev) throw();

    void
    _M_dispose_callbacks(void) throw();


    struct _Words
    {
      void* _M_pword;
      long _M_iword;
      _Words() : _M_pword(0), _M_iword(0) { }
    };


    _Words _M_word_zero;



    enum { _S_local_word_size = 8 };
    _Words _M_local_word[_S_local_word_size];


    int _M_word_size;
    _Words* _M_word;

    _Words&
    _M_grow_words(int __index, bool __iword);


    locale _M_ios_locale;

    void
    _M_init() throw();

  public:





    class Init
    {
      friend class ios_base;
    public:
      Init();
      ~Init();

    private:
      static _Atomic_word _S_refcount;
      static bool _S_synced_with_stdio;
    };






    fmtflags
    flags() const
    { return _M_flags; }
# 631 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/ios_base.h" 3
    fmtflags
    flags(fmtflags __fmtfl)
    {
      fmtflags __old = _M_flags;
      _M_flags = __fmtfl;
      return __old;
    }
# 647 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/ios_base.h" 3
    fmtflags
    setf(fmtflags __fmtfl)
    {
      fmtflags __old = _M_flags;
      _M_flags |= __fmtfl;
      return __old;
    }
# 664 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/ios_base.h" 3
    fmtflags
    setf(fmtflags __fmtfl, fmtflags __mask)
    {
      fmtflags __old = _M_flags;
      _M_flags &= ~__mask;
      _M_flags |= (__fmtfl & __mask);
      return __old;
    }







    void
    unsetf(fmtflags __mask)
    { _M_flags &= ~__mask; }
# 690 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/ios_base.h" 3
    streamsize
    precision() const
    { return _M_precision; }






    streamsize
    precision(streamsize __prec)
    {
      streamsize __old = _M_precision;
      _M_precision = __prec;
      return __old;
    }







    streamsize
    width() const
    { return _M_width; }






    streamsize
    width(streamsize __wide)
    {
      streamsize __old = _M_width;
      _M_width = __wide;
      return __old;
    }
# 741 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/ios_base.h" 3
    static bool
    sync_with_stdio(bool __sync = true);
# 753 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/ios_base.h" 3
    locale
    imbue(const locale& __loc) throw();
# 764 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/ios_base.h" 3
    locale
    getloc() const
    { return _M_ios_locale; }
# 775 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/ios_base.h" 3
    const locale&
    _M_getloc() const
    { return _M_ios_locale; }
# 794 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/ios_base.h" 3
    static int
    xalloc() throw();
# 810 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/ios_base.h" 3
    long&
    iword(int __ix)
    {
      _Words& __word = (__ix < _M_word_size)
   ? _M_word[__ix] : _M_grow_words(__ix, true);
      return __word._M_iword;
    }
# 831 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/ios_base.h" 3
    void*&
    pword(int __ix)
    {
      _Words& __word = (__ix < _M_word_size)
   ? _M_word[__ix] : _M_grow_words(__ix, false);
      return __word._M_pword;
    }
# 848 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/ios_base.h" 3
    virtual ~ios_base();

  protected:
    ios_base() throw ();
# 862 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/ios_base.h" 3
  public:
    ios_base(const ios_base&) = delete;

    ios_base&
    operator=(const ios_base&) = delete;

  protected:
    void
    _M_move(ios_base&) noexcept;

    void
    _M_swap(ios_base& __rhs) noexcept;

  };



  inline ios_base&
  boolalpha(ios_base& __base)
  {
    __base.setf(ios_base::boolalpha);
    return __base;
  }


  inline ios_base&
  noboolalpha(ios_base& __base)
  {
    __base.unsetf(ios_base::boolalpha);
    return __base;
  }


  inline ios_base&
  showbase(ios_base& __base)
  {
    __base.setf(ios_base::showbase);
    return __base;
  }


  inline ios_base&
  noshowbase(ios_base& __base)
  {
    __base.unsetf(ios_base::showbase);
    return __base;
  }


  inline ios_base&
  showpoint(ios_base& __base)
  {
    __base.setf(ios_base::showpoint);
    return __base;
  }


  inline ios_base&
  noshowpoint(ios_base& __base)
  {
    __base.unsetf(ios_base::showpoint);
    return __base;
  }


  inline ios_base&
  showpos(ios_base& __base)
  {
    __base.setf(ios_base::showpos);
    return __base;
  }


  inline ios_base&
  noshowpos(ios_base& __base)
  {
    __base.unsetf(ios_base::showpos);
    return __base;
  }


  inline ios_base&
  skipws(ios_base& __base)
  {
    __base.setf(ios_base::skipws);
    return __base;
  }


  inline ios_base&
  noskipws(ios_base& __base)
  {
    __base.unsetf(ios_base::skipws);
    return __base;
  }


  inline ios_base&
  uppercase(ios_base& __base)
  {
    __base.setf(ios_base::uppercase);
    return __base;
  }


  inline ios_base&
  nouppercase(ios_base& __base)
  {
    __base.unsetf(ios_base::uppercase);
    return __base;
  }


  inline ios_base&
  unitbuf(ios_base& __base)
  {
     __base.setf(ios_base::unitbuf);
     return __base;
  }


  inline ios_base&
  nounitbuf(ios_base& __base)
  {
     __base.unsetf(ios_base::unitbuf);
     return __base;
  }



  inline ios_base&
  internal(ios_base& __base)
  {
     __base.setf(ios_base::internal, ios_base::adjustfield);
     return __base;
  }


  inline ios_base&
  left(ios_base& __base)
  {
    __base.setf(ios_base::left, ios_base::adjustfield);
    return __base;
  }


  inline ios_base&
  right(ios_base& __base)
  {
    __base.setf(ios_base::right, ios_base::adjustfield);
    return __base;
  }



  inline ios_base&
  dec(ios_base& __base)
  {
    __base.setf(ios_base::dec, ios_base::basefield);
    return __base;
  }


  inline ios_base&
  hex(ios_base& __base)
  {
    __base.setf(ios_base::hex, ios_base::basefield);
    return __base;
  }


  inline ios_base&
  oct(ios_base& __base)
  {
    __base.setf(ios_base::oct, ios_base::basefield);
    return __base;
  }



  inline ios_base&
  fixed(ios_base& __base)
  {
    __base.setf(ios_base::fixed, ios_base::floatfield);
    return __base;
  }


  inline ios_base&
  scientific(ios_base& __base)
  {
    __base.setf(ios_base::scientific, ios_base::floatfield);
    return __base;
  }






  inline ios_base&
  hexfloat(ios_base& __base)
  {
    __base.setf(ios_base::fixed | ios_base::scientific, ios_base::floatfield);
    return __base;
  }


  inline ios_base&
  defaultfloat(ios_base& __base)
  {
    __base.unsetf(ios_base::floatfield);
    return __base;
  }



}
# 43 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\ios" 2 3
# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\streambuf" 1 3
# 37 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\streambuf" 3








namespace std
{




  template<typename _CharT, typename _Traits>
    streamsize
    __copy_streambufs_eof(basic_streambuf<_CharT, _Traits>*,
     basic_streambuf<_CharT, _Traits>*, bool&);
# 121 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\streambuf" 3
  template<typename _CharT, typename _Traits>
    class basic_streambuf
    {
    public:






      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;




      typedef basic_streambuf<char_type, traits_type> __streambuf_type;


      friend class basic_ios<char_type, traits_type>;
      friend class basic_istream<char_type, traits_type>;
      friend class basic_ostream<char_type, traits_type>;
      friend class istreambuf_iterator<char_type, traits_type>;
      friend class ostreambuf_iterator<char_type, traits_type>;

      friend streamsize
      __copy_streambufs_eof<>(basic_streambuf*, basic_streambuf*, bool&);

      template<bool _IsMove, typename _CharT2>
        friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
            _CharT2*>::__type
        __copy_move_a2(istreambuf_iterator<_CharT2>,
         istreambuf_iterator<_CharT2>, _CharT2*);

      template<typename _CharT2>
        friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
      istreambuf_iterator<_CharT2> >::__type
        find(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      const _CharT2&);

      template<typename _CharT2, typename _Distance>
        friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
            void>::__type
        advance(istreambuf_iterator<_CharT2>&, _Distance);

      template<typename _CharT2, typename _Traits2>
        friend basic_istream<_CharT2, _Traits2>&
        operator>>(basic_istream<_CharT2, _Traits2>&, _CharT2*);

      template<typename _CharT2, typename _Traits2, typename _Alloc>
        friend basic_istream<_CharT2, _Traits2>&
        operator>>(basic_istream<_CharT2, _Traits2>&,
     basic_string<_CharT2, _Traits2, _Alloc>&);

      template<typename _CharT2, typename _Traits2, typename _Alloc>
        friend basic_istream<_CharT2, _Traits2>&
        getline(basic_istream<_CharT2, _Traits2>&,
  basic_string<_CharT2, _Traits2, _Alloc>&, _CharT2);

    protected:







      char_type* _M_in_beg;
      char_type* _M_in_cur;
      char_type* _M_in_end;
      char_type* _M_out_beg;
      char_type* _M_out_cur;
      char_type* _M_out_end;


      locale _M_buf_locale;

  public:

      virtual
      ~basic_streambuf()
      { }
# 215 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\streambuf" 3
      locale
      pubimbue(const locale& __loc)
      {
 locale __tmp(this->getloc());
 this->imbue(__loc);
 _M_buf_locale = __loc;
 return __tmp;
      }
# 232 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\streambuf" 3
      locale
      getloc() const
      { return _M_buf_locale; }
# 245 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\streambuf" 3
      basic_streambuf*
      pubsetbuf(char_type* __s, streamsize __n)
      { return this->setbuf(__s, __n); }
# 257 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\streambuf" 3
      pos_type
      pubseekoff(off_type __off, ios_base::seekdir __way,
   ios_base::openmode __mode = ios_base::in | ios_base::out)
      { return this->seekoff(__off, __way, __mode); }
# 269 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\streambuf" 3
      pos_type
      pubseekpos(pos_type __sp,
   ios_base::openmode __mode = ios_base::in | ios_base::out)
      { return this->seekpos(__sp, __mode); }




      int
      pubsync() { return this->sync(); }
# 290 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\streambuf" 3
      streamsize
      in_avail()
      {
 const streamsize __ret = this->egptr() - this->gptr();
 return __ret ? __ret : this->showmanyc();
      }
# 304 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\streambuf" 3
      int_type
      snextc()
      {
 int_type __ret = traits_type::eof();
 if (__builtin_expect(!traits_type::eq_int_type(this->sbumpc(),
             __ret), true))
   __ret = this->sgetc();
 return __ret;
      }
# 322 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\streambuf" 3
      int_type
      sbumpc()
      {
 int_type __ret;
 if (__builtin_expect(this->gptr() < this->egptr(), true))
   {
     __ret = traits_type::to_int_type(*this->gptr());
     this->gbump(1);
   }
 else
   __ret = this->uflow();
 return __ret;
      }
# 344 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\streambuf" 3
      int_type
      sgetc()
      {
 int_type __ret;
 if (__builtin_expect(this->gptr() < this->egptr(), true))
   __ret = traits_type::to_int_type(*this->gptr());
 else
   __ret = this->underflow();
 return __ret;
      }
# 363 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\streambuf" 3
      streamsize
      sgetn(char_type* __s, streamsize __n)
      { return this->xsgetn(__s, __n); }
# 378 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\streambuf" 3
      int_type
      sputbackc(char_type __c)
      {
 int_type __ret;
 const bool __testpos = this->eback() < this->gptr();
 if (__builtin_expect(!__testpos ||
        !traits_type::eq(__c, this->gptr()[-1]), false))
   __ret = this->pbackfail(traits_type::to_int_type(__c));
 else
   {
     this->gbump(-1);
     __ret = traits_type::to_int_type(*this->gptr());
   }
 return __ret;
      }
# 403 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\streambuf" 3
      int_type
      sungetc()
      {
 int_type __ret;
 if (__builtin_expect(this->eback() < this->gptr(), true))
   {
     this->gbump(-1);
     __ret = traits_type::to_int_type(*this->gptr());
   }
 else
   __ret = this->pbackfail();
 return __ret;
      }
# 430 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\streambuf" 3
      int_type
      sputc(char_type __c)
      {
 int_type __ret;
 if (__builtin_expect(this->pptr() < this->epptr(), true))
   {
     *this->pptr() = __c;
     this->pbump(1);
     __ret = traits_type::to_int_type(__c);
   }
 else
   __ret = this->overflow(traits_type::to_int_type(__c));
 return __ret;
      }
# 456 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\streambuf" 3
      streamsize
      sputn(const char_type* __s, streamsize __n)
      { return this->xsputn(__s, __n); }

    protected:
# 470 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\streambuf" 3
      basic_streambuf()
      : _M_in_beg(0), _M_in_cur(0), _M_in_end(0),
      _M_out_beg(0), _M_out_cur(0), _M_out_end(0),
      _M_buf_locale(locale())
      { }
# 488 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\streambuf" 3
      char_type*
      eback() const { return _M_in_beg; }

      char_type*
      gptr() const { return _M_in_cur; }

      char_type*
      egptr() const { return _M_in_end; }
# 504 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\streambuf" 3
      void
      gbump(int __n) { _M_in_cur += __n; }
# 515 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\streambuf" 3
      void
      setg(char_type* __gbeg, char_type* __gnext, char_type* __gend)
      {
 _M_in_beg = __gbeg;
 _M_in_cur = __gnext;
 _M_in_end = __gend;
      }
# 535 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\streambuf" 3
      char_type*
      pbase() const { return _M_out_beg; }

      char_type*
      pptr() const { return _M_out_cur; }

      char_type*
      epptr() const { return _M_out_end; }
# 551 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\streambuf" 3
      void
      pbump(int __n) { _M_out_cur += __n; }
# 561 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\streambuf" 3
      void
      setp(char_type* __pbeg, char_type* __pend)
      {
 _M_out_beg = _M_out_cur = __pbeg;
 _M_out_end = __pend;
      }
# 582 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\streambuf" 3
      virtual void
      imbue(const locale& __loc __attribute__ ((__unused__)))
      { }
# 597 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\streambuf" 3
      virtual basic_streambuf<char_type,_Traits>*
      setbuf(char_type*, streamsize)
      { return this; }
# 608 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\streambuf" 3
      virtual pos_type
      seekoff(off_type, ios_base::seekdir,
       ios_base::openmode = ios_base::in | ios_base::out)
      { return pos_type(off_type(-1)); }
# 620 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\streambuf" 3
      virtual pos_type
      seekpos(pos_type,
       ios_base::openmode = ios_base::in | ios_base::out)
      { return pos_type(off_type(-1)); }
# 633 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\streambuf" 3
      virtual int
      sync() { return 0; }
# 655 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\streambuf" 3
      virtual streamsize
      showmanyc() { return 0; }
# 671 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\streambuf" 3
      virtual streamsize
      xsgetn(char_type* __s, streamsize __n);
# 693 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\streambuf" 3
      virtual int_type
      underflow()
      { return traits_type::eof(); }
# 706 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\streambuf" 3
      virtual int_type
      uflow()
      {
 int_type __ret = traits_type::eof();
 const bool __testeof = traits_type::eq_int_type(this->underflow(),
       __ret);
 if (!__testeof)
   {
     __ret = traits_type::to_int_type(*this->gptr());
     this->gbump(1);
   }
 return __ret;
      }
# 730 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\streambuf" 3
      virtual int_type
      pbackfail(int_type __c __attribute__ ((__unused__)) = traits_type::eof())
      { return traits_type::eof(); }
# 748 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\streambuf" 3
      virtual streamsize
      xsputn(const char_type* __s, streamsize __n);
# 774 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\streambuf" 3
      virtual int_type
      overflow(int_type __c __attribute__ ((__unused__)) = traits_type::eof())
      { return traits_type::eof(); }



    public:
# 790 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\streambuf" 3
      [[__deprecated__("stossc is deprecated, use sbumpc instead")]]

      void
      stossc()
      {
 if (this->gptr() < this->egptr())
   this->gbump(1);
 else
   this->uflow();
      }



      void
      __safe_gbump(streamsize __n) { _M_in_cur += __n; }

      void
      __safe_pbump(streamsize __n) { _M_out_cur += __n; }




    protected:

      basic_streambuf(const basic_streambuf&);

      basic_streambuf&
      operator=(const basic_streambuf&);


      void
      swap(basic_streambuf& __sb)
      {
 std::swap(_M_in_beg, __sb._M_in_beg);
 std::swap(_M_in_cur, __sb._M_in_cur);
 std::swap(_M_in_end, __sb._M_in_end);
 std::swap(_M_out_beg, __sb._M_out_beg);
 std::swap(_M_out_cur, __sb._M_out_cur);
 std::swap(_M_out_end, __sb._M_out_end);
 std::swap(_M_buf_locale, __sb._M_buf_locale);
      }

    };


  template<typename _CharT, typename _Traits>
    std::basic_streambuf<_CharT, _Traits>::
    basic_streambuf(const basic_streambuf&) = default;

  template<typename _CharT, typename _Traits>
    std::basic_streambuf<_CharT, _Traits>&
    std::basic_streambuf<_CharT, _Traits>::
    operator=(const basic_streambuf&) = default;



  template<>
    streamsize
    __copy_streambufs_eof(basic_streambuf<char>* __sbin,
     basic_streambuf<char>* __sbout, bool& __ineof);

  template<>
    streamsize
    __copy_streambufs_eof(basic_streambuf<wchar_t>* __sbin,
     basic_streambuf<wchar_t>* __sbout, bool& __ineof);





}


# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/streambuf.tcc" 1 3
# 38 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/streambuf.tcc" 3

namespace std
{


  template<typename _CharT, typename _Traits>
    streamsize
    basic_streambuf<_CharT, _Traits>::
    xsgetn(char_type* __s, streamsize __n)
    {
      streamsize __ret = 0;
      while (__ret < __n)
 {
   const streamsize __buf_len = this->egptr() - this->gptr();
   if (__buf_len)
     {
       const streamsize __remaining = __n - __ret;
       const streamsize __len = std::min(__buf_len, __remaining);
       traits_type::copy(__s, this->gptr(), __len);
       __ret += __len;
       __s += __len;
       this->__safe_gbump(__len);
     }

   if (__ret < __n)
     {
       const int_type __c = this->uflow();
       if (!traits_type::eq_int_type(__c, traits_type::eof()))
  {
    traits_type::assign(*__s++, traits_type::to_char_type(__c));
    ++__ret;
  }
       else
  break;
     }
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    streamsize
    basic_streambuf<_CharT, _Traits>::
    xsputn(const char_type* __s, streamsize __n)
    {
      streamsize __ret = 0;
      while (__ret < __n)
 {
   const streamsize __buf_len = this->epptr() - this->pptr();
   if (__buf_len)
     {
       const streamsize __remaining = __n - __ret;
       const streamsize __len = std::min(__buf_len, __remaining);
       traits_type::copy(this->pptr(), __s, __len);
       __ret += __len;
       __s += __len;
       this->__safe_pbump(__len);
     }

   if (__ret < __n)
     {
       int_type __c = this->overflow(traits_type::to_int_type(*__s));
       if (!traits_type::eq_int_type(__c, traits_type::eof()))
  {
    ++__ret;
    ++__s;
  }
       else
  break;
     }
 }
      return __ret;
    }




  template<typename _CharT, typename _Traits>
    streamsize
    __copy_streambufs_eof(basic_streambuf<_CharT, _Traits>* __sbin,
     basic_streambuf<_CharT, _Traits>* __sbout,
     bool& __ineof)
    {
      streamsize __ret = 0;
      __ineof = true;
      typename _Traits::int_type __c = __sbin->sgetc();
      while (!_Traits::eq_int_type(__c, _Traits::eof()))
 {
   __c = __sbout->sputc(_Traits::to_char_type(__c));
   if (_Traits::eq_int_type(__c, _Traits::eof()))
     {
       __ineof = false;
       break;
     }
   ++__ret;
   __c = __sbin->snextc();
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    inline streamsize
    __copy_streambufs(basic_streambuf<_CharT, _Traits>* __sbin,
        basic_streambuf<_CharT, _Traits>* __sbout)
    {
      bool __ineof;
      return __copy_streambufs_eof(__sbin, __sbout, __ineof);
    }




  extern template class basic_streambuf<char>;
  extern template
    streamsize
    __copy_streambufs(basic_streambuf<char>*,
        basic_streambuf<char>*);
  extern template
    streamsize
    __copy_streambufs_eof(basic_streambuf<char>*,
     basic_streambuf<char>*, bool&);


  extern template class basic_streambuf<wchar_t>;
  extern template
    streamsize
    __copy_streambufs(basic_streambuf<wchar_t>*,
        basic_streambuf<wchar_t>*);
  extern template
    streamsize
    __copy_streambufs_eof(basic_streambuf<wchar_t>*,
     basic_streambuf<wchar_t>*, bool&);




}
# 863 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\streambuf" 2 3
# 44 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\ios" 2 3
# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_ios.h" 1 3
# 34 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_ios.h" 3



# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.h" 1 3
# 38 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.h" 3

# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\cwctype" 1 3
# 40 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\cwctype" 3
# 50 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\cwctype" 3
# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\wctype.h" 1 3
# 15 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\wctype.h" 3
#pragma pack(push,_CRT_PACKING)


extern "C" {
# 174 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\wctype.h" 3
  typedef wchar_t wctrans_t;
  wint_t __attribute__((__cdecl__)) towctrans(wint_t,wctrans_t);
  wctrans_t __attribute__((__cdecl__)) wctrans(const char *);
  wctype_t __attribute__((__cdecl__)) wctype(const char *);


}


#pragma pack(pop)
# 51 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\cwctype" 2 3
# 80 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\cwctype" 3
namespace std
{
  using ::wctrans_t;
  using ::wctype_t;
  using ::wint_t;

  using ::iswalnum;
  using ::iswalpha;

  using ::iswblank;

  using ::iswcntrl;
  using ::iswctype;
  using ::iswdigit;
  using ::iswgraph;
  using ::iswlower;
  using ::iswprint;
  using ::iswpunct;
  using ::iswspace;
  using ::iswupper;
  using ::iswxdigit;
  using ::towctrans;
  using ::towlower;
  using ::towupper;
  using ::wctrans;
  using ::wctype;
}
# 40 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.h" 2 3
# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\cctype" 1 3
# 40 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\cctype" 3
# 41 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.h" 2 3
# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\x86_64-w64-mingw32\\bits/ctype_base.h" 1 3
# 37 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\x86_64-w64-mingw32\\bits/ctype_base.h" 3
namespace std
{



  struct ctype_base
  {

    typedef const int* __to_type;



    typedef unsigned short mask;
    static const mask upper = 1 << 0;
    static const mask lower = 1 << 1;
    static const mask alpha = 1 << 2;
    static const mask digit = 1 << 3;
    static const mask xdigit = 1 << 4;
    static const mask space = 1 << 5;
    static const mask print = 1 << 6;
    static const mask graph = (1 << 2) | (1 << 3) | (1 << 9);
    static const mask cntrl = 1 << 8;
    static const mask punct = 1 << 9;
    static const mask alnum = (1 << 2) | (1 << 3);

    static const mask blank = 1 << 10;

  };


}
# 42 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.h" 2 3






# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/streambuf_iterator.h" 1 3
# 34 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/streambuf_iterator.h" 3




namespace std
{
# 49 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/streambuf_iterator.h" 3
  template<typename _CharT, typename _Traits>
    class istreambuf_iterator
    : public iterator<input_iterator_tag, _CharT, typename _Traits::off_type,
        _CharT*,


        _CharT>



    {
    public:



      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename _Traits::int_type int_type;
      typedef basic_streambuf<_CharT, _Traits> streambuf_type;
      typedef basic_istream<_CharT, _Traits> istream_type;


      template<typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
        ostreambuf_iterator<_CharT2> >::__type
 copy(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      ostreambuf_iterator<_CharT2>);

      template<bool _IsMove, typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
            _CharT2*>::__type
 __copy_move_a2(istreambuf_iterator<_CharT2>,
         istreambuf_iterator<_CharT2>, _CharT2*);

      template<typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
        istreambuf_iterator<_CharT2> >::__type
 find(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      const _CharT2&);

      template<typename _CharT2, typename _Distance>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
            void>::__type
 advance(istreambuf_iterator<_CharT2>&, _Distance);

    private:







      mutable streambuf_type* _M_sbuf;
      int_type _M_c;

    public:

      constexpr istreambuf_iterator() noexcept
      : _M_sbuf(0), _M_c(traits_type::eof()) { }


      istreambuf_iterator(const istreambuf_iterator&) noexcept = default;

      ~istreambuf_iterator() = default;



      istreambuf_iterator(istream_type& __s) noexcept
      : _M_sbuf(__s.rdbuf()), _M_c(traits_type::eof()) { }


      istreambuf_iterator(streambuf_type* __s) noexcept
      : _M_sbuf(__s), _M_c(traits_type::eof()) { }




      char_type
      operator*() const
      {
 int_type __c = _M_get();
# 139 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/streambuf_iterator.h" 3
 return traits_type::to_char_type(__c);
      }


      istreambuf_iterator&
      operator++()
      {



                        ;

 _M_sbuf->sbumpc();
 _M_c = traits_type::eof();
 return *this;
      }


      istreambuf_iterator
      operator++(int)
      {



                        ;

 istreambuf_iterator __old = *this;
 __old._M_c = _M_sbuf->sbumpc();
 _M_c = traits_type::eof();
 return __old;
      }





      bool
      equal(const istreambuf_iterator& __b) const
      { return _M_at_eof() == __b._M_at_eof(); }

    private:
      int_type
      _M_get() const
      {
 int_type __ret = _M_c;
 if (_M_sbuf && _S_is_eof(__ret) && _S_is_eof(__ret = _M_sbuf->sgetc()))
   _M_sbuf = 0;
 return __ret;
      }

      bool
      _M_at_eof() const
      { return _S_is_eof(_M_get()); }

      static bool
      _S_is_eof(int_type __c)
      {
 const int_type __eof = traits_type::eof();
 return traits_type::eq_int_type(__c, __eof);
      }
    };

  template<typename _CharT, typename _Traits>
    inline bool
    operator==(const istreambuf_iterator<_CharT, _Traits>& __a,
        const istreambuf_iterator<_CharT, _Traits>& __b)
    { return __a.equal(__b); }

  template<typename _CharT, typename _Traits>
    inline bool
    operator!=(const istreambuf_iterator<_CharT, _Traits>& __a,
        const istreambuf_iterator<_CharT, _Traits>& __b)
    { return !__a.equal(__b); }


  template<typename _CharT, typename _Traits>
    class ostreambuf_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    public:



      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef basic_streambuf<_CharT, _Traits> streambuf_type;
      typedef basic_ostream<_CharT, _Traits> ostream_type;


      template<typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
        ostreambuf_iterator<_CharT2> >::__type
 copy(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      ostreambuf_iterator<_CharT2>);

    private:
      streambuf_type* _M_sbuf;
      bool _M_failed;

    public:

      ostreambuf_iterator(ostream_type& __s) noexcept
      : _M_sbuf(__s.rdbuf()), _M_failed(!_M_sbuf) { }


      ostreambuf_iterator(streambuf_type* __s) noexcept
      : _M_sbuf(__s), _M_failed(!_M_sbuf) { }


      ostreambuf_iterator&
      operator=(_CharT __c)
      {
 if (!_M_failed &&
     _Traits::eq_int_type(_M_sbuf->sputc(__c), _Traits::eof()))
   _M_failed = true;
 return *this;
      }


      ostreambuf_iterator&
      operator*()
      { return *this; }


      ostreambuf_iterator&
      operator++(int)
      { return *this; }


      ostreambuf_iterator&
      operator++()
      { return *this; }


      bool
      failed() const noexcept
      { return _M_failed; }

      ostreambuf_iterator&
      _M_put(const _CharT* __ws, streamsize __len)
      {
 if (__builtin_expect(!_M_failed, true)
     && __builtin_expect(this->_M_sbuf->sputn(__ws, __len) != __len,
    false))
   _M_failed = true;
 return *this;
      }
    };


  template<typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
        ostreambuf_iterator<_CharT> >::__type
    copy(istreambuf_iterator<_CharT> __first,
  istreambuf_iterator<_CharT> __last,
  ostreambuf_iterator<_CharT> __result)
    {
      if (__first._M_sbuf && !__last._M_sbuf && !__result._M_failed)
 {
   bool __ineof;
   __copy_streambufs_eof(__first._M_sbuf, __result._M_sbuf, __ineof);
   if (!__ineof)
     __result._M_failed = true;
 }
      return __result;
    }

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
        ostreambuf_iterator<_CharT> >::__type
    __copy_move_a2(_CharT* __first, _CharT* __last,
     ostreambuf_iterator<_CharT> __result)
    {
      const streamsize __num = __last - __first;
      if (__num > 0)
 __result._M_put(__first, __num);
      return __result;
    }

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
        ostreambuf_iterator<_CharT> >::__type
    __copy_move_a2(const _CharT* __first, const _CharT* __last,
     ostreambuf_iterator<_CharT> __result)
    {
      const streamsize __num = __last - __first;
      if (__num > 0)
 __result._M_put(__first, __num);
      return __result;
    }

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
        _CharT*>::__type
    __copy_move_a2(istreambuf_iterator<_CharT> __first,
     istreambuf_iterator<_CharT> __last, _CharT* __result)
    {
      typedef istreambuf_iterator<_CharT> __is_iterator_type;
      typedef typename __is_iterator_type::traits_type traits_type;
      typedef typename __is_iterator_type::streambuf_type streambuf_type;
      typedef typename traits_type::int_type int_type;

      if (__first._M_sbuf && !__last._M_sbuf)
 {
   streambuf_type* __sb = __first._M_sbuf;
   int_type __c = __sb->sgetc();
   while (!traits_type::eq_int_type(__c, traits_type::eof()))
     {
       const streamsize __n = __sb->egptr() - __sb->gptr();
       if (__n > 1)
  {
    traits_type::copy(__result, __sb->gptr(), __n);
    __sb->__safe_gbump(__n);
    __result += __n;
    __c = __sb->underflow();
  }
       else
  {
    *__result++ = traits_type::to_char_type(__c);
    __c = __sb->snextc();
  }
     }
 }
      return __result;
    }

  template<typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
          istreambuf_iterator<_CharT> >::__type
    find(istreambuf_iterator<_CharT> __first,
  istreambuf_iterator<_CharT> __last, const _CharT& __val)
    {
      typedef istreambuf_iterator<_CharT> __is_iterator_type;
      typedef typename __is_iterator_type::traits_type traits_type;
      typedef typename __is_iterator_type::streambuf_type streambuf_type;
      typedef typename traits_type::int_type int_type;
      const int_type __eof = traits_type::eof();

      if (__first._M_sbuf && !__last._M_sbuf)
 {
   const int_type __ival = traits_type::to_int_type(__val);
   streambuf_type* __sb = __first._M_sbuf;
   int_type __c = __sb->sgetc();
   while (!traits_type::eq_int_type(__c, __eof)
   && !traits_type::eq_int_type(__c, __ival))
     {
       streamsize __n = __sb->egptr() - __sb->gptr();
       if (__n > 1)
  {
    const _CharT* __p = traits_type::find(__sb->gptr(),
       __n, __val);
    if (__p)
      __n = __p - __sb->gptr();
    __sb->__safe_gbump(__n);
    __c = __sb->sgetc();
  }
       else
  __c = __sb->snextc();
     }

   __first._M_c = __eof;
 }

      return __first;
    }

  template<typename _CharT, typename _Distance>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
        void>::__type
    advance(istreambuf_iterator<_CharT>& __i, _Distance __n)
    {
      if (__n == 0)
 return;

                               ;


                           ;

      typedef istreambuf_iterator<_CharT> __is_iterator_type;
      typedef typename __is_iterator_type::traits_type traits_type;
      typedef typename __is_iterator_type::streambuf_type streambuf_type;
      typedef typename traits_type::int_type int_type;
      const int_type __eof = traits_type::eof();

      streambuf_type* __sb = __i._M_sbuf;
      while (__n > 0)
 {
   streamsize __size = __sb->egptr() - __sb->gptr();
   if (__size > __n)
     {
       __sb->__safe_gbump(__n);
       break;
     }

   __sb->__safe_gbump(__size);
   __n -= __size;
   if (traits_type::eq_int_type(__sb->underflow(), __eof))
     {


                      ;
       break;
     }
 }

      __i._M_c = __eof;
    }




}
# 49 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.h" 2 3

namespace std
{
# 71 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.h" 3
  template<typename _Tp>
    void
    __convert_to_v(const char*, _Tp&, ios_base::iostate&,
     const __c_locale&) throw();


  template<>
    void
    __convert_to_v(const char*, float&, ios_base::iostate&,
     const __c_locale&) throw();

  template<>
    void
    __convert_to_v(const char*, double&, ios_base::iostate&,
     const __c_locale&) throw();

  template<>
    void
    __convert_to_v(const char*, long double&, ios_base::iostate&,
     const __c_locale&) throw();



  template<typename _CharT, typename _Traits>
    struct __pad
    {
      static void
      _S_pad(ios_base& __io, _CharT __fill, _CharT* __news,
      const _CharT* __olds, streamsize __newlen, streamsize __oldlen);
    };






  template<typename _CharT>
    _CharT*
    __add_grouping(_CharT* __s, _CharT __sep,
     const char* __gbeg, size_t __gsize,
     const _CharT* __first, const _CharT* __last);




  template<typename _CharT>
    inline
    ostreambuf_iterator<_CharT>
    __write(ostreambuf_iterator<_CharT> __s, const _CharT* __ws, int __len)
    {
      __s._M_put(__ws, __len);
      return __s;
    }


  template<typename _CharT, typename _OutIter>
    inline
    _OutIter
    __write(_OutIter __s, const _CharT* __ws, int __len)
    {
      for (int __j = 0; __j < __len; __j++, ++__s)
 *__s = __ws[__j];
      return __s;
    }
# 149 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.h" 3
  template<typename _CharT>
    class __ctype_abstract_base : public locale::facet, public ctype_base
    {
    public:


      typedef _CharT char_type;
# 168 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.h" 3
      bool
      is(mask __m, char_type __c) const
      { return this->do_is(__m, __c); }
# 185 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.h" 3
      const char_type*
      is(const char_type *__lo, const char_type *__hi, mask *__vec) const
      { return this->do_is(__lo, __hi, __vec); }
# 201 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.h" 3
      const char_type*
      scan_is(mask __m, const char_type* __lo, const char_type* __hi) const
      { return this->do_scan_is(__m, __lo, __hi); }
# 217 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.h" 3
      const char_type*
      scan_not(mask __m, const char_type* __lo, const char_type* __hi) const
      { return this->do_scan_not(__m, __lo, __hi); }
# 231 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.h" 3
      char_type
      toupper(char_type __c) const
      { return this->do_toupper(__c); }
# 246 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.h" 3
      const char_type*
      toupper(char_type *__lo, const char_type* __hi) const
      { return this->do_toupper(__lo, __hi); }
# 260 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.h" 3
      char_type
      tolower(char_type __c) const
      { return this->do_tolower(__c); }
# 275 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.h" 3
      const char_type*
      tolower(char_type* __lo, const char_type* __hi) const
      { return this->do_tolower(__lo, __hi); }
# 292 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.h" 3
      char_type
      widen(char __c) const
      { return this->do_widen(__c); }
# 311 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.h" 3
      const char*
      widen(const char* __lo, const char* __hi, char_type* __to) const
      { return this->do_widen(__lo, __hi, __to); }
# 330 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.h" 3
      char
      narrow(char_type __c, char __dfault) const
      { return this->do_narrow(__c, __dfault); }
# 352 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.h" 3
      const char_type*
      narrow(const char_type* __lo, const char_type* __hi,
       char __dfault, char* __to) const
      { return this->do_narrow(__lo, __hi, __dfault, __to); }

    protected:
      explicit
      __ctype_abstract_base(size_t __refs = 0): facet(__refs) { }

      virtual
      ~__ctype_abstract_base() { }
# 377 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.h" 3
      virtual bool
      do_is(mask __m, char_type __c) const = 0;
# 396 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.h" 3
      virtual const char_type*
      do_is(const char_type* __lo, const char_type* __hi,
     mask* __vec) const = 0;
# 415 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.h" 3
      virtual const char_type*
      do_scan_is(mask __m, const char_type* __lo,
   const char_type* __hi) const = 0;
# 434 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.h" 3
      virtual const char_type*
      do_scan_not(mask __m, const char_type* __lo,
    const char_type* __hi) const = 0;
# 452 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.h" 3
      virtual char_type
      do_toupper(char_type __c) const = 0;
# 469 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.h" 3
      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const = 0;
# 485 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.h" 3
      virtual char_type
      do_tolower(char_type __c) const = 0;
# 502 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.h" 3
      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const = 0;
# 521 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.h" 3
      virtual char_type
      do_widen(char __c) const = 0;
# 542 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.h" 3
      virtual const char*
      do_widen(const char* __lo, const char* __hi, char_type* __to) const = 0;
# 563 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.h" 3
      virtual char
      do_narrow(char_type __c, char __dfault) const = 0;
# 588 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.h" 3
      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char __dfault, char* __to) const = 0;
    };
# 611 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.h" 3
  template<typename _CharT>
    class ctype : public __ctype_abstract_base<_CharT>
    {
    public:

      typedef _CharT char_type;
      typedef typename __ctype_abstract_base<_CharT>::mask mask;


      static locale::id id;

      explicit
      ctype(size_t __refs = 0) : __ctype_abstract_base<_CharT>(__refs) { }

   protected:
      virtual
      ~ctype();

      virtual bool
      do_is(mask __m, char_type __c) const;

      virtual const char_type*
      do_is(const char_type* __lo, const char_type* __hi, mask* __vec) const;

      virtual const char_type*
      do_scan_is(mask __m, const char_type* __lo, const char_type* __hi) const;

      virtual const char_type*
      do_scan_not(mask __m, const char_type* __lo,
    const char_type* __hi) const;

      virtual char_type
      do_toupper(char_type __c) const;

      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const;

      virtual char_type
      do_tolower(char_type __c) const;

      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const;

      virtual char_type
      do_widen(char __c) const;

      virtual const char*
      do_widen(const char* __lo, const char* __hi, char_type* __dest) const;

      virtual char
      do_narrow(char_type, char __dfault) const;

      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char __dfault, char* __to) const;
    };

  template<typename _CharT>
    locale::id ctype<_CharT>::id;
# 680 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.h" 3
  template<>
    class ctype<char> : public locale::facet, public ctype_base
    {
    public:


      typedef char char_type;

    protected:

      __c_locale _M_c_locale_ctype;
      bool _M_del;
      __to_type _M_toupper;
      __to_type _M_tolower;
      const mask* _M_table;
      mutable char _M_widen_ok;
      mutable char _M_widen[1 + static_cast<unsigned char>(-1)];
      mutable char _M_narrow[1 + static_cast<unsigned char>(-1)];
      mutable char _M_narrow_ok;


    public:

      static locale::id id;

      static const size_t table_size = 1 + static_cast<unsigned char>(-1);
# 717 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.h" 3
      explicit
      ctype(const mask* __table = 0, bool __del = false, size_t __refs = 0);
# 730 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.h" 3
      explicit
      ctype(__c_locale __cloc, const mask* __table = 0, bool __del = false,
     size_t __refs = 0);
# 743 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.h" 3
      inline bool
      is(mask __m, char __c) const;
# 758 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.h" 3
      inline const char*
      is(const char* __lo, const char* __hi, mask* __vec) const;
# 772 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.h" 3
      inline const char*
      scan_is(mask __m, const char* __lo, const char* __hi) const;
# 786 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.h" 3
      inline const char*
      scan_not(mask __m, const char* __lo, const char* __hi) const;
# 801 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.h" 3
      char_type
      toupper(char_type __c) const
      { return this->do_toupper(__c); }
# 818 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.h" 3
      const char_type*
      toupper(char_type *__lo, const char_type* __hi) const
      { return this->do_toupper(__lo, __hi); }
# 834 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.h" 3
      char_type
      tolower(char_type __c) const
      { return this->do_tolower(__c); }
# 851 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.h" 3
      const char_type*
      tolower(char_type* __lo, const char_type* __hi) const
      { return this->do_tolower(__lo, __hi); }
# 871 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.h" 3
      char_type
      widen(char __c) const
      {
 if (_M_widen_ok)
   return _M_widen[static_cast<unsigned char>(__c)];
 this->_M_widen_init();
 return this->do_widen(__c);
      }
# 898 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.h" 3
      const char*
      widen(const char* __lo, const char* __hi, char_type* __to) const
      {
 if (_M_widen_ok == 1)
   {
     if (__builtin_expect(__hi != __lo, true))
       __builtin_memcpy(__to, __lo, __hi - __lo);
     return __hi;
   }
 if (!_M_widen_ok)
   _M_widen_init();
 return this->do_widen(__lo, __hi, __to);
      }
# 930 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.h" 3
      char
      narrow(char_type __c, char __dfault) const
      {
 if (_M_narrow[static_cast<unsigned char>(__c)])
   return _M_narrow[static_cast<unsigned char>(__c)];
 const char __t = do_narrow(__c, __dfault);
 if (__t != __dfault)
   _M_narrow[static_cast<unsigned char>(__c)] = __t;
 return __t;
      }
# 963 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.h" 3
      const char_type*
      narrow(const char_type* __lo, const char_type* __hi,
      char __dfault, char* __to) const
      {
 if (__builtin_expect(_M_narrow_ok == 1, true))
   {
     if (__builtin_expect(__hi != __lo, true))
       __builtin_memcpy(__to, __lo, __hi - __lo);
     return __hi;
   }
 if (!_M_narrow_ok)
   _M_narrow_init();
 return this->do_narrow(__lo, __hi, __dfault, __to);
      }





      const mask*
      table() const throw()
      { return _M_table; }


      static const mask*
      classic_table() throw();
    protected:







      virtual
      ~ctype();
# 1013 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.h" 3
      virtual char_type
      do_toupper(char_type __c) const;
# 1030 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.h" 3
      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const;
# 1046 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.h" 3
      virtual char_type
      do_tolower(char_type __c) const;
# 1063 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.h" 3
      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const;
# 1083 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.h" 3
      virtual char_type
      do_widen(char __c) const
      { return __c; }
# 1106 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.h" 3
      virtual const char*
      do_widen(const char* __lo, const char* __hi, char_type* __to) const
      {
 if (__builtin_expect(__hi != __lo, true))
   __builtin_memcpy(__to, __lo, __hi - __lo);
 return __hi;
      }
# 1133 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.h" 3
      virtual char
      do_narrow(char_type __c, char __dfault __attribute__((__unused__))) const
      { return __c; }
# 1159 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.h" 3
      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char __dfault __attribute__((__unused__)), char* __to) const
      {
 if (__builtin_expect(__hi != __lo, true))
   __builtin_memcpy(__to, __lo, __hi - __lo);
 return __hi;
      }

    private:
      void _M_narrow_init() const;
      void _M_widen_init() const;
    };
# 1185 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.h" 3
  template<>
    class ctype<wchar_t> : public __ctype_abstract_base<wchar_t>
    {
    public:


      typedef wchar_t char_type;
      typedef wctype_t __wmask_type;

    protected:
      __c_locale _M_c_locale_ctype;


      bool _M_narrow_ok;
      char _M_narrow[128];
      wint_t _M_widen[1 + static_cast<unsigned char>(-1)];


      mask _M_bit[16];
      __wmask_type _M_wmask[16];

    public:


      static locale::id id;
# 1218 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.h" 3
      explicit
      ctype(size_t __refs = 0);
# 1229 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.h" 3
      explicit
      ctype(__c_locale __cloc, size_t __refs = 0);

    protected:
      __wmask_type
      _M_convert_to_wmask(const mask __m) const throw();


      virtual
      ~ctype();
# 1253 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.h" 3
      virtual bool
      do_is(mask __m, char_type __c) const;
# 1272 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.h" 3
      virtual const char_type*
      do_is(const char_type* __lo, const char_type* __hi, mask* __vec) const;
# 1290 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.h" 3
      virtual const char_type*
      do_scan_is(mask __m, const char_type* __lo, const char_type* __hi) const;
# 1308 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.h" 3
      virtual const char_type*
      do_scan_not(mask __m, const char_type* __lo,
    const char_type* __hi) const;
# 1325 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.h" 3
      virtual char_type
      do_toupper(char_type __c) const;
# 1342 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.h" 3
      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const;
# 1358 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.h" 3
      virtual char_type
      do_tolower(char_type __c) const;
# 1375 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.h" 3
      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const;
# 1395 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.h" 3
      virtual char_type
      do_widen(char __c) const;
# 1417 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.h" 3
      virtual const char*
      do_widen(const char* __lo, const char* __hi, char_type* __to) const;
# 1440 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.h" 3
      virtual char
      do_narrow(char_type __c, char __dfault) const;
# 1466 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.h" 3
      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char __dfault, char* __to) const;


      void
      _M_initialize_ctype() throw();
    };



  template<typename _CharT>
    class ctype_byname : public ctype<_CharT>
    {
    public:
      typedef typename ctype<_CharT>::mask mask;

      explicit
      ctype_byname(const char* __s, size_t __refs = 0);


      explicit
      ctype_byname(const string& __s, size_t __refs = 0)
      : ctype_byname(__s.c_str(), __refs) { }


    protected:
      virtual
      ~ctype_byname() { }
    };


  template<>
    class ctype_byname<char> : public ctype<char>
    {
    public:
      explicit
      ctype_byname(const char* __s, size_t __refs = 0);


      explicit
      ctype_byname(const string& __s, size_t __refs = 0);


    protected:
      virtual
      ~ctype_byname();
    };


  template<>
    class ctype_byname<wchar_t> : public ctype<wchar_t>
    {
    public:
      explicit
      ctype_byname(const char* __s, size_t __refs = 0);


      explicit
      ctype_byname(const string& __s, size_t __refs = 0);


    protected:
      virtual
      ~ctype_byname();
    };



}



# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\x86_64-w64-mingw32\\bits/ctype_inline.h" 1 3
# 37 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\x86_64-w64-mingw32\\bits/ctype_inline.h" 3
namespace std
{


  bool
  ctype<char>::
  is(mask __m, char __c) const
  { return (_M_table[static_cast<unsigned char>(__c) ] & __m); }


  const char*
  ctype<char>::
  is(const char* __low, const char* __high, mask* __vec) const
  {
    while (__low < __high)
      *__vec++ = _M_table[static_cast<unsigned char>(*__low++)];
    return __high;
  }

  const char*
  ctype<char>::
  scan_is(mask __m, const char* __low, const char* __high) const
  {
    while (__low < __high && !this->is(__m, *__low))
      ++__low;
    return __low;
  }

  const char*
  ctype<char>::
  scan_not(mask __m, const char* __low, const char* __high) const
  {
    while (__low < __high && this->is(__m, *__low) != 0)
      ++__low;
    return __low;
  }


}
# 1539 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.h" 2 3

namespace std
{



  class __num_base
  {
  public:


    enum
      {
 _S_ominus,
 _S_oplus,
 _S_ox,
 _S_oX,
 _S_odigits,
 _S_odigits_end = _S_odigits + 16,
 _S_oudigits = _S_odigits_end,
 _S_oudigits_end = _S_oudigits + 16,
 _S_oe = _S_odigits + 14,
 _S_oE = _S_oudigits + 14,
 _S_oend = _S_oudigits_end
      };






    static const char* _S_atoms_out;



    static const char* _S_atoms_in;

    enum
    {
      _S_iminus,
      _S_iplus,
      _S_ix,
      _S_iX,
      _S_izero,
      _S_ie = _S_izero + 14,
      _S_iE = _S_izero + 20,
      _S_iend = 26
    };



    static void
    _S_format_float(const ios_base& __io, char* __fptr, char __mod) throw();
  };

  template<typename _CharT>
    struct __numpunct_cache : public locale::facet
    {
      const char* _M_grouping;
      size_t _M_grouping_size;
      bool _M_use_grouping;
      const _CharT* _M_truename;
      size_t _M_truename_size;
      const _CharT* _M_falsename;
      size_t _M_falsename_size;
      _CharT _M_decimal_point;
      _CharT _M_thousands_sep;





      _CharT _M_atoms_out[__num_base::_S_oend];





      _CharT _M_atoms_in[__num_base::_S_iend];

      bool _M_allocated;

      __numpunct_cache(size_t __refs = 0)
      : facet(__refs), _M_grouping(0), _M_grouping_size(0),
 _M_use_grouping(false),
 _M_truename(0), _M_truename_size(0), _M_falsename(0),
 _M_falsename_size(0), _M_decimal_point(_CharT()),
 _M_thousands_sep(_CharT()), _M_allocated(false)
 { }

      ~__numpunct_cache();

      void
      _M_cache(const locale& __loc);

    private:
      __numpunct_cache&
      operator=(const __numpunct_cache&);

      explicit
      __numpunct_cache(const __numpunct_cache&);
    };

  template<typename _CharT>
    __numpunct_cache<_CharT>::~__numpunct_cache()
    {
      if (_M_allocated)
 {
   delete [] _M_grouping;
   delete [] _M_truename;
   delete [] _M_falsename;
 }
    }

namespace __cxx11 {
# 1669 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.h" 3
  template<typename _CharT>
    class numpunct : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;

      typedef __numpunct_cache<_CharT> __cache_type;

    protected:
      __cache_type* _M_data;

    public:

      static locale::id id;






      explicit
      numpunct(size_t __refs = 0)
      : facet(__refs), _M_data(0)
      { _M_initialize_numpunct(); }
# 1707 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.h" 3
      explicit
      numpunct(__cache_type* __cache, size_t __refs = 0)
      : facet(__refs), _M_data(__cache)
      { _M_initialize_numpunct(); }
# 1721 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.h" 3
      explicit
      numpunct(__c_locale __cloc, size_t __refs = 0)
      : facet(__refs), _M_data(0)
      { _M_initialize_numpunct(__cloc); }
# 1735 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.h" 3
      char_type
      decimal_point() const
      { return this->do_decimal_point(); }
# 1748 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.h" 3
      char_type
      thousands_sep() const
      { return this->do_thousands_sep(); }
# 1779 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.h" 3
      string
      grouping() const
      { return this->do_grouping(); }
# 1792 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.h" 3
      string_type
      truename() const
      { return this->do_truename(); }
# 1805 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.h" 3
      string_type
      falsename() const
      { return this->do_falsename(); }

    protected:

      virtual
      ~numpunct();
# 1822 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.h" 3
      virtual char_type
      do_decimal_point() const
      { return _M_data->_M_decimal_point; }
# 1834 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.h" 3
      virtual char_type
      do_thousands_sep() const
      { return _M_data->_M_thousands_sep; }
# 1847 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.h" 3
      virtual string
      do_grouping() const
      { return _M_data->_M_grouping; }
# 1860 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.h" 3
      virtual string_type
      do_truename() const
      { return _M_data->_M_truename; }
# 1873 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.h" 3
      virtual string_type
      do_falsename() const
      { return _M_data->_M_falsename; }


      void
      _M_initialize_numpunct(__c_locale __cloc = 0);
    };

  template<typename _CharT>
    locale::id numpunct<_CharT>::id;

  template<>
    numpunct<char>::~numpunct();

  template<>
    void
    numpunct<char>::_M_initialize_numpunct(__c_locale __cloc);


  template<>
    numpunct<wchar_t>::~numpunct();

  template<>
    void
    numpunct<wchar_t>::_M_initialize_numpunct(__c_locale __cloc);



  template<typename _CharT>
    class numpunct_byname : public numpunct<_CharT>
    {
    public:
      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;

      explicit
      numpunct_byname(const char* __s, size_t __refs = 0)
      : numpunct<_CharT>(__refs)
      {
 if (__builtin_strcmp(__s, "C") != 0
     && __builtin_strcmp(__s, "POSIX") != 0)
   {
     __c_locale __tmp;
     this->_S_create_c_locale(__tmp, __s);
     this->_M_initialize_numpunct(__tmp);
     this->_S_destroy_c_locale(__tmp);
   }
      }


      explicit
      numpunct_byname(const string& __s, size_t __refs = 0)
      : numpunct_byname(__s.c_str(), __refs) { }


    protected:
      virtual
      ~numpunct_byname() { }
    };

}
# 1951 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.h" 3
  template<typename _CharT, typename _InIter>
    class num_get : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef _InIter iter_type;



      static locale::id id;
# 1972 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.h" 3
      explicit
      num_get(size_t __refs = 0) : facet(__refs) { }
# 1998 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, bool& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }
# 2035 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned short& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned int& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }


      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, long long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned long long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }
# 2095 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, float& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, double& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, long double& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }
# 2138 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, void*& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

    protected:

      virtual ~num_get() { }

      __attribute ((__abi_tag__ ("cxx11")))
      iter_type
      _M_extract_float(iter_type, iter_type, ios_base&, ios_base::iostate&,
         string&) const;

      template<typename _ValueT>
 __attribute ((__abi_tag__ ("cxx11")))
 iter_type
 _M_extract_int(iter_type, iter_type, ios_base&, ios_base::iostate&,
         _ValueT&) const;

      template<typename _CharT2>
      typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value, int>::__type
 _M_find(const _CharT2*, size_t __len, _CharT2 __c) const
 {
   int __ret = -1;
   if (__len <= 10)
     {
       if (__c >= _CharT2('0') && __c < _CharT2(_CharT2('0') + __len))
  __ret = __c - _CharT2('0');
     }
   else
     {
       if (__c >= _CharT2('0') && __c <= _CharT2('9'))
  __ret = __c - _CharT2('0');
       else if (__c >= _CharT2('a') && __c <= _CharT2('f'))
  __ret = 10 + (__c - _CharT2('a'));
       else if (__c >= _CharT2('A') && __c <= _CharT2('F'))
  __ret = 10 + (__c - _CharT2('A'));
     }
   return __ret;
 }

      template<typename _CharT2>
      typename __gnu_cxx::__enable_if<!__is_char<_CharT2>::__value,
          int>::__type
 _M_find(const _CharT2* __zero, size_t __len, _CharT2 __c) const
 {
   int __ret = -1;
   const char_type* __q = char_traits<_CharT2>::find(__zero, __len, __c);
   if (__q)
     {
       __ret = __q - __zero;
       if (__ret > 15)
  __ret -= 6;
     }
   return __ret;
 }
# 2211 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.h" 3
      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, bool&) const;

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned short& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned int& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }


      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, long long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned long long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }


      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, float&) const;

      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&,
      double&) const;







      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&,
      long double&) const;


      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, void*&) const;
# 2274 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.h" 3
    };

  template<typename _CharT, typename _InIter>
    locale::id num_get<_CharT, _InIter>::id;
# 2292 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.h" 3
  template<typename _CharT, typename _OutIter>
    class num_put : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef _OutIter iter_type;



      static locale::id id;
# 2313 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.h" 3
      explicit
      num_put(size_t __refs = 0) : facet(__refs) { }
# 2331 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill, bool __v) const
      { return this->do_put(__s, __io, __fill, __v); }
# 2373 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill, long __v) const
      { return this->do_put(__s, __io, __fill, __v); }

      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill,
   unsigned long __v) const
      { return this->do_put(__s, __io, __fill, __v); }


      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill, long long __v) const
      { return this->do_put(__s, __io, __fill, __v); }

      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill,
   unsigned long long __v) const
      { return this->do_put(__s, __io, __fill, __v); }
# 2436 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill, double __v) const
      { return this->do_put(__s, __io, __fill, __v); }

      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill,
   long double __v) const
      { return this->do_put(__s, __io, __fill, __v); }
# 2461 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill,
   const void* __v) const
      { return this->do_put(__s, __io, __fill, __v); }

    protected:
      template<typename _ValueT>
 iter_type
 _M_insert_float(iter_type, ios_base& __io, char_type __fill,
   char __mod, _ValueT __v) const;

      void
      _M_group_float(const char* __grouping, size_t __grouping_size,
       char_type __sep, const char_type* __p, char_type* __new,
       char_type* __cs, int& __len) const;

      template<typename _ValueT>
 iter_type
 _M_insert_int(iter_type, ios_base& __io, char_type __fill,
        _ValueT __v) const;

      void
      _M_group_int(const char* __grouping, size_t __grouping_size,
     char_type __sep, ios_base& __io, char_type* __new,
     char_type* __cs, int& __len) const;

      void
      _M_pad(char_type __fill, streamsize __w, ios_base& __io,
      char_type* __new, const char_type* __cs, int& __len) const;


      virtual
      ~num_put() { }
# 2509 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.h" 3
      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill, bool __v) const;

      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill, long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }

      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill,
      unsigned long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }


      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill,
      long long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }

      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill,
      unsigned long long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }


      virtual iter_type
      do_put(iter_type, ios_base&, char_type, double) const;






      virtual iter_type
      do_put(iter_type, ios_base&, char_type, long double) const;


      virtual iter_type
      do_put(iter_type, ios_base&, char_type, const void*) const;







    };

  template <typename _CharT, typename _OutIter>
    locale::id num_put<_CharT, _OutIter>::id;
# 2567 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.h" 3
  template<typename _CharT>
    inline bool
    isspace(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::space, __c); }


  template<typename _CharT>
    inline bool
    isprint(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::print, __c); }


  template<typename _CharT>
    inline bool
    iscntrl(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::cntrl, __c); }


  template<typename _CharT>
    inline bool
    isupper(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::upper, __c); }


  template<typename _CharT>
    inline bool
    islower(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::lower, __c); }


  template<typename _CharT>
    inline bool
    isalpha(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::alpha, __c); }


  template<typename _CharT>
    inline bool
    isdigit(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::digit, __c); }


  template<typename _CharT>
    inline bool
    ispunct(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::punct, __c); }


  template<typename _CharT>
    inline bool
    isxdigit(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::xdigit, __c); }


  template<typename _CharT>
    inline bool
    isalnum(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::alnum, __c); }


  template<typename _CharT>
    inline bool
    isgraph(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::graph, __c); }



  template<typename _CharT>
    inline bool
    isblank(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::blank, __c); }



  template<typename _CharT>
    inline _CharT
    toupper(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).toupper(__c); }


  template<typename _CharT>
    inline _CharT
    tolower(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).tolower(__c); }


}


# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.tcc" 1 3
# 34 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.tcc" 3

namespace std
{




  template<typename _Facet>
    struct __use_cache
    {
      const _Facet*
      operator() (const locale& __loc) const;
    };


  template<typename _CharT>
    struct __use_cache<__numpunct_cache<_CharT> >
    {
      const __numpunct_cache<_CharT>*
      operator() (const locale& __loc) const
      {
 const size_t __i = numpunct<_CharT>::id._M_id();
 const locale::facet** __caches = __loc._M_impl->_M_caches;
 if (!__caches[__i])
   {
     __numpunct_cache<_CharT>* __tmp = 0;
     if (true)
       {
  __tmp = new __numpunct_cache<_CharT>;
  __tmp->_M_cache(__loc);
       }
     if (false)
       {
  delete __tmp;
                         ;
       }
     __loc._M_impl->_M_install_cache(__tmp, __i);
   }
 return static_cast<const __numpunct_cache<_CharT>*>(__caches[__i]);
      }
    };

  template<typename _CharT>
    void
    __numpunct_cache<_CharT>::_M_cache(const locale& __loc)
    {
      const numpunct<_CharT>& __np = use_facet<numpunct<_CharT> >(__loc);

      char* __grouping = 0;
      _CharT* __truename = 0;
      _CharT* __falsename = 0;
      if (true)
 {
   const string& __g = __np.grouping();
   _M_grouping_size = __g.size();
   __grouping = new char[_M_grouping_size];
   __g.copy(__grouping, _M_grouping_size);
   _M_use_grouping = (_M_grouping_size
        && static_cast<signed char>(__grouping[0]) > 0
        && (__grouping[0]
     != __gnu_cxx::__numeric_traits<char>::__max));

   const basic_string<_CharT>& __tn = __np.truename();
   _M_truename_size = __tn.size();
   __truename = new _CharT[_M_truename_size];
   __tn.copy(__truename, _M_truename_size);

   const basic_string<_CharT>& __fn = __np.falsename();
   _M_falsename_size = __fn.size();
   __falsename = new _CharT[_M_falsename_size];
   __fn.copy(__falsename, _M_falsename_size);

   _M_decimal_point = __np.decimal_point();
   _M_thousands_sep = __np.thousands_sep();

   const ctype<_CharT>& __ct = use_facet<ctype<_CharT> >(__loc);
   __ct.widen(__num_base::_S_atoms_out,
       __num_base::_S_atoms_out
       + __num_base::_S_oend, _M_atoms_out);
   __ct.widen(__num_base::_S_atoms_in,
       __num_base::_S_atoms_in
       + __num_base::_S_iend, _M_atoms_in);

   _M_grouping = __grouping;
   _M_truename = __truename;
   _M_falsename = __falsename;
   _M_allocated = true;
 }
      if (false)
 {
   delete [] __grouping;
   delete [] __truename;
   delete [] __falsename;
                          ;
 }
    }
# 139 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.tcc" 3
  __attribute__ ((__pure__)) bool
  __verify_grouping(const char* __grouping, size_t __grouping_size,
      const string& __grouping_tmp) throw ();



  template<typename _CharT, typename _InIter>
    __attribute ((__abi_tag__ ("cxx11")))
    _InIter
    num_get<_CharT, _InIter>::
    _M_extract_float(_InIter __beg, _InIter __end, ios_base& __io,
       ios_base::iostate& __err, string& __xtrc) const
    {
      typedef char_traits<_CharT> __traits_type;
      typedef __numpunct_cache<_CharT> __cache_type;
      __use_cache<__cache_type> __uc;
      const locale& __loc = __io._M_getloc();
      const __cache_type* __lc = __uc(__loc);
      const _CharT* __lit = __lc->_M_atoms_in;
      char_type __c = char_type();


      bool __testeof = __beg == __end;


      if (!__testeof)
 {
   __c = *__beg;
   const bool __plus = __c == __lit[__num_base::_S_iplus];
   if ((__plus || __c == __lit[__num_base::_S_iminus])
       && !(__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
       && !(__c == __lc->_M_decimal_point))
     {
       __xtrc += __plus ? '+' : '-';
       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }
 }


      bool __found_mantissa = false;
      int __sep_pos = 0;
      while (!__testeof)
 {
   if ((__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
       || __c == __lc->_M_decimal_point)
     break;
   else if (__c == __lit[__num_base::_S_izero])
     {
       if (!__found_mantissa)
  {
    __xtrc += '0';
    __found_mantissa = true;
  }
       ++__sep_pos;

       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }
   else
     break;
 }


      bool __found_dec = false;
      bool __found_sci = false;
      string __found_grouping;
      if (__lc->_M_use_grouping)
 __found_grouping.reserve(32);
      const char_type* __lit_zero = __lit + __num_base::_S_izero;

      if (!__lc->_M_allocated)

 while (!__testeof)
   {
     const int __digit = _M_find(__lit_zero, 10, __c);
     if (__digit != -1)
       {
  __xtrc += '0' + __digit;
  __found_mantissa = true;
       }
     else if (__c == __lc->_M_decimal_point
       && !__found_dec && !__found_sci)
       {
  __xtrc += '.';
  __found_dec = true;
       }
     else if ((__c == __lit[__num_base::_S_ie]
        || __c == __lit[__num_base::_S_iE])
       && !__found_sci && __found_mantissa)
       {

  __xtrc += 'e';
  __found_sci = true;


  if (++__beg != __end)
    {
      __c = *__beg;
      const bool __plus = __c == __lit[__num_base::_S_iplus];
      if (__plus || __c == __lit[__num_base::_S_iminus])
        __xtrc += __plus ? '+' : '-';
      else
        continue;
    }
  else
    {
      __testeof = true;
      break;
    }
       }
     else
       break;

     if (++__beg != __end)
       __c = *__beg;
     else
       __testeof = true;
   }
      else
 while (!__testeof)
   {


     if (__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
       {
  if (!__found_dec && !__found_sci)
    {


      if (__sep_pos)
        {
   __found_grouping += static_cast<char>(__sep_pos);
   __sep_pos = 0;
        }
      else
        {


   __xtrc.clear();
   break;
        }
    }
  else
    break;
       }
     else if (__c == __lc->_M_decimal_point)
       {
  if (!__found_dec && !__found_sci)
    {



      if (__found_grouping.size())
        __found_grouping += static_cast<char>(__sep_pos);
      __xtrc += '.';
      __found_dec = true;
    }
  else
    break;
       }
     else
       {
  const char_type* __q =
    __traits_type::find(__lit_zero, 10, __c);
  if (__q)
    {
      __xtrc += '0' + (__q - __lit_zero);
      __found_mantissa = true;
      ++__sep_pos;
    }
  else if ((__c == __lit[__num_base::_S_ie]
     || __c == __lit[__num_base::_S_iE])
    && !__found_sci && __found_mantissa)
    {

      if (__found_grouping.size() && !__found_dec)
        __found_grouping += static_cast<char>(__sep_pos);
      __xtrc += 'e';
      __found_sci = true;


      if (++__beg != __end)
        {
   __c = *__beg;
   const bool __plus = __c == __lit[__num_base::_S_iplus];
   if ((__plus || __c == __lit[__num_base::_S_iminus])
       && !(__lc->_M_use_grouping
     && __c == __lc->_M_thousands_sep)
       && !(__c == __lc->_M_decimal_point))
        __xtrc += __plus ? '+' : '-';
   else
     continue;
        }
      else
        {
   __testeof = true;
   break;
        }
    }
  else
    break;
       }

     if (++__beg != __end)
       __c = *__beg;
     else
       __testeof = true;
   }



      if (__found_grouping.size())
        {

   if (!__found_dec && !__found_sci)
     __found_grouping += static_cast<char>(__sep_pos);

          if (!std::__verify_grouping(__lc->_M_grouping,
          __lc->_M_grouping_size,
          __found_grouping))
     __err = ios_base::failbit;
        }

      return __beg;
    }

  template<typename _CharT, typename _InIter>
    template<typename _ValueT>
      __attribute ((__abi_tag__ ("cxx11")))
      _InIter
      num_get<_CharT, _InIter>::
      _M_extract_int(_InIter __beg, _InIter __end, ios_base& __io,
       ios_base::iostate& __err, _ValueT& __v) const
      {
        typedef char_traits<_CharT> __traits_type;
 using __gnu_cxx::__add_unsigned;
 typedef typename __add_unsigned<_ValueT>::__type __unsigned_type;
 typedef __numpunct_cache<_CharT> __cache_type;
 __use_cache<__cache_type> __uc;
 const locale& __loc = __io._M_getloc();
 const __cache_type* __lc = __uc(__loc);
 const _CharT* __lit = __lc->_M_atoms_in;
 char_type __c = char_type();


 const ios_base::fmtflags __basefield = __io.flags()
                                        & ios_base::basefield;
 const bool __oct = __basefield == ios_base::oct;
 int __base = __oct ? 8 : (__basefield == ios_base::hex ? 16 : 10);


 bool __testeof = __beg == __end;


 bool __negative = false;
 if (!__testeof)
   {
     __c = *__beg;
     __negative = __c == __lit[__num_base::_S_iminus];
     if ((__negative || __c == __lit[__num_base::_S_iplus])
  && !(__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
  && !(__c == __lc->_M_decimal_point))
       {
  if (++__beg != __end)
    __c = *__beg;
  else
    __testeof = true;
       }
   }



 bool __found_zero = false;
 int __sep_pos = 0;
 while (!__testeof)
   {
     if ((__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
  || __c == __lc->_M_decimal_point)
       break;
     else if (__c == __lit[__num_base::_S_izero]
       && (!__found_zero || __base == 10))
       {
  __found_zero = true;
  ++__sep_pos;
  if (__basefield == 0)
    __base = 8;
  if (__base == 8)
    __sep_pos = 0;
       }
     else if (__found_zero
       && (__c == __lit[__num_base::_S_ix]
    || __c == __lit[__num_base::_S_iX]))
       {
  if (__basefield == 0)
    __base = 16;
  if (__base == 16)
    {
      __found_zero = false;
      __sep_pos = 0;
    }
  else
    break;
       }
     else
       break;

     if (++__beg != __end)
       {
  __c = *__beg;
  if (!__found_zero)
    break;
       }
     else
       __testeof = true;
   }



 const size_t __len = (__base == 16 ? __num_base::_S_iend
         - __num_base::_S_izero : __base);


 typedef __gnu_cxx::__numeric_traits<_ValueT> __num_traits;
 string __found_grouping;
 if (__lc->_M_use_grouping)
   __found_grouping.reserve(32);
 bool __testfail = false;
 bool __testoverflow = false;
 const __unsigned_type __max =
   (__negative && __num_traits::__is_signed)
   ? -static_cast<__unsigned_type>(__num_traits::__min)
   : __num_traits::__max;
 const __unsigned_type __smax = __max / __base;
 __unsigned_type __result = 0;
 int __digit = 0;
 const char_type* __lit_zero = __lit + __num_base::_S_izero;

 if (!__lc->_M_allocated)

   while (!__testeof)
     {
       __digit = _M_find(__lit_zero, __len, __c);
       if (__digit == -1)
  break;

       if (__result > __smax)
  __testoverflow = true;
       else
  {
    __result *= __base;
    __testoverflow |= __result > __max - __digit;
    __result += __digit;
    ++__sep_pos;
  }

       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }
 else
   while (!__testeof)
     {


       if (__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
  {


    if (__sep_pos)
      {
        __found_grouping += static_cast<char>(__sep_pos);
        __sep_pos = 0;
      }
    else
      {
        __testfail = true;
        break;
      }
  }
       else if (__c == __lc->_M_decimal_point)
  break;
       else
  {
    const char_type* __q =
      __traits_type::find(__lit_zero, __len, __c);
    if (!__q)
      break;

    __digit = __q - __lit_zero;
    if (__digit > 15)
      __digit -= 6;
    if (__result > __smax)
      __testoverflow = true;
    else
      {
        __result *= __base;
        __testoverflow |= __result > __max - __digit;
        __result += __digit;
        ++__sep_pos;
      }
  }

       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }



 if (__found_grouping.size())
   {

     __found_grouping += static_cast<char>(__sep_pos);

     if (!std::__verify_grouping(__lc->_M_grouping,
     __lc->_M_grouping_size,
     __found_grouping))
       __err = ios_base::failbit;
   }



 if ((!__sep_pos && !__found_zero && !__found_grouping.size())
     || __testfail)
   {
     __v = 0;
     __err = ios_base::failbit;
   }
 else if (__testoverflow)
   {
     if (__negative && __num_traits::__is_signed)
       __v = __num_traits::__min;
     else
       __v = __num_traits::__max;
     __err = ios_base::failbit;
   }
 else
   __v = __negative ? -__result : __result;

 if (__testeof)
   __err |= ios_base::eofbit;
 return __beg;
      }



  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, bool& __v) const
    {
      if (!(__io.flags() & ios_base::boolalpha))
        {



   long __l = -1;
          __beg = _M_extract_int(__beg, __end, __io, __err, __l);
   if (__l == 0 || __l == 1)
     __v = bool(__l);
   else
     {


       __v = true;
       __err = ios_base::failbit;
       if (__beg == __end)
  __err |= ios_base::eofbit;
     }
        }
      else
        {

   typedef __numpunct_cache<_CharT> __cache_type;
   __use_cache<__cache_type> __uc;
   const locale& __loc = __io._M_getloc();
   const __cache_type* __lc = __uc(__loc);

   bool __testf = true;
   bool __testt = true;
   bool __donef = __lc->_M_falsename_size == 0;
   bool __donet = __lc->_M_truename_size == 0;
   bool __testeof = false;
   size_t __n = 0;
   while (!__donef || !__donet)
     {
       if (__beg == __end)
  {
    __testeof = true;
    break;
  }

       const char_type __c = *__beg;

       if (!__donef)
  __testf = __c == __lc->_M_falsename[__n];

       if (!__testf && __donet)
  break;

       if (!__donet)
  __testt = __c == __lc->_M_truename[__n];

       if (!__testt && __donef)
  break;

       if (!__testt && !__testf)
  break;

       ++__n;
       ++__beg;

       __donef = !__testf || __n >= __lc->_M_falsename_size;
       __donet = !__testt || __n >= __lc->_M_truename_size;
     }
   if (__testf && __n == __lc->_M_falsename_size && __n)
     {
       __v = false;
       if (__testt && __n == __lc->_M_truename_size)
  __err = ios_base::failbit;
       else
  __err = __testeof ? ios_base::eofbit : ios_base::goodbit;
     }
   else if (__testt && __n == __lc->_M_truename_size && __n)
     {
       __v = true;
       __err = __testeof ? ios_base::eofbit : ios_base::goodbit;
     }
   else
     {


       __v = false;
       __err = ios_base::failbit;
       if (__testeof)
  __err |= ios_base::eofbit;
     }
 }
      return __beg;
    }

  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
    ios_base::iostate& __err, float& __v) const
    {
      string __xtrc;
      __xtrc.reserve(32);
      __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);
      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());
      if (__beg == __end)
 __err |= ios_base::eofbit;
      return __beg;
    }

  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, double& __v) const
    {
      string __xtrc;
      __xtrc.reserve(32);
      __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);
      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());
      if (__beg == __end)
 __err |= ios_base::eofbit;
      return __beg;
    }
# 735 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.tcc" 3
  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, long double& __v) const
    {
      string __xtrc;
      __xtrc.reserve(32);
      __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);
      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());
      if (__beg == __end)
 __err |= ios_base::eofbit;
      return __beg;
    }

  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, void*& __v) const
    {

      typedef ios_base::fmtflags fmtflags;
      const fmtflags __fmt = __io.flags();
      __io.flags((__fmt & ~ios_base::basefield) | ios_base::hex);

      typedef __gnu_cxx::__conditional_type<(sizeof(void*)
          <= sizeof(unsigned long)),
 unsigned long, unsigned long long>::__type _UIntPtrType;

      _UIntPtrType __ul;
      __beg = _M_extract_int(__beg, __end, __io, __err, __ul);


      __io.flags(__fmt);

      __v = reinterpret_cast<void*>(__ul);
      return __beg;
    }



  template<typename _CharT, typename _OutIter>
    void
    num_put<_CharT, _OutIter>::
    _M_pad(_CharT __fill, streamsize __w, ios_base& __io,
    _CharT* __new, const _CharT* __cs, int& __len) const
    {


      __pad<_CharT, char_traits<_CharT> >::_S_pad(__io, __fill, __new,
        __cs, __w, __len);
      __len = static_cast<int>(__w);
    }



  template<typename _CharT, typename _ValueT>
    int
    __int_to_char(_CharT* __bufend, _ValueT __v, const _CharT* __lit,
    ios_base::fmtflags __flags, bool __dec)
    {
      _CharT* __buf = __bufend;
      if (__builtin_expect(__dec, true))
 {

   do
     {
       *--__buf = __lit[(__v % 10) + __num_base::_S_odigits];
       __v /= 10;
     }
   while (__v != 0);
 }
      else if ((__flags & ios_base::basefield) == ios_base::oct)
 {

   do
     {
       *--__buf = __lit[(__v & 0x7) + __num_base::_S_odigits];
       __v >>= 3;
     }
   while (__v != 0);
 }
      else
 {

   const bool __uppercase = __flags & ios_base::uppercase;
   const int __case_offset = __uppercase ? __num_base::_S_oudigits
                                         : __num_base::_S_odigits;
   do
     {
       *--__buf = __lit[(__v & 0xf) + __case_offset];
       __v >>= 4;
     }
   while (__v != 0);
 }
      return __bufend - __buf;
    }



  template<typename _CharT, typename _OutIter>
    void
    num_put<_CharT, _OutIter>::
    _M_group_int(const char* __grouping, size_t __grouping_size, _CharT __sep,
   ios_base&, _CharT* __new, _CharT* __cs, int& __len) const
    {
      _CharT* __p = std::__add_grouping(__new, __sep, __grouping,
     __grouping_size, __cs, __cs + __len);
      __len = __p - __new;
    }

  template<typename _CharT, typename _OutIter>
    template<typename _ValueT>
      _OutIter
      num_put<_CharT, _OutIter>::
      _M_insert_int(_OutIter __s, ios_base& __io, _CharT __fill,
      _ValueT __v) const
      {
 using __gnu_cxx::__add_unsigned;
 typedef typename __add_unsigned<_ValueT>::__type __unsigned_type;
 typedef __numpunct_cache<_CharT> __cache_type;
 __use_cache<__cache_type> __uc;
 const locale& __loc = __io._M_getloc();
 const __cache_type* __lc = __uc(__loc);
 const _CharT* __lit = __lc->_M_atoms_out;
 const ios_base::fmtflags __flags = __io.flags();


 const int __ilen = 5 * sizeof(_ValueT);
 _CharT* __cs = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
            * __ilen));



 const ios_base::fmtflags __basefield = __flags & ios_base::basefield;
 const bool __dec = (__basefield != ios_base::oct
       && __basefield != ios_base::hex);
 const __unsigned_type __u = ((__v > 0 || !__dec)
         ? __unsigned_type(__v)
         : -__unsigned_type(__v));
  int __len = __int_to_char(__cs + __ilen, __u, __lit, __flags, __dec);
 __cs += __ilen - __len;


 if (__lc->_M_use_grouping)
   {


     _CharT* __cs2 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * (__len + 1)
          * 2));
     _M_group_int(__lc->_M_grouping, __lc->_M_grouping_size,
    __lc->_M_thousands_sep, __io, __cs2 + 2, __cs, __len);
     __cs = __cs2 + 2;
   }


 if (__builtin_expect(__dec, true))
   {

     if (__v >= 0)
       {
  if (bool(__flags & ios_base::showpos)
      && __gnu_cxx::__numeric_traits<_ValueT>::__is_signed)
    *--__cs = __lit[__num_base::_S_oplus], ++__len;
       }
     else
       *--__cs = __lit[__num_base::_S_ominus], ++__len;
   }
 else if (bool(__flags & ios_base::showbase) && __v)
   {
     if (__basefield == ios_base::oct)
       *--__cs = __lit[__num_base::_S_odigits], ++__len;
     else
       {

  const bool __uppercase = __flags & ios_base::uppercase;
  *--__cs = __lit[__num_base::_S_ox + __uppercase];

  *--__cs = __lit[__num_base::_S_odigits];
  __len += 2;
       }
   }


 const streamsize __w = __io.width();
 if (__w > static_cast<streamsize>(__len))
   {
     _CharT* __cs3 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * __w));
     _M_pad(__fill, __w, __io, __cs3, __cs, __len);
     __cs = __cs3;
   }
 __io.width(0);



 return std::__write(__s, __cs, __len);
      }

  template<typename _CharT, typename _OutIter>
    void
    num_put<_CharT, _OutIter>::
    _M_group_float(const char* __grouping, size_t __grouping_size,
     _CharT __sep, const _CharT* __p, _CharT* __new,
     _CharT* __cs, int& __len) const
    {



      const int __declen = __p ? __p - __cs : __len;
      _CharT* __p2 = std::__add_grouping(__new, __sep, __grouping,
      __grouping_size,
      __cs, __cs + __declen);


      int __newlen = __p2 - __new;
      if (__p)
 {
   char_traits<_CharT>::copy(__p2, __p, __len - __declen);
   __newlen += __len - __declen;
 }
      __len = __newlen;
    }
# 971 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.tcc" 3
  template<typename _CharT, typename _OutIter>
    template<typename _ValueT>
      _OutIter
      num_put<_CharT, _OutIter>::
      _M_insert_float(_OutIter __s, ios_base& __io, _CharT __fill, char __mod,
         _ValueT __v) const
      {
 typedef __numpunct_cache<_CharT> __cache_type;
 __use_cache<__cache_type> __uc;
 const locale& __loc = __io._M_getloc();
 const __cache_type* __lc = __uc(__loc);


 const streamsize __prec = __io.precision() < 0 ? 6 : __io.precision();

 const int __max_digits =
   __gnu_cxx::__numeric_traits<_ValueT>::__digits10;


 int __len;

 char __fbuf[16];
 __num_base::_S_format_float(__io, __fbuf, __mod);



 const bool __use_prec =
   (__io.flags() & ios_base::floatfield) != ios_base::floatfield;



 int __cs_size = __max_digits * 3;
 char* __cs = static_cast<char*>(__builtin_alloca(__cs_size));
 if (__use_prec)
   __len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size,
     __fbuf, __prec, __v);
 else
   __len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size,
     __fbuf, __v);


 if (__len >= __cs_size)
   {
     __cs_size = __len + 1;
     __cs = static_cast<char*>(__builtin_alloca(__cs_size));
     if (__use_prec)
       __len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size,
         __fbuf, __prec, __v);
     else
       __len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size,
         __fbuf, __v);
   }
# 1044 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.tcc" 3
 const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);

 _CharT* __ws = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
            * __len));
 __ctype.widen(__cs, __cs + __len, __ws);


 _CharT* __wp = 0;
 const char* __p = char_traits<char>::find(__cs, __len, '.');
 if (__p)
   {
     __wp = __ws + (__p - __cs);
     *__wp = __lc->_M_decimal_point;
   }




 if (__lc->_M_use_grouping
     && (__wp || __len < 3 || (__cs[1] <= '9' && __cs[2] <= '9'
          && __cs[1] >= '0' && __cs[2] >= '0')))
   {


     _CharT* __ws2 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * __len * 2));

     streamsize __off = 0;
     if (__cs[0] == '-' || __cs[0] == '+')
       {
  __off = 1;
  __ws2[0] = __ws[0];
  __len -= 1;
       }

     _M_group_float(__lc->_M_grouping, __lc->_M_grouping_size,
      __lc->_M_thousands_sep, __wp, __ws2 + __off,
      __ws + __off, __len);
     __len += __off;

     __ws = __ws2;
   }


 const streamsize __w = __io.width();
 if (__w > static_cast<streamsize>(__len))
   {
     _CharT* __ws3 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * __w));
     _M_pad(__fill, __w, __io, __ws3, __ws, __len);
     __ws = __ws3;
   }
 __io.width(0);



 return std::__write(__s, __ws, __len);
      }

  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill, bool __v) const
    {
      const ios_base::fmtflags __flags = __io.flags();
      if ((__flags & ios_base::boolalpha) == 0)
        {
          const long __l = __v;
          __s = _M_insert_int(__s, __io, __fill, __l);
        }
      else
        {
   typedef __numpunct_cache<_CharT> __cache_type;
   __use_cache<__cache_type> __uc;
   const locale& __loc = __io._M_getloc();
   const __cache_type* __lc = __uc(__loc);

   const _CharT* __name = __v ? __lc->_M_truename
                              : __lc->_M_falsename;
   int __len = __v ? __lc->_M_truename_size
                   : __lc->_M_falsename_size;

   const streamsize __w = __io.width();
   if (__w > static_cast<streamsize>(__len))
     {
       const streamsize __plen = __w - __len;
       _CharT* __ps
  = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
       * __plen));

       char_traits<_CharT>::assign(__ps, __plen, __fill);
       __io.width(0);

       if ((__flags & ios_base::adjustfield) == ios_base::left)
  {
    __s = std::__write(__s, __name, __len);
    __s = std::__write(__s, __ps, __plen);
  }
       else
  {
    __s = std::__write(__s, __ps, __plen);
    __s = std::__write(__s, __name, __len);
  }
       return __s;
     }
   __io.width(0);
   __s = std::__write(__s, __name, __len);
 }
      return __s;
    }

  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill, double __v) const
    { return _M_insert_float(__s, __io, __fill, char(), __v); }
# 1169 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.tcc" 3
  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill,
    long double __v) const
    { return _M_insert_float(__s, __io, __fill, 'L', __v); }

  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill,
           const void* __v) const
    {
      const ios_base::fmtflags __flags = __io.flags();
      const ios_base::fmtflags __fmt = ~(ios_base::basefield
      | ios_base::uppercase);
      __io.flags((__flags & __fmt) | (ios_base::hex | ios_base::showbase));

      typedef __gnu_cxx::__conditional_type<(sizeof(const void*)
          <= sizeof(unsigned long)),
 unsigned long, unsigned long long>::__type _UIntPtrType;

      __s = _M_insert_int(__s, __io, __fill,
     reinterpret_cast<_UIntPtrType>(__v));
      __io.flags(__flags);
      return __s;
    }
# 1206 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.tcc" 3
  template<typename _CharT, typename _Traits>
    void
    __pad<_CharT, _Traits>::_S_pad(ios_base& __io, _CharT __fill,
       _CharT* __news, const _CharT* __olds,
       streamsize __newlen, streamsize __oldlen)
    {
      const size_t __plen = static_cast<size_t>(__newlen - __oldlen);
      const ios_base::fmtflags __adjust = __io.flags() & ios_base::adjustfield;


      if (__adjust == ios_base::left)
 {
   _Traits::copy(__news, __olds, __oldlen);
   _Traits::assign(__news + __oldlen, __plen, __fill);
   return;
 }

      size_t __mod = 0;
      if (__adjust == ios_base::internal)
 {



          const locale& __loc = __io._M_getloc();
   const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);

   if (__ctype.widen('-') == __olds[0]
       || __ctype.widen('+') == __olds[0])
     {
       __news[0] = __olds[0];
       __mod = 1;
       ++__news;
     }
   else if (__ctype.widen('0') == __olds[0]
     && __oldlen > 1
     && (__ctype.widen('x') == __olds[1]
         || __ctype.widen('X') == __olds[1]))
     {
       __news[0] = __olds[0];
       __news[1] = __olds[1];
       __mod = 2;
       __news += 2;
     }

 }
      _Traits::assign(__news, __plen, __fill);
      _Traits::copy(__news + __plen, __olds + __mod, __oldlen - __mod);
    }

  template<typename _CharT>
    _CharT*
    __add_grouping(_CharT* __s, _CharT __sep,
     const char* __gbeg, size_t __gsize,
     const _CharT* __first, const _CharT* __last)
    {
      size_t __idx = 0;
      size_t __ctr = 0;

      while (__last - __first > __gbeg[__idx]
      && static_cast<signed char>(__gbeg[__idx]) > 0
      && __gbeg[__idx] != __gnu_cxx::__numeric_traits<char>::__max)
 {
   __last -= __gbeg[__idx];
   __idx < __gsize - 1 ? ++__idx : ++__ctr;
 }

      while (__first != __last)
 *__s++ = *__first++;

      while (__ctr--)
 {
   *__s++ = __sep;
   for (char __i = __gbeg[__idx]; __i > 0; --__i)
     *__s++ = *__first++;
 }

      while (__idx--)
 {
   *__s++ = __sep;
   for (char __i = __gbeg[__idx]; __i > 0; --__i)
     *__s++ = *__first++;
 }

      return __s;
    }




  extern template class __cxx11:: numpunct<char>;
  extern template class __cxx11:: numpunct_byname<char>;
  extern template class num_get<char>;
  extern template class num_put<char>;
  extern template class ctype_byname<char>;

  extern template
    const ctype<char>&
    use_facet<ctype<char> >(const locale&);

  extern template
    const numpunct<char>&
    use_facet<numpunct<char> >(const locale&);

  extern template
    const num_put<char>&
    use_facet<num_put<char> >(const locale&);

  extern template
    const num_get<char>&
    use_facet<num_get<char> >(const locale&);

  extern template
    bool
    has_facet<ctype<char> >(const locale&);

  extern template
    bool
    has_facet<numpunct<char> >(const locale&);

  extern template
    bool
    has_facet<num_put<char> >(const locale&);

  extern template
    bool
    has_facet<num_get<char> >(const locale&);


  extern template class __cxx11:: numpunct<wchar_t>;
  extern template class __cxx11:: numpunct_byname<wchar_t>;
  extern template class num_get<wchar_t>;
  extern template class num_put<wchar_t>;
  extern template class ctype_byname<wchar_t>;

  extern template
    const ctype<wchar_t>&
    use_facet<ctype<wchar_t> >(const locale&);

  extern template
    const numpunct<wchar_t>&
    use_facet<numpunct<wchar_t> >(const locale&);

  extern template
    const num_put<wchar_t>&
    use_facet<num_put<wchar_t> >(const locale&);

  extern template
    const num_get<wchar_t>&
    use_facet<num_get<wchar_t> >(const locale&);

 extern template
    bool
    has_facet<ctype<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<numpunct<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<num_put<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<num_get<wchar_t> >(const locale&);




}
# 2656 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/locale_facets.h" 2 3
# 38 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_ios.h" 2 3



namespace std
{


  template<typename _Facet>
    inline const _Facet&
    __check_facet(const _Facet* __f)
    {
      if (!__f)
 __throw_bad_cast();
      return *__f;
    }
# 66 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_ios.h" 3
  template<typename _CharT, typename _Traits>
    class basic_ios : public ios_base
    {
    public:






      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;






      typedef ctype<_CharT> __ctype_type;
      typedef num_put<_CharT, ostreambuf_iterator<_CharT, _Traits> >
           __num_put_type;
      typedef num_get<_CharT, istreambuf_iterator<_CharT, _Traits> >
           __num_get_type;



    protected:
      basic_ostream<_CharT, _Traits>* _M_tie;
      mutable char_type _M_fill;
      mutable bool _M_fill_init;
      basic_streambuf<_CharT, _Traits>* _M_streambuf;


      const __ctype_type* _M_ctype;

      const __num_put_type* _M_num_put;

      const __num_get_type* _M_num_get;

    public:
# 117 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_ios.h" 3
      explicit operator bool() const
      { return !this->fail(); }





      bool
      operator!() const
      { return this->fail(); }
# 136 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_ios.h" 3
      iostate
      rdstate() const
      { return _M_streambuf_state; }
# 147 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_ios.h" 3
      void
      clear(iostate __state = goodbit);







      void
      setstate(iostate __state)
      { this->clear(this->rdstate() | __state); }




      void
      _M_setstate(iostate __state)
      {


 _M_streambuf_state |= __state;
 if (this->exceptions() & __state)
                          ;
      }







      bool
      good() const
      { return this->rdstate() == 0; }







      bool
      eof() const
      { return (this->rdstate() & eofbit) != 0; }
# 200 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_ios.h" 3
      bool
      fail() const
      { return (this->rdstate() & (badbit | failbit)) != 0; }







      bool
      bad() const
      { return (this->rdstate() & badbit) != 0; }
# 221 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_ios.h" 3
      iostate
      exceptions() const
      { return _M_exception; }
# 256 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_ios.h" 3
      void
      exceptions(iostate __except)
      {
        _M_exception = __except;
        this->clear(_M_streambuf_state);
      }







      explicit
      basic_ios(basic_streambuf<_CharT, _Traits>* __sb)
      : ios_base(), _M_tie(0), _M_fill(), _M_fill_init(false), _M_streambuf(0),
 _M_ctype(0), _M_num_put(0), _M_num_get(0)
      { this->init(__sb); }







      virtual
      ~basic_ios() { }
# 294 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_ios.h" 3
      basic_ostream<_CharT, _Traits>*
      tie() const
      { return _M_tie; }
# 306 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_ios.h" 3
      basic_ostream<_CharT, _Traits>*
      tie(basic_ostream<_CharT, _Traits>* __tiestr)
      {
        basic_ostream<_CharT, _Traits>* __old = _M_tie;
        _M_tie = __tiestr;
        return __old;
      }







      basic_streambuf<_CharT, _Traits>*
      rdbuf() const
      { return _M_streambuf; }
# 346 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_ios.h" 3
      basic_streambuf<_CharT, _Traits>*
      rdbuf(basic_streambuf<_CharT, _Traits>* __sb);
# 360 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_ios.h" 3
      basic_ios&
      copyfmt(const basic_ios& __rhs);







      char_type
      fill() const
      {
 if (!_M_fill_init)
   {
     _M_fill = this->widen(' ');
     _M_fill_init = true;
   }
 return _M_fill;
      }
# 389 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_ios.h" 3
      char_type
      fill(char_type __ch)
      {
 char_type __old = this->fill();
 _M_fill = __ch;
 return __old;
      }
# 409 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_ios.h" 3
      locale
      imbue(const locale& __loc);
# 429 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_ios.h" 3
      char
      narrow(char_type __c, char __dfault) const
      { return __check_facet(_M_ctype).narrow(__c, __dfault); }
# 448 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_ios.h" 3
      char_type
      widen(char __c) const
      { return __check_facet(_M_ctype).widen(__c); }

    protected:







      basic_ios()
      : ios_base(), _M_tie(0), _M_fill(char_type()), _M_fill_init(false),
 _M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
      { }







      void
      init(basic_streambuf<_CharT, _Traits>* __sb);


      basic_ios(const basic_ios&) = delete;
      basic_ios& operator=(const basic_ios&) = delete;

      void
      move(basic_ios& __rhs)
      {
 ios_base::_M_move(__rhs);
 _M_cache_locale(_M_ios_locale);
 this->tie(__rhs.tie(nullptr));
 _M_fill = __rhs._M_fill;
 _M_fill_init = __rhs._M_fill_init;
 _M_streambuf = nullptr;
      }

      void
      move(basic_ios&& __rhs)
      { this->move(__rhs); }

      void
      swap(basic_ios& __rhs) noexcept
      {
 ios_base::_M_swap(__rhs);
 _M_cache_locale(_M_ios_locale);
 __rhs._M_cache_locale(__rhs._M_ios_locale);
 std::swap(_M_tie, __rhs._M_tie);
 std::swap(_M_fill, __rhs._M_fill);
 std::swap(_M_fill_init, __rhs._M_fill_init);
      }

      void
      set_rdbuf(basic_streambuf<_CharT, _Traits>* __sb)
      { _M_streambuf = __sb; }


      void
      _M_cache_locale(const locale& __loc);
    };


}


# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_ios.tcc" 1 3
# 34 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_ios.tcc" 3

namespace std
{


  template<typename _CharT, typename _Traits>
    void
    basic_ios<_CharT, _Traits>::clear(iostate __state)
    {
      if (this->rdbuf())
 _M_streambuf_state = __state;
      else
   _M_streambuf_state = __state | badbit;
      if (this->exceptions() & this->rdstate())
 __throw_ios_failure(("basic_ios::clear"));
    }

  template<typename _CharT, typename _Traits>
    basic_streambuf<_CharT, _Traits>*
    basic_ios<_CharT, _Traits>::rdbuf(basic_streambuf<_CharT, _Traits>* __sb)
    {
      basic_streambuf<_CharT, _Traits>* __old = _M_streambuf;
      _M_streambuf = __sb;
      this->clear();
      return __old;
    }

  template<typename _CharT, typename _Traits>
    basic_ios<_CharT, _Traits>&
    basic_ios<_CharT, _Traits>::copyfmt(const basic_ios& __rhs)
    {


      if (this != &__rhs)
 {




   _Words* __words = (__rhs._M_word_size <= _S_local_word_size) ?
                      _M_local_word : new _Words[__rhs._M_word_size];


   _Callback_list* __cb = __rhs._M_callbacks;
   if (__cb)
     __cb->_M_add_reference();
   _M_call_callbacks(erase_event);
   if (_M_word != _M_local_word)
     {
       delete [] _M_word;
       _M_word = 0;
     }
   _M_dispose_callbacks();


   _M_callbacks = __cb;
   for (int __i = 0; __i < __rhs._M_word_size; ++__i)
     __words[__i] = __rhs._M_word[__i];
   _M_word = __words;
   _M_word_size = __rhs._M_word_size;

   this->flags(__rhs.flags());
   this->width(__rhs.width());
   this->precision(__rhs.precision());
   this->tie(__rhs.tie());
   this->fill(__rhs.fill());
   _M_ios_locale = __rhs.getloc();
   _M_cache_locale(_M_ios_locale);

   _M_call_callbacks(copyfmt_event);


   this->exceptions(__rhs.exceptions());
 }
      return *this;
    }


  template<typename _CharT, typename _Traits>
    locale
    basic_ios<_CharT, _Traits>::imbue(const locale& __loc)
    {
      locale __old(this->getloc());
      ios_base::imbue(__loc);
      _M_cache_locale(__loc);
      if (this->rdbuf() != 0)
 this->rdbuf()->pubimbue(__loc);
      return __old;
    }

  template<typename _CharT, typename _Traits>
    void
    basic_ios<_CharT, _Traits>::init(basic_streambuf<_CharT, _Traits>* __sb)
    {

      ios_base::_M_init();


      _M_cache_locale(_M_ios_locale);
# 146 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_ios.tcc" 3
      _M_fill = _CharT();
      _M_fill_init = false;

      _M_tie = 0;
      _M_exception = goodbit;
      _M_streambuf = __sb;
      _M_streambuf_state = __sb ? goodbit : badbit;
    }

  template<typename _CharT, typename _Traits>
    void
    basic_ios<_CharT, _Traits>::_M_cache_locale(const locale& __loc)
    {
      if (__builtin_expect(has_facet<__ctype_type>(__loc), true))
 _M_ctype = std::__addressof(use_facet<__ctype_type>(__loc));
      else
 _M_ctype = 0;

      if (__builtin_expect(has_facet<__num_put_type>(__loc), true))
 _M_num_put = std::__addressof(use_facet<__num_put_type>(__loc));
      else
 _M_num_put = 0;

      if (__builtin_expect(has_facet<__num_get_type>(__loc), true))
 _M_num_get = std::__addressof(use_facet<__num_get_type>(__loc));
      else
 _M_num_get = 0;
    }




  extern template class basic_ios<char>;


  extern template class basic_ios<wchar_t>;




}
# 517 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/basic_ios.h" 2 3
# 45 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\ios" 2 3
# 39 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\ostream" 2 3


namespace std
{
# 57 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\ostream" 3
  template<typename _CharT, typename _Traits>
    class basic_ostream : virtual public basic_ios<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;


      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef basic_ios<_CharT, _Traits> __ios_type;
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef num_put<_CharT, ostreambuf_iterator<_CharT, _Traits> >
             __num_put_type;
      typedef ctype<_CharT> __ctype_type;
# 83 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\ostream" 3
      explicit
      basic_ostream(__streambuf_type* __sb)
      { this->init(__sb); }






      virtual
      ~basic_ostream() { }


      class sentry;
      friend class sentry;
# 107 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\ostream" 3
      __ostream_type&
      operator<<(__ostream_type& (*__pf)(__ostream_type&))
      {



 return __pf(*this);
      }

      __ostream_type&
      operator<<(__ios_type& (*__pf)(__ios_type&))
      {



 __pf(*this);
 return *this;
      }

      __ostream_type&
      operator<<(ios_base& (*__pf) (ios_base&))
      {



 __pf(*this);
 return *this;
      }
# 165 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\ostream" 3
      __ostream_type&
      operator<<(long __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(unsigned long __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(bool __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(short __n);

      __ostream_type&
      operator<<(unsigned short __n)
      {


 return _M_insert(static_cast<unsigned long>(__n));
      }

      __ostream_type&
      operator<<(int __n);

      __ostream_type&
      operator<<(unsigned int __n)
      {


 return _M_insert(static_cast<unsigned long>(__n));
      }


      __ostream_type&
      operator<<(long long __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(unsigned long long __n)
      { return _M_insert(__n); }
# 219 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\ostream" 3
      __ostream_type&
      operator<<(double __f)
      { return _M_insert(__f); }

      __ostream_type&
      operator<<(float __f)
      {


 return _M_insert(static_cast<double>(__f));
      }

      __ostream_type&
      operator<<(long double __f)
      { return _M_insert(__f); }
# 244 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\ostream" 3
      __ostream_type&
      operator<<(const void* __p)
      { return _M_insert(__p); }
# 269 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\ostream" 3
      __ostream_type&
      operator<<(__streambuf_type* __sb);
# 302 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\ostream" 3
      __ostream_type&
      put(char_type __c);






      void
      _M_write(const char_type* __s, streamsize __n)
      {
 const streamsize __put = this->rdbuf()->sputn(__s, __n);
 if (__put != __n)
   this->setstate(ios_base::badbit);
      }
# 334 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\ostream" 3
      __ostream_type&
      write(const char_type* __s, streamsize __n);
# 347 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\ostream" 3
      __ostream_type&
      flush();
# 357 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\ostream" 3
      pos_type
      tellp();
# 368 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\ostream" 3
      __ostream_type&
      seekp(pos_type);
# 380 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\ostream" 3
       __ostream_type&
      seekp(off_type, ios_base::seekdir);

    protected:
      basic_ostream()
      { this->init(0); }



      basic_ostream(basic_iostream<_CharT, _Traits>&) { }

      basic_ostream(const basic_ostream&) = delete;

      basic_ostream(basic_ostream&& __rhs)
      : __ios_type()
      { __ios_type::move(__rhs); }



      basic_ostream& operator=(const basic_ostream&) = delete;

      basic_ostream&
      operator=(basic_ostream&& __rhs)
      {
 swap(__rhs);
 return *this;
      }

      void
      swap(basic_ostream& __rhs)
      { __ios_type::swap(__rhs); }


      template<typename _ValueT>
 __ostream_type&
 _M_insert(_ValueT __v);
    };
# 425 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\ostream" 3
  template <typename _CharT, typename _Traits>
    class basic_ostream<_CharT, _Traits>::sentry
    {

      bool _M_ok;
      basic_ostream<_CharT, _Traits>& _M_os;

    public:
# 444 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\ostream" 3
      explicit
      sentry(basic_ostream<_CharT, _Traits>& __os);
# 454 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\ostream" 3
      ~sentry()
      {

 if (bool(_M_os.flags() & ios_base::unitbuf) && !uncaught_exception())
   {

     if (_M_os.rdbuf() && _M_os.rdbuf()->pubsync() == -1)
       _M_os.setstate(ios_base::badbit);
   }
      }
# 473 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\ostream" 3
      explicit

      operator bool() const
      { return _M_ok; }
    };
# 495 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\ostream" 3
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, _CharT __c)
    { return __ostream_insert(__out, &__c, 1); }

  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, char __c)
    { return (__out << __out.widen(__c)); }


  template <class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, char __c)
    { return __ostream_insert(__out, &__c, 1); }


  template<class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, signed char __c)
    { return (__out << static_cast<char>(__c)); }

  template<class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, unsigned char __c)
    { return (__out << static_cast<char>(__c)); }
# 537 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\ostream" 3
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, const _CharT* __s)
    {
      if (!__s)
 __out.setstate(ios_base::badbit);
      else
 __ostream_insert(__out, __s,
    static_cast<streamsize>(_Traits::length(__s)));
      return __out;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits> &
    operator<<(basic_ostream<_CharT, _Traits>& __out, const char* __s);


  template<class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
    {
      if (!__s)
 __out.setstate(ios_base::badbit);
      else
 __ostream_insert(__out, __s,
    static_cast<streamsize>(_Traits::length(__s)));
      return __out;
    }


  template<class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, const signed char* __s)
    { return (__out << reinterpret_cast<const char*>(__s)); }

  template<class _Traits>
    inline basic_ostream<char, _Traits> &
    operator<<(basic_ostream<char, _Traits>& __out, const unsigned char* __s)
    { return (__out << reinterpret_cast<const char*>(__s)); }
# 588 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\ostream" 3
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    endl(basic_ostream<_CharT, _Traits>& __os)
    { return flush(__os.put(__os.widen('\n'))); }
# 600 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\ostream" 3
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    ends(basic_ostream<_CharT, _Traits>& __os)
    { return __os.put(_CharT()); }






  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    flush(basic_ostream<_CharT, _Traits>& __os)
    { return __os.flush(); }


  template<typename _Ch, typename _Up>
    basic_ostream<_Ch, _Up>&
    __is_convertible_to_basic_ostream_test(basic_ostream<_Ch, _Up>*);

  template<typename _Tp, typename = void>
    struct __is_convertible_to_basic_ostream_impl
    {
      using __ostream_type = void;
    };

  template<typename _Tp>
    using __do_is_convertible_to_basic_ostream_impl =
    decltype(__is_convertible_to_basic_ostream_test
      (declval<typename remove_reference<_Tp>::type*>()));

  template<typename _Tp>
    struct __is_convertible_to_basic_ostream_impl
    <_Tp,
     __void_t<__do_is_convertible_to_basic_ostream_impl<_Tp>>>
    {
      using __ostream_type =
 __do_is_convertible_to_basic_ostream_impl<_Tp>;
    };

  template<typename _Tp>
    struct __is_convertible_to_basic_ostream
    : __is_convertible_to_basic_ostream_impl<_Tp>
    {
    public:
      using type = __not_<is_void<
        typename __is_convertible_to_basic_ostream_impl<_Tp>::__ostream_type>>;
      constexpr static bool value = type::value;
    };

  template<typename _Ostream, typename _Tp, typename = void>
    struct __is_insertable : false_type {};

  template<typename _Ostream, typename _Tp>
    struct __is_insertable<_Ostream, _Tp,
      __void_t<decltype(declval<_Ostream&>()
          << declval<const _Tp&>())>>
        : true_type {};

  template<typename _Ostream>
    using __rvalue_ostream_type =
      typename __is_convertible_to_basic_ostream<
 _Ostream>::__ostream_type;
# 674 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\ostream" 3
  template<typename _Ostream, typename _Tp>
    inline
    typename enable_if<__and_<__not_<is_lvalue_reference<_Ostream>>,
         __is_convertible_to_basic_ostream<_Ostream>,
         __is_insertable<
    __rvalue_ostream_type<_Ostream>,
    const _Tp&>>::value,
         __rvalue_ostream_type<_Ostream>>::type
    operator<<(_Ostream&& __os, const _Tp& __x)
    {
      __rvalue_ostream_type<_Ostream> __ret_os = __os;
      __ret_os << __x;
      return __ret_os;
    }



}


# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/ostream.tcc" 1 3
# 38 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/ostream.tcc" 3



namespace std
{


  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>::sentry::
    sentry(basic_ostream<_CharT, _Traits>& __os)
    : _M_ok(false), _M_os(__os)
    {

      if (__os.tie() && __os.good())
 __os.tie()->flush();

      if (__os.good())
 _M_ok = true;
      else
 __os.setstate(ios_base::failbit);
    }

  template<typename _CharT, typename _Traits>
    template<typename _ValueT>
      basic_ostream<_CharT, _Traits>&
      basic_ostream<_CharT, _Traits>::
      _M_insert(_ValueT __v)
      {
 sentry __cerb(*this);
 if (__cerb)
   {
     ios_base::iostate __err = ios_base::goodbit;
     if (true)
       {
  const __num_put_type& __np = __check_facet(this->_M_num_put);
  if (__np.put(*this, *this, this->fill(), __v).failed())
    __err |= ios_base::badbit;
       }
     if (false)
       {
  this->_M_setstate(ios_base::badbit);
                         ;
       }
     if (false)
       { this->_M_setstate(ios_base::badbit); }
     if (__err)
       this->setstate(__err);
   }
 return *this;
      }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    operator<<(short __n)
    {


      const ios_base::fmtflags __fmt = this->flags() & ios_base::basefield;
      if (__fmt == ios_base::oct || __fmt == ios_base::hex)
 return _M_insert(static_cast<long>(static_cast<unsigned short>(__n)));
      else
 return _M_insert(static_cast<long>(__n));
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    operator<<(int __n)
    {


      const ios_base::fmtflags __fmt = this->flags() & ios_base::basefield;
      if (__fmt == ios_base::oct || __fmt == ios_base::hex)
 return _M_insert(static_cast<long>(static_cast<unsigned int>(__n)));
      else
 return _M_insert(static_cast<long>(__n));
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    operator<<(__streambuf_type* __sbin)
    {
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this);
      if (__cerb && __sbin)
 {
   if (true)
     {
       if (!__copy_streambufs(__sbin, this->rdbuf()))
  __err |= ios_base::failbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::failbit); }
 }
      else if (!__sbin)
 __err |= ios_base::badbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    put(char_type __c)
    {






      sentry __cerb(*this);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       const int_type __put = this->rdbuf()->sputc(__c);
       if (traits_type::eq_int_type(__put, traits_type::eof()))
  __err |= ios_base::badbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    write(const _CharT* __s, streamsize __n)
    {







      sentry __cerb(*this);
      if (__cerb)
 {
   if (true)
     { _M_write(__s, __n); }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    flush()
    {



      ios_base::iostate __err = ios_base::goodbit;
      if (true)
 {
   if (this->rdbuf() && this->rdbuf()->pubsync() == -1)
     __err |= ios_base::badbit;
 }
      if (false)
 {
   this->_M_setstate(ios_base::badbit);
                          ;
 }
      if (false)
 { this->_M_setstate(ios_base::badbit); }
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    typename basic_ostream<_CharT, _Traits>::pos_type
    basic_ostream<_CharT, _Traits>::
    tellp()
    {
      pos_type __ret = pos_type(-1);
      if (true)
 {
   if (!this->fail())
     __ret = this->rdbuf()->pubseekoff(0, ios_base::cur, ios_base::out);
 }
      if (false)
 {
   this->_M_setstate(ios_base::badbit);
                          ;
 }
      if (false)
 { this->_M_setstate(ios_base::badbit); }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    seekp(pos_type __pos)
    {
      ios_base::iostate __err = ios_base::goodbit;
      if (true)
 {
   if (!this->fail())
     {


       const pos_type __p = this->rdbuf()->pubseekpos(__pos,
            ios_base::out);


       if (__p == pos_type(off_type(-1)))
  __err |= ios_base::failbit;
     }
 }
      if (false)
 {
   this->_M_setstate(ios_base::badbit);
                          ;
 }
      if (false)
 { this->_M_setstate(ios_base::badbit); }
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    seekp(off_type __off, ios_base::seekdir __dir)
    {
      ios_base::iostate __err = ios_base::goodbit;
      if (true)
 {
   if (!this->fail())
     {


       const pos_type __p = this->rdbuf()->pubseekoff(__off, __dir,
            ios_base::out);


       if (__p == pos_type(off_type(-1)))
  __err |= ios_base::failbit;
     }
 }
      if (false)
 {
   this->_M_setstate(ios_base::badbit);
                          ;
 }
      if (false)
 { this->_M_setstate(ios_base::badbit); }
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, const char* __s)
    {
      if (!__s)
 __out.setstate(ios_base::badbit);
      else
 {


   const size_t __clen = char_traits<char>::length(__s);
   if (true)
     {
       struct __ptr_guard
       {
  _CharT *__p;
  __ptr_guard (_CharT *__ip): __p(__ip) { }
  ~__ptr_guard() { delete[] __p; }
  _CharT* __get() { return __p; }
       } __pg (new _CharT[__clen]);

       _CharT *__ws = __pg.__get();
       for (size_t __i = 0; __i < __clen; ++__i)
  __ws[__i] = __out.widen(__s[__i]);
       __ostream_insert(__out, __ws, __clen);
     }
   if (false)
     {
       __out._M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { __out._M_setstate(ios_base::badbit); }
 }
      return __out;
    }




  extern template class basic_ostream<char>;
  extern template ostream& endl(ostream&);
  extern template ostream& ends(ostream&);
  extern template ostream& flush(ostream&);
  extern template ostream& operator<<(ostream&, char);
  extern template ostream& operator<<(ostream&, unsigned char);
  extern template ostream& operator<<(ostream&, signed char);
  extern template ostream& operator<<(ostream&, const char*);
  extern template ostream& operator<<(ostream&, const unsigned char*);
  extern template ostream& operator<<(ostream&, const signed char*);

  extern template ostream& ostream::_M_insert(long);
  extern template ostream& ostream::_M_insert(unsigned long);
  extern template ostream& ostream::_M_insert(bool);

  extern template ostream& ostream::_M_insert(long long);
  extern template ostream& ostream::_M_insert(unsigned long long);

  extern template ostream& ostream::_M_insert(double);
  extern template ostream& ostream::_M_insert(long double);
  extern template ostream& ostream::_M_insert(const void*);


  extern template class basic_ostream<wchar_t>;
  extern template wostream& endl(wostream&);
  extern template wostream& ends(wostream&);
  extern template wostream& flush(wostream&);
  extern template wostream& operator<<(wostream&, wchar_t);
  extern template wostream& operator<<(wostream&, char);
  extern template wostream& operator<<(wostream&, const wchar_t*);
  extern template wostream& operator<<(wostream&, const char*);

  extern template wostream& wostream::_M_insert(long);
  extern template wostream& wostream::_M_insert(unsigned long);
  extern template wostream& wostream::_M_insert(bool);

  extern template wostream& wostream::_M_insert(long long);
  extern template wostream& wostream::_M_insert(unsigned long long);

  extern template wostream& wostream::_M_insert(double);
  extern template wostream& wostream::_M_insert(long double);
  extern template wostream& wostream::_M_insert(const void*);




}
# 694 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\ostream" 2 3
# 40 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\iostream" 2 3
# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\istream" 1 3
# 37 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\istream" 3




namespace std
{
# 57 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\istream" 3
  template<typename _CharT, typename _Traits>
    class basic_istream : virtual public basic_ios<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;


      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef basic_ios<_CharT, _Traits> __ios_type;
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef num_get<_CharT, istreambuf_iterator<_CharT, _Traits> >
        __num_get_type;
      typedef ctype<_CharT> __ctype_type;

    protected:





      streamsize _M_gcount;

    public:







      explicit
      basic_istream(__streambuf_type* __sb)
      : _M_gcount(streamsize(0))
      { this->init(__sb); }






      virtual
      ~basic_istream()
      { _M_gcount = streamsize(0); }


      class sentry;
      friend class sentry;
# 119 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\istream" 3
      __istream_type&
      operator>>(__istream_type& (*__pf)(__istream_type&))
      { return __pf(*this); }

      __istream_type&
      operator>>(__ios_type& (*__pf)(__ios_type&))
      {
 __pf(*this);
 return *this;
      }

      __istream_type&
      operator>>(ios_base& (*__pf)(ios_base&))
      {
 __pf(*this);
 return *this;
      }
# 167 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\istream" 3
      __istream_type&
      operator>>(bool& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(short& __n);

      __istream_type&
      operator>>(unsigned short& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(int& __n);

      __istream_type&
      operator>>(unsigned int& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(long& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(unsigned long& __n)
      { return _M_extract(__n); }


      __istream_type&
      operator>>(long long& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(unsigned long long& __n)
      { return _M_extract(__n); }
# 213 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\istream" 3
      __istream_type&
      operator>>(float& __f)
      { return _M_extract(__f); }

      __istream_type&
      operator>>(double& __f)
      { return _M_extract(__f); }

      __istream_type&
      operator>>(long double& __f)
      { return _M_extract(__f); }
# 234 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\istream" 3
      __istream_type&
      operator>>(void*& __p)
      { return _M_extract(__p); }
# 258 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\istream" 3
      __istream_type&
      operator>>(__streambuf_type* __sb);
# 268 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\istream" 3
      streamsize
      gcount() const
      { return _M_gcount; }
# 301 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\istream" 3
      int_type
      get();
# 315 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\istream" 3
      __istream_type&
      get(char_type& __c);
# 342 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\istream" 3
      __istream_type&
      get(char_type* __s, streamsize __n, char_type __delim);
# 353 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\istream" 3
      __istream_type&
      get(char_type* __s, streamsize __n)
      { return this->get(__s, __n, this->widen('\n')); }
# 376 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\istream" 3
      __istream_type&
      get(__streambuf_type& __sb, char_type __delim);
# 386 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\istream" 3
      __istream_type&
      get(__streambuf_type& __sb)
      { return this->get(__sb, this->widen('\n')); }
# 415 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\istream" 3
      __istream_type&
      getline(char_type* __s, streamsize __n, char_type __delim);
# 426 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\istream" 3
      __istream_type&
      getline(char_type* __s, streamsize __n)
      { return this->getline(__s, __n, this->widen('\n')); }
# 450 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\istream" 3
      __istream_type&
      ignore(streamsize __n, int_type __delim);

      __istream_type&
      ignore(streamsize __n);

      __istream_type&
      ignore();
# 467 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\istream" 3
      int_type
      peek();
# 485 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\istream" 3
      __istream_type&
      read(char_type* __s, streamsize __n);
# 504 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\istream" 3
      streamsize
      readsome(char_type* __s, streamsize __n);
# 521 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\istream" 3
      __istream_type&
      putback(char_type __c);
# 537 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\istream" 3
      __istream_type&
      unget();
# 555 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\istream" 3
      int
      sync();
# 570 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\istream" 3
      pos_type
      tellg();
# 585 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\istream" 3
      __istream_type&
      seekg(pos_type);
# 601 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\istream" 3
      __istream_type&
      seekg(off_type, ios_base::seekdir);


    protected:
      basic_istream()
      : _M_gcount(streamsize(0))
      { this->init(0); }


      basic_istream(const basic_istream&) = delete;

      basic_istream(basic_istream&& __rhs)
      : __ios_type(), _M_gcount(__rhs._M_gcount)
      {
 __ios_type::move(__rhs);
 __rhs._M_gcount = 0;
      }



      basic_istream& operator=(const basic_istream&) = delete;

      basic_istream&
      operator=(basic_istream&& __rhs)
      {
 swap(__rhs);
 return *this;
      }

      void
      swap(basic_istream& __rhs)
      {
 __ios_type::swap(__rhs);
 std::swap(_M_gcount, __rhs._M_gcount);
      }


      template<typename _ValueT>
 __istream_type&
 _M_extract(_ValueT& __v);
    };


  template<>
    basic_istream<char>&
    basic_istream<char>::
    getline(char_type* __s, streamsize __n, char_type __delim);

  template<>
    basic_istream<char>&
    basic_istream<char>::
    ignore(streamsize __n);

  template<>
    basic_istream<char>&
    basic_istream<char>::
    ignore(streamsize __n, int_type __delim);


  template<>
    basic_istream<wchar_t>&
    basic_istream<wchar_t>::
    getline(char_type* __s, streamsize __n, char_type __delim);

  template<>
    basic_istream<wchar_t>&
    basic_istream<wchar_t>::
    ignore(streamsize __n);

  template<>
    basic_istream<wchar_t>&
    basic_istream<wchar_t>::
    ignore(streamsize __n, int_type __delim);
# 685 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\istream" 3
  template<typename _CharT, typename _Traits>
    class basic_istream<_CharT, _Traits>::sentry
    {

      bool _M_ok;

    public:

      typedef _Traits traits_type;
      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::__ctype_type __ctype_type;
      typedef typename _Traits::int_type __int_type;
# 721 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\istream" 3
      explicit
      sentry(basic_istream<_CharT, _Traits>& __is, bool __noskipws = false);
# 732 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\istream" 3
      explicit

      operator bool() const
      { return _M_ok; }
    };
# 750 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\istream" 3
  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT& __c);

  template<class _Traits>
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, unsigned char& __c)
    { return (__in >> reinterpret_cast<char&>(__c)); }

  template<class _Traits>
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, signed char& __c)
    { return (__in >> reinterpret_cast<char&>(__c)); }
# 792 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\istream" 3
  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT* __s);


  template<>
    basic_istream<char>&
    operator>>(basic_istream<char>& __in, char* __s);

  template<class _Traits>
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, unsigned char* __s)
    { return (__in >> reinterpret_cast<char*>(__s)); }

  template<class _Traits>
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, signed char* __s)
    { return (__in >> reinterpret_cast<char*>(__s)); }
# 823 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\istream" 3
  template<typename _CharT, typename _Traits>
    class basic_iostream
    : public basic_istream<_CharT, _Traits>,
      public basic_ostream<_CharT, _Traits>
    {
    public:



      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;


      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_ostream<_CharT, _Traits> __ostream_type;







      explicit
      basic_iostream(basic_streambuf<_CharT, _Traits>* __sb)
      : __istream_type(__sb), __ostream_type(__sb) { }




      virtual
      ~basic_iostream() { }

    protected:
      basic_iostream()
      : __istream_type(), __ostream_type() { }


      basic_iostream(const basic_iostream&) = delete;

      basic_iostream(basic_iostream&& __rhs)
      : __istream_type(std::move(__rhs)), __ostream_type(*this)
      { }



      basic_iostream& operator=(const basic_iostream&) = delete;

      basic_iostream&
      operator=(basic_iostream&& __rhs)
      {
 swap(__rhs);
 return *this;
      }

      void
      swap(basic_iostream& __rhs)
      { __istream_type::swap(__rhs); }

    };
# 906 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\istream" 3
  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    ws(basic_istream<_CharT, _Traits>& __is);


  template<typename _Ch, typename _Up>
    basic_istream<_Ch, _Up>&
    __is_convertible_to_basic_istream_test(basic_istream<_Ch, _Up>*);

  template<typename _Tp, typename = void>
    struct __is_convertible_to_basic_istream_impl
    {
      using __istream_type = void;
    };

  template<typename _Tp>
    using __do_is_convertible_to_basic_istream_impl =
    decltype(__is_convertible_to_basic_istream_test
      (declval<typename remove_reference<_Tp>::type*>()));

  template<typename _Tp>
    struct __is_convertible_to_basic_istream_impl
    <_Tp,
     __void_t<__do_is_convertible_to_basic_istream_impl<_Tp>>>
    {
      using __istream_type =
 __do_is_convertible_to_basic_istream_impl<_Tp>;
    };

  template<typename _Tp>
    struct __is_convertible_to_basic_istream
    : __is_convertible_to_basic_istream_impl<_Tp>
    {
    public:
      using type = __not_<is_void<
        typename __is_convertible_to_basic_istream_impl<_Tp>::__istream_type>>;
      constexpr static bool value = type::value;
    };

  template<typename _Istream, typename _Tp, typename = void>
    struct __is_extractable : false_type {};

  template<typename _Istream, typename _Tp>
    struct __is_extractable<_Istream, _Tp,
       __void_t<decltype(declval<_Istream&>()
           >> declval<_Tp>())>>
    : true_type {};

  template<typename _Istream>
    using __rvalue_istream_type =
      typename __is_convertible_to_basic_istream<
 _Istream>::__istream_type;
# 972 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\istream" 3
  template<typename _Istream, typename _Tp>
    inline
    typename enable_if<__and_<__not_<is_lvalue_reference<_Istream>>,
         __is_convertible_to_basic_istream<_Istream>,
         __is_extractable<
    __rvalue_istream_type<_Istream>,
    _Tp&&>>::value,
         __rvalue_istream_type<_Istream>>::type
    operator>>(_Istream&& __is, _Tp&& __x)
    {
      __rvalue_istream_type<_Istream> __ret_is = __is;
      __ret_is >> std::forward<_Tp>(__x);
      return __ret_is;
    }



}


# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/istream.tcc" 1 3
# 38 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/istream.tcc" 3



namespace std
{


  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>::sentry::
    sentry(basic_istream<_CharT, _Traits>& __in, bool __noskip) : _M_ok(false)
    {
      ios_base::iostate __err = ios_base::goodbit;
      if (__in.good())
 if (true)
   {
     if (__in.tie())
       __in.tie()->flush();
     if (!__noskip && bool(__in.flags() & ios_base::skipws))
       {
  const __int_type __eof = traits_type::eof();
  __streambuf_type* __sb = __in.rdbuf();
  __int_type __c = __sb->sgetc();

  const __ctype_type& __ct = __check_facet(__in._M_ctype);
  while (!traits_type::eq_int_type(__c, __eof)
         && __ct.is(ctype_base::space,
      traits_type::to_char_type(__c)))
    __c = __sb->snextc();




  if (traits_type::eq_int_type(__c, __eof))
    __err |= ios_base::eofbit;
       }
   }
 if (false)
   {
     __in._M_setstate(ios_base::badbit);
                            ;
   }
 if (false)
   { __in._M_setstate(ios_base::badbit); }

      if (__in.good() && __err == ios_base::goodbit)
 _M_ok = true;
      else
 {
   __err |= ios_base::failbit;
   __in.setstate(__err);
 }
    }

  template<typename _CharT, typename _Traits>
    template<typename _ValueT>
      basic_istream<_CharT, _Traits>&
      basic_istream<_CharT, _Traits>::
      _M_extract(_ValueT& __v)
      {
 sentry __cerb(*this, false);
 if (__cerb)
   {
     ios_base::iostate __err = ios_base::goodbit;
     if (true)
       {
  const __num_get_type& __ng = __check_facet(this->_M_num_get);
  __ng.get(*this, 0, *this, __err, __v);
       }
     if (false)
       {
  this->_M_setstate(ios_base::badbit);
                         ;
       }
     if (false)
       { this->_M_setstate(ios_base::badbit); }
     if (__err)
       this->setstate(__err);
   }
 return *this;
      }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    operator>>(short& __n)
    {


      sentry __cerb(*this, false);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       long __l;
       const __num_get_type& __ng = __check_facet(this->_M_num_get);
       __ng.get(*this, 0, *this, __err, __l);



       if (__l < __gnu_cxx::__numeric_traits<short>::__min)
  {
    __err |= ios_base::failbit;
    __n = __gnu_cxx::__numeric_traits<short>::__min;
  }
       else if (__l > __gnu_cxx::__numeric_traits<short>::__max)
  {
    __err |= ios_base::failbit;
    __n = __gnu_cxx::__numeric_traits<short>::__max;
  }
       else
  __n = short(__l);
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    operator>>(int& __n)
    {


      sentry __cerb(*this, false);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       long __l;
       const __num_get_type& __ng = __check_facet(this->_M_num_get);
       __ng.get(*this, 0, *this, __err, __l);



       if (__l < __gnu_cxx::__numeric_traits<int>::__min)
  {
    __err |= ios_base::failbit;
    __n = __gnu_cxx::__numeric_traits<int>::__min;
  }
       else if (__l > __gnu_cxx::__numeric_traits<int>::__max)
  {
    __err |= ios_base::failbit;
    __n = __gnu_cxx::__numeric_traits<int>::__max;
  }
       else
  __n = int(__l);
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    operator>>(__streambuf_type* __sbout)
    {
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, false);
      if (__cerb && __sbout)
 {
   if (true)
     {
       bool __ineof;
       if (!__copy_streambufs_eof(this->rdbuf(), __sbout, __ineof))
  __err |= ios_base::failbit;
       if (__ineof)
  __err |= ios_base::eofbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::failbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::failbit); }
 }
      else if (!__sbout)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    typename basic_istream<_CharT, _Traits>::int_type
    basic_istream<_CharT, _Traits>::
    get(void)
    {
      const int_type __eof = traits_type::eof();
      int_type __c = __eof;
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   if (true)
     {
       __c = this->rdbuf()->sbumpc();

       if (!traits_type::eq_int_type(__c, __eof))
  _M_gcount = 1;
       else
  __err |= ios_base::eofbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
 }
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return __c;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    get(char_type& __c)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   if (true)
     {
       const int_type __cb = this->rdbuf()->sbumpc();

       if (!traits_type::eq_int_type(__cb, traits_type::eof()))
  {
    _M_gcount = 1;
    __c = traits_type::to_char_type(__cb);
  }
       else
  __err |= ios_base::eofbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
 }
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    get(char_type* __s, streamsize __n, char_type __delim)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   if (true)
     {
       const int_type __idelim = traits_type::to_int_type(__delim);
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();
       int_type __c = __sb->sgetc();

       while (_M_gcount + 1 < __n
       && !traits_type::eq_int_type(__c, __eof)
       && !traits_type::eq_int_type(__c, __idelim))
  {
    *__s++ = traits_type::to_char_type(__c);
    ++_M_gcount;
    __c = __sb->snextc();
  }
       if (traits_type::eq_int_type(__c, __eof))
  __err |= ios_base::eofbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
 }


      if (__n > 0)
 *__s = char_type();
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    get(__streambuf_type& __sb, char_type __delim)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   if (true)
     {
       const int_type __idelim = traits_type::to_int_type(__delim);
       const int_type __eof = traits_type::eof();
       __streambuf_type* __this_sb = this->rdbuf();
       int_type __c = __this_sb->sgetc();
       char_type __c2 = traits_type::to_char_type(__c);

       while (!traits_type::eq_int_type(__c, __eof)
       && !traits_type::eq_int_type(__c, __idelim)
       && !traits_type::eq_int_type(__sb.sputc(__c2), __eof))
  {
    ++_M_gcount;
    __c = __this_sb->snextc();
    __c2 = traits_type::to_char_type(__c);
  }
       if (traits_type::eq_int_type(__c, __eof))
  __err |= ios_base::eofbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
 }
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    getline(char_type* __s, streamsize __n, char_type __delim)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
        {
          if (true)
            {
              const int_type __idelim = traits_type::to_int_type(__delim);
              const int_type __eof = traits_type::eof();
              __streambuf_type* __sb = this->rdbuf();
              int_type __c = __sb->sgetc();

              while (_M_gcount + 1 < __n
                     && !traits_type::eq_int_type(__c, __eof)
                     && !traits_type::eq_int_type(__c, __idelim))
                {
                  *__s++ = traits_type::to_char_type(__c);
                  __c = __sb->snextc();
                  ++_M_gcount;
                }
              if (traits_type::eq_int_type(__c, __eof))
                __err |= ios_base::eofbit;
              else
                {
                  if (traits_type::eq_int_type(__c, __idelim))
                    {
                      __sb->sbumpc();
                      ++_M_gcount;
                    }
                  else
                    __err |= ios_base::failbit;
                }
            }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
          if (false)
            { this->_M_setstate(ios_base::badbit); }
        }


      if (__n > 0)
 *__s = char_type();
      if (!_M_gcount)
        __err |= ios_base::failbit;
      if (__err)
        this->setstate(__err);
      return *this;
    }




  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    ignore(void)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();

       if (traits_type::eq_int_type(__sb->sbumpc(), __eof))
  __err |= ios_base::eofbit;
       else
  _M_gcount = 1;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    ignore(streamsize __n)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb && __n > 0)
        {
          ios_base::iostate __err = ios_base::goodbit;
          if (true)
            {
              const int_type __eof = traits_type::eof();
              __streambuf_type* __sb = this->rdbuf();
              int_type __c = __sb->sgetc();
# 521 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/istream.tcc" 3
       bool __large_ignore = false;
       while (true)
  {
    while (_M_gcount < __n
    && !traits_type::eq_int_type(__c, __eof))
      {
        ++_M_gcount;
        __c = __sb->snextc();
      }
    if (__n == __gnu_cxx::__numeric_traits<streamsize>::__max
        && !traits_type::eq_int_type(__c, __eof))
      {
        _M_gcount =
   __gnu_cxx::__numeric_traits<streamsize>::__min;
        __large_ignore = true;
      }
    else
      break;
  }

       if (__large_ignore)
  _M_gcount = __gnu_cxx::__numeric_traits<streamsize>::__max;

       if (traits_type::eq_int_type(__c, __eof))
                __err |= ios_base::eofbit;
            }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
          if (false)
            { this->_M_setstate(ios_base::badbit); }
          if (__err)
            this->setstate(__err);
        }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    ignore(streamsize __n, int_type __delim)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb && __n > 0)
        {
          ios_base::iostate __err = ios_base::goodbit;
          if (true)
            {
              const int_type __eof = traits_type::eof();
              __streambuf_type* __sb = this->rdbuf();
              int_type __c = __sb->sgetc();


       bool __large_ignore = false;
       while (true)
  {
    while (_M_gcount < __n
    && !traits_type::eq_int_type(__c, __eof)
    && !traits_type::eq_int_type(__c, __delim))
      {
        ++_M_gcount;
        __c = __sb->snextc();
      }
    if (__n == __gnu_cxx::__numeric_traits<streamsize>::__max
        && !traits_type::eq_int_type(__c, __eof)
        && !traits_type::eq_int_type(__c, __delim))
      {
        _M_gcount =
   __gnu_cxx::__numeric_traits<streamsize>::__min;
        __large_ignore = true;
      }
    else
      break;
  }

       if (__large_ignore)
  _M_gcount = __gnu_cxx::__numeric_traits<streamsize>::__max;

              if (traits_type::eq_int_type(__c, __eof))
                __err |= ios_base::eofbit;
       else if (traits_type::eq_int_type(__c, __delim))
  {
    if (_M_gcount
        < __gnu_cxx::__numeric_traits<streamsize>::__max)
      ++_M_gcount;
    __sb->sbumpc();
  }
            }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
          if (false)
            { this->_M_setstate(ios_base::badbit); }
          if (__err)
            this->setstate(__err);
        }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    typename basic_istream<_CharT, _Traits>::int_type
    basic_istream<_CharT, _Traits>::
    peek(void)
    {
      int_type __c = traits_type::eof();
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       __c = this->rdbuf()->sgetc();
       if (traits_type::eq_int_type(__c, traits_type::eof()))
  __err |= ios_base::eofbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return __c;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    read(char_type* __s, streamsize __n)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       _M_gcount = this->rdbuf()->sgetn(__s, __n);
       if (_M_gcount != __n)
  __err |= (ios_base::eofbit | ios_base::failbit);
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    streamsize
    basic_istream<_CharT, _Traits>::
    readsome(char_type* __s, streamsize __n)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {

       const streamsize __num = this->rdbuf()->in_avail();
       if (__num > 0)
  _M_gcount = this->rdbuf()->sgetn(__s, std::min(__num, __n));
       else if (__num == -1)
  __err |= ios_base::eofbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return _M_gcount;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    putback(char_type __c)
    {


      _M_gcount = 0;

      this->clear(this->rdstate() & ~ios_base::eofbit);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();
       if (!__sb
    || traits_type::eq_int_type(__sb->sputbackc(__c), __eof))
  __err |= ios_base::badbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    unget(void)
    {


      _M_gcount = 0;

      this->clear(this->rdstate() & ~ios_base::eofbit);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();
       if (!__sb
    || traits_type::eq_int_type(__sb->sungetc(), __eof))
  __err |= ios_base::badbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    int
    basic_istream<_CharT, _Traits>::
    sync(void)
    {


      int __ret = -1;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       __streambuf_type* __sb = this->rdbuf();
       if (__sb)
  {
    if (__sb->pubsync() == -1)
      __err |= ios_base::badbit;
    else
      __ret = 0;
  }
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_istream<_CharT, _Traits>::pos_type
    basic_istream<_CharT, _Traits>::
    tellg(void)
    {


      pos_type __ret = pos_type(-1);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   if (true)
     {
       if (!this->fail())
  __ret = this->rdbuf()->pubseekoff(0, ios_base::cur,
        ios_base::in);
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    seekg(pos_type __pos)
    {



      this->clear(this->rdstate() & ~ios_base::eofbit);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       if (!this->fail())
  {

    const pos_type __p = this->rdbuf()->pubseekpos(__pos,
         ios_base::in);


    if (__p == pos_type(off_type(-1)))
      __err |= ios_base::failbit;
  }
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    seekg(off_type __off, ios_base::seekdir __dir)
    {



      this->clear(this->rdstate() & ~ios_base::eofbit);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       if (!this->fail())
  {

    const pos_type __p = this->rdbuf()->pubseekoff(__off, __dir,
         ios_base::in);


    if (__p == pos_type(off_type(-1)))
      __err |= ios_base::failbit;
  }
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }


  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT& __c)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::int_type __int_type;

      typename __istream_type::sentry __cerb(__in, false);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       const __int_type __cb = __in.rdbuf()->sbumpc();
       if (!_Traits::eq_int_type(__cb, _Traits::eof()))
  __c = _Traits::to_char_type(__cb);
       else
  __err |= (ios_base::eofbit | ios_base::failbit);
     }
   if (false)
     {
       __in._M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { __in._M_setstate(ios_base::badbit); }
   if (__err)
     __in.setstate(__err);
 }
      return __in;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT* __s)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef typename _Traits::int_type int_type;
      typedef _CharT char_type;
      typedef ctype<_CharT> __ctype_type;

      streamsize __extracted = 0;
      ios_base::iostate __err = ios_base::goodbit;
      typename __istream_type::sentry __cerb(__in, false);
      if (__cerb)
 {
   if (true)
     {

       streamsize __num = __in.width();
       if (__num <= 0)
  __num = __gnu_cxx::__numeric_traits<streamsize>::__max;

       const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());

       const int_type __eof = _Traits::eof();
       __streambuf_type* __sb = __in.rdbuf();
       int_type __c = __sb->sgetc();

       while (__extracted < __num - 1
       && !_Traits::eq_int_type(__c, __eof)
       && !__ct.is(ctype_base::space,
     _Traits::to_char_type(__c)))
  {
    *__s++ = _Traits::to_char_type(__c);
    ++__extracted;
    __c = __sb->snextc();
  }
       if (_Traits::eq_int_type(__c, __eof))
  __err |= ios_base::eofbit;



       *__s = char_type();
       __in.width(0);
     }
   if (false)
     {
       __in._M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { __in._M_setstate(ios_base::badbit); }
 }
      if (!__extracted)
 __err |= ios_base::failbit;
      if (__err)
 __in.setstate(__err);
      return __in;
    }


  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    ws(basic_istream<_CharT, _Traits>& __in)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef typename __istream_type::int_type __int_type;
      typedef ctype<_CharT> __ctype_type;

      const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());
      const __int_type __eof = _Traits::eof();
      __streambuf_type* __sb = __in.rdbuf();
      __int_type __c = __sb->sgetc();

      while (!_Traits::eq_int_type(__c, __eof)
      && __ct.is(ctype_base::space, _Traits::to_char_type(__c)))
 __c = __sb->snextc();

       if (_Traits::eq_int_type(__c, __eof))
  __in.setstate(ios_base::eofbit);
      return __in;
    }




  extern template class basic_istream<char>;
  extern template istream& ws(istream&);
  extern template istream& operator>>(istream&, char&);
  extern template istream& operator>>(istream&, char*);
  extern template istream& operator>>(istream&, unsigned char&);
  extern template istream& operator>>(istream&, signed char&);
  extern template istream& operator>>(istream&, unsigned char*);
  extern template istream& operator>>(istream&, signed char*);

  extern template istream& istream::_M_extract(unsigned short&);
  extern template istream& istream::_M_extract(unsigned int&);
  extern template istream& istream::_M_extract(long&);
  extern template istream& istream::_M_extract(unsigned long&);
  extern template istream& istream::_M_extract(bool&);

  extern template istream& istream::_M_extract(long long&);
  extern template istream& istream::_M_extract(unsigned long long&);

  extern template istream& istream::_M_extract(float&);
  extern template istream& istream::_M_extract(double&);
  extern template istream& istream::_M_extract(long double&);
  extern template istream& istream::_M_extract(void*&);

  extern template class basic_iostream<char>;


  extern template class basic_istream<wchar_t>;
  extern template wistream& ws(wistream&);
  extern template wistream& operator>>(wistream&, wchar_t&);
  extern template wistream& operator>>(wistream&, wchar_t*);

  extern template wistream& wistream::_M_extract(unsigned short&);
  extern template wistream& wistream::_M_extract(unsigned int&);
  extern template wistream& wistream::_M_extract(long&);
  extern template wistream& wistream::_M_extract(unsigned long&);
  extern template wistream& wistream::_M_extract(bool&);

  extern template wistream& wistream::_M_extract(long long&);
  extern template wistream& wistream::_M_extract(unsigned long long&);

  extern template wistream& wistream::_M_extract(float&);
  extern template wistream& wistream::_M_extract(double&);
  extern template wistream& wistream::_M_extract(long double&);
  extern template wistream& wistream::_M_extract(void*&);

  extern template class basic_iostream<wchar_t>;




}
# 992 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\istream" 2 3
# 41 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\iostream" 2 3

namespace std
{
# 60 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\iostream" 3
  extern istream cin;
  extern ostream cout;
  extern ostream cerr;
  extern ostream clog;


  extern wistream wcin;
  extern wostream wcout;
  extern wostream wcerr;
  extern wostream wclog;




  static ios_base::Init __ioinit;


}
# 2 "lstm_hls/rnn.cpp" 2
# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\cmath" 1 3
# 40 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\cmath" 3





# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\math.h" 1 3
# 11 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\math.h" 3




struct _exception;

#pragma pack(push,_CRT_PACKING)
# 77 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\math.h" 3
extern "C++" {
template <typename type1, typename type2> struct __mingw_types_compatible_p {
  static const bool result = false;
};

template <typename type1> struct __mingw_types_compatible_p<type1, type1> {
 static const bool result = true;
};

template <typename type1> struct __mingw_types_compatible_p<const type1, type1> {
  static const bool result = true;
};

template <typename type1> struct __mingw_types_compatible_p<type1, const type1> {
  static const bool result = true;
};
}
# 111 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\math.h" 3
extern "C" {







  typedef union __mingw_dbl_type_t {
    double x;
    unsigned long long val;
    __extension__ struct {
      unsigned int low, high;
    } lh;
  } __mingw_dbl_type_t;

  typedef union __mingw_flt_type_t {
    float x;
    unsigned int val;
  } __mingw_flt_type_t;

  typedef union __mingw_ldbl_type_t
  {
    long double x;
    __extension__ struct {
      unsigned int low, high;
      int sign_exponent : 16;
      int res1 : 16;
      int res0 : 32;
    } lh;
  } __mingw_ldbl_type_t;

  typedef union __mingw_fp_types_t
  {
    long double *ld;
    double *d;
    float *f;
    __mingw_ldbl_type_t *ldt;
    __mingw_dbl_type_t *dt;
    __mingw_flt_type_t *ft;
  } __mingw_fp_types_t;




  extern double * __imp__HUGE;
# 168 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\math.h" 3
  struct _exception {
    int type;
    const char *name;
    double arg1;
    double arg2;
    double retval;
  };

  void __mingw_raise_matherr (int typ, const char *name, double a1, double a2,
         double rslt);
  void __mingw_setusermatherr (int (__attribute__((__cdecl__)) *)(struct _exception *));
  __attribute__ ((__dllimport__)) void __setusermatherr(int (__attribute__((__cdecl__)) *)(struct _exception *));



  double __attribute__((__cdecl__)) sin(double _X);
  double __attribute__((__cdecl__)) cos(double _X);
  double __attribute__((__cdecl__)) tan(double _X);
  double __attribute__((__cdecl__)) sinh(double _X);
  double __attribute__((__cdecl__)) cosh(double _X);
  double __attribute__((__cdecl__)) tanh(double _X);
  double __attribute__((__cdecl__)) asin(double _X);
  double __attribute__((__cdecl__)) acos(double _X);
  double __attribute__((__cdecl__)) atan(double _X);
  double __attribute__((__cdecl__)) atan2(double _Y,double _X);
  double __attribute__((__cdecl__)) exp(double _X);
  double __attribute__((__cdecl__)) log(double _X);
  double __attribute__((__cdecl__)) log10(double _X);
  double __attribute__((__cdecl__)) pow(double _X,double _Y);
  double __attribute__((__cdecl__)) sqrt(double _X);
  double __attribute__((__cdecl__)) ceil(double _X);
  double __attribute__((__cdecl__)) floor(double _X);


  extern float __attribute__((__cdecl__)) fabsf (float x);
  extern long double __attribute__((__cdecl__)) fabsl (long double);
  extern double __attribute__((__cdecl__)) fabs (double _X);
# 243 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\math.h" 3
  double __attribute__((__cdecl__)) ldexp(double _X,int _Y);
  double __attribute__((__cdecl__)) frexp(double _X,int *_Y);
  double __attribute__((__cdecl__)) modf(double _X,double *_Y);
  double __attribute__((__cdecl__)) fmod(double _X,double _Y);

  void __attribute__((__cdecl__)) sincos (double __x, double *p_sin, double *p_cos);
  void __attribute__((__cdecl__)) sincosl (long double __x, long double *p_sin, long double *p_cos);
  void __attribute__((__cdecl__)) sincosf (float __x, float *p_sin, float *p_cos);
# 270 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\math.h" 3
  struct _complex {
    double x;
    double y;
  };


  double __attribute__((__cdecl__)) _cabs(struct _complex _ComplexA);
  double __attribute__((__cdecl__)) _hypot(double _X,double _Y);
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _j0(double _X);
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _j1(double _X);
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _jn(int _X,double _Y);
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _y0(double _X);
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _y1(double _X);
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _yn(int _X,double _Y);


  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _matherr (struct _exception *);
# 297 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\math.h" 3
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _chgsign (double _X);
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _copysign (double _Number,double _Sign);
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _logb (double);
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _nextafter (double, double);
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _scalb (double, long);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _finite (double);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fpclass (double);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _isnan (double);






__attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) j0 (double) ;
__attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) j1 (double) ;
__attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) jn (int, double) ;
__attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) y0 (double) ;
__attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) y1 (double) ;
__attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) yn (int, double) ;

__attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) chgsign (double);
# 327 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\math.h" 3
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) finite (double);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) fpclass (double);
# 372 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\math.h" 3
typedef float float_t;
typedef double double_t;
# 407 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\math.h" 3
  extern int __attribute__((__cdecl__)) __fpclassifyl (long double);
  extern int __attribute__((__cdecl__)) __fpclassifyf (float);
  extern int __attribute__((__cdecl__)) __fpclassify (double);
# 520 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\math.h" 3
  extern int __attribute__((__cdecl__)) __isnan (double);
  extern int __attribute__((__cdecl__)) __isnanf (float);
  extern int __attribute__((__cdecl__)) __isnanl (long double);
# 607 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\math.h" 3
  extern int __attribute__((__cdecl__)) __signbit (double);
  extern int __attribute__((__cdecl__)) __signbitf (float);
  extern int __attribute__((__cdecl__)) __signbitl (long double);
# 664 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\math.h" 3
  extern float __attribute__((__cdecl__)) sinf(float _X);
  extern long double __attribute__((__cdecl__)) sinl(long double);

  extern float __attribute__((__cdecl__)) cosf(float _X);
  extern long double __attribute__((__cdecl__)) cosl(long double);

  extern float __attribute__((__cdecl__)) tanf(float _X);
  extern long double __attribute__((__cdecl__)) tanl(long double);
  extern float __attribute__((__cdecl__)) asinf(float _X);
  extern long double __attribute__((__cdecl__)) asinl(long double);

  extern float __attribute__((__cdecl__)) acosf (float);
  extern long double __attribute__((__cdecl__)) acosl (long double);

  extern float __attribute__((__cdecl__)) atanf (float);
  extern long double __attribute__((__cdecl__)) atanl (long double);

  extern float __attribute__((__cdecl__)) atan2f (float, float);
  extern long double __attribute__((__cdecl__)) atan2l (long double, long double);


  extern float __attribute__((__cdecl__)) sinhf(float _X);



  extern long double __attribute__((__cdecl__)) sinhl(long double);

  extern float __attribute__((__cdecl__)) coshf(float _X);



  extern long double __attribute__((__cdecl__)) coshl(long double);

  extern float __attribute__((__cdecl__)) tanhf(float _X);



  extern long double __attribute__((__cdecl__)) tanhl(long double);



  extern double __attribute__((__cdecl__)) acosh (double);
  extern float __attribute__((__cdecl__)) acoshf (float);
  extern long double __attribute__((__cdecl__)) acoshl (long double);


  extern double __attribute__((__cdecl__)) asinh (double);
  extern float __attribute__((__cdecl__)) asinhf (float);
  extern long double __attribute__((__cdecl__)) asinhl (long double);


  extern double __attribute__((__cdecl__)) atanh (double);
  extern float __attribute__((__cdecl__)) atanhf (float);
  extern long double __attribute__((__cdecl__)) atanhl (long double);



  extern float __attribute__((__cdecl__)) expf(float _X);



  extern long double __attribute__((__cdecl__)) expl(long double);


  extern double __attribute__((__cdecl__)) exp2(double);
  extern float __attribute__((__cdecl__)) exp2f(float);
  extern long double __attribute__((__cdecl__)) exp2l(long double);



  extern double __attribute__((__cdecl__)) expm1(double);
  extern float __attribute__((__cdecl__)) expm1f(float);
  extern long double __attribute__((__cdecl__)) expm1l(long double);


  extern float frexpf(float _X,int *_Y);



  extern long double __attribute__((__cdecl__)) frexpl(long double,int *);




  extern int __attribute__((__cdecl__)) ilogb (double);
  extern int __attribute__((__cdecl__)) ilogbf (float);
  extern int __attribute__((__cdecl__)) ilogbl (long double);


  extern float __attribute__((__cdecl__)) ldexpf(float _X,int _Y);



  extern long double __attribute__((__cdecl__)) ldexpl (long double, int);


  extern float __attribute__((__cdecl__)) logf (float);
  extern long double __attribute__((__cdecl__)) logl(long double);


  extern float __attribute__((__cdecl__)) log10f (float);
  extern long double __attribute__((__cdecl__)) log10l(long double);


  extern double __attribute__((__cdecl__)) log1p(double);
  extern float __attribute__((__cdecl__)) log1pf(float);
  extern long double __attribute__((__cdecl__)) log1pl(long double);


  extern double __attribute__((__cdecl__)) log2 (double);
  extern float __attribute__((__cdecl__)) log2f (float);
  extern long double __attribute__((__cdecl__)) log2l (long double);


  extern double __attribute__((__cdecl__)) logb (double);
  extern float __attribute__((__cdecl__)) logbf (float);
  extern long double __attribute__((__cdecl__)) logbl (long double);
# 863 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\math.h" 3
  extern float __attribute__((__cdecl__)) modff (float, float*);
  extern long double __attribute__((__cdecl__)) modfl (long double, long double*);


  extern double __attribute__((__cdecl__)) scalbn (double, int);
  extern float __attribute__((__cdecl__)) scalbnf (float, int);
  extern long double __attribute__((__cdecl__)) scalbnl (long double, int);

  extern double __attribute__((__cdecl__)) scalbln (double, long);
  extern float __attribute__((__cdecl__)) scalblnf (float, long);
  extern long double __attribute__((__cdecl__)) scalblnl (long double, long);



  extern double __attribute__((__cdecl__)) cbrt (double);
  extern float __attribute__((__cdecl__)) cbrtf (float);
  extern long double __attribute__((__cdecl__)) cbrtl (long double);


  extern double __attribute__((__cdecl__)) hypot (double, double) ;
  extern float __attribute__((__cdecl__)) hypotf (float x, float y);



  extern long double __attribute__((__cdecl__)) hypotl (long double, long double);


  extern float __attribute__((__cdecl__)) powf(float _X,float _Y);



  extern long double __attribute__((__cdecl__)) powl (long double, long double);


  extern float __attribute__((__cdecl__)) sqrtf (float);
  extern long double sqrtl(long double);


  extern double __attribute__((__cdecl__)) erf (double);
  extern float __attribute__((__cdecl__)) erff (float);
  extern long double __attribute__((__cdecl__)) erfl (long double);


  extern double __attribute__((__cdecl__)) erfc (double);
  extern float __attribute__((__cdecl__)) erfcf (float);
  extern long double __attribute__((__cdecl__)) erfcl (long double);


  extern double __attribute__((__cdecl__)) lgamma (double);
  extern float __attribute__((__cdecl__)) lgammaf (float);
  extern long double __attribute__((__cdecl__)) lgammal (long double);

  extern int signgam;


  extern double __attribute__((__cdecl__)) tgamma (double);
  extern float __attribute__((__cdecl__)) tgammaf (float);
  extern long double __attribute__((__cdecl__)) tgammal (long double);


  extern float __attribute__((__cdecl__)) ceilf (float);
  extern long double __attribute__((__cdecl__)) ceill (long double);


  extern float __attribute__((__cdecl__)) floorf (float);
  extern long double __attribute__((__cdecl__)) floorl (long double);


  extern double __attribute__((__cdecl__)) nearbyint ( double);
  extern float __attribute__((__cdecl__)) nearbyintf (float);
  extern long double __attribute__((__cdecl__)) nearbyintl (long double);



extern double __attribute__((__cdecl__)) rint (double);
extern float __attribute__((__cdecl__)) rintf (float);
extern long double __attribute__((__cdecl__)) rintl (long double);


extern long __attribute__((__cdecl__)) lrint (double);
extern long __attribute__((__cdecl__)) lrintf (float);
extern long __attribute__((__cdecl__)) lrintl (long double);

__extension__ long long __attribute__((__cdecl__)) llrint (double);
__extension__ long long __attribute__((__cdecl__)) llrintf (float);
__extension__ long long __attribute__((__cdecl__)) llrintl (long double);
# 1030 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\math.h" 3
  extern double __attribute__((__cdecl__)) round (double);
  extern float __attribute__((__cdecl__)) roundf (float);
  extern long double __attribute__((__cdecl__)) roundl (long double);


  extern long __attribute__((__cdecl__)) lround (double);
  extern long __attribute__((__cdecl__)) lroundf (float);
  extern long __attribute__((__cdecl__)) lroundl (long double);
  __extension__ long long __attribute__((__cdecl__)) llround (double);
  __extension__ long long __attribute__((__cdecl__)) llroundf (float);
  __extension__ long long __attribute__((__cdecl__)) llroundl (long double);



  extern double __attribute__((__cdecl__)) trunc (double);
  extern float __attribute__((__cdecl__)) truncf (float);
  extern long double __attribute__((__cdecl__)) truncl (long double);


  extern float __attribute__((__cdecl__)) fmodf (float, float);
  extern long double __attribute__((__cdecl__)) fmodl (long double, long double);


  extern double __attribute__((__cdecl__)) remainder (double, double);
  extern float __attribute__((__cdecl__)) remainderf (float, float);
  extern long double __attribute__((__cdecl__)) remainderl (long double, long double);


  extern double __attribute__((__cdecl__)) remquo(double, double, int *);
  extern float __attribute__((__cdecl__)) remquof(float, float, int *);
  extern long double __attribute__((__cdecl__)) remquol(long double, long double, int *);


  extern double __attribute__((__cdecl__)) copysign (double, double);
  extern float __attribute__((__cdecl__)) copysignf (float, float);
  extern long double __attribute__((__cdecl__)) copysignl (long double, long double);
# 1087 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\math.h" 3
  extern double __attribute__((__cdecl__)) nan(const char *tagp);
  extern float __attribute__((__cdecl__)) nanf(const char *tagp);
  extern long double __attribute__((__cdecl__)) nanl(const char *tagp);
# 1098 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\math.h" 3
  extern double __attribute__((__cdecl__)) nextafter (double, double);
  extern float __attribute__((__cdecl__)) nextafterf (float, float);
  extern long double __attribute__((__cdecl__)) nextafterl (long double, long double);


  extern double __attribute__((__cdecl__)) nexttoward (double, long double);
  extern float __attribute__((__cdecl__)) nexttowardf (float, long double);
  extern long double __attribute__((__cdecl__)) nexttowardl (long double, long double);



  extern double __attribute__((__cdecl__)) fdim (double x, double y);
  extern float __attribute__((__cdecl__)) fdimf (float x, float y);
  extern long double __attribute__((__cdecl__)) fdiml (long double x, long double y);







  extern double __attribute__((__cdecl__)) fmax (double, double);
  extern float __attribute__((__cdecl__)) fmaxf (float, float);
  extern long double __attribute__((__cdecl__)) fmaxl (long double, long double);


  extern double __attribute__((__cdecl__)) fmin (double, double);
  extern float __attribute__((__cdecl__)) fminf (float, float);
  extern long double __attribute__((__cdecl__)) fminl (long double, long double);



  extern double __attribute__((__cdecl__)) fma (double, double, double);
  extern float __attribute__((__cdecl__)) fmaf (float, float, float);
  extern long double __attribute__((__cdecl__)) fmal (long double, long double, long double);
# 1181 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\math.h" 3
   __attribute__ ((__dllimport__)) float __attribute__((__cdecl__)) _copysignf (float _Number,float _Sign);
   __attribute__ ((__dllimport__)) float __attribute__((__cdecl__)) _chgsignf (float _X);
   __attribute__ ((__dllimport__)) float __attribute__((__cdecl__)) _logbf(float _X);
   __attribute__ ((__dllimport__)) float __attribute__((__cdecl__)) _nextafterf(float _X,float _Y);
   __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _finitef(float _X);
   __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _isnanf(float _X);
   __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fpclassf(float _X);



   extern long double __attribute__((__cdecl__)) _chgsignl (long double);
# 1576 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\math.h" 3
}




#pragma pack(pop)
# 46 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\cmath" 2 3
# 77 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\cmath" 3
extern "C++"
{
namespace std
{


  using ::acos;


  inline constexpr float
  acos(float __x)
  { return __builtin_acosf(__x); }

  inline constexpr long double
  acos(long double __x)
  { return __builtin_acosl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    acos(_Tp __x)
    { return __builtin_acos(__x); }

  using ::asin;


  inline constexpr float
  asin(float __x)
  { return __builtin_asinf(__x); }

  inline constexpr long double
  asin(long double __x)
  { return __builtin_asinl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    asin(_Tp __x)
    { return __builtin_asin(__x); }

  using ::atan;


  inline constexpr float
  atan(float __x)
  { return __builtin_atanf(__x); }

  inline constexpr long double
  atan(long double __x)
  { return __builtin_atanl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    atan(_Tp __x)
    { return __builtin_atan(__x); }

  using ::atan2;


  inline constexpr float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }

  inline constexpr long double
  atan2(long double __y, long double __x)
  { return __builtin_atan2l(__y, __x); }


  template<typename _Tp, typename _Up>
    inline constexpr
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    atan2(_Tp __y, _Up __x)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return atan2(__type(__y), __type(__x));
    }

  using ::ceil;


  inline constexpr float
  ceil(float __x)
  { return __builtin_ceilf(__x); }

  inline constexpr long double
  ceil(long double __x)
  { return __builtin_ceill(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    ceil(_Tp __x)
    { return __builtin_ceil(__x); }

  using ::cos;


  inline constexpr float
  cos(float __x)
  { return __builtin_cosf(__x); }

  inline constexpr long double
  cos(long double __x)
  { return __builtin_cosl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    cos(_Tp __x)
    { return __builtin_cos(__x); }

  using ::cosh;


  inline constexpr float
  cosh(float __x)
  { return __builtin_coshf(__x); }

  inline constexpr long double
  cosh(long double __x)
  { return __builtin_coshl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    cosh(_Tp __x)
    { return __builtin_cosh(__x); }

  using ::exp;


  inline constexpr float
  exp(float __x)
  { return __builtin_expf(__x); }

  inline constexpr long double
  exp(long double __x)
  { return __builtin_expl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    exp(_Tp __x)
    { return __builtin_exp(__x); }

  using ::fabs;


  inline constexpr float
  fabs(float __x)
  { return __builtin_fabsf(__x); }

  inline constexpr long double
  fabs(long double __x)
  { return __builtin_fabsl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    fabs(_Tp __x)
    { return __builtin_fabs(__x); }

  using ::floor;


  inline constexpr float
  floor(float __x)
  { return __builtin_floorf(__x); }

  inline constexpr long double
  floor(long double __x)
  { return __builtin_floorl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    floor(_Tp __x)
    { return __builtin_floor(__x); }

  using ::fmod;


  inline constexpr float
  fmod(float __x, float __y)
  { return __builtin_fmodf(__x, __y); }

  inline constexpr long double
  fmod(long double __x, long double __y)
  { return __builtin_fmodl(__x, __y); }


  template<typename _Tp, typename _Up>
    inline constexpr
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fmod(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fmod(__type(__x), __type(__y));
    }

  using ::frexp;


  inline float
  frexp(float __x, int* __exp)
  { return __builtin_frexpf(__x, __exp); }

  inline long double
  frexp(long double __x, int* __exp)
  { return __builtin_frexpl(__x, __exp); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    frexp(_Tp __x, int* __exp)
    { return __builtin_frexp(__x, __exp); }

  using ::ldexp;


  inline constexpr float
  ldexp(float __x, int __exp)
  { return __builtin_ldexpf(__x, __exp); }

  inline constexpr long double
  ldexp(long double __x, int __exp)
  { return __builtin_ldexpl(__x, __exp); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    ldexp(_Tp __x, int __exp)
    { return __builtin_ldexp(__x, __exp); }

  using ::log;


  inline constexpr float
  log(float __x)
  { return __builtin_logf(__x); }

  inline constexpr long double
  log(long double __x)
  { return __builtin_logl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    log(_Tp __x)
    { return __builtin_log(__x); }

  using ::log10;


  inline constexpr float
  log10(float __x)
  { return __builtin_log10f(__x); }

  inline constexpr long double
  log10(long double __x)
  { return __builtin_log10l(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    log10(_Tp __x)
    { return __builtin_log10(__x); }

  using ::modf;


  inline float
  modf(float __x, float* __iptr)
  { return __builtin_modff(__x, __iptr); }

  inline long double
  modf(long double __x, long double* __iptr)
  { return __builtin_modfl(__x, __iptr); }


  using ::pow;


  inline constexpr float
  pow(float __x, float __y)
  { return __builtin_powf(__x, __y); }

  inline constexpr long double
  pow(long double __x, long double __y)
  { return __builtin_powl(__x, __y); }
# 412 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\cmath" 3
  template<typename _Tp, typename _Up>
    inline constexpr
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
    }

  using ::sin;


  inline constexpr float
  sin(float __x)
  { return __builtin_sinf(__x); }

  inline constexpr long double
  sin(long double __x)
  { return __builtin_sinl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    sin(_Tp __x)
    { return __builtin_sin(__x); }

  using ::sinh;


  inline constexpr float
  sinh(float __x)
  { return __builtin_sinhf(__x); }

  inline constexpr long double
  sinh(long double __x)
  { return __builtin_sinhl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    sinh(_Tp __x)
    { return __builtin_sinh(__x); }

  using ::sqrt;


  inline constexpr float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }

  inline constexpr long double
  sqrt(long double __x)
  { return __builtin_sqrtl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    sqrt(_Tp __x)
    { return __builtin_sqrt(__x); }

  using ::tan;


  inline constexpr float
  tan(float __x)
  { return __builtin_tanf(__x); }

  inline constexpr long double
  tan(long double __x)
  { return __builtin_tanl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    tan(_Tp __x)
    { return __builtin_tan(__x); }

  using ::tanh;


  inline constexpr float
  tanh(float __x)
  { return __builtin_tanhf(__x); }

  inline constexpr long double
  tanh(long double __x)
  { return __builtin_tanhl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    tanh(_Tp __x)
    { return __builtin_tanh(__x); }
# 536 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\cmath" 3
  constexpr int
  fpclassify(float __x)
  { return __builtin_fpclassify(0x0100, (0x0100 | 0x0400), 0x0400,
    (0x0400 | 0x4000), 0x4000, __x); }

  constexpr int
  fpclassify(double __x)
  { return __builtin_fpclassify(0x0100, (0x0100 | 0x0400), 0x0400,
    (0x0400 | 0x4000), 0x4000, __x); }

  constexpr int
  fpclassify(long double __x)
  { return __builtin_fpclassify(0x0100, (0x0100 | 0x0400), 0x0400,
    (0x0400 | 0x4000), 0x4000, __x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              int>::__type
    fpclassify(_Tp __x)
    { return __x != 0 ? 0x0400 : 0x4000; }



  constexpr bool
  isfinite(float __x)
  { return __builtin_isfinite(__x); }

  constexpr bool
  isfinite(double __x)
  { return __builtin_isfinite(__x); }

  constexpr bool
  isfinite(long double __x)
  { return __builtin_isfinite(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    isfinite(_Tp __x)
    { return true; }



  constexpr bool
  isinf(float __x)
  { return __builtin_isinf(__x); }





  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }


  constexpr bool
  isinf(long double __x)
  { return __builtin_isinf(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    isinf(_Tp __x)
    { return false; }



  constexpr bool
  isnan(float __x)
  { return __builtin_isnan(__x); }





  constexpr bool
  isnan(double __x)
  { return __builtin_isnan(__x); }


  constexpr bool
  isnan(long double __x)
  { return __builtin_isnan(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    isnan(_Tp __x)
    { return false; }



  constexpr bool
  isnormal(float __x)
  { return __builtin_isnormal(__x); }

  constexpr bool
  isnormal(double __x)
  { return __builtin_isnormal(__x); }

  constexpr bool
  isnormal(long double __x)
  { return __builtin_isnormal(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    isnormal(_Tp __x)
    { return __x != 0 ? true : false; }




  constexpr bool
  signbit(float __x)
  { return __builtin_signbit(__x); }

  constexpr bool
  signbit(double __x)
  { return __builtin_signbit(__x); }

  constexpr bool
  signbit(long double __x)
  { return __builtin_signbit(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    signbit(_Tp __x)
    { return __x < 0 ? true : false; }



  constexpr bool
  isgreater(float __x, float __y)
  { return __builtin_isgreater(__x, __y); }

  constexpr bool
  isgreater(double __x, double __y)
  { return __builtin_isgreater(__x, __y); }

  constexpr bool
  isgreater(long double __x, long double __y)
  { return __builtin_isgreater(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isgreater(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isgreater(__type(__x), __type(__y));
    }



  constexpr bool
  isgreaterequal(float __x, float __y)
  { return __builtin_isgreaterequal(__x, __y); }

  constexpr bool
  isgreaterequal(double __x, double __y)
  { return __builtin_isgreaterequal(__x, __y); }

  constexpr bool
  isgreaterequal(long double __x, long double __y)
  { return __builtin_isgreaterequal(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isgreaterequal(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isgreaterequal(__type(__x), __type(__y));
    }



  constexpr bool
  isless(float __x, float __y)
  { return __builtin_isless(__x, __y); }

  constexpr bool
  isless(double __x, double __y)
  { return __builtin_isless(__x, __y); }

  constexpr bool
  isless(long double __x, long double __y)
  { return __builtin_isless(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isless(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isless(__type(__x), __type(__y));
    }



  constexpr bool
  islessequal(float __x, float __y)
  { return __builtin_islessequal(__x, __y); }

  constexpr bool
  islessequal(double __x, double __y)
  { return __builtin_islessequal(__x, __y); }

  constexpr bool
  islessequal(long double __x, long double __y)
  { return __builtin_islessequal(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    islessequal(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_islessequal(__type(__x), __type(__y));
    }



  constexpr bool
  islessgreater(float __x, float __y)
  { return __builtin_islessgreater(__x, __y); }

  constexpr bool
  islessgreater(double __x, double __y)
  { return __builtin_islessgreater(__x, __y); }

  constexpr bool
  islessgreater(long double __x, long double __y)
  { return __builtin_islessgreater(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    islessgreater(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_islessgreater(__type(__x), __type(__y));
    }



  constexpr bool
  isunordered(float __x, float __y)
  { return __builtin_isunordered(__x, __y); }

  constexpr bool
  isunordered(double __x, double __y)
  { return __builtin_isunordered(__x, __y); }

  constexpr bool
  isunordered(long double __x, long double __y)
  { return __builtin_isunordered(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isunordered(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isunordered(__type(__x), __type(__y));
    }
# 1065 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\cmath" 3
  using ::double_t;
  using ::float_t;


  using ::acosh;
  using ::acoshf;
  using ::acoshl;

  using ::asinh;
  using ::asinhf;
  using ::asinhl;

  using ::atanh;
  using ::atanhf;
  using ::atanhl;

  using ::cbrt;
  using ::cbrtf;
  using ::cbrtl;

  using ::copysign;
  using ::copysignf;
  using ::copysignl;

  using ::erf;
  using ::erff;
  using ::erfl;

  using ::erfc;
  using ::erfcf;
  using ::erfcl;

  using ::exp2;
  using ::exp2f;
  using ::exp2l;

  using ::expm1;
  using ::expm1f;
  using ::expm1l;

  using ::fdim;
  using ::fdimf;
  using ::fdiml;

  using ::fma;
  using ::fmaf;
  using ::fmal;

  using ::fmax;
  using ::fmaxf;
  using ::fmaxl;

  using ::fmin;
  using ::fminf;
  using ::fminl;

  using ::hypot;
  using ::hypotf;
  using ::hypotl;

  using ::ilogb;
  using ::ilogbf;
  using ::ilogbl;

  using ::lgamma;
  using ::lgammaf;
  using ::lgammal;


  using ::llrint;
  using ::llrintf;
  using ::llrintl;

  using ::llround;
  using ::llroundf;
  using ::llroundl;


  using ::log1p;
  using ::log1pf;
  using ::log1pl;

  using ::log2;
  using ::log2f;
  using ::log2l;

  using ::logb;
  using ::logbf;
  using ::logbl;

  using ::lrint;
  using ::lrintf;
  using ::lrintl;

  using ::lround;
  using ::lroundf;
  using ::lroundl;

  using ::nan;
  using ::nanf;
  using ::nanl;

  using ::nearbyint;
  using ::nearbyintf;
  using ::nearbyintl;

  using ::nextafter;
  using ::nextafterf;
  using ::nextafterl;

  using ::nexttoward;
  using ::nexttowardf;
  using ::nexttowardl;

  using ::remainder;
  using ::remainderf;
  using ::remainderl;

  using ::remquo;
  using ::remquof;
  using ::remquol;

  using ::rint;
  using ::rintf;
  using ::rintl;

  using ::round;
  using ::roundf;
  using ::roundl;

  using ::scalbln;
  using ::scalblnf;
  using ::scalblnl;

  using ::scalbn;
  using ::scalbnf;
  using ::scalbnl;

  using ::tgamma;
  using ::tgammaf;
  using ::tgammal;

  using ::trunc;
  using ::truncf;
  using ::truncl;



  constexpr float
  acosh(float __x)
  { return __builtin_acoshf(__x); }

  constexpr long double
  acosh(long double __x)
  { return __builtin_acoshl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    acosh(_Tp __x)
    { return __builtin_acosh(__x); }



  constexpr float
  asinh(float __x)
  { return __builtin_asinhf(__x); }

  constexpr long double
  asinh(long double __x)
  { return __builtin_asinhl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    asinh(_Tp __x)
    { return __builtin_asinh(__x); }



  constexpr float
  atanh(float __x)
  { return __builtin_atanhf(__x); }

  constexpr long double
  atanh(long double __x)
  { return __builtin_atanhl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    atanh(_Tp __x)
    { return __builtin_atanh(__x); }



  constexpr float
  cbrt(float __x)
  { return __builtin_cbrtf(__x); }

  constexpr long double
  cbrt(long double __x)
  { return __builtin_cbrtl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    cbrt(_Tp __x)
    { return __builtin_cbrt(__x); }



  constexpr float
  copysign(float __x, float __y)
  { return __builtin_copysignf(__x, __y); }

  constexpr long double
  copysign(long double __x, long double __y)
  { return __builtin_copysignl(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    copysign(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return copysign(__type(__x), __type(__y));
    }



  constexpr float
  erf(float __x)
  { return __builtin_erff(__x); }

  constexpr long double
  erf(long double __x)
  { return __builtin_erfl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    erf(_Tp __x)
    { return __builtin_erf(__x); }



  constexpr float
  erfc(float __x)
  { return __builtin_erfcf(__x); }

  constexpr long double
  erfc(long double __x)
  { return __builtin_erfcl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    erfc(_Tp __x)
    { return __builtin_erfc(__x); }



  constexpr float
  exp2(float __x)
  { return __builtin_exp2f(__x); }

  constexpr long double
  exp2(long double __x)
  { return __builtin_exp2l(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    exp2(_Tp __x)
    { return __builtin_exp2(__x); }



  constexpr float
  expm1(float __x)
  { return __builtin_expm1f(__x); }

  constexpr long double
  expm1(long double __x)
  { return __builtin_expm1l(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    expm1(_Tp __x)
    { return __builtin_expm1(__x); }



  constexpr float
  fdim(float __x, float __y)
  { return __builtin_fdimf(__x, __y); }

  constexpr long double
  fdim(long double __x, long double __y)
  { return __builtin_fdiml(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fdim(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fdim(__type(__x), __type(__y));
    }



  constexpr float
  fma(float __x, float __y, float __z)
  { return __builtin_fmaf(__x, __y, __z); }

  constexpr long double
  fma(long double __x, long double __y, long double __z)
  { return __builtin_fmal(__x, __y, __z); }



  template<typename _Tp, typename _Up, typename _Vp>
    constexpr typename __gnu_cxx::__promote_3<_Tp, _Up, _Vp>::__type
    fma(_Tp __x, _Up __y, _Vp __z)
    {
      typedef typename __gnu_cxx::__promote_3<_Tp, _Up, _Vp>::__type __type;
      return fma(__type(__x), __type(__y), __type(__z));
    }



  constexpr float
  fmax(float __x, float __y)
  { return __builtin_fmaxf(__x, __y); }

  constexpr long double
  fmax(long double __x, long double __y)
  { return __builtin_fmaxl(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fmax(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fmax(__type(__x), __type(__y));
    }



  constexpr float
  fmin(float __x, float __y)
  { return __builtin_fminf(__x, __y); }

  constexpr long double
  fmin(long double __x, long double __y)
  { return __builtin_fminl(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fmin(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fmin(__type(__x), __type(__y));
    }



  constexpr float
  hypot(float __x, float __y)
  { return __builtin_hypotf(__x, __y); }

  constexpr long double
  hypot(long double __x, long double __y)
  { return __builtin_hypotl(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    hypot(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return hypot(__type(__x), __type(__y));
    }



  constexpr int
  ilogb(float __x)
  { return __builtin_ilogbf(__x); }

  constexpr int
  ilogb(long double __x)
  { return __builtin_ilogbl(__x); }



  template<typename _Tp>
    constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    int>::__type
    ilogb(_Tp __x)
    { return __builtin_ilogb(__x); }



  constexpr float
  lgamma(float __x)
  { return __builtin_lgammaf(__x); }

  constexpr long double
  lgamma(long double __x)
  { return __builtin_lgammal(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    lgamma(_Tp __x)
    { return __builtin_lgamma(__x); }



  constexpr long long
  llrint(float __x)
  { return __builtin_llrintf(__x); }

  constexpr long long
  llrint(long double __x)
  { return __builtin_llrintl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              long long>::__type
    llrint(_Tp __x)
    { return __builtin_llrint(__x); }



  constexpr long long
  llround(float __x)
  { return __builtin_llroundf(__x); }

  constexpr long long
  llround(long double __x)
  { return __builtin_llroundl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              long long>::__type
    llround(_Tp __x)
    { return __builtin_llround(__x); }



  constexpr float
  log1p(float __x)
  { return __builtin_log1pf(__x); }

  constexpr long double
  log1p(long double __x)
  { return __builtin_log1pl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    log1p(_Tp __x)
    { return __builtin_log1p(__x); }




  constexpr float
  log2(float __x)
  { return __builtin_log2f(__x); }

  constexpr long double
  log2(long double __x)
  { return __builtin_log2l(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    log2(_Tp __x)
    { return __builtin_log2(__x); }



  constexpr float
  logb(float __x)
  { return __builtin_logbf(__x); }

  constexpr long double
  logb(long double __x)
  { return __builtin_logbl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    logb(_Tp __x)
    { return __builtin_logb(__x); }



  constexpr long
  lrint(float __x)
  { return __builtin_lrintf(__x); }

  constexpr long
  lrint(long double __x)
  { return __builtin_lrintl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              long>::__type
    lrint(_Tp __x)
    { return __builtin_lrint(__x); }



  constexpr long
  lround(float __x)
  { return __builtin_lroundf(__x); }

  constexpr long
  lround(long double __x)
  { return __builtin_lroundl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              long>::__type
    lround(_Tp __x)
    { return __builtin_lround(__x); }



  constexpr float
  nearbyint(float __x)
  { return __builtin_nearbyintf(__x); }

  constexpr long double
  nearbyint(long double __x)
  { return __builtin_nearbyintl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    nearbyint(_Tp __x)
    { return __builtin_nearbyint(__x); }



  constexpr float
  nextafter(float __x, float __y)
  { return __builtin_nextafterf(__x, __y); }

  constexpr long double
  nextafter(long double __x, long double __y)
  { return __builtin_nextafterl(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    nextafter(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return nextafter(__type(__x), __type(__y));
    }



  constexpr float
  nexttoward(float __x, long double __y)
  { return __builtin_nexttowardf(__x, __y); }

  constexpr long double
  nexttoward(long double __x, long double __y)
  { return __builtin_nexttowardl(__x, __y); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    nexttoward(_Tp __x, long double __y)
    { return __builtin_nexttoward(__x, __y); }



  constexpr float
  remainder(float __x, float __y)
  { return __builtin_remainderf(__x, __y); }

  constexpr long double
  remainder(long double __x, long double __y)
  { return __builtin_remainderl(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    remainder(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return remainder(__type(__x), __type(__y));
    }



  inline float
  remquo(float __x, float __y, int* __pquo)
  { return __builtin_remquof(__x, __y, __pquo); }

  inline long double
  remquo(long double __x, long double __y, int* __pquo)
  { return __builtin_remquol(__x, __y, __pquo); }



  template<typename _Tp, typename _Up>
    inline typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    remquo(_Tp __x, _Up __y, int* __pquo)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return remquo(__type(__x), __type(__y), __pquo);
    }



  constexpr float
  rint(float __x)
  { return __builtin_rintf(__x); }

  constexpr long double
  rint(long double __x)
  { return __builtin_rintl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    rint(_Tp __x)
    { return __builtin_rint(__x); }



  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }

  constexpr long double
  round(long double __x)
  { return __builtin_roundl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    round(_Tp __x)
    { return __builtin_round(__x); }



  constexpr float
  scalbln(float __x, long __ex)
  { return __builtin_scalblnf(__x, __ex); }

  constexpr long double
  scalbln(long double __x, long __ex)
  { return __builtin_scalblnl(__x, __ex); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    scalbln(_Tp __x, long __ex)
    { return __builtin_scalbln(__x, __ex); }



  constexpr float
  scalbn(float __x, int __ex)
  { return __builtin_scalbnf(__x, __ex); }

  constexpr long double
  scalbn(long double __x, int __ex)
  { return __builtin_scalbnl(__x, __ex); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    scalbn(_Tp __x, int __ex)
    { return __builtin_scalbn(__x, __ex); }



  constexpr float
  tgamma(float __x)
  { return __builtin_tgammaf(__x); }

  constexpr long double
  tgamma(long double __x)
  { return __builtin_tgammal(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    tgamma(_Tp __x)
    { return __builtin_tgamma(__x); }



  constexpr float
  trunc(float __x)
  { return __builtin_truncf(__x); }

  constexpr long double
  trunc(long double __x)
  { return __builtin_truncl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    trunc(_Tp __x)
    { return __builtin_trunc(__x); }
# 1889 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\cmath" 3
}





}
# 3 "lstm_hls/rnn.cpp" 2
# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\string.h" 1 3
# 21 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\string.h" 3
extern "C" {
# 45 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\string.h" 3
  __attribute__ ((__dllimport__)) void *__attribute__((__cdecl__)) _memccpy(void *_Dst,const void *_Src,int _Val,size_t _MaxCount);
                void *__attribute__((__cdecl__)) memchr(const void *_Buf ,int _Val,size_t _MaxCount);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _memicmp(const void *_Buf1,const void *_Buf2,size_t _Size);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _memicmp_l(const void *_Buf1,const void *_Buf2,size_t _Size,_locale_t _Locale);
  int __attribute__((__cdecl__)) memcmp(const void *_Buf1,const void *_Buf2,size_t _Size);
  void * __attribute__((__cdecl__)) memcpy(void * __restrict__ _Dst,const void * __restrict__ _Src,size_t _Size) ;
  __attribute__((dllimport)) errno_t __attribute__((__cdecl__)) memcpy_s (void *_dest,size_t _numberOfElements,const void *_src,size_t _count);
  void * __attribute__((__cdecl__)) mempcpy (void *_Dst, const void *_Src, size_t _Size);
  void * __attribute__((__cdecl__)) memset(void *_Dst,int _Val,size_t _Size);

  void * __attribute__((__cdecl__)) memccpy(void *_Dst,const void *_Src,int _Val,size_t _Size) ;
  int __attribute__((__cdecl__)) memicmp(const void *_Buf1,const void *_Buf2,size_t _Size) ;


  char * __attribute__((__cdecl__)) _strset(char *_Str,int _Val) ;
  char * __attribute__((__cdecl__)) _strset_l(char *_Str,int _Val,_locale_t _Locale) ;
  char * __attribute__((__cdecl__)) strcpy(char * __restrict__ _Dest,const char * __restrict__ _Source);
  char * __attribute__((__cdecl__)) strcat(char * __restrict__ _Dest,const char * __restrict__ _Source);
  int __attribute__((__cdecl__)) strcmp(const char *_Str1,const char *_Str2);
  size_t __attribute__((__cdecl__)) strlen(const char *_Str);
  size_t __attribute__((__cdecl__)) strnlen(const char *_Str,size_t _MaxCount);
  void *__attribute__((__cdecl__)) memmove(void *_Dst,const void *_Src,size_t _Size) ;
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _strdup(const char *_Src);
                char *__attribute__((__cdecl__)) strchr(const char *_Str,int _Val);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _stricmp(const char *_Str1,const char *_Str2);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _strcmpi(const char *_Str1,const char *_Str2);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _stricmp_l(const char *_Str1,const char *_Str2,_locale_t _Locale);
  int __attribute__((__cdecl__)) strcoll(const char *_Str1,const char *_Str2);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _strcoll_l(const char *_Str1,const char *_Str2,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _stricoll(const char *_Str1,const char *_Str2);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _stricoll_l(const char *_Str1,const char *_Str2,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _strncoll (const char *_Str1,const char *_Str2,size_t _MaxCount);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _strncoll_l(const char *_Str1,const char *_Str2,size_t _MaxCount,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _strnicoll (const char *_Str1,const char *_Str2,size_t _MaxCount);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _strnicoll_l(const char *_Str1,const char *_Str2,size_t _MaxCount,_locale_t _Locale);
  size_t __attribute__((__cdecl__)) strcspn(const char *_Str,const char *_Control);
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _strerror(const char *_ErrMsg) ;
  char *__attribute__((__cdecl__)) strerror(int) ;
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _strlwr(char *_String) ;
  char *strlwr_l(char *_String,_locale_t _Locale) ;
  char *__attribute__((__cdecl__)) strncat(char * __restrict__ _Dest,const char * __restrict__ _Source,size_t _Count) ;
  int __attribute__((__cdecl__)) strncmp(const char *_Str1,const char *_Str2,size_t _MaxCount);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _strnicmp(const char *_Str1,const char *_Str2,size_t _MaxCount);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _strnicmp_l(const char *_Str1,const char *_Str2,size_t _MaxCount,_locale_t _Locale);
  char *strncpy(char * __restrict__ _Dest,const char * __restrict__ _Source,size_t _Count) ;
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _strnset(char *_Str,int _Val,size_t _MaxCount) ;
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _strnset_l(char *str,int c,size_t count,_locale_t _Locale) ;
                char *__attribute__((__cdecl__)) strpbrk(const char *_Str,const char *_Control);
                char *__attribute__((__cdecl__)) strrchr(const char *_Str,int _Ch);
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _strrev(char *_Str);
  size_t __attribute__((__cdecl__)) strspn(const char *_Str,const char *_Control);
                char *__attribute__((__cdecl__)) strstr(const char *_Str,const char *_SubStr);
  char *__attribute__((__cdecl__)) strtok(char * __restrict__ _Str,const char * __restrict__ _Delim) ;


  char *strtok_r(char * __restrict__ _Str, const char * __restrict__ _Delim, char ** __restrict__ __last);

  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _strupr(char *_String) ;
  __attribute__ ((__dllimport__)) char *_strupr_l(char *_String,_locale_t _Locale) ;
  size_t __attribute__((__cdecl__)) strxfrm(char * __restrict__ _Dst,const char * __restrict__ _Src,size_t _MaxCount);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _strxfrm_l(char * __restrict__ _Dst,const char * __restrict__ _Src,size_t _MaxCount,_locale_t _Locale);


  char *__attribute__((__cdecl__)) strdup(const char *_Src) ;
  int __attribute__((__cdecl__)) strcmpi(const char *_Str1,const char *_Str2) ;
  int __attribute__((__cdecl__)) stricmp(const char *_Str1,const char *_Str2) ;
  char *__attribute__((__cdecl__)) strlwr(char *_Str) ;
  int __attribute__((__cdecl__)) strnicmp(const char *_Str1,const char *_Str,size_t _MaxCount) ;
  int __attribute__((__cdecl__)) strncasecmp (const char *, const char *, size_t);
  int __attribute__((__cdecl__)) strcasecmp (const char *, const char *);







  char *__attribute__((__cdecl__)) strnset(char *_Str,int _Val,size_t _MaxCount) ;
  char *__attribute__((__cdecl__)) strrev(char *_Str) ;
  char *__attribute__((__cdecl__)) strset(char *_Str,int _Val) ;
  char *__attribute__((__cdecl__)) strupr(char *_Str) ;
# 187 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\string.h" 3
}



# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\sec_api/string_s.h" 1 3








# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\string.h" 1 3
# 10 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\sec_api/string_s.h" 2 3
# 191 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\string.h" 2 3
# 4 "lstm_hls/rnn.cpp" 2
# 1 "lstm_hls/rnn.h" 1
# 11 "lstm_hls/rnn.h"
# 1 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\hls_stream.h" 1
# 15 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\hls_stream.h"
# 1 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/hls_stream_39.h" 1
# 26 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/hls_stream_39.h"
namespace hls {
# 52 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/hls_stream_39.h"
template<typename __STREAM_T__, int DEPTH=0>
class stream;

template<typename __STREAM_T__>
class stream<__STREAM_T__, 0>
{
  public:
    using value_type = __STREAM_T__;

    inline __attribute__((always_inline)) __attribute__((nodebug)) stream() {
      __fpga_set_stream_depth(&this->V, 0);
    }

    inline __attribute__((always_inline)) __attribute__((nodebug)) stream(const char* name) {
      (void)(name);
      __fpga_set_stream_depth(&this->V, 0);
    }


  private:
    inline __attribute__((always_inline)) __attribute__((nodebug)) stream(const stream< __STREAM_T__ >& chn):V(chn.V) {
    }

    inline __attribute__((always_inline)) __attribute__((nodebug)) stream& operator= (const stream< __STREAM_T__ >& chn) {
        V = chn.V;
        return *this;
    }

  public:

    inline __attribute__((always_inline)) __attribute__((nodebug)) void operator >> (__STREAM_T__& rdata) {
        read(rdata);
    }

    inline __attribute__((always_inline)) __attribute__((nodebug)) void operator << (const __STREAM_T__& wdata) {
        write(wdata);
    }


  public:

    inline __attribute__((always_inline)) __attribute__((nodebug)) bool empty() const {
        return !__fpga_fifo_not_empty(&V);
    }

    inline __attribute__((always_inline)) __attribute__((nodebug)) bool full() const {
        return !__fpga_fifo_not_full(&V);
    }


    inline __attribute__((always_inline)) __attribute__((nodebug)) void read(__STREAM_T__& dout) {
        __fpga_fifo_pop(&V, &dout);
    }


    inline __attribute__((noinline)) __attribute__((nodebug)) bool read_dep(__STREAM_T__& dout, volatile bool flag) {
        __fpga_fifo_pop(&V, &dout);
        return flag;
    }

    inline __attribute__((always_inline)) __attribute__((nodebug)) __STREAM_T__ read() {
        __STREAM_T__ tmp;
        read(tmp);
        return tmp;
    }


    inline __attribute__((always_inline)) __attribute__((nodebug)) bool read_nb(__STREAM_T__& dout) {
        __STREAM_T__ tmp;

        if (__fpga_fifo_nb_pop(&V, &tmp)) {
            dout = tmp;
            return true;
        } else {
            return false;
        }
    }


    inline __attribute__((always_inline)) __attribute__((nodebug)) void write(const __STREAM_T__& din) {
        __fpga_fifo_push(&V, &din);
    }


    inline __attribute__((noinline)) __attribute__((nodebug)) bool write_dep(const __STREAM_T__& din, volatile bool flag) {
        __fpga_fifo_push(&V, &din);
        return flag;
    }


    inline __attribute__((always_inline)) __attribute__((nodebug)) bool write_nb(const __STREAM_T__& din) {
        return __fpga_fifo_nb_push(&V, &din);
    }


    inline __attribute__((always_inline)) __attribute__((nodebug)) unsigned size() const {
        return __fpga_fifo_size(&V);
    }


    inline __attribute__((always_inline)) __attribute__((nodebug)) unsigned capacity() const {
        return __fpga_fifo_capacity(&V);
    }


    void set_name(const char* name) { (void)(name); }

  public:
    __STREAM_T__ V __attribute__((no_ctor));
};

template<typename __STREAM_T__, int DEPTH>
class stream : public stream<__STREAM_T__, 0> {
  public:
    inline __attribute__((always_inline)) __attribute__((nodebug)) stream() {
      __fpga_set_stream_depth(&this->V, DEPTH);
    }

    inline __attribute__((always_inline)) __attribute__((nodebug)) stream(const char* name) {
      (void)(name);
      __fpga_set_stream_depth(&this->V, DEPTH);
    }
};
}
# 16 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\hls_stream.h" 2
# 12 "lstm_hls/rnn.h" 2
# 1 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\ap_int.h" 1
# 10 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\ap_int.h"
# 1 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_common.h" 1
# 41 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_common.h"
# 1 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_decl.h" 1
# 54 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_decl.h"
enum ap_q_mode {
  AP_RND,
  AP_RND_ZERO,
  AP_RND_MIN_INF,
  AP_RND_INF,
  AP_RND_CONV,
  AP_TRN,
  AP_TRN_ZERO,
};
# 76 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_decl.h"
enum ap_o_mode {
  AP_SAT,
  AP_SAT_ZERO,
  AP_SAT_SYM,
  AP_WRAP,
  AP_WRAP_SM,
};
# 133 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_decl.h"
template <int _AP_W, bool _AP_S>
struct ap_int_base;

template <int _AP_W>
struct ap_int;

template <int _AP_W>
struct ap_uint;

template <int _AP_W, bool _AP_S>
struct ap_range_ref;

template <int _AP_W, bool _AP_S>
struct ap_bit_ref;

template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2>
struct ap_concat_ref;

template <int _AP_W, int _AP_I, bool _AP_S = true, ap_q_mode _AP_Q = AP_TRN,
          ap_o_mode _AP_O = AP_WRAP, int _AP_N = 0>
struct ap_fixed_base;

template <int _AP_W, int _AP_I, ap_q_mode _AP_Q = AP_TRN,
          ap_o_mode _AP_O = AP_WRAP, int _AP_N = 0>
struct ap_fixed;

template <int _AP_W, int _AP_I, ap_q_mode _AP_Q = AP_TRN,
          ap_o_mode _AP_O = AP_WRAP, int _AP_N = 0>
struct ap_ufixed;

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
struct af_range_ref;

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
struct af_bit_ref;


enum BaseMode { AP_BIN = 2, AP_OCT = 8, AP_DEC = 10, AP_HEX = 16 };
# 187 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_decl.h"
typedef signed long long ap_slong;
typedef unsigned long long ap_ulong;


enum {
  _AP_SIZE_char = 8,
  _AP_SIZE_short = sizeof(short) * 8,
  _AP_SIZE_int = sizeof(int) * 8,
  _AP_SIZE_long = sizeof(long) * 8,
  _AP_SIZE_ap_slong = sizeof(ap_slong) * 8
};
# 42 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_common.h" 2
# 164 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_common.h"
enum { CHAR_IS_SIGNED = (char)-1 < 0 };


namespace _ap_type {
template <typename _Tp>
struct is_signed {
  static const bool value = _Tp(-1) < _Tp(1);
};

template <typename _Tp>
struct is_integral {
  static const bool value = false;
};





template <> struct is_integral<bool> { static const bool value = true; };
template <> struct is_integral<char> { static const bool value = true; };
template <> struct is_integral<signed char> { static const bool value = true; };
template <> struct is_integral<unsigned char> { static const bool value = true; };
template <> struct is_integral<short> { static const bool value = true; };
template <> struct is_integral<unsigned short> { static const bool value = true; };
template <> struct is_integral<int> { static const bool value = true; };
template <> struct is_integral<unsigned int> { static const bool value = true; };
template <> struct is_integral<long> { static const bool value = true; };
template <> struct is_integral<unsigned long> { static const bool value = true; };
template <> struct is_integral<ap_slong> { static const bool value = true; };
template <> struct is_integral<ap_ulong> { static const bool value = true; };


template <bool, typename _Tp = void>
struct enable_if {};

template <typename _Tp>
struct enable_if<true, _Tp> {
  typedef _Tp type;
};

template <typename _Tp>
struct remove_const {
  typedef _Tp type;
};

template <typename _Tp>
struct remove_const<_Tp const> {
  typedef _Tp type;
};
}
# 507 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_common.h"
template <int _AP_N, bool _AP_S>
struct ssdm_int;

template <int _AP_N>
struct ssdm_int<_AP_N, true> {
  typedef int __attribute__((bitwidth(_AP_N))) DataType;
  int V __attribute__((bitwidth(_AP_N)));
  inline __attribute__((always_inline)) ssdm_int<_AP_N, true>(){};
                inline __attribute__((always_inline)) ssdm_int<_AP_N, true>(int o __attribute__((bitwidth(_AP_N)))):V(o){};
};

template <int _AP_N>
struct ssdm_int<_AP_N, false> {
  typedef unsigned __attribute__((bitwidth(_AP_N))) DataType;
  unsigned V __attribute__((bitwidth(_AP_N)));
  inline __attribute__((always_inline)) ssdm_int<_AP_N, false>(){};
                inline __attribute__((always_inline)) ssdm_int<_AP_N, false>(unsigned o __attribute__((bitwidth(_AP_N)))):V(o){};
};
# 575 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_common.h"
# 1 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/autopilot_ssdm_bits.h" 1
# 576 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_common.h" 2

extern "C" void _ssdm_string2bits(...);
# 587 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_common.h"
static inline unsigned char guess_radix(const char* s) {
  unsigned char rd = 10;
  const char* p = s;

  if (p[0] == '-' || p[0] == '+') ++p;

  if (p[0] == '0') {
    if (p[1] == 'b' || p[1] == 'B') {
      rd = 2;
    } else if (p[1] == 'o' || p[1] == 'O') {
      rd = 8;
    } else if (p[1] == 'x' || p[1] == 'X') {
      rd = 16;
    } else if (p[1] == 'd' || p[1] == 'D') {
      rd = 10;
    }
  }
  return rd;
}







typedef __fp16 half;
# 718 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_common.h"
inline __attribute__((always_inline)) ap_ulong doubleToRawBits(double pf) {
  union {
    ap_ulong __L;
    double __D;
  } LD;
  LD.__D = pf;
  return LD.__L;
}

inline __attribute__((always_inline)) unsigned int floatToRawBits(float pf) {
  union {
    unsigned int __L;
    float __D;
  } LD;
  LD.__D = pf;
  return LD.__L;
}

inline __attribute__((always_inline)) unsigned short halfToRawBits(half pf) {

  union {
    unsigned short __L;
    half __D;
  } LD;
  LD.__D = pf;
  return LD.__L;



}


inline __attribute__((always_inline)) double rawBitsToDouble(ap_ulong pi) {
  union {
    ap_ulong __L;
    double __D;
  } LD;
  LD.__L = pi;
  return LD.__D;
}


inline __attribute__((always_inline)) float rawBitsToFloat(unsigned long pi) {
  union {
    unsigned int __L;
    float __D;
  } LD;
  LD.__L = pi;
  return LD.__D;
}


inline __attribute__((always_inline)) half rawBitsToHalf(unsigned short pi) {

  union {
    unsigned short __L;
    half __D;
  } LD;
  LD.__L = pi;
  return LD.__D;






}
# 11 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\ap_int.h" 2
# 1 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_int_base.h" 1
# 40 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_int_base.h"
template <int _AP_N, bool _AP_S>
struct retval;


template <int _AP_N>
struct retval<_AP_N, true> {
  typedef ap_slong Type;
};

template <int _AP_N>
struct retval<_AP_N, false> {
  typedef ap_ulong Type;
};


template <>
struct retval<1, true> {
  typedef signed char Type;
};

template <>
struct retval<1, false> {
  typedef unsigned char Type;
};


template <>
struct retval<2, true> {
  typedef short Type;
};

template <>
struct retval<2, false> {
  typedef unsigned short Type;
};


template <>
struct retval<3, true> {
  typedef long Type;
};

template <>
struct retval<3, false> {
  typedef unsigned long Type;
};

template <>
struct retval<4, true> {
  typedef long Type;
};

template <>
struct retval<4, false> {
  typedef unsigned long Type;
};




template <int _AP_W2, bool _AP_S2>
struct _ap_int_factory;
template <int _AP_W2>
struct _ap_int_factory<_AP_W2,true> { typedef ap_int<_AP_W2> type; };
template <int _AP_W2>
struct _ap_int_factory<_AP_W2,false> { typedef ap_uint<_AP_W2> type; };

template <int _AP_W, bool _AP_S>
struct ap_int_base : public ssdm_int<_AP_W, _AP_S> {
 private:
                inline __attribute__((always_inline)) __attribute__((nodebug)) int countLeadingOnes() const {




    return 0;

  }

 public:
  typedef ssdm_int<_AP_W, _AP_S> Base;







  typedef typename retval<(((_AP_W + 7) / 8) > (8) ? ((_AP_W + 7) / 8) : (8)), _AP_S>::Type RetType;

  static const int width = _AP_W;
  static const bool sign_flag = _AP_S;

  template <int _AP_W2, bool _AP_S2>
  struct RType {
    enum {
      mult_w = _AP_W + _AP_W2,
      mult_s = _AP_S || _AP_S2,
      plus_w =
          ((_AP_W + (_AP_S2 && !_AP_S)) > (_AP_W2 + (_AP_S && !_AP_S2)) ? (_AP_W + (_AP_S2 && !_AP_S)) : (_AP_W2 + (_AP_S && !_AP_S2))) + 1,
      plus_s = _AP_S || _AP_S2,
      minus_w =
          ((_AP_W + (_AP_S2 && !_AP_S)) > (_AP_W2 + (_AP_S && !_AP_S2)) ? (_AP_W + (_AP_S2 && !_AP_S)) : (_AP_W2 + (_AP_S && !_AP_S2))) + 1,
      minus_s = true,
      div_w = _AP_W + _AP_S2,
      div_s = _AP_S || _AP_S2,
      mod_w = ((_AP_W) < (_AP_W2 + (!_AP_S2 && _AP_S)) ? (_AP_W) : (_AP_W2 + (!_AP_S2 && _AP_S))),
      mod_s = _AP_S,
      logic_w = ((_AP_W + (_AP_S2 && !_AP_S)) > (_AP_W2 + (_AP_S && !_AP_S2)) ? (_AP_W + (_AP_S2 && !_AP_S)) : (_AP_W2 + (_AP_S && !_AP_S2))),
      logic_s = _AP_S || _AP_S2
    };


    typedef ap_int_base<mult_w, mult_s> mult_base;
    typedef ap_int_base<plus_w, plus_s> plus_base;
    typedef ap_int_base<minus_w, minus_s> minus_base;
    typedef ap_int_base<logic_w, logic_s> logic_base;
    typedef ap_int_base<div_w, div_s> div_base;
    typedef ap_int_base<mod_w, mod_s> mod_base;
    typedef ap_int_base<_AP_W, _AP_S> arg1_base;

    typedef typename _ap_int_factory<mult_w, mult_s>::type mult;
    typedef typename _ap_int_factory<plus_w, plus_s>::type plus;
    typedef typename _ap_int_factory<minus_w, minus_s>::type minus;
    typedef typename _ap_int_factory<logic_w, logic_s>::type logic;
    typedef typename _ap_int_factory<div_w, div_s>::type div;
    typedef typename _ap_int_factory<mod_w, mod_s>::type mod;
    typedef typename _ap_int_factory<_AP_W, _AP_S>::type arg1;
    typedef bool reduce;
  };





  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base() {





  }


  template <int _AP_W2, bool _AP_S2>
                inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base(const ap_int_base<_AP_W2, _AP_S2>& op):Base(op.V) {
    Base::V = op.V;
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base(const volatile ap_int_base<_AP_W2, _AP_S2>& op) {
    Base::V = op.V;
  }
# 208 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_int_base.h"
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base(const bool op):Base(op) { Base::V = op; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base(const char op):Base(op) { Base::V = op; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base(const signed char op):Base(op) { Base::V = op; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base(const unsigned char op):Base(op) { Base::V = op; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base(const short op):Base(op) { Base::V = op; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base(const unsigned short op):Base(op) { Base::V = op; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base(const int op):Base(op) { Base::V = op; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base(const unsigned int op):Base(op) { Base::V = op; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base(const long op):Base(op) { Base::V = op; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base(const unsigned long op):Base(op) { Base::V = op; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base(const ap_slong op):Base(op) { Base::V = op; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base(const ap_ulong op):Base(op) { Base::V = op; }




  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base(half op) {
    ap_int_base<_AP_W, _AP_S> t((float)op);
    Base::V = t.V;
  }


  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base(float op) {
    const int BITS = 23 + 8 + 1;
    ap_int_base<BITS, false> reg;
    reg.V = floatToRawBits(op);
    bool is_neg = ({ typeof(reg.V) __Val2__ = reg.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), BITS - 1); __Result__; });

    ap_int_base<8 + 1, true> exp = 0;
    exp.V = ({ typename _ap_type::remove_const<typeof(reg.V)>::type __Result__ = 0; typeof(reg.V) __Val2__ = reg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 23, BITS - 2); __Result__; });
    exp = exp - ((1 << (8 - 1)) - 1);

    ap_int_base<23 + 2, true> man;
    man.V = ({ typename _ap_type::remove_const<typeof(reg.V)>::type __Result__ = 0; typeof(reg.V) __Val2__ = reg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, 23 - 1); __Result__; });

    (static_cast<void>(0));


    man.V = ({ typename _ap_type::remove_const<typeof(man.V)>::type __Result__ = 0; typeof(man.V) __Val2__ = man.V; typeof(1) __Repl2__ = !!1; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 23, 23); __Result__; });


    if ((reg.V & 0x7ffffffful) == 0) {
      Base::V = 0;
    } else {
      int sh_amt = 23 - exp.V;
      if (sh_amt == 0) {
        Base::V = man.V;
      } else if (sh_amt > 0) {
        if (sh_amt < 23 + 2) {
          ap_int_base<23 + 2, true> man_shift;
          man_shift.V = (man.V >> sh_amt);






          Base::V = man_shift.V;
        } else {



            Base::V = 0;
        }
      } else {
        sh_amt = -sh_amt;
        if (sh_amt < _AP_W) {
          Base::V = man.V;
          Base::V <<= sh_amt;
        } else {



          Base::V = 0;
        }
      }
    }
    if (is_neg) *this = -(*this);
  }


  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base(double op) {
    const int BITS = 52 + 11 + 1;
    ap_int_base<BITS, false> reg;
    reg.V = doubleToRawBits(op);
    bool is_neg = ({ typeof(reg.V) __Val2__ = reg.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), BITS - 1); __Result__; });

    ap_int_base<11 + 1, true> exp, bias = ((1 << (11 - 1)) - 1);
    exp.V = ({ typename _ap_type::remove_const<typeof(reg.V)>::type __Result__ = 0; typeof(reg.V) __Val2__ = reg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 52, BITS - 2); __Result__; });
    exp = exp - bias;

    ap_int_base<52 + 2, true> man;
    man.V = ({ typename _ap_type::remove_const<typeof(reg.V)>::type __Result__ = 0; typeof(reg.V) __Val2__ = reg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, 52 - 1); __Result__; });

    (static_cast<void>(0));


    man.V = ({ typename _ap_type::remove_const<typeof(man.V)>::type __Result__ = 0; typeof(man.V) __Val2__ = man.V; typeof(1) __Repl2__ = !!1; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 52, 52); __Result__; });


    if ((reg.V & 0x7fffffffffffffffull) == 0) {
      Base::V = 0;
    } else {
      int sh_amt = 52 - exp.V;
      if (sh_amt == 0) {
        Base::V = man.V;
      } else if (sh_amt > 0) {
        if (sh_amt < 52 + 2) {
          ap_int_base<23 + 2, true> man_shift;
          man_shift.V = (man.V >> sh_amt);






          Base::V = man_shift.V;
        } else {



           Base::V = 0;
        }
      } else {
        sh_amt = -sh_amt;
        if (sh_amt < _AP_W) {
          Base::V = man.V;
          Base::V <<= sh_amt;
        } else {



          Base::V = 0;
        }
      }
    }
    if (is_neg) *this = -(*this);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    op.checkOverflowCsimFix(_AP_W, _AP_S);
    Base::V = op.to_ap_int_base().V;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base(const ap_range_ref<_AP_W2, _AP_S2>& ref) {
    Base::V = (ref.get()).V;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base(const ap_bit_ref<_AP_W2, _AP_S2>& ref) {
    Base::V = ref.operator bool();
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& ref) {
    const ap_int_base<ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>::_AP_WR,
                      false>
        tmp = ref.get();
    Base::V = tmp.V;
  }
# 387 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_int_base.h"
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base(const char* s) {
    typeof(Base::V) t;
    _ssdm_string2bits((void*)(&t), (const char*)(s), 10, _AP_W, _AP_S,
                      AP_TRN, AP_WRAP, 0, true);
    Base::V = t;
  }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base(const char* s, signed char rd) {
    typeof(Base::V) t;
    _ssdm_string2bits((void*)(&t), (const char*)(s), rd, _AP_W, _AP_S,
                      AP_TRN, AP_WRAP, 0, true);
    Base::V = t;
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    Base::V = (val.get()).V;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    Base::V = val.operator bool();
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base read() volatile {

    ap_int_base ret;
    ret.V = Base::V;
    return ret;
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) void write(const ap_int_base<_AP_W, _AP_S>& op2) volatile {

    *((volatile typename Base::DataType *)(&(Base::V))) = op2.V;
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) void operator=(
      const volatile ap_int_base<_AP_W2, _AP_S2>& op2) volatile {
    *((volatile typename Base::DataType *)(&(Base::V))) = op2.V;
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) void operator=(
      const volatile ap_int_base<_AP_W, _AP_S>& op2) volatile {
    *((volatile typename Base::DataType *)(&(Base::V))) = op2.V;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) void operator=(const ap_int_base<_AP_W2, _AP_S2>& op2) volatile {
    *((volatile typename Base::DataType *)(&(Base::V))) = op2.V;
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) void operator=(const ap_int_base<_AP_W, _AP_S>& op2) volatile {
    *((volatile typename Base::DataType *)(&(Base::V))) = op2.V;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator=(
      const volatile ap_int_base<_AP_W2, _AP_S2>& op2) {
    Base::V = op2.V;
    return *this;
  }

  template <int _AP_W2, bool _AP_S2>
                inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator=(const ap_int_base<_AP_W2, _AP_S2>& op2) {
    Base::V = op2.V;
    return *this;
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator=(const volatile ap_int_base<_AP_W, _AP_S>& op2) {
    Base::V = op2.V;
    return *this;
  }


  ap_int_base& operator=(const ap_int_base<_AP_W, _AP_S>& op2) = default;
# 481 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_int_base.h"
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator=(bool op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator=(char op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator=(signed char op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator=(unsigned char op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator=(short op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator=(unsigned short op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator=(int op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator=(unsigned int op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator=(long op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator=(unsigned long op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator=(ap_slong op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator=(ap_ulong op) { Base::V = op; return *this; }



  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator=(const ap_bit_ref<_AP_W2, _AP_S2>& op2) {
    Base::V = (bool)op2;
    return *this;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    Base::V = (ap_int_base<_AP_W2, false>(op2)).V;
    return *this;
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator=(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& op2) {
    Base::V = op2.get().V;
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    Base::V = op.to_ap_int_base().V;
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    Base::V = (bool)op;
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    Base::V = ((const ap_int_base<_AP_W2, false>)(op)).V;
    return *this;
  }





                inline __attribute__((always_inline)) __attribute__((nodebug)) operator RetType() const { return (RetType)(Base::V); }




                inline __attribute__((always_inline)) __attribute__((nodebug)) bool to_bool() const { return (bool)(Base::V); }
                inline __attribute__((always_inline)) __attribute__((nodebug)) char to_char() const { return (char)(Base::V); }
                inline __attribute__((always_inline)) __attribute__((nodebug)) signed char to_schar() const { return (signed char)(Base::V); }
                inline __attribute__((always_inline)) __attribute__((nodebug)) unsigned char to_uchar() const { return (unsigned char)(Base::V); }
                inline __attribute__((always_inline)) __attribute__((nodebug)) short to_short() const { return (short)(Base::V); }
                inline __attribute__((always_inline)) __attribute__((nodebug)) unsigned short to_ushort() const { return (unsigned short)(Base::V); }
                inline __attribute__((always_inline)) __attribute__((nodebug)) int to_int() const { return (int)(Base::V); }
                inline __attribute__((always_inline)) __attribute__((nodebug)) unsigned to_uint() const { return (unsigned)(Base::V); }
                inline __attribute__((always_inline)) __attribute__((nodebug)) long to_long() const { return (long)(Base::V); }
                inline __attribute__((always_inline)) __attribute__((nodebug)) unsigned long to_ulong() const { return (unsigned long)(Base::V); }
                inline __attribute__((always_inline)) __attribute__((nodebug)) ap_slong to_int64() const { return (ap_slong)(Base::V); }
                inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ulong to_uint64() const { return (ap_ulong)(Base::V); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) half to_half() const { return (float)(Base::V); }
                inline __attribute__((always_inline)) __attribute__((nodebug)) float to_float() const { return (float)(Base::V); }
                inline __attribute__((always_inline)) __attribute__((nodebug)) double to_double() const { return (double)(Base::V); }
# 586 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_int_base.h"
  inline __attribute__((always_inline)) __attribute__((nodebug)) int length() const volatile { return _AP_W; }
                inline __attribute__((always_inline)) __attribute__((nodebug)) int length() const { return _AP_W; }


                inline __attribute__((always_inline)) __attribute__((nodebug)) bool iszero() const { return Base::V == 0; }


                inline __attribute__((always_inline)) __attribute__((nodebug)) bool is_zero() const { return Base::V == 0; }


                      inline __attribute__((always_inline)) __attribute__((nodebug)) bool sign() const {
    if (_AP_S &&
        ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; }))
      return true;
    else
      return false;
  }


  inline __attribute__((always_inline)) __attribute__((nodebug)) void clear(int i) {
                                                           ;
    Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(0) __Repl2__ = !!0; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
  }


  inline __attribute__((always_inline)) __attribute__((nodebug)) void invert(int i) {
                                                           ;
    bool val = ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
    if (val)
      Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(0) __Repl2__ = !!0; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
    else
      Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(1) __Repl2__ = !!1; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) bool test(int i) const {
                                                           ;
    return ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
  }


                inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& get() { return *this; }


  inline __attribute__((always_inline)) __attribute__((nodebug)) void set(int i) {
                                                           ;
    Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(1) __Repl2__ = !!1; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
  }


  inline __attribute__((always_inline)) __attribute__((nodebug)) void set(int i, bool v) {
                                                           ;
    Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(v) __Repl2__ = !!v; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
  }



  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& lrotate(int n) {
                                                              ;


    typeof(Base::V) l_p = Base::V << n;
    typeof(Base::V) r_p = Base::V >> (_AP_W - n);
    Base::V = l_p | r_p;



    return *this;
  }



  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& rrotate(int n) {
                                                              ;


    typeof(Base::V) l_p = Base::V << (_AP_W - n);
    typeof(Base::V) r_p = Base::V >> n;
    Base::V = l_p | r_p;



    return *this;
  }



  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& reverse() {
    Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W - 1, 0); __Result__; });
    return *this;
  }


  inline __attribute__((always_inline)) __attribute__((nodebug)) void set_bit(int i, bool v) {
    Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(v) __Repl2__ = !!v; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
  }


  inline __attribute__((always_inline)) __attribute__((nodebug)) bool get_bit(int i) const {
    return (bool)({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
  }


  inline __attribute__((always_inline)) __attribute__((nodebug)) void b_not() { Base::V = ~Base::V; }

  template<typename T>
                inline __attribute__((always_inline)) __attribute__((nodebug)) void checkOverflowBaseC(T val) {
# 757 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_int_base.h"
    (void)val;

    return;
  }

                inline __attribute__((always_inline)) __attribute__((nodebug)) bool checkOverflowCsim(int _ap_w2, bool _ap_s2,
          bool print = true) const {
# 807 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_int_base.h"
      (void)_ap_w2;
      (void)_ap_s2;
      (void)print;

      return 0;
  }
# 841 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_int_base.h"
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator *=(const ap_int_base<_AP_W2, _AP_S2>& op2) { Base::V *= op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator +=(const ap_int_base<_AP_W2, _AP_S2>& op2) { Base::V += op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator -=(const ap_int_base<_AP_W2, _AP_S2>& op2) { Base::V -= op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator /=(const ap_int_base<_AP_W2, _AP_S2>& op2) { Base::V /= op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator %=(const ap_int_base<_AP_W2, _AP_S2>& op2) { Base::V %= op2.V; return *this; }
# 859 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_int_base.h"
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator &=(const ap_int_base<_AP_W2, _AP_S2>& op2) { (static_cast<void>(0)); Base::V &= op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator |=(const ap_int_base<_AP_W2, _AP_S2>& op2) { (static_cast<void>(0)); Base::V |= op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator ^=(const ap_int_base<_AP_W2, _AP_S2>& op2) { (static_cast<void>(0)); Base::V ^= op2.V; return *this; }





  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator++() {
    operator+=((ap_int_base<1, false>)1);
    return *this;
  }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator--() {
    operator-=((ap_int_base<1, false>)1);
    return *this;
  }




  inline __attribute__((always_inline)) __attribute__((nodebug)) const typename RType<_AP_W,_AP_S>::arg1 operator++(int) {
    ap_int_base t = *this;
    operator+=((ap_int_base<1, false>)1);
    return t;
  }
  inline __attribute__((always_inline)) __attribute__((nodebug)) const typename RType<_AP_W,_AP_S>::arg1 operator--(int) {
    ap_int_base t = *this;
    operator-=((ap_int_base<1, false>)1);
    return t;
  }




                inline __attribute__((always_inline)) __attribute__((nodebug)) typename RType<_AP_W,_AP_S>::arg1 operator+() const { return *this; }


                inline __attribute__((always_inline)) __attribute__((nodebug)) typename RType<1, false>::minus operator-() const {
    return ap_int_base<1, false>(0) - *this;
  }




                inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator!() const { return Base::V == 0; }





                inline __attribute__((always_inline)) __attribute__((nodebug)) typename RType<_AP_W,_AP_S>::arg1 operator~() const {
    ap_int_base<_AP_W, _AP_S> r(0);
    r.V = ~Base::V;
    return r;
  }




  template <int _AP_W2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) typename RType<_AP_W,_AP_S>::arg1 operator<<(const ap_int_base<_AP_W2, true>& op2) const {
    bool isNeg = ({ typeof(op2.V) __Val2__ = op2.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W2 - 1); __Result__; });
    ap_int_base<_AP_W2, false> sh = op2;
    if (isNeg) {
      sh = -op2;
      return operator>>(sh);
    } else
      return operator<<(sh);
  }

  template <int _AP_W2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) typename RType<_AP_W,_AP_S>::arg1 operator<<(const ap_int_base<_AP_W2, false>& op2) const {
    ap_int_base r(0);
    r.V = Base::V << op2.to_uint();
    return r;
  }

  template <int _AP_W2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) typename RType<_AP_W,_AP_S>::arg1 operator>>(const ap_int_base<_AP_W2, true>& op2) const {
    bool isNeg = ({ typeof(op2.V) __Val2__ = op2.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W2 - 1); __Result__; });
    ap_int_base<_AP_W2, false> sh = op2;
    if (isNeg) {
      sh = -op2;
      return operator<<(sh);
    }
    return operator>>(sh);
  }

  template <int _AP_W2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) typename RType<_AP_W,_AP_S>::arg1 operator>>(const ap_int_base<_AP_W2, false>& op2) const {
    ap_int_base r(0);
    r.V = Base::V >> op2.to_uint();
    return r;
  }
# 970 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_int_base.h"
  template <int _AP_W2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator<<=(const ap_int_base<_AP_W2, true>& op2) {
    bool isNeg = ({ typeof(op2.V) __Val2__ = op2.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W2 - 1); __Result__; });
    ap_int_base<_AP_W2, false> sh = op2;
    if (isNeg) {
      sh = -op2;
      return operator>>=(sh);
    } else
      return operator<<=(sh);
  }

  template <int _AP_W2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator<<=(const ap_int_base<_AP_W2, false>& op2) {
    Base::V <<= op2.to_uint();
    return *this;
  }

  template <int _AP_W2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator>>=(const ap_int_base<_AP_W2, true>& op2) {
    bool isNeg = ({ typeof(op2.V) __Val2__ = op2.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W2 - 1); __Result__; });
    ap_int_base<_AP_W2, false> sh = op2;
    if (isNeg) {
      sh = -op2;
      return operator<<=(sh);
    }
    return operator>>=(sh);
  }

  template <int _AP_W2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator>>=(const ap_int_base<_AP_W2, false>& op2) {
    Base::V >>= op2.to_uint();
    return *this;
  }
# 1019 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_int_base.h"
  template <int _AP_W2, bool _AP_S2>
                inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator==(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return Base::V == op2.V;
  }
  template <int _AP_W2, bool _AP_S2>
                inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator!=(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return !(Base::V == op2.V);
  }
  template <int _AP_W2, bool _AP_S2>
                inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator<(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return Base::V < op2.V;
  }
  template <int _AP_W2, bool _AP_S2>
                inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator>=(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return Base::V >= op2.V;
  }
  template <int _AP_W2, bool _AP_S2>
                inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator>(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return Base::V > op2.V;
  }
  template <int _AP_W2, bool _AP_S2>
                inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator<=(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return Base::V <= op2.V;
  }




  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W, _AP_S> range(int Hi, int Lo) {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return ap_range_ref<_AP_W, _AP_S>(this, Hi, Lo);
  }


  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W, _AP_S> range(int Hi, int Lo) const {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return ap_range_ref<_AP_W, _AP_S>(const_cast<ap_int_base*>(this), Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W, _AP_S> range(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W, _AP_S> range(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) const {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W, _AP_S> range() {
    return this->range(_AP_W - 1, 0);
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W, _AP_S> range() const {
    return this->range(_AP_W - 1, 0);
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W, _AP_S> operator()(int Hi, int Lo) {
    return this->range(Hi, Lo);
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W, _AP_S> operator()(int Hi, int Lo) const {
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W, _AP_S> operator()(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W, _AP_S> operator()(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) const {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }
# 1128 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_int_base.h"
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref<_AP_W, _AP_S> operator[](int index) {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> bvh(this, index);
    return bvh;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref<_AP_W, _AP_S> operator[](
      const ap_int_base<_AP_W2, _AP_S2>& index) {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> bvh(this, index.to_int());
    return bvh;
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator[](int index) const {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> br(this, index);
    return br.to_bool();
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator[](const ap_int_base<_AP_W2, _AP_S2>& index) const {
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> br(this, index.to_int());
    return br.to_bool();
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref<_AP_W, _AP_S> bit(int index) {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> bvh(this, index);
    return bvh;
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref<_AP_W, _AP_S> bit(
      const ap_int_base<_AP_W2, _AP_S2>& index) {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> bvh(this, index.to_int());
    return bvh;
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) bool bit(int index) const {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> br(this, index);
    return br.to_bool();
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool bit(const ap_int_base<_AP_W2, _AP_S2>& index) const {
    return bit(index.to_int());
  }
# 1195 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_int_base.h"
                inline __attribute__((always_inline)) __attribute__((nodebug)) int countLeadingZeros() const {

    if (_AP_W <= 32) {
      ap_int_base<32, false> t(-1UL), x;
      x.V = ({ typename _ap_type::remove_const<typeof(this->V)>::type __Result__ = 0; typeof(this->V) __Val2__ = this->V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W - 1, 0); __Result__; });
      t.V = ({ typename _ap_type::remove_const<typeof(t.V)>::type __Result__ = 0; typeof(t.V) __Val2__ = t.V; typeof(x.V) __Repl2__ = x.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 0, _AP_W - 1); __Result__; });
      return __builtin_ctz(t.V);
    } else if (_AP_W <= 64) {
      ap_int_base<64, false> t(-1ULL);
      ap_int_base<64, false> x;
      x.V = ({ typename _ap_type::remove_const<typeof(this->V)>::type __Result__ = 0; typeof(this->V) __Val2__ = this->V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W - 1, 0); __Result__; });
      t.V = ({ typename _ap_type::remove_const<typeof(t.V)>::type __Result__ = 0; typeof(t.V) __Val2__ = t.V; typeof(x.V) __Repl2__ = x.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 0, _AP_W - 1); __Result__; });
      return __builtin_ctzll(t.V);
    } else {
      enum { __N = (_AP_W + 63) / 64 };
      int NZeros = 0;
      int i = 0;
      bool hitNonZero = false;
      VITIS_LOOP_1213_1: for (i = 0; i < __N - 1; ++i) {
        ap_int_base<64, false> t;
        t.V = ({ typename _ap_type::remove_const<typeof(this->V)>::type __Result__ = 0; typeof(this->V) __Val2__ = this->V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W - i * 64 - 64, _AP_W - i * 64 - 1); __Result__; });
        NZeros += hitNonZero ? 0 : __builtin_clzll(t.V);
        hitNonZero |= (t.V != 0);
      }
      if (!hitNonZero) {
        ap_int_base<64, false> t(-1ULL);
        enum { REST = (_AP_W - 1) % 64 };
        ap_int_base<64, false> x;
        x.V = ({ typename _ap_type::remove_const<typeof(this->V)>::type __Result__ = 0; typeof(this->V) __Val2__ = this->V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, REST); __Result__; });
        t.V = ({ typename _ap_type::remove_const<typeof(t.V)>::type __Result__ = 0; typeof(t.V) __Val2__ = t.V; typeof(x.V) __Repl2__ = x.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 63 - REST, 63); __Result__; });
        NZeros += __builtin_clzll(t.V);
      }
      return NZeros;
    }



  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  concat(const ap_int_base<_AP_W2, _AP_S2>& a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  concat(ap_int_base<_AP_W2, _AP_S2>& a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(*this, a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      __attribute__((nodebug)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
      operator,(const ap_range_ref<_AP_W2, _AP_S2> &a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_range_ref<_AP_W2, _AP_S2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<ap_range_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      __attribute__((nodebug)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
      operator,(ap_range_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_range_ref<_AP_W2, _AP_S2> >(*this, a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(const ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(ap_int_base<_AP_W2, _AP_S2> &a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this), a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(const ap_int_base<_AP_W2, _AP_S2> &a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(*this, a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<_AP_W, ap_int_base, 1, ap_bit_ref<_AP_W2, _AP_S2> >
  operator,(const ap_bit_ref<_AP_W2, _AP_S2> &a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, 1, ap_bit_ref<_AP_W2, _AP_S2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<ap_bit_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<_AP_W, ap_int_base, 1, ap_bit_ref<_AP_W2, _AP_S2> >
  operator,(ap_bit_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, 1, ap_bit_ref<_AP_W2, _AP_S2> >(
        *this, a2);
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>&>(a2));
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(*this,
                                                                         a2);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<
      _AP_W, ap_int_base, _AP_W2,
      af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator,(const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>
                &a2) const {
    return ap_concat_ref<
        _AP_W, ap_int_base, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<
            af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<
      _AP_W, ap_int_base, _AP_W2,
      af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator,(af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &a2) {
    return ap_concat_ref<
        _AP_W, ap_int_base, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(*this,
                                                                       a2);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline))
      __attribute__((nodebug)) ap_concat_ref<_AP_W, ap_int_base, 1,
                    af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
      operator,(const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>
                    &a2) const {
    return ap_concat_ref<
        _AP_W, ap_int_base, 1,
        af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline))
      __attribute__((nodebug)) ap_concat_ref<_AP_W, ap_int_base, 1,
                    af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
      operator,(
          af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &a2) {
    return ap_concat_ref<
        _AP_W, ap_int_base, 1,
        af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(*this, a2);
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<((_AP_W2 + _AP_W3) > (_AP_W) ? (_AP_W2 + _AP_W3) : (_AP_W)), _AP_S> operator&(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& a2) {
    return *this & a2.get();
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<((_AP_W2 + _AP_W3) > (_AP_W) ? (_AP_W2 + _AP_W3) : (_AP_W)), _AP_S> operator|(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& a2) {
    return *this | a2.get();
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<((_AP_W2 + _AP_W3) > (_AP_W) ? (_AP_W2 + _AP_W3) : (_AP_W)), _AP_S> operator^(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& a2) {
    return *this ^ a2.get();
  }

  template <int _AP_W3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) void set(const ap_int_base<_AP_W3, false>& val) {
    Base::V = val.V;
  }





  inline __attribute__((always_inline)) __attribute__((nodebug)) bool and_reduce() const { return ({ typeof(Base::V) __what2__ = Base::V; __builtin_bit_and_reduce((void*)(&__what2__)); }); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool nand_reduce() const { return ({ typeof(Base::V) __what2__ = Base::V; __builtin_bit_nand_reduce((void*)(&__what2__)); }); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool or_reduce() const { return ({ typeof(Base::V) __what2__ = Base::V; __builtin_bit_or_reduce((void*)(&__what2__)); }); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool nor_reduce() const { return !(({ typeof(Base::V) __what2__ = Base::V; __builtin_bit_or_reduce((void*)(&__what2__)); })); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool xor_reduce() const { return ({ typeof(Base::V) __what2__ = Base::V; __builtin_bit_xor_reduce((void*)(&__what2__)); }); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool xnor_reduce() const {
    return !(({ typeof(Base::V) __what2__ = Base::V; __builtin_bit_xor_reduce((void*)(&__what2__)); }));
  }
# 1435 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_int_base.h"
  inline __attribute__((always_inline)) __attribute__((nodebug)) char* to_string(signed char rd = 2, bool sign = _AP_S) const {
    (void)(rd);
    (void)(sign);
    return 0;
  }

};
# 1496 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_int_base.h"
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::mult_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::mult_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::mult_base ret(0); ret.V = lhs.V * rhs.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::plus_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::plus_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::plus_base ret(0); ret.V = lhs.V + rhs.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::minus_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::minus_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::minus_base ret(0); ret.V = lhs.V - rhs.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::logic_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::logic_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::logic_base ret(0); ret.V = lhs.V & rhs.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::logic_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::logic_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::logic_base ret(0); ret.V = lhs.V | rhs.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::logic_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::logic_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::logic_base ret(0); ret.V = lhs.V ^ rhs.V; return ret; }
# 1515 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_int_base.h"
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::div_base ret(0); ret.V = op.V / op2.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::mod_base ret(0); ret.V = op.V % op2.V; return ret; }
# 1543 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_int_base.h"
template <typename PTR_TYPE, int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) PTR_TYPE* operator +(PTR_TYPE* i_op, const ap_int_base<_AP_W, _AP_S>& op) { ap_slong op2 = op.to_int64(); return i_op + op2; } template <typename PTR_TYPE, int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) PTR_TYPE* operator +(const ap_int_base<_AP_W, _AP_S>& op, PTR_TYPE* i_op) { ap_slong op2 = op.to_int64(); return op2 + i_op; }
template <typename PTR_TYPE, int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) PTR_TYPE* operator -(PTR_TYPE* i_op, const ap_int_base<_AP_W, _AP_S>& op) { ap_slong op2 = op.to_int64(); return i_op - op2; } template <typename PTR_TYPE, int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) PTR_TYPE* operator -(const ap_int_base<_AP_W, _AP_S>& op, PTR_TYPE* i_op) { ap_slong op2 = op.to_int64(); return op2 - i_op; }
# 1572 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) float operator *(float i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op * op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) float operator *(const ap_int_base<_AP_W, _AP_S>& op, float i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 * i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) float operator /(float i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op / op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) float operator /(const ap_int_base<_AP_W, _AP_S>& op, float i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 / i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) float operator +(float i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op + op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) float operator +(const ap_int_base<_AP_W, _AP_S>& op, float i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 + i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) float operator -(float i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op - op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) float operator -(const ap_int_base<_AP_W, _AP_S>& op, float i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 - i_op; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) double operator *(double i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op * op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) double operator *(const ap_int_base<_AP_W, _AP_S>& op, double i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 * i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) double operator /(double i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op / op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) double operator /(const ap_int_base<_AP_W, _AP_S>& op, double i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 / i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) double operator +(double i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op + op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) double operator +(const ap_int_base<_AP_W, _AP_S>& op, double i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 + i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) double operator -(double i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op - op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) double operator -(const ap_int_base<_AP_W, _AP_S>& op, double i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 - i_op; }
# 1597 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) half operator *(half i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op * op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) half operator *(const ap_int_base<_AP_W, _AP_S>& op, half i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 * i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) half operator /(half i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op / op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) half operator /(const ap_int_base<_AP_W, _AP_S>& op, half i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 / i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) half operator +(half i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op + op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) half operator +(const ap_int_base<_AP_W, _AP_S>& op, half i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 + i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) half operator -(half i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op - op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) half operator -(const ap_int_base<_AP_W, _AP_S>& op, half i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 - i_op; }
# 1629 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::mult operator *(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op * ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::plus operator +(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op + ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::minus operator -(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op - ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::div operator /(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op / ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::mod operator %(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op % ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator &(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op & ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator |(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op | ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator ^(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op ^ ap_int_base<1, false>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::mult operator *(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op * ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::plus operator +(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op + ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::minus operator -(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op - ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::div operator /(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op / ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::mod operator %(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op % ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator &(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op & ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator |(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op | ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator ^(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op ^ ap_int_base<8, CHAR_IS_SIGNED>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::mult operator *(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op * ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::plus operator +(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op + ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::minus operator -(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op - ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::div operator /(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op / ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::mod operator %(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op % ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator &(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op & ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator |(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op | ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator ^(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op ^ ap_int_base<8, true>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::mult operator *(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op * ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::plus operator +(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op + ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::minus operator -(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op - ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::div operator /(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op / ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::mod operator %(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op % ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator &(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op & ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator |(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op | ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator ^(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op ^ ap_int_base<8, false>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::mult operator *(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op * ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::plus operator +(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op + ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::minus operator -(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op - ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::div operator /(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op / ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::mod operator %(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op % ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator &(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op & ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator |(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op | ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator ^(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op ^ ap_int_base<_AP_SIZE_short, true>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::mult operator *(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op * ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::plus operator +(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op + ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::minus operator -(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op - ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::div operator /(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op / ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::mod operator %(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op % ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator &(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op & ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator |(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op | ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator ^(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op ^ ap_int_base<_AP_SIZE_short, false>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::mult operator *(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op * ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::plus operator +(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op + ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::minus operator -(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op - ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::div operator /(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op / ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::mod operator %(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op % ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator &(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op & ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator |(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op | ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator ^(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op ^ ap_int_base<_AP_SIZE_int, true>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::mult operator *(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op * ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::plus operator +(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op + ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::minus operator -(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op - ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::div operator /(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op / ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::mod operator %(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op % ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator &(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op & ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator |(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op | ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator ^(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op ^ ap_int_base<_AP_SIZE_int, false>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::mult operator *(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op * ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::plus operator +(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op + ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::minus operator -(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op - ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::div operator /(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op / ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::mod operator %(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op % ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator &(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op & ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator |(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op | ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator ^(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op ^ ap_int_base<_AP_SIZE_long, true>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::mult operator *(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op * ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::plus operator +(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op + ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::minus operator -(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op - ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::div operator /(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op / ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::mod operator %(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op % ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator &(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op & ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator |(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op | ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator ^(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op ^ ap_int_base<_AP_SIZE_long, false>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::mult operator *(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op * ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::plus operator +(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op + ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::minus operator -(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op - ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::div operator /(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op / ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::mod operator %(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op % ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator &(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op & ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator |(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op | ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator ^(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op ^ ap_int_base<_AP_SIZE_ap_slong, true>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::mult operator *(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op * ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::plus operator +(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op + ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::minus operator -(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op - ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::div operator /(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op / ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::mod operator %(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op % ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator &(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op & ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator |(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op | ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator ^(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op ^ ap_int_base<_AP_SIZE_ap_slong, false>(i_op); }
# 1668 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, char op2) { ap_int_base<_AP_W, _AP_S> r(0); if (CHAR_IS_SIGNED) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, char op2) { ap_int_base<_AP_W, _AP_S> r(0); if (CHAR_IS_SIGNED) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { ap_int_base<_AP_W, _AP_S> r(0); if (true) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { ap_int_base<_AP_W, _AP_S> r(0); if (true) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, short op2) { ap_int_base<_AP_W, _AP_S> r(0); if (true) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, short op2) { ap_int_base<_AP_W, _AP_S> r(0); if (true) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, int op2) { ap_int_base<_AP_W, _AP_S> r(0); if (true) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, int op2) { ap_int_base<_AP_W, _AP_S> r(0); if (true) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, long op2) { ap_int_base<_AP_W, _AP_S> r(0); if (true) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, long op2) { ap_int_base<_AP_W, _AP_S> r(0); if (true) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { ap_int_base<_AP_W, _AP_S> r(0); if (true) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { ap_int_base<_AP_W, _AP_S> r(0); if (true) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
# 1692 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, bool op2) { ap_int_base<_AP_W, _AP_S> r(0); r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, bool op2) { ap_int_base<_AP_W, _AP_S> r(0); r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { ap_int_base<_AP_W, _AP_S> r(0); r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { ap_int_base<_AP_W, _AP_S> r(0); r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { ap_int_base<_AP_W, _AP_S> r(0); r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { ap_int_base<_AP_W, _AP_S> r(0); r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { ap_int_base<_AP_W, _AP_S> r(0); r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { ap_int_base<_AP_W, _AP_S> r(0); r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { ap_int_base<_AP_W, _AP_S> r(0); r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { ap_int_base<_AP_W, _AP_S> r(0); r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { ap_int_base<_AP_W, _AP_S> r(0); r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { ap_int_base<_AP_W, _AP_S> r(0); r.V = op.V >> op2; return r; }
# 1723 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op += ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op -= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op *= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op /= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op %= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op &= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op |= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op ^= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op >>= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op <<= ap_int_base<1, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op += ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op -= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op *= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op /= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op %= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op &= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op |= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op ^= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op >>= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op <<= ap_int_base<8, CHAR_IS_SIGNED>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op += ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op -= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op *= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op /= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op %= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op &= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op |= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op ^= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op >>= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op <<= ap_int_base<8, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op += ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op -= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op *= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op /= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op %= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op &= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op |= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op ^= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op >>= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op <<= ap_int_base<8, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op += ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op -= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op *= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op /= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op %= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op &= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op |= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op ^= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op >>= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op <<= ap_int_base<_AP_SIZE_short, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op += ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op -= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op *= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op /= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op %= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op &= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op |= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op ^= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op >>= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op <<= ap_int_base<_AP_SIZE_short, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op += ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op -= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op *= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op /= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op %= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op &= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op |= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op ^= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op >>= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op <<= ap_int_base<_AP_SIZE_int, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op += ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op -= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op *= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op /= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op %= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op &= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op |= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op ^= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op >>= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op <<= ap_int_base<_AP_SIZE_int, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op += ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op -= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op *= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op /= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op %= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op &= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op |= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op ^= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op >>= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op <<= ap_int_base<_AP_SIZE_long, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op += ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op -= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op *= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op /= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op %= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op &= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op |= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op ^= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op >>= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op <<= ap_int_base<_AP_SIZE_long, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op += ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op -= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op *= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op /= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op %= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op &= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op |= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op ^= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op >>= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op <<= ap_int_base<_AP_SIZE_ap_slong, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op += ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op -= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op *= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op /= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op %= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op &= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op |= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op ^= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op >>= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op <<= ap_int_base<_AP_SIZE_ap_slong, false>(op2); }
# 1756 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) half& operator +=( half& op2, ap_int_base<_AP_W, _AP_S>& op) { half op_rt = op.to_half(); return op2 += op_rt; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) half& operator -=( half& op2, ap_int_base<_AP_W, _AP_S>& op) { half op_rt = op.to_half(); return op2 -= op_rt; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) half& operator *=( half& op2, ap_int_base<_AP_W, _AP_S>& op) { half op_rt = op.to_half(); return op2 *= op_rt; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) half& operator /=( half& op2, ap_int_base<_AP_W, _AP_S>& op) { half op_rt = op.to_half(); return op2 /= op_rt; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) float& operator +=( float& op2, ap_int_base<_AP_W, _AP_S>& op) { float op_rt = op.to_float(); return op2 += op_rt; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) float& operator -=( float& op2, ap_int_base<_AP_W, _AP_S>& op) { float op_rt = op.to_float(); return op2 -= op_rt; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) float& operator *=( float& op2, ap_int_base<_AP_W, _AP_S>& op) { float op_rt = op.to_float(); return op2 *= op_rt; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) float& operator /=( float& op2, ap_int_base<_AP_W, _AP_S>& op) { float op_rt = op.to_float(); return op2 /= op_rt; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) double& operator +=( double& op2, ap_int_base<_AP_W, _AP_S>& op) { double op_rt = op.to_double(); return op2 += op_rt; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) double& operator -=( double& op2, ap_int_base<_AP_W, _AP_S>& op) { double op_rt = op.to_double(); return op2 -= op_rt; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) double& operator *=( double& op2, ap_int_base<_AP_W, _AP_S>& op) { double op_rt = op.to_double(); return op2 *= op_rt; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) double& operator /=( double& op2, ap_int_base<_AP_W, _AP_S>& op) { double op_rt = op.to_double(); return op2 /= op_rt; }
# 1784 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op > ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op < ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op >= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op <= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op == ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op != ap_int_base<1, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op > ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op < ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op >= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op <= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op == ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op != ap_int_base<8, CHAR_IS_SIGNED>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op > ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op < ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op >= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op <= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op == ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op != ap_int_base<8, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op > ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op < ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op >= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op <= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op == ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op != ap_int_base<8, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op > ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op < ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op >= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op <= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op == ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op != ap_int_base<_AP_SIZE_short, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op > ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op < ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op >= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op <= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op == ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op != ap_int_base<_AP_SIZE_short, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op > ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op < ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op >= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op <= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op == ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op != ap_int_base<_AP_SIZE_int, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op > ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op < ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op >= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op <= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op == ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op != ap_int_base<_AP_SIZE_int, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op > ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op < ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op >= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op <= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op == ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op != ap_int_base<_AP_SIZE_long, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op > ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op < ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op >= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op <= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op == ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op != ap_int_base<_AP_SIZE_long, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op > ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op < ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op >= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op <= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op == ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op != ap_int_base<_AP_SIZE_ap_slong, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op > ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op < ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op >= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op <= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op == ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op != ap_int_base<_AP_SIZE_ap_slong, false>(op2); }
# 1821 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_int_base.h"
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() > op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 > op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() > op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 > op2.to_double() ; }
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() < op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 < op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() < op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 < op2.to_double() ; }
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() >= op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 >= op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() >= op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 >= op2.to_double() ; }
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() <= op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 <= op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() <= op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 <= op2.to_double() ; }
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() == op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 == op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() == op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 == op2.to_double() ; }
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() != op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 != op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() != op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 != op2.to_double() ; }
# 1851 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::plus operator +(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) + op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::plus operator +(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 + ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::minus operator -(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) - op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::minus operator -(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 - ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::mult operator *(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) * op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::mult operator *(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 * ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::div operator /(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) / op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::div operator /(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 / ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::mod operator %(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) % op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::mod operator %(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 % ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator &(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) & op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator &(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 & ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator |(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) | op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator |(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 | ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator ^(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) ^ op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator ^(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 ^ ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::arg1 operator >>(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) >> op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::arg1 operator >>(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 >> ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::arg1 operator <<(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) << op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::arg1 operator <<(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 << ap_int_base<_AP_W2, false>(op2); }
# 1882 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W1, _AP_S1>& operator +=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 += ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W1, _AP_S1>& operator +=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp += op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W1, _AP_S1>& operator -=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 -= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W1, _AP_S1>& operator -=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp -= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W1, _AP_S1>& operator *=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 *= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W1, _AP_S1>& operator *=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp *= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W1, _AP_S1>& operator /=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 /= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W1, _AP_S1>& operator /=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp /= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W1, _AP_S1>& operator %=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 %= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W1, _AP_S1>& operator %=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp %= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W1, _AP_S1>& operator >>=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 >>= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W1, _AP_S1>& operator >>=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp >>= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W1, _AP_S1>& operator <<=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 <<= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W1, _AP_S1>& operator <<=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp <<= op2; op1 = tmp; return op1; }
# 1914 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W1, _AP_S1>& operator &=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W2, false> tmp(op2); op1.V &= tmp.V; return op1; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W1, _AP_S1>& operator &=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp.V &= op2.V; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W1, _AP_S1>& operator |=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W2, false> tmp(op2); op1.V |= tmp.V; return op1; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W1, _AP_S1>& operator |=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp.V |= op2.V; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W1, _AP_S1>& operator ^=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W2, false> tmp(op2); op1.V ^= tmp.V; return op1; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W1, _AP_S1>& operator ^=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp.V ^= op2.V; op1 = tmp; return op1; }
# 1933 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator ==(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator ==(op2.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator !=(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator !=(op2.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator >(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator >(op2.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator >=(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator >=(op2.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator <(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator <(op2.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator <=(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator <=(op2.operator ap_int_base<_AP_W2, false>()); }
# 1960 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::plus operator +(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 + ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::plus operator +(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) + op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::minus operator -(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 - ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::minus operator -(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) - op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::mult operator *(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 * ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::mult operator *(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) * op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::div operator /(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 / ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::div operator /(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) / op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::mod operator %(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 % ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::mod operator %(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) % op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::logic operator &(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 & ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::logic operator &(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) & op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::logic operator |(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 | ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::logic operator |(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) | op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::logic operator ^(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 ^ ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::logic operator ^(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) ^ op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::arg1 operator >>(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 >> ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::arg1 operator >>(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) >> op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::arg1 operator <<(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 << ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::arg1 operator <<(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) << op2; }
# 1991 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W1, _AP_S1>& operator +=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 += ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref<_AP_W1, _AP_S1>& operator +=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp += op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W1, _AP_S1>& operator -=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 -= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref<_AP_W1, _AP_S1>& operator -=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp -= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W1, _AP_S1>& operator *=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 *= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref<_AP_W1, _AP_S1>& operator *=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp *= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W1, _AP_S1>& operator /=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 /= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref<_AP_W1, _AP_S1>& operator /=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp /= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W1, _AP_S1>& operator %=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 %= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref<_AP_W1, _AP_S1>& operator %=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp %= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W1, _AP_S1>& operator >>=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 >>= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref<_AP_W1, _AP_S1>& operator >>=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp >>= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W1, _AP_S1>& operator <<=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 <<= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref<_AP_W1, _AP_S1>& operator <<=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp <<= op2; op1 = tmp; return op1; }
# 2023 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W1, _AP_S1>& operator &=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op2); op1.V &= tmp.V; return op1; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref<_AP_W1, _AP_S1>& operator &=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp.V &= op2.V; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W1, _AP_S1>& operator |=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op2); op1.V |= tmp.V; return op1; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref<_AP_W1, _AP_S1>& operator |=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp.V |= op2.V; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W1, _AP_S1>& operator ^=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op2); op1.V ^= tmp.V; return op1; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref<_AP_W1, _AP_S1>& operator ^=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp.V ^= op2.V; op1 = tmp; return op1; }
# 2042 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 == ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) == op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 != ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) != op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 > ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) > op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 >= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) >= op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 < ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) < op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 <= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) <= op2; }
# 2149 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_int_base.h"
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 == op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() == op2; }
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 != op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() != op2; }
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 > op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() > op2; }
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 >= op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() >= op2; }
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 < op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() < op2; }
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 <= op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() <= op2; }
# 12 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\ap_int.h" 2
# 1 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_int_ref.h" 1
# 27 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_int_ref.h"
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2>
struct ap_concat_ref {
  enum {
    _AP_WR = _AP_W1 + _AP_W2,
  };

  _AP_T1& mbv1;
  _AP_T2& mbv2;

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref(const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& ref)
      : mbv1(ref.mbv1), mbv2(ref.mbv2) {}

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref(_AP_T1& bv1, _AP_T2& bv2) : mbv1(bv1), mbv2(bv2) {}

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref& operator=(const ap_int_base<_AP_W3, _AP_S3>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> vval(val);
    int W_ref1 = mbv1.length();
    int W_ref2 = mbv2.length();
    ap_int_base<_AP_W1, false> Part1;
    Part1.V = ({ typename _ap_type::remove_const<typeof(vval.V)>::type __Result__ = 0; typeof(vval.V) __Val2__ = vval.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), W_ref2, W_ref1 + W_ref2 - 1); __Result__; });
    mbv1.set(Part1);
    ap_int_base<_AP_W2, false> Part2;
    Part2.V = ({ typename _ap_type::remove_const<typeof(vval.V)>::type __Result__ = 0; typeof(vval.V) __Val2__ = vval.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, W_ref2 - 1); __Result__; });
    mbv2.set(Part2);
    return *this;
  }
# 70 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_int_ref.h"
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref& operator=(bool val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref& operator=(char val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref& operator=(signed char val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref& operator=(unsigned char val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref& operator=(short val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref& operator=(unsigned short val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref& operator=(int val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref& operator=(unsigned int val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref& operator=(long val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref& operator=(unsigned long val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref& operator=(ap_slong val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref& operator=(ap_ulong val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref& operator=(half val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref& operator=(float val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref& operator=(double val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }





  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref& operator=(
      const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val);
    return operator=(tmpVal);
  }

  template <int _AP_W3, typename _AP_T3, int _AP_W4, typename _AP_T4>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref& operator=(
      const ap_concat_ref<_AP_W3, _AP_T3, _AP_W4, _AP_T4>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val);
    return operator=(tmpVal);
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref& operator=(const ap_bit_ref<_AP_W3, _AP_S3>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val);
    return operator=(tmpVal);
  }
  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref& operator=(const ap_range_ref<_AP_W3, _AP_S3>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val);
    return operator=(tmpVal);
  }

  template <int _AP_W3, int _AP_I3, bool _AP_S3, ap_q_mode _AP_Q3,
            ap_o_mode _AP_O3, int _AP_N3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref& operator=(
      const af_range_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>& val) {
    return operator=((const ap_int_base<_AP_W3, false>)(val));
  }

  template <int _AP_W3, int _AP_I3, bool _AP_S3, ap_q_mode _AP_Q3,
            ap_o_mode _AP_O3, int _AP_N3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref& operator=(
      const ap_fixed_base<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>&
          val) {
    return operator=(val.to_ap_int_base());
  }

  template <int _AP_W3, int _AP_I3, bool _AP_S3, ap_q_mode _AP_Q3,
            ap_o_mode _AP_O3, int _AP_N3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref& operator=(
      const af_bit_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>& val) {
    return operator=((ap_ulong)(bool)(val));
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) operator ap_int_base<_AP_WR, false>() const { return get(); }

  inline __attribute__((always_inline)) __attribute__((nodebug)) operator ap_ulong() const { return get().to_uint64(); }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                       ap_range_ref<_AP_W3, _AP_S3> >
  operator,(const ap_range_ref<_AP_W3, _AP_S3> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                         ap_range_ref<_AP_W3, _AP_S3> >(
        *this, const_cast<ap_range_ref<_AP_W3, _AP_S3>&>(a2));
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) __attribute__((nodebug))
      ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3, ap_int_base<_AP_W3, _AP_S3> >
      operator,(ap_int_base<_AP_W3, _AP_S3> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                         ap_int_base<_AP_W3, _AP_S3> >(*this, a2);
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) __attribute__((nodebug))
      ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3, ap_int_base<_AP_W3, _AP_S3> >
      operator,(volatile ap_int_base<_AP_W3, _AP_S3> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                         ap_int_base<_AP_W3, _AP_S3> >(
        *this, const_cast<ap_int_base<_AP_W3, _AP_S3>&>(a2));
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) __attribute__((nodebug))
      ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3, ap_int_base<_AP_W3, _AP_S3> >
      operator,(const ap_int_base<_AP_W3, _AP_S3> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                         ap_int_base<_AP_W3, _AP_S3> >(
        *this, const_cast<ap_int_base<_AP_W3, _AP_S3>&>(a2));
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) __attribute__((nodebug))
      ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3, ap_int_base<_AP_W3, _AP_S3> >
      operator,(const volatile ap_int_base<_AP_W3, _AP_S3> &a2) {

    ap_int_base<_AP_W3, _AP_S3> op(a2);
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                         ap_int_base<_AP_W3, _AP_S3> >(
        *this, const_cast<ap_int_base<_AP_W3, _AP_S3>&>(op));
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<_AP_WR, ap_concat_ref, 1, ap_bit_ref<_AP_W3, _AP_S3> >
  operator,(const ap_bit_ref<_AP_W3, _AP_S3> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, 1, ap_bit_ref<_AP_W3, _AP_S3> >(
        *this, const_cast<ap_bit_ref<_AP_W3, _AP_S3>&>(a2));
  }

  template <int _AP_W3, typename _AP_T3, int _AP_W4, typename _AP_T4>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3 + _AP_W4,
                       ap_concat_ref<_AP_W3, _AP_T3, _AP_W4, _AP_T4> >
  operator,(const ap_concat_ref<_AP_W3, _AP_T3, _AP_W4, _AP_T4> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3 + _AP_W4,
                         ap_concat_ref<_AP_W3, _AP_T3, _AP_W4, _AP_T4> >(
        *this, const_cast<ap_concat_ref<_AP_W3, _AP_T3, _AP_W4, _AP_T4>&>(a2));
  }

  template <int _AP_W3, int _AP_I3, bool _AP_S3, ap_q_mode _AP_Q3,
            ap_o_mode _AP_O3, int _AP_N3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<
      _AP_WR, ap_concat_ref, _AP_W3,
      af_range_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3> >
  operator,(
      const af_range_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3> &a2) {
    return ap_concat_ref<
        _AP_WR, ap_concat_ref, _AP_W3,
        af_range_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3> >(
        *this,
        const_cast<
            af_range_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>&>(a2));
  }

  template <int _AP_W3, int _AP_I3, bool _AP_S3, ap_q_mode _AP_Q3,
            ap_o_mode _AP_O3, int _AP_N3>
  inline __attribute__((always_inline)) __attribute__((nodebug))
      ap_concat_ref<_AP_WR, ap_concat_ref, 1,
                    af_bit_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3> >
      operator,(const af_bit_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>
                    &a2) {
    return ap_concat_ref<
        _AP_WR, ap_concat_ref, 1,
        af_bit_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3> >(
        *this,
        const_cast<af_bit_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>&>(
            a2));
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<((_AP_WR) > (_AP_W3) ? (_AP_WR) : (_AP_W3)), _AP_S3> operator&(
      const ap_int_base<_AP_W3, _AP_S3>& a2) {
    return get() & a2;
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<((_AP_WR) > (_AP_W3) ? (_AP_WR) : (_AP_W3)), _AP_S3> operator|(
      const ap_int_base<_AP_W3, _AP_S3>& a2) {
    return get() | a2;
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<((_AP_WR) > (_AP_W3) ? (_AP_WR) : (_AP_W3)), _AP_S3> operator^(
      const ap_int_base<_AP_W3, _AP_S3>& a2) {
    return get() ^ a2;
  }
# 258 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_int_ref.h"
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_WR, false> get() const {
    ap_int_base<_AP_WR, false> tmpVal(0);
    int W_ref1 = mbv1.length();
    int W_ref2 = mbv2.length();
    ap_int_base<_AP_W2, false> v2(mbv2);
    ap_int_base<_AP_W1, false> v1(mbv1);
    tmpVal.V = ({ typename _ap_type::remove_const<typeof(tmpVal.V)>::type __Result__ = 0; typeof(tmpVal.V) __Val2__ = tmpVal.V; typeof(v2.V) __Repl2__ = v2.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 0, W_ref2 - 1); __Result__; });
    tmpVal.V =
        ({ typename _ap_type::remove_const<typeof(tmpVal.V)>::type __Result__ = 0; typeof(tmpVal.V) __Val2__ = tmpVal.V; typeof(v1.V) __Repl2__ = v1.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), W_ref2, W_ref1 + W_ref2 - 1); __Result__; });
    return tmpVal;
  }

  template <int _AP_W3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) void set(const ap_int_base<_AP_W3, false>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> vval(val);
    int W_ref1 = mbv1.length();
    int W_ref2 = mbv2.length();
    ap_int_base<_AP_W1, false> tmpVal1;
    tmpVal1.V = ({ typename _ap_type::remove_const<typeof(vval.V)>::type __Result__ = 0; typeof(vval.V) __Val2__ = vval.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), W_ref2, W_ref1 + W_ref2 - 1); __Result__; });
    mbv1.set(tmpVal1);
    ap_int_base<_AP_W2, false> tmpVal2;
    tmpVal2.V = ({ typename _ap_type::remove_const<typeof(vval.V)>::type __Result__ = 0; typeof(vval.V) __Val2__ = vval.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, W_ref2 - 1); __Result__; });
    mbv2.set(tmpVal2);
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) int length() const { return mbv1.length() + mbv2.length(); }
};




template <int _AP_W, bool _AP_S>
struct ap_range_ref {



  typedef ap_int_base<_AP_W, _AP_S> ref_type;
  ref_type& d_bv;
  int l_index;
  int h_index;

 public:
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref(const ap_range_ref<_AP_W, _AP_S>& ref)
      : d_bv(ref.d_bv), l_index(ref.l_index), h_index(ref.h_index) {}

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref(ref_type* bv, int h, int l)
      : d_bv(*bv), l_index(l), h_index(h) {}

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref(const ref_type* bv, int h, int l)
      : d_bv(*const_cast<ref_type*>(bv)), l_index(l), h_index(h) {}

  inline __attribute__((always_inline)) __attribute__((nodebug)) operator ap_int_base<_AP_W, false>() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) operator ap_ulong() const { return to_uint64(); }
# 339 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_int_ref.h"
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref& operator=(bool val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref& operator=(char val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref& operator=(signed char val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref& operator=(unsigned char val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref& operator=(short val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref& operator=(unsigned short val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref& operator=(int val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref& operator=(unsigned int val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref& operator=(long val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref& operator=(unsigned long val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref& operator=(ap_slong val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref& operator=(ap_ulong val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref& operator=(half val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref& operator=(float val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref& operator=(double val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }




  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref& operator=(const char* val) {
    const ap_int_base<_AP_W, false> tmp(val);
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
    return *this;
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref& operator=(const ap_int_base<_AP_W2, _AP_S2>& val) {
    ap_int_base<_AP_W, false> tmp(val);
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
    return *this;
  }




  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref& operator=(const ap_range_ref& val) {
    return operator=((const ap_int_base<_AP_W, false>)val);
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref& operator=(const ap_range_ref<_AP_W2, _AP_S2>& val) {
    return operator=((const ap_int_base<_AP_W2, false>)val);
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref& operator=(const ap_bit_ref<_AP_W2, _AP_S2>& val) {
    return operator=((ap_ulong)(bool)(val));
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref& operator=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          val) {
    return operator=(val.to_ap_int_base());
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref& operator=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=((const ap_int_base<_AP_W2, false>)val);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref& operator=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=((ap_ulong)(bool)(val));
  }


  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref& operator=(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& val) {
    return operator=((const ap_int_base<_AP_W2 + _AP_W3, false>)(val));
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug))
      ap_concat_ref<_AP_W, ap_range_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
      operator,(const ap_range_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2,
                         ap_range_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_range_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug))
      ap_concat_ref<_AP_W, ap_range_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
      operator,(ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(*this, a2);
  }

  inline __attribute__((always_inline)) __attribute__((nodebug))
  ap_concat_ref<_AP_W, ap_range_ref, _AP_W, ap_int_base<_AP_W, _AP_S> >
  operator,(ap_int_base<_AP_W, _AP_S>& a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W,
                         ap_int_base<_AP_W, _AP_S> >(*this, a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug))
      ap_concat_ref<_AP_W, ap_range_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
      operator,(volatile ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug))
      ap_concat_ref<_AP_W, ap_range_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
      operator,(const ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug))
      ap_concat_ref<_AP_W, ap_range_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
      operator,(const volatile ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<_AP_W, ap_range_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >
  operator,(const ap_bit_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_bit_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<_AP_W, ap_range_ref, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(
        *this, const_cast<ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>&>(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<
      _AP_W, ap_range_ref, _AP_W2,
      af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator,(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> a2) {
    return ap_concat_ref<
        _AP_W, ap_range_ref, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<
            af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug))
      ap_concat_ref<_AP_W, ap_range_ref, 1,
                    af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
      operator,(const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>
                    &a2) {
    return ap_concat_ref<
        _AP_W, ap_range_ref, 1,
        af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator==(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> hop(op2);
    return lop == hop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator!=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator==(op2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator<(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> hop(op2);
    return lop < hop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator<=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> hop(op2);
    return lop <= hop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator>(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator<=(op2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator>=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator<(op2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W, _AP_S>& operator|=(
      const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V |= (op2.d_bv).V;
    return *this;
  };

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W, _AP_S>& operator|=(
      const ap_int_base<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V |= op2.V;
    return *this;
  };

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W, _AP_S>& operator&=(
      const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V &= (op2.d_bv).V;
    return *this;
  };

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W, _AP_S>& operator&=(
      const ap_int_base<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V &= op2.V;
    return *this;
  };

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W, _AP_S>& operator^=(
      const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V ^= (op2.d_bv).V;
    return *this;
  };

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W, _AP_S>& operator^=(
      const ap_int_base<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V ^= op2.V;
    return *this;
  };



  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, false> operator~() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return (~ret);
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, false> operator!() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return (!ret);
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, false> operator+() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, false> operator-() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return (-ret);
  }


  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, false> get() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) void set(const ap_int_base<_AP_W2, false>& val) {
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val.V) __Repl2__ = val.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) int length() const {
    return h_index >= l_index ? h_index - l_index + 1 : l_index - h_index + 1;
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) int to_int() const {
    return (int)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) unsigned to_uint() const {
    ap_int_base<_AP_W, false> t;
    t.V = d_bv.V;
    return (unsigned)(({ typename _ap_type::remove_const<typeof(t.V)>::type __Result__ = 0; typeof(t.V) __Val2__ = t.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) long to_long() const {
    return (long)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) unsigned long to_ulong() const {
    ap_int_base<_AP_W, false> t;
    t.V = d_bv.V;
    return (unsigned long)(({ typename _ap_type::remove_const<typeof(t.V)>::type __Result__ = 0; typeof(t.V) __Val2__ = t.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_slong to_int64() const {
    return (ap_slong)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ulong to_uint64() const {
    ap_int_base<_AP_W, false> t;
    t.V = d_bv.V;
    return (ap_ulong)(({ typename _ap_type::remove_const<typeof(t.V)>::type __Result__ = 0; typeof(t.V) __Val2__ = t.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) bool and_reduce() const {
    bool ret = true;
    bool reverse = l_index > h_index;
    unsigned low = reverse ? h_index : l_index;
    unsigned high = reverse ? l_index : h_index;
    VITIS_LOOP_676_1: for (unsigned i = low; i != high; ++i) {

#pragma HLS unroll

 ret &= ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
    }
    return ret;
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) bool or_reduce() const {
    bool ret = false;
    bool reverse = l_index > h_index;
    unsigned low = reverse ? h_index : l_index;
    unsigned high = reverse ? l_index : h_index;
    VITIS_LOOP_690_1: for (unsigned i = low; i != high; ++i) {

#pragma HLS unroll

 ret |= ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
    }
    return ret;
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) bool xor_reduce() const {
    bool ret = false;
    bool reverse = l_index > h_index;
    unsigned low = reverse ? h_index : l_index;
    unsigned high = reverse ? l_index : h_index;
    VITIS_LOOP_704_1: for (unsigned i = low; i != high; ++i) {

#pragma HLS unroll

 ret ^= ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
    }
    return ret;
  }
# 720 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_int_ref.h"
  inline __attribute__((always_inline)) __attribute__((nodebug)) char* to_string(signed char radix = 2) const {
    (void)(radix);
    return 0;
  }

};
# 760 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_int_ref.h"
template <int _AP_W, bool _AP_S>
struct ap_bit_ref {



  typedef ap_int_base<_AP_W, _AP_S> ref_type;
  ref_type& d_bv;
  int d_index;

 public:

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref(const ap_bit_ref<_AP_W, _AP_S>& ref)
      : d_bv(ref.d_bv), d_index(ref.d_index) {}

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref(ref_type* bv, int index = 0) : d_bv(*bv), d_index(index) {}

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref(const ref_type* bv, int index = 0)
      : d_bv(*const_cast<ref_type*>(bv)), d_index(index) {}

  inline __attribute__((always_inline)) __attribute__((nodebug)) operator bool() const { return ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool to_bool() const { return ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }
# 798 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_int_ref.h"
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref& operator=(bool val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref& operator=(char val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref& operator=(signed char val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref& operator=(unsigned char val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref& operator=(short val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref& operator=(unsigned short val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref& operator=(int val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref& operator=(unsigned int val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref& operator=(long val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref& operator=(unsigned long val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref& operator=(ap_slong val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref& operator=(ap_ulong val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
# 820 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_int_ref.h"
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref& operator=(half val) { bool tmp_val = val; d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp_val) __Repl2__ = !!tmp_val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref& operator=(float val) { bool tmp_val = val; d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp_val) __Repl2__ = !!tmp_val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref& operator=(double val) { bool tmp_val = val; d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp_val) __Repl2__ = !!tmp_val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }




  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref& operator=(const ap_int_base<_AP_W2, _AP_S2>& val) {
    return operator=((ap_ulong)(val.V != 0));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref& operator=(const ap_range_ref<_AP_W2, _AP_S2>& val) {
    return operator=((ap_int_base<_AP_W2, false>)val);
  }



  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref& operator=(const ap_bit_ref& val) {
    return operator=((ap_ulong)(bool)val);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref& operator=(const ap_bit_ref<_AP_W2, _AP_S2>& val) {
    return operator=((ap_ulong)(bool)val);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref& operator=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=((const ap_int_base<_AP_W2, false>)val);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref& operator=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=((ap_ulong)(bool)val);
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref& operator=(
      const ap_concat_ref<_AP_W2, _AP_T3, _AP_W3, _AP_T3>& val) {
    return operator=((const ap_int_base<_AP_W2 + _AP_W3, false>)val);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >(
        *this, a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(volatile ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(const ap_int_base<_AP_W2, _AP_S2> &a2) {
    ap_int_base<_AP_W2, _AP_S2> op(a2);
    return ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(op));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(const volatile ap_int_base<_AP_W2, _AP_S2> &a2) {
    ap_int_base<_AP_W2, _AP_S2> op(a2);
    return ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(op));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
  operator,(const ap_range_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_range_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<1, ap_bit_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> > operator,(
      const ap_bit_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<1, ap_bit_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_bit_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<1, ap_bit_ref, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &a2) {
    return ap_concat_ref<1, ap_bit_ref, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(
        *this, const_cast<ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>&>(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<
      1, ap_bit_ref, _AP_W2,
      af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator,(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &a2) {
    return ap_concat_ref<
        1, ap_bit_ref, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<
            af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<1, ap_bit_ref, 1, af_bit_ref<_AP_W2, _AP_I2, _AP_S2,
                                                    _AP_Q2, _AP_O2, _AP_N2> >
  operator,(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &a2) {
    return ap_concat_ref<1, ap_bit_ref, 1, af_bit_ref<_AP_W2, _AP_I2, _AP_S2,
                                                      _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator==(const ap_bit_ref<_AP_W2, _AP_S2>& op) {
    return get() == op.get();
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator!=(const ap_bit_ref<_AP_W2, _AP_S2>& op) {
    return get() != op.get();
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) bool get() const { return ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }

  inline __attribute__((always_inline)) __attribute__((nodebug)) bool get() { return ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }

  template <int _AP_W3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) void set(const ap_int_base<_AP_W3, false>& val) {
    operator=(val);
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator~() const {
    bool bit = ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; });
    return bit ? false : true;
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) int length() const { return 1; }





  inline __attribute__((always_inline)) __attribute__((nodebug)) char* to_string() const { return 0; }

};
# 1018 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_int_ref.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<1, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<8, CHAR_IS_SIGNED>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<8, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<8, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_short, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_short, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_int, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_int, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_long, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_long, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_ap_slong, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_ap_slong, false>(op2); }






template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<1, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<8, CHAR_IS_SIGNED>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<8, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<8, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_short, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_short, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_int, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_int, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_long, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_long, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_ap_slong, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_ap_slong, false>(op2); }
# 1077 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_int_ref.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::plus operator +(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::minus operator -(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::mult operator *(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::div operator /(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::mod operator %(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::plus operator +(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::minus operator -(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::mult operator *(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::div operator /(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::mod operator %(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::plus operator +(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::minus operator -(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::mult operator *(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::div operator /(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::mod operator %(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::plus operator +(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::minus operator -(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::mult operator *(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::div operator /(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::mod operator %(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::plus operator +(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::minus operator -(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::mult operator *(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::div operator /(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::mod operator %(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::plus operator +(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::minus operator -(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::mult operator *(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::div operator /(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::mod operator %(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::plus operator +(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::minus operator -(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::mult operator *(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::div operator /(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::mod operator %(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::plus operator +(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::minus operator -(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::mult operator *(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::div operator /(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::mod operator %(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::plus operator +(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::minus operator -(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::mult operator *(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::div operator /(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::mod operator %(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::plus operator +(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::minus operator -(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::mult operator *(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::div operator /(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::mod operator %(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::plus operator +(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::minus operator -(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::mult operator *(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::div operator /(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::mod operator %(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::plus operator +(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::minus operator -(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::mult operator *(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::div operator /(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::mod operator %(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
# 1100 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_int_ref.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::logic operator &(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::logic operator |(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::logic operator ^(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::arg1 operator >>(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::arg1 operator <<(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::logic operator &(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::logic operator |(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::logic operator ^(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::arg1 operator >>(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::arg1 operator <<(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::logic operator &(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::logic operator |(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::logic operator ^(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::arg1 operator >>(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::arg1 operator <<(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::logic operator &(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::logic operator |(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::logic operator ^(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::arg1 operator >>(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::arg1 operator <<(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::logic operator &(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::logic operator |(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::logic operator ^(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::arg1 operator >>(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::arg1 operator <<(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::logic operator &(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::logic operator |(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::logic operator ^(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::arg1 operator >>(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::arg1 operator <<(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::logic operator &(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::logic operator |(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::logic operator ^(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::arg1 operator >>(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::arg1 operator <<(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::logic operator &(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::logic operator |(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::logic operator ^(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::arg1 operator >>(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::arg1 operator <<(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::logic operator &(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::logic operator |(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::logic operator ^(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::arg1 operator >>(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::arg1 operator <<(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::logic operator &(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::logic operator |(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::logic operator ^(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::arg1 operator >>(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::arg1 operator <<(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::logic operator &(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::logic operator |(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::logic operator ^(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::arg1 operator >>(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::arg1 operator <<(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::logic operator &(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::logic operator |(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::logic operator ^(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::arg1 operator >>(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::arg1 operator <<(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
# 1128 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_int_ref.h"
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())+( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())-( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())*( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::div operator /(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())/( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())%( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())&( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())|( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())^( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())>>( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())<<( rhs.operator ap_int_base<_AP_W2, false>()); }
# 1177 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_int_ref.h"
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::plus operator +( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() + rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::minus operator -( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() - rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::mult operator *( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() * rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::div operator /( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() / rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::mod operator %( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() % rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::logic operator &( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() & rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::logic operator |( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() | rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::logic operator ^( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() ^ rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::arg1 operator >>( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() >> rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::arg1 operator <<( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() << rhs.get(); }
# 1324 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_int_ref.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + 1, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, bool op2) { ap_int_base<1 + _AP_W, false> val(op2); ap_int_base<1 + _AP_W, false> ret(op1); ret <<= 1; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + 1, false> operator,( bool op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<1 + _AP_W, false> val(op1); ap_int_base<1 + _AP_W, false> ret(op2); if (_AP_S) { ret <<= 1; ret >>= 1; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + 1, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, bool op2) { ap_int_base<1 + _AP_W, false> val(op2); ap_int_base<1 + _AP_W, false> ret(op1); ret <<= 1; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + 1, false> operator,( bool op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<1 + _AP_W, false> val(op1); ap_int_base<1 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, bool op2) { ap_int_base<1 + 1, false> val(op2); val[1] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + 1, false> operator,( bool op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<1 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_W2 + 1, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, bool op2) { ap_int_base<1 + _AP_W + _AP_W2, false> val(op2); ap_int_base<1 + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= 1; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_W2 + 1, false> operator,( bool op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<1 + _AP_W + _AP_W2, false> val(op1); ap_int_base<1 + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + 1, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, bool op2) { ap_int_base<1 + _AP_W, false> val(op2); ap_int_base<1 + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= 1; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + 1, false> operator,( bool op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<1 + _AP_W, false> val(op1); ap_int_base<1 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + 1, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, bool op2) { ap_int_base<1 + 1, false> val(op2); val[1] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + 1, false> operator,( bool op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<1 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + 8, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (CHAR_IS_SIGNED) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + 8, false> operator,( char op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); if (_AP_S) { ret <<= 8; ret >>= 8; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + 8, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (CHAR_IS_SIGNED) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + 8, false> operator,( char op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<8 + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, char op2) { ap_int_base<8 + 1, false> val(op2); val[8] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<8 + 1, false> operator,( char op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, char op2) { ap_int_base<8 + _AP_W + _AP_W2, CHAR_IS_SIGNED> val(op2); ap_int_base<8 + _AP_W + _AP_W2, CHAR_IS_SIGNED> ret(op1); if (CHAR_IS_SIGNED) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( char op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<8 + _AP_W + _AP_W2, CHAR_IS_SIGNED> val(op1); ap_int_base<8 + _AP_W + _AP_W2, CHAR_IS_SIGNED> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + 8, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); if (CHAR_IS_SIGNED) { val <<= _AP_W; val >>= _AP_W; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + 8, false> operator,( char op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + 8, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, char op2) { ap_int_base<8 + 1, CHAR_IS_SIGNED> val(op2); val[8] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + 8, false> operator,( char op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + 1, CHAR_IS_SIGNED> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + 8, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, signed char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + 8, false> operator,( signed char op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); if (_AP_S) { ret <<= 8; ret >>= 8; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + 8, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, signed char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + 8, false> operator,( signed char op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<8 + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, signed char op2) { ap_int_base<8 + 1, false> val(op2); val[8] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<8 + 1, false> operator,( signed char op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, signed char op2) { ap_int_base<8 + _AP_W + _AP_W2, true> val(op2); ap_int_base<8 + _AP_W + _AP_W2, true> ret(op1); if (true) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( signed char op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<8 + _AP_W + _AP_W2, true> val(op1); ap_int_base<8 + _AP_W + _AP_W2, true> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + 8, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, signed char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); if (true) { val <<= _AP_W; val >>= _AP_W; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + 8, false> operator,( signed char op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + 8, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, signed char op2) { ap_int_base<8 + 1, true> val(op2); val[8] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + 8, false> operator,( signed char op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + 1, true> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + 8, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, unsigned char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + 8, false> operator,( unsigned char op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); if (_AP_S) { ret <<= 8; ret >>= 8; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + 8, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, unsigned char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + 8, false> operator,( unsigned char op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<8 + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, unsigned char op2) { ap_int_base<8 + 1, false> val(op2); val[8] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<8 + 1, false> operator,( unsigned char op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, unsigned char op2) { ap_int_base<8 + _AP_W + _AP_W2, false> val(op2); ap_int_base<8 + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( unsigned char op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<8 + _AP_W + _AP_W2, false> val(op1); ap_int_base<8 + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + 8, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + 8, false> operator,( unsigned char op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + 8, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned char op2) { ap_int_base<8 + 1, false> val(op2); val[8] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + 8, false> operator,( unsigned char op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); ret <<= _AP_SIZE_short; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( short op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_short; ret >>= _AP_SIZE_short; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); ret <<= _AP_SIZE_short; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( short op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_SIZE_short + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, short op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op2); val[_AP_SIZE_short] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_SIZE_short + 1, false> operator,( short op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_short, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, short op2) { ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, true> val(op2); ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, true> ret(op1); if (true) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_short; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_short, false> operator,( short op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, true> val(op1); ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, true> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); if (true) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_short; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( short op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + _AP_SIZE_short, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, short op2) { ap_int_base<_AP_SIZE_short + 1, true> val(op2); val[_AP_SIZE_short] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + _AP_SIZE_short, false> operator,( short op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_short + 1, true> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); ret <<= _AP_SIZE_short; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( unsigned short op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_short; ret >>= _AP_SIZE_short; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); ret <<= _AP_SIZE_short; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( unsigned short op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_SIZE_short + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op2); val[_AP_SIZE_short] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_SIZE_short + 1, false> operator,( unsigned short op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_short, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_short; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_short, false> operator,( unsigned short op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_short; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( unsigned short op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + _AP_SIZE_short, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op2); val[_AP_SIZE_short] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + _AP_SIZE_short, false> operator,( unsigned short op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); ret <<= _AP_SIZE_int; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( int op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_int; ret >>= _AP_SIZE_int; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); ret <<= _AP_SIZE_int; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( int op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_SIZE_int + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, int op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op2); val[_AP_SIZE_int] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_SIZE_int + 1, false> operator,( int op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_int, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, int op2) { ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, true> val(op2); ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, true> ret(op1); if (true) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_int; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_int, false> operator,( int op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, true> val(op1); ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, true> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); if (true) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_int; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( int op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + _AP_SIZE_int, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, int op2) { ap_int_base<_AP_SIZE_int + 1, true> val(op2); val[_AP_SIZE_int] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + _AP_SIZE_int, false> operator,( int op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_int + 1, true> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); ret <<= _AP_SIZE_int; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( unsigned int op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_int; ret >>= _AP_SIZE_int; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); ret <<= _AP_SIZE_int; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( unsigned int op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_SIZE_int + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op2); val[_AP_SIZE_int] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_SIZE_int + 1, false> operator,( unsigned int op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_int, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_int; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_int, false> operator,( unsigned int op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_int; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( unsigned int op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + _AP_SIZE_int, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op2); val[_AP_SIZE_int] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + _AP_SIZE_int, false> operator,( unsigned int op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); ret <<= _AP_SIZE_long; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( long op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_long; ret >>= _AP_SIZE_long; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); ret <<= _AP_SIZE_long; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( long op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_SIZE_long + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, long op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op2); val[_AP_SIZE_long] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_SIZE_long + 1, false> operator,( long op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_long, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, long op2) { ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, true> val(op2); ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, true> ret(op1); if (true) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_long; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_long, false> operator,( long op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, true> val(op1); ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, true> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); if (true) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_long; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( long op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + _AP_SIZE_long, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, long op2) { ap_int_base<_AP_SIZE_long + 1, true> val(op2); val[_AP_SIZE_long] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + _AP_SIZE_long, false> operator,( long op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_long + 1, true> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); ret <<= _AP_SIZE_long; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( unsigned long op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_long; ret >>= _AP_SIZE_long; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); ret <<= _AP_SIZE_long; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( unsigned long op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_SIZE_long + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op2); val[_AP_SIZE_long] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_SIZE_long + 1, false> operator,( unsigned long op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_long, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_long; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_long, false> operator,( unsigned long op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_long; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( unsigned long op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + _AP_SIZE_long, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op2); val[_AP_SIZE_long] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + _AP_SIZE_long, false> operator,( unsigned long op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); ret <<= _AP_SIZE_ap_slong; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_slong op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_ap_slong; ret >>= _AP_SIZE_ap_slong; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); ret <<= _AP_SIZE_ap_slong; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_slong op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_SIZE_ap_slong + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op2); val[_AP_SIZE_ap_slong] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_SIZE_ap_slong + 1, false> operator,( ap_slong op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_ap_slong, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, true> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, true> ret(op1); if (true) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_ap_slong; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_ap_slong, false> operator,( ap_slong op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, true> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, true> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); if (true) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_ap_slong; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_slong op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + _AP_SIZE_ap_slong, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + 1, true> val(op2); val[_AP_SIZE_ap_slong] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + _AP_SIZE_ap_slong, false> operator,( ap_slong op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_ap_slong + 1, true> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); ret <<= _AP_SIZE_ap_slong; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_ulong op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_ap_slong; ret >>= _AP_SIZE_ap_slong; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); ret <<= _AP_SIZE_ap_slong; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_ulong op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_SIZE_ap_slong + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op2); val[_AP_SIZE_ap_slong] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_SIZE_ap_slong + 1, false> operator,( ap_ulong op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_ap_slong, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_ap_slong; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_ap_slong, false> operator,( ap_ulong op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_ap_slong; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_ulong op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + _AP_SIZE_ap_slong, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op2); val[_AP_SIZE_ap_slong] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + _AP_SIZE_ap_slong, false> operator,( ap_ulong op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
# 1348 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_int_ref.h"
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, int rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, unsigned int rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, long rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, unsigned long rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, ap_slong rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, ap_ulong rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }

template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, int rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, unsigned int rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, long rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, unsigned long rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, ap_slong rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, ap_ulong rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
# 13 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\ap_int.h" 2




template <int _AP_W>
struct ap_int : ap_int_base<_AP_W, true> {
  typedef ap_int_base<_AP_W, true> Base;

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int() {}
  template <int _AP_W2>
                inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(const ap_int<_AP_W2>& op): Base((ap_int_base<_AP_W2, true>)op){



    op.checkOverflowCsim(_AP_W, true);

    Base::V = op.V;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(const volatile ap_int<_AP_W2>& op) {
    const_cast<const ap_int<_AP_W2>& >(op).checkOverflowCsim(_AP_W, true);
    Base::V = op.V;
  }

  template <int _AP_W2>
                inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(const ap_uint<_AP_W2>& op): Base((ap_int_base<_AP_W2, false>)op){



    op.checkOverflowCsim(_AP_W, true);

    Base::V = op.V;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(const volatile ap_uint<_AP_W2>& op) {
    const_cast<const ap_uint<_AP_W2>& >(op).checkOverflowCsim(_AP_W, true);
    Base::V = op.V;
  }




                inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(unsigned V __attribute__((bitwidth(_AP_W))), bool raw): Base(0) {
    Base::V = V;
    (void)(raw);
  }



  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(const ap_range_ref<_AP_W2, _AP_S2>& ref) : Base(ref) {}

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(const ap_bit_ref<_AP_W2, _AP_S2>& ref) : Base(ref) {}

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& ref)
      : Base(ref) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(const ap_fixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, true, _AP_Q2, _AP_O2, _AP_N2>)op) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(const ap_ufixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, false, _AP_Q2, _AP_O2, _AP_N2>)op) {
  }

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(
      const volatile ap_fixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, true, _AP_Q2, _AP_O2, _AP_N2>)op) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(
      const volatile ap_ufixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, false, _AP_Q2, _AP_O2, _AP_N2>)op) {
  }

  template <int _AP_W2, bool _AP_S2>
                inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(const ap_int_base<_AP_W2, _AP_S2>& op):Base(op) {

  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
                inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
                inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}







  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(bool val):Base(val){ this->checkOverflowBaseC(val); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(char val):Base(val){ this->checkOverflowBaseC(val); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(signed char val):Base(val){ this->checkOverflowBaseC(val); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(unsigned char val):Base(val){ this->checkOverflowBaseC(val); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(short val):Base(val){ this->checkOverflowBaseC(val); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(unsigned short val):Base(val){ this->checkOverflowBaseC(val); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(int val):Base(val){ this->checkOverflowBaseC(val); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(unsigned int val):Base(val){ this->checkOverflowBaseC(val); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(long val):Base(val){ this->checkOverflowBaseC(val); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(unsigned long val):Base(val){ this->checkOverflowBaseC(val); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(ap_slong val):Base(val){ this->checkOverflowBaseC(val); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(ap_ulong val):Base(val){ this->checkOverflowBaseC(val); }

                ap_int(double val) : Base(val) {}
                ap_int(float val) : Base(val) {}
  ap_int(half val) : Base(val) {}


  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(const char* s) : Base(s) {}

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(const char* s, signed char rd) : Base(s, rd) {}




  ap_int &operator=(const ap_int<_AP_W> &op2) = default;
# 161 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\ap_int.h"
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int& operator=(const volatile ap_int<_AP_W>& op2) {
    Base::V = op2.V;
    return *this;
  }


  inline __attribute__((always_inline)) __attribute__((nodebug)) void operator=(const ap_int<_AP_W>& op2) volatile {
    *((volatile typename Base::Base::DataType *)(&(Base::V))) = op2.V;
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) void operator=(const volatile ap_int<_AP_W>& op2) volatile {
    *((volatile typename Base::Base::DataType *)(&(Base::V))) = op2.V;
  }

};




template <int _AP_W>
struct ap_uint : ap_int_base<_AP_W, false> {
  typedef ap_int_base<_AP_W, false> Base;

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint() {}
  template <int _AP_W2>
                inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(const ap_uint<_AP_W2>& op):Base((ap_int_base<_AP_W2, false>)op) {
    op.checkOverflowCsim(_AP_W, false);

  }

  template <int _AP_W2>
                inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(const ap_int<_AP_W2>& op):Base((ap_int_base<_AP_W2, true>)op) {
    op.checkOverflowCsim(_AP_W, false);

  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(const volatile ap_uint<_AP_W2>& op) {
    const_cast<const ap_uint<_AP_W2>& >(op).checkOverflowCsim(_AP_W, false);
    Base::V = op.V;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(const volatile ap_int<_AP_W2>& op) {
    const_cast<const ap_int<_AP_W2>& >(op).checkOverflowCsim(_AP_W, false);
    Base::V = op.V;
  }




                inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(unsigned V __attribute__((bitwidth(_AP_W))), bool raw):Base(0) {
    Base::V = V;
    (void)(raw);
  }



  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(const ap_range_ref<_AP_W2, _AP_S2>& ref) : Base(ref) {}

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(const ap_bit_ref<_AP_W2, _AP_S2>& ref) : Base(ref) {}

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& ref)
      : Base(ref) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(const ap_fixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, true, _AP_Q2, _AP_O2, _AP_N2>)op) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(const ap_ufixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, false, _AP_Q2, _AP_O2, _AP_N2>)op) {
  }

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(
      const volatile ap_fixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, true, _AP_Q2, _AP_O2, _AP_N2>)op) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(
      const volatile ap_ufixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, false, _AP_Q2, _AP_O2, _AP_N2>)op) {
  }

  template <int _AP_W2, bool _AP_S2>
                inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(const ap_int_base<_AP_W2, _AP_S2>& op):Base(op) {

  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}






  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(bool val):Base(val) { this->checkOverflowBaseC(val); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(char val):Base(val) { this->checkOverflowBaseC(val); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(signed char val):Base(val) { this->checkOverflowBaseC(val); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(unsigned char val):Base(val) { this->checkOverflowBaseC(val); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(short val):Base(val) { this->checkOverflowBaseC(val); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(unsigned short val):Base(val) { this->checkOverflowBaseC(val); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(int val):Base(val) { this->checkOverflowBaseC(val); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(unsigned int val):Base(val) { this->checkOverflowBaseC(val); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(long val):Base(val) { this->checkOverflowBaseC(val); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(unsigned long val):Base(val) { this->checkOverflowBaseC(val); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(ap_slong val):Base(val) { this->checkOverflowBaseC(val); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(ap_ulong val):Base(val) { this->checkOverflowBaseC(val); }

                ap_uint(double val) : Base(val) {}
                ap_uint(float val) : Base(val) {}
  ap_uint(half val) : Base(val) {}


  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(const char* s) : Base(s) {}

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(const char* s, signed char rd) : Base(s, rd) {}





  ap_uint &operator=(const ap_uint<_AP_W> &op2) = default;
# 317 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\ap_int.h"
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint& operator=(const volatile ap_uint<_AP_W>& op2) {
    Base::V = op2.V;
    return *this;
  }


  inline __attribute__((always_inline)) __attribute__((nodebug)) void operator=(const ap_uint<_AP_W>& op2) volatile {
    *((volatile typename Base::Base::DataType *)(&(Base::V))) = op2.V;
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) void operator=(const volatile ap_uint<_AP_W>& op2) volatile {
    *((volatile typename Base::Base::DataType *)(&(Base::V))) = op2.V;
  }

};
# 352 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\ap_int.h"
# 1 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_int_special.h" 1
# 20 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_int_special.h"
namespace std {
template<typename _Tp> class complex;
}







namespace std {
# 48 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_int_special.h"
template <int _AP_W>
class complex<ap_int<_AP_W> > {
 public:
  typedef ap_int<_AP_W> _Tp;
  typedef _Tp value_type;




  __attribute__((nodebug)) complex() : _M_real(_Tp()), _M_imag(_Tp()) {}


  __attribute__((nodebug)) complex(const _Tp &__r, const _Tp &__i = _Tp(0))
      : _M_real(__r), _M_imag(__i) {}


  template <typename _Up>
  __attribute__((nodebug)) complex(const complex<_Up> &__z) : _M_real(__z.real()), _M_imag(__z.imag()) {}


  __attribute__((nodebug)) const _Tp& real() const { return _M_real; }
  const _Tp& imag() const { return _M_imag; }







  __attribute__((nodebug)) void real(_Tp __val) { _M_real = __val; }

  __attribute__((nodebug)) void imag(_Tp __val) { _M_imag = __val; }



  __attribute__((nodebug)) complex<_Tp> &operator=(const _Tp __t) {
    _M_real = __t;
    _M_imag = _Tp(0);
    return *this;
  }



  __attribute__((nodebug)) complex<_Tp> &operator+=(const _Tp &__t) {
    _M_real += __t;
    return *this;
  }



  __attribute__((nodebug)) complex<_Tp> &operator-=(const _Tp &__t) {
    _M_real -= __t;
    return *this;
  }



  __attribute__((nodebug)) complex<_Tp> &operator*=(const _Tp &__t) {
    _M_real *= __t;
    _M_imag *= __t;
    return *this;
  }



  __attribute__((nodebug)) complex<_Tp> &operator/=(const _Tp &__t) {
    _M_real /= __t;
    _M_imag /= __t;
    return *this;
  }


  template <typename _Up>
  __attribute__((nodebug)) complex<_Tp> &operator=(const complex<_Up> &__z) {
    _M_real = __z.real();
    _M_imag = __z.imag();
    return *this;
  }



  template <typename _Up>
  __attribute__((nodebug)) complex<_Tp> &operator+=(const complex<_Up> &__z) {
    _M_real += __z.real();
    _M_imag += __z.imag();
    return *this;
  }



  template <typename _Up>
  __attribute__((nodebug)) complex<_Tp> &operator-=(const complex<_Up> &__z) {
    _M_real -= __z.real();
    _M_imag -= __z.imag();
    return *this;
  }



  template <typename _Up>
  __attribute__((nodebug)) complex<_Tp> &operator*=(const complex<_Up> &__z) {
    const _Tp __r = _M_real * __z.real() - _M_imag * __z.imag();
    _M_imag = _M_real * __z.imag() + _M_imag * __z.real();
    _M_real = __r;
    return *this;
  }



  template <typename _Up>
  __attribute__((nodebug)) complex<_Tp> &operator/=(const complex<_Up> &__z) {
    complex<_Tp> cj (__z.real(), -__z.imag());
    complex<_Tp> a = (*this) * cj;
    complex<_Tp> b = cj * __z;
    _M_real = a.real() / b.real();
    _M_imag = a.imag() / b.real();
    return *this;
  }

 private:
  _Tp _M_real;
  _Tp _M_imag;

};
# 181 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_int_special.h"
template <int _AP_W>
inline __attribute__((nodebug)) bool operator==(const complex<ap_int<_AP_W> > &__x, const ap_int<_AP_W> &__y) {
  return __x.real() == __y &&
         __x.imag() == 0;
}


template <int _AP_W>
inline __attribute__((nodebug)) bool operator==(const ap_int<_AP_W> &__x, const complex<ap_int<_AP_W> > &__y) {
  return __x == __y.real() &&
         0 == __y.imag();
}


template <int _AP_W>
inline __attribute__((nodebug)) bool operator!=(const complex<ap_int<_AP_W> > &__x, const ap_int<_AP_W> &__y) {
  return __x.real() != __y ||
         __x.imag() != 0;
}


template <int _AP_W>
inline __attribute__((nodebug)) bool operator!=(const ap_int<_AP_W> &__x, const complex<ap_int<_AP_W> > &__y) {
  return __x != __y.real() ||
         0 != __y.imag();
}

}
# 353 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\ap_int.h" 2







# 1 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\ap_fixed.h" 1
# 10 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\ap_fixed.h"
# 1 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_fixed_base.h" 1
# 16 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_fixed_base.h"
# 1 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\ap_int.h" 1
# 17 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_fixed_base.h" 2
# 87 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_fixed_base.h"
template <int _AP_W2, int _AP_I2, bool _AP_S2>
struct _ap_fixed_factory;
template <int _AP_W2, int _AP_I2>
struct _ap_fixed_factory<_AP_W2, _AP_I2, true> {
  typedef ap_fixed<_AP_W2, _AP_I2> type;
};
template <int _AP_W2, int _AP_I2>
struct _ap_fixed_factory<_AP_W2, _AP_I2, false> {
  typedef ap_ufixed<_AP_W2, _AP_I2> type;
};
# 108 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_fixed_base.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
struct ap_fixed_base : ssdm_int<_AP_W, _AP_S> {
 public:
  typedef ssdm_int<_AP_W, _AP_S> Base;
  static const int width = _AP_W;
  static const int iwidth = _AP_I;
  static const ap_q_mode qmode = _AP_Q;
  static const ap_o_mode omode = _AP_O;


  template <int _AP_W2, int _AP_I2, bool _AP_S2>
  struct RType {
    enum {
      _AP_F = _AP_W - _AP_I,
      F2 = _AP_W2 - _AP_I2,
      mult_w = _AP_W + _AP_W2,
      mult_i = _AP_I + _AP_I2,
      mult_s = _AP_S || _AP_S2,
      plus_w = ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))) +
               1 + ((_AP_F) > (F2) ? (_AP_F) : (F2)),
      plus_i =
          ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))) + 1,
      plus_s = _AP_S || _AP_S2,
      minus_w =
          ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))) + 1 +
          ((_AP_F) > (F2) ? (_AP_F) : (F2)),
      minus_i =
          ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))) + 1,
      minus_s = true,

      div_w = _AP_S2 + _AP_W + ((F2) > (0) ? (F2) : (0)),



      div_i = _AP_S2 + _AP_I + F2,
      div_s = _AP_S || _AP_S2,
      logic_w =
          ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))) +
          ((_AP_F) > (F2) ? (_AP_F) : (F2)),
      logic_i = ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))),
      logic_s = _AP_S || _AP_S2
    };

    typedef ap_fixed_base<_AP_W, _AP_I, _AP_S> lhs;
    typedef ap_fixed_base<_AP_W2, _AP_I2, _AP_S2> rhs;

    typedef ap_fixed_base<mult_w, mult_i, mult_s> mult_base;
    typedef ap_fixed_base<plus_w, plus_i, plus_s> plus_base;
    typedef ap_fixed_base<minus_w, minus_i, minus_s> minus_base;
    typedef ap_fixed_base<logic_w, logic_i, logic_s> logic_base;
    typedef ap_fixed_base<div_w, div_i, div_s> div_base;
    typedef ap_fixed_base<_AP_W, _AP_I, _AP_S> arg1_base;

    typedef typename _ap_fixed_factory<mult_w, mult_i, mult_s>::type mult;
    typedef typename _ap_fixed_factory<plus_w, plus_i, plus_s>::type plus;
    typedef typename _ap_fixed_factory<minus_w, minus_i, minus_s>::type minus;
    typedef typename _ap_fixed_factory<logic_w, logic_i, logic_s>::type logic;
    typedef typename _ap_fixed_factory<div_w, div_i, div_s>::type div;
    typedef typename _ap_fixed_factory<_AP_W, _AP_I, _AP_S>::type arg1;
  };

 private:
# 295 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_fixed_base.h"
                      inline __attribute__((always_inline)) __attribute__((nodebug)) void report() {}




                      inline __attribute__((always_inline)) __attribute__((nodebug)) void overflow_adjust(bool underflow, bool overflow, bool lD,
                              bool sign) {
    if (!underflow && !overflow) return;
    if (_AP_O == AP_WRAP) {
      if (_AP_N == 0) return;
      if (_AP_S) {


        Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(sign) __Repl2__ = !!sign; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - 1, _AP_W - 1); __Result__; });
        if (_AP_N > 1) {

          ap_int_base<_AP_W, false> mask(-1);
          if (sign) mask.V = 0;
          Base::V =
              ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(mask.V) __Repl2__ = mask.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - _AP_N, _AP_W - 2); __Result__; });
        }
      } else {

        ap_int_base<_AP_W, false> mask(-1);
        Base::V =
            ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(mask.V) __Repl2__ = mask.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - _AP_N, _AP_W - 1); __Result__; });
      }
    } else if (_AP_O == AP_SAT_ZERO) {
      Base::V = 0;
    } else if (_AP_O == AP_WRAP_SM && _AP_S) {
      bool Ro = ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
      if (_AP_N == 0) {
        if (lD != Ro) {
          Base::V = ~Base::V;
          Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(lD) __Repl2__ = !!lD; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - 1, _AP_W - 1); __Result__; });
        }
      } else {
        if (_AP_N == 1 && sign != Ro) {
          Base::V = ~Base::V;
        } else if (_AP_N > 1) {
          bool lNo = ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - _AP_N); __Result__; });
          if (lNo == sign) Base::V = ~Base::V;
          ap_int_base<_AP_W, false> mask(-1);
          if (sign) mask.V = 0;
          Base::V =
              ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(mask.V) __Repl2__ = mask.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - _AP_N, _AP_W - 2); __Result__; });
        }
        Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(sign) __Repl2__ = !!sign; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - 1, _AP_W - 1); __Result__; });
      }
    } else {
      if (_AP_S) {
        if (overflow) {
          Base::V = 1;
          Base::V <<= _AP_W - 1;
          Base::V = ~Base::V;
        } else if (underflow) {
          Base::V = 1;
          Base::V <<= _AP_W - 1;
          if (_AP_O == AP_SAT_SYM) Base::V |= 1;
        }
      } else {
        if (overflow)
          Base::V = ~(ap_int_base<_AP_W, false>(0).V);
        else if (underflow)
          Base::V = 0;
      }
    }
  }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) bool quantization_adjust(bool qb, bool r, bool s) {
    bool carry = (bool)({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
    if (_AP_Q == AP_TRN) return false;
    if (_AP_Q == AP_RND_ZERO)
      qb &= s || r;
    else if (_AP_Q == AP_RND_MIN_INF)
      qb &= r;
    else if (_AP_Q == AP_RND_INF)
      qb &= !s || r;
    else if (_AP_Q == AP_RND_CONV)
      qb &= ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), 0); __Result__; }) || r;
    else if (_AP_Q == AP_TRN_ZERO)
      qb = s && (qb || r);
    Base::V += qb;
    return carry && (!(bool)({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; }));
  }


                      inline __attribute__((always_inline)) __attribute__((nodebug)) int countLeadingOnes() const {




    return 0;

  }

 public:



  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base() {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op):Base(op.V) {

    operator=(op);



    report();
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base(
      const volatile ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    operator=(op);
    report();
  }

  template <int _AP_W2, bool _AP_S2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base(const ap_int_base<_AP_W2, _AP_S2>& op):Base(op.V) {
    ap_fixed_base<_AP_W2, _AP_W2, _AP_S2> tmp(0);
    tmp.V = op.V;

    operator=(tmp);



    report();
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base(const volatile ap_int_base<_AP_W2, _AP_S2>& op) {
    ap_fixed_base<_AP_W2, _AP_W2, _AP_S2> tmp;
    tmp.V = op.V;
    operator=(tmp);
    report();
  }
# 458 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_fixed_base.h"
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base(const char* s) {
    typeof(Base::V) t;
    _ssdm_string2bits((void*)(&t), (const char*)(s), 10, _AP_I, _AP_S, _AP_Q,
                      _AP_O, _AP_N, true);
    Base::V = t;
  }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base(const char* s, signed char rd) {
    typeof(Base::V) t;
    _ssdm_string2bits((void*)(&t), (const char*)(s), rd, _AP_I, _AP_S, _AP_Q,
                      _AP_O, _AP_N, true);
    Base::V = t;
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base(const ap_bit_ref<_AP_W2, _AP_S2>& op) {
    *this = ((bool)op);
    report();
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base(const ap_range_ref<_AP_W2, _AP_S2>& op) {
    *this = (ap_int_base<_AP_W2, false>(op));
    report();
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& op) {
    *this = (ap_int_base<_AP_W2 + _AP_W3, false>(op));
    report();
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    *this = (bool(op));
    report();
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    *this = (ap_int_base<_AP_W2, false>(op));
    report();
  }
# 526 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_fixed_base.h"
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base(const bool x) { ap_fixed_base<(1), (1), (false)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base(const char x) { ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base(const signed char x) { ap_fixed_base<(8), (8), (true)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base(const unsigned char x) { ap_fixed_base<(8), (8), (false)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base(const short x) { ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base(const unsigned short x) { ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base(const int x) { ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base(const unsigned int x) { ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base(const long x) { ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base(const unsigned long x) { ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base(const ap_slong x) { ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base(const ap_ulong x) { ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)> tmp; tmp.V = x; *this = tmp; }







          __attribute__((nodebug)) ap_fixed_base(double d) {
    ap_int_base<64, false> ireg;
    ireg.V = doubleToRawBits(d);
    bool isneg = ({ typeof(ireg.V) __Val2__ = ireg.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), 63); __Result__; });

    ap_int_base<11 + 1, true> exp, bias = ((1 << (11 - 1)) - 1);
    ap_int_base<11, false> exp_tmp;
    exp_tmp.V = ({ typename _ap_type::remove_const<typeof(ireg.V)>::type __Result__ = 0; typeof(ireg.V) __Val2__ = ireg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 52, 52 + 11 - 1); __Result__; });
    exp = exp_tmp - bias;
    ap_int_base<52 + 2, true> man;
    man.V = ({ typename _ap_type::remove_const<typeof(ireg.V)>::type __Result__ = 0; typeof(ireg.V) __Val2__ = ireg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, 52 - 1); __Result__; });


    (static_cast<void>(0));

    man.V = ({ typename _ap_type::remove_const<typeof(man.V)>::type __Result__ = 0; typeof(man.V) __Val2__ = man.V; typeof(1) __Repl2__ = !!1; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 52, 52); __Result__; });
    if (isneg) man = -man;
    if ((ireg.V & 0x7fffffffffffffffLL) == 0) {
      Base::V = 0;
    } else {
      int _AP_W2 = 52 + 2, _AP_I2 = exp.V + 2, _AP_F = _AP_W - _AP_I,
          F2 = _AP_W2 - _AP_I2;
      bool _AP_S2 = true,
           QUAN_INC = F2 > _AP_F &&
                      !(_AP_Q == AP_TRN || (_AP_Q == AP_TRN_ZERO && !_AP_S2));
      bool carry = false;

      unsigned sh_amt = (F2 > _AP_F) ? F2 - _AP_F : _AP_F - F2;
      if (F2 == _AP_F)
        Base::V = man.V;
      else if (F2 > _AP_F) {
        if (sh_amt < 52 + 2)
          Base::V = man.V >> sh_amt;
        else {
          Base::V = isneg ? -1 : 0;
        }
        if ((_AP_Q != AP_TRN) && !((_AP_Q == AP_TRN_ZERO) && !_AP_S2)) {
          bool qb = (F2 - _AP_F > _AP_W2) ? isneg : (bool)({ typeof(man.V) __Val2__ = man.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), F2 - _AP_F - 1); __Result__; });

          bool r =
              (F2 > _AP_F + 1)
                  ? ({ typename _ap_type::remove_const<typeof(man.V)>::type __Result__ = 0; typeof(man.V) __Val2__ = man.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, (F2 - _AP_F - 2 < _AP_W2) ? (F2 - _AP_F - 2) : (_AP_W2 - 1)); __Result__; }) != 0


                  : false;
          carry = quantization_adjust(qb, r, isneg);
        }
      } else {
        Base::V = man.V;
        if (sh_amt < _AP_W)
          Base::V = Base::V << sh_amt;
        else
          Base::V = 0;
      }

      if ((_AP_O != AP_WRAP || _AP_N != 0) &&
          ((!_AP_S && _AP_S2) ||
           _AP_I - _AP_S <
               _AP_I2 - _AP_S2 +
                   (QUAN_INC ||
                    (_AP_S2 && (_AP_O == AP_SAT_SYM))))) {
        bool deleted_zeros = _AP_S2 ? true : !carry, deleted_ones = true;
        bool neg_src = isneg;
        bool lD = false;
        int pos1 = F2 - _AP_F + _AP_W;
        int pos2 = F2 - _AP_F + _AP_W + 1;
        bool newsignbit = ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
        if (pos1 < _AP_W2 && pos1 >= 0)

          lD = (man.V >> pos1) & 1;
        if (pos1 < _AP_W2) {
          bool Range1_all_ones = true;
          bool Range1_all_zeros = true;
          bool Range2_all_ones = true;
          ap_int_base<52 + 2, false> Range2;
          ap_int_base<52 + 2, false> all_ones(-1);

          if (pos2 >= 0 && pos2 < _AP_W2) {


            Range2.V = man.V;
            Range2.V >>= pos2;
            Range2_all_ones = Range2 == (all_ones >> pos2);
          } else if (pos2 < 0)
            Range2_all_ones = false;
          if (pos1 >= 0 && pos2 < _AP_W2) {
            Range1_all_ones = Range2_all_ones && lD;
            Range1_all_zeros = !Range2.V && !lD;
          } else if (pos2 == _AP_W2) {
            Range1_all_ones = lD;
            Range1_all_zeros = !lD;
          } else if (pos1 < 0) {
            Range1_all_zeros = !man.V;
            Range1_all_ones = false;
          }

          deleted_zeros =
              deleted_zeros && (carry ? Range1_all_ones : Range1_all_zeros);
          deleted_ones =
              carry ? Range2_all_ones && (pos1 < 0 || !lD) : Range1_all_ones;
          neg_src = isneg && !(carry && Range1_all_ones);
        } else
          neg_src = isneg && newsignbit;
        bool neg_trg = _AP_S && newsignbit;
        bool overflow = (neg_trg || !deleted_zeros) && !isneg;
        bool underflow = (!neg_trg || !deleted_ones) && neg_src;
        if ((_AP_O == AP_SAT_SYM) && _AP_S2 && _AP_S)
          underflow |=
              neg_src &&
              (_AP_W > 1 ? ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, _AP_W - 2); __Result__; }) == 0
                         : true);
        overflow_adjust(underflow, overflow, lD, neg_src);
      }
    }
    report();
  }


  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base(float d) { *this = ap_fixed_base(double(d)); }


  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base(half d) { *this = ap_fixed_base(double(d)); }
# 800 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_fixed_base.h"
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base& operator=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {

    const int _AP_F = _AP_W - _AP_I;
    const int F2 = _AP_W2 - _AP_I2;
    const int QUAN_INC =
          F2 > _AP_F && !(_AP_Q == AP_TRN || (_AP_Q == AP_TRN_ZERO && !_AP_S2));

    if (!op) Base::V = 0;
    bool carry = false;
    bool signbit = ({ typeof(op.V) __Val2__ = op.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W2 - 1); __Result__; });
    bool isneg = signbit && _AP_S2;
    if (F2 == _AP_F)
      Base::V = op.V;
    else if (F2 > _AP_F) {
      unsigned int sh_amt = F2 - _AP_F;

      if (sh_amt < _AP_W2) {
        Base::V = op.V >> sh_amt;
      } else {
        Base::V = isneg ? -1 : 0;
      }
      if (_AP_Q != AP_TRN && !(_AP_Q == AP_TRN_ZERO && !_AP_S2)) {
        bool qbit = ({ typeof(op.V) __Val2__ = op.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), F2 - _AP_F - 1); __Result__; });

        bool qb = (F2 - _AP_F > _AP_W2) ? _AP_S2 && signbit : qbit;
        enum { hi = ((F2 - _AP_F - 2) < _AP_W2) ? (F2 - _AP_F - 2) : (_AP_W2 - 1) };

        bool r = (F2 > _AP_F + 1) ? (({ typename _ap_type::remove_const<typeof(op.V)>::type __Result__ = 0; typeof(op.V) __Val2__ = op.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, hi); __Result__; }) != 0) : false;
        carry = quantization_adjust(qb, r, isneg);
      }
    } else {
      unsigned sh_amt = _AP_F - F2;

      if (sh_amt < _AP_W) {
        if (_AP_W > _AP_W2) {

          Base::V = op.V;
          Base::V <<= sh_amt;
        } else {

          Base::V = op.V << sh_amt;
        }
      } else {
        Base::V = 0;
      }
    }

    if ((_AP_O != AP_WRAP || _AP_N != 0) &&
        ((!_AP_S && _AP_S2) ||
         _AP_I - _AP_S <
             _AP_I2 - _AP_S2 +
                 (QUAN_INC || (_AP_S2 && _AP_O == AP_SAT_SYM)))) {
      bool deleted_zeros = _AP_S2 ? true : !carry;
      bool deleted_ones = true;
      bool neg_src = isneg;
      bool newsignbit = ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
      enum { pos1 = F2 - _AP_F + _AP_W, pos2 = F2 - _AP_F + _AP_W + 1 };
      bool lD = (pos1 < _AP_W2 && pos1 >= 0) ? ({ typeof(op.V) __Val2__ = op.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), pos1); __Result__; })
                                             : false;
      if (pos1 < _AP_W2) {
        bool Range1_all_ones = true;
        bool Range1_all_zeros = true;
        bool Range2_all_ones = true;
        ap_int_base<_AP_W2, false> all_ones(-1);

        if (pos2 < _AP_W2 && pos2 >= 0) {
          ap_int_base<_AP_W2, false> Range2(0);
          Range2.V = ({ typename _ap_type::remove_const<typeof(op.V)>::type __Result__ = 0; typeof(op.V) __Val2__ = op.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), pos2, _AP_W2 - 1); __Result__; });
          Range2_all_ones = Range2 == (all_ones >> pos2);
        } else if (pos2 < 0) {
          Range2_all_ones = false;
        }

        if (pos1 >= 0 && pos2 < _AP_W2) {
          ap_int_base<_AP_W2, false> Range1(0);
          Range1.V = ({ typename _ap_type::remove_const<typeof(op.V)>::type __Result__ = 0; typeof(op.V) __Val2__ = op.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), pos1, _AP_W2 - 1); __Result__; });
          Range1_all_ones = Range1 == (all_ones >> pos1);
          Range1_all_zeros = !Range1.V;
        } else if (pos2 == _AP_W2) {
          Range1_all_ones = lD;
          Range1_all_zeros = !lD;
        } else if (pos1 < 0) {
          Range1_all_zeros = !op.V;
          Range1_all_ones = false;
        }

        deleted_zeros =
            deleted_zeros && (carry ? Range1_all_ones : Range1_all_zeros);
        deleted_ones =
            carry ? Range2_all_ones && (pos1 < 0 || !lD) : Range1_all_ones;
        neg_src = isneg && !(carry && Range1_all_ones);
      } else
        neg_src = isneg && newsignbit;
      bool neg_trg = _AP_S && newsignbit;
      bool overflow = (neg_trg || !deleted_zeros) && !isneg;
      bool underflow = (!neg_trg || !deleted_ones) && neg_src;
      if ((_AP_O == AP_SAT_SYM) && _AP_S2 && _AP_S)
        underflow |=
            neg_src &&
            (_AP_W > 1 ? ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, _AP_W - 2); __Result__; }) == 0
                       : true);

      overflow_adjust(underflow, overflow, lD, neg_src);
    }
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base& operator=(
      const volatile ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    operator=(const_cast<const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(op));
    return *this;
  }


                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base& setBits(ap_ulong bv) {

    Base::V = bv;
    return *this;
  }


  static inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base bitsToFixed(ap_ulong bv) {

    ap_fixed_base t;

    t.V = bv;



    return t;
  }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) void checkOverflowCsimFix(int _ap_w2, bool _ap_s2) const {
# 973 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_fixed_base.h"
      (void)_ap_w2;
      (void)_ap_s2;

      return;
  }





                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<((_AP_I) > (1) ? (_AP_I) : (1)), _AP_S> to_ap_int_base(
      bool Cnative = true) const {
    ap_int_base<((_AP_I) > (1) ? (_AP_I) : (1)), _AP_S> ret(0);
    if (_AP_I == 0) {
      ret.V = 0;
    } else if (_AP_I > 0 && _AP_I <= _AP_W) {
      ret.V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W - _AP_I, _AP_W - 1); __Result__; });
    } else if (_AP_I > _AP_W) {
      ret.V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, _AP_W - 1); __Result__; });
      ret.V <<= (_AP_I - _AP_W);
    }
# 1002 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_fixed_base.h"
    if (Cnative && _AP_I < _AP_W) {

      if (_AP_S && ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; }) && (_AP_I < _AP_W) &&
          (({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, _AP_I < 0 ? _AP_W - 1 : _AP_W - _AP_I - 1); __Result__; }) != (unsigned long)0))


        ret = ret + 1;
    } else {

    }
    return ret;
  };

 public:
  template <int _AP_W2, bool _AP_S2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) operator ap_int_base<_AP_W2, _AP_S2>() const {
    return ap_int_base<_AP_W2, _AP_S2>(to_ap_int_base());
  }


                      inline __attribute__((always_inline)) __attribute__((nodebug)) char to_char() const { return to_ap_int_base().to_char(); }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) int to_int() const { return to_ap_int_base().to_int(); }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) unsigned to_uint() const { return to_ap_int_base().to_uint(); }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_slong to_int64() const { return to_ap_int_base().to_int64(); }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ulong to_uint64() const { return to_ap_int_base().to_uint64(); }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int<_AP_I> to_ap_int() const { return ap_int<_AP_I>(to_ap_int_base()); }



  inline __attribute__((always_inline)) __attribute__((nodebug)) double to_double() const {




    enum { BITS = 52 + 11 + 1 };
    if (!Base::V) return 0.0f;
    bool s = _AP_S && ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
    ap_int_base<_AP_W, false> tmp(0);
    if (s)
      tmp.V = -Base::V;
    else
      tmp.V = Base::V;
    int l = tmp.countLeadingZeros();
    int e = _AP_I - l - 1 + ((1 << (11 - 1)) - 1);
    int lsb_index = _AP_W - l - 1 - 52;

    bool a = (lsb_index >=2) ?
        (({ typename _ap_type::remove_const<typeof(tmp.V)>::type __Result__ = 0; typeof(tmp.V) __Val2__ = tmp.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, lsb_index - 2); __Result__; }) != 0) : 0;

    a |= (lsb_index >=0) ? ({ typeof(tmp.V) __Val2__ = tmp.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), lsb_index); __Result__; }) : 0;

    ap_ulong m = 0;

    if (_AP_W > BITS) {
      m = (lsb_index >= 1) ? (ap_ulong)(tmp.V >> (lsb_index - 1))
                           : (ap_ulong)(tmp.V << (1 - lsb_index));
    } else {
      m = (ap_ulong)tmp.V;
      m = (lsb_index >= 1) ? (m >> (lsb_index - 1))
                           : (m << (1 - lsb_index));
    }
    m += a;
    m >>= 1;


    if (({ typeof(m) __Val2__ = m; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), 52 + 1); __Result__; })) {
      e += 1;
    }

    m = ({ typename _ap_type::remove_const<typeof(m)>::type __Result__ = 0; typeof(m) __Val2__ = m; typeof(s) __Repl2__ = !!s; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), BITS - 1, BITS - 1); __Result__; });

    m = ({ typename _ap_type::remove_const<typeof(m)>::type __Result__ = 0; typeof(m) __Val2__ = m; typeof(e) __Repl2__ = e; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 52, 52 + 11 - 1); __Result__; });


    return rawBitsToDouble(m);
  }



  inline __attribute__((always_inline)) __attribute__((nodebug)) float to_float() const {




    enum { BITS = 23 + 8 + 1 };
    if (!Base::V) return 0.0f;
    bool s = _AP_S && ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
    ap_int_base<_AP_W, false> tmp;
    if (s)
      tmp.V = -Base::V;
    else
      tmp.V = Base::V;
    int l = tmp.countLeadingZeros();
    int e = _AP_I - l - 1 + ((1 << (8 - 1)) - 1);
    int lsb_index = _AP_W - l - 1 - 23;

    bool a = (lsb_index >=2) ?
        (({ typename _ap_type::remove_const<typeof(tmp.V)>::type __Result__ = 0; typeof(tmp.V) __Val2__ = tmp.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, lsb_index - 2); __Result__; }) != 0) : 0;

    a |= (lsb_index >=0) ? ({ typeof(tmp.V) __Val2__ = tmp.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), lsb_index); __Result__; }) : 0;

    unsigned long m;

    if (_AP_W > BITS) {
      m = (lsb_index >= 1) ? (unsigned long)(tmp.V >> (lsb_index - 1))
                           : (unsigned long)(tmp.V << (1 - lsb_index));
    } else {
      m = (unsigned long)tmp.V;
      m = (lsb_index >= 1) ? (m >> (lsb_index - 1))
                           : (m << (1 - lsb_index));
    }
    m += a;
    m >>= 1;

    if (({ typeof(m) __Val2__ = m; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), 23 + 1); __Result__; })) {
      e += 1;
    }

    m = ({ typename _ap_type::remove_const<typeof(m)>::type __Result__ = 0; typeof(m) __Val2__ = m; typeof(s) __Repl2__ = !!s; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), BITS - 1, BITS - 1); __Result__; });
    m = ({ typename _ap_type::remove_const<typeof(m)>::type __Result__ = 0; typeof(m) __Val2__ = m; typeof(e) __Repl2__ = e; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 23, 23 + 8 - 1); __Result__; });

    return rawBitsToFloat(m);
  }



  inline __attribute__((always_inline)) __attribute__((nodebug)) half to_half() const {




    enum { BITS = 10 + 5 + 1 };
    if (!Base::V) return 0.0f;
    bool s = _AP_S && ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
    ap_int_base<_AP_W, false> tmp;
    if (s)
      tmp.V = -Base::V;
    else
      tmp.V = Base::V;
    int l = tmp.countLeadingZeros();
    int e = _AP_I - l - 1 + ((1 << (5 - 1)) - 1);
    int lsb_index = _AP_W - l - 1 - 10;

    bool a = (lsb_index >=2) ?
        (({ typename _ap_type::remove_const<typeof(tmp.V)>::type __Result__ = 0; typeof(tmp.V) __Val2__ = tmp.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, lsb_index - 2); __Result__; }) != 0) : 0;

    a |= (lsb_index >=0) ? ({ typeof(tmp.V) __Val2__ = tmp.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), lsb_index); __Result__; }) : 0;

    unsigned short m;

    if (_AP_W > BITS) {
      m = (lsb_index >= 1) ? (unsigned short)(tmp.V >> (lsb_index - 1))
                           : (unsigned short)(tmp.V << (1 - lsb_index));
    } else {
      m = (unsigned short)tmp.V;
      m = (lsb_index >= 1) ? (m >> (lsb_index - 1))
                           : (m << (1 - lsb_index));
    }
    m += a;
    m >>= 1;

    if (({ typeof(m) __Val2__ = m; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), 10 + 1); __Result__; })) {
      e += 1;
    }

    m = ({ typename _ap_type::remove_const<typeof(m)>::type __Result__ = 0; typeof(m) __Val2__ = m; typeof(s) __Repl2__ = !!s; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), BITS - 1, BITS - 1); __Result__; });
    m = ({ typename _ap_type::remove_const<typeof(m)>::type __Result__ = 0; typeof(m) __Val2__ = m; typeof(e) __Repl2__ = e; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 10, 10 + 5 - 1); __Result__; });

    return rawBitsToHalf(m);
  }


  inline __attribute__((always_inline)) __attribute__((nodebug)) operator long double() const { return (long double)to_double(); }

  inline __attribute__((always_inline)) __attribute__((nodebug)) operator double() const { return to_double(); }

  inline __attribute__((always_inline)) __attribute__((nodebug)) operator float() const { return to_float(); }

  inline __attribute__((always_inline)) __attribute__((nodebug)) operator half() const { return to_half(); }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) operator bool() const { return (bool)Base::V != 0; }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) operator char() const { return (char)to_int(); }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) operator signed char() const { return (signed char)to_int(); }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) operator unsigned char() const { return (unsigned char)to_uint(); }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) operator short() const { return (short)to_int(); }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) operator unsigned short() const { return (unsigned short)to_uint(); }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) operator int() const { return to_int(); }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) operator unsigned int() const { return to_uint(); }



                      inline __attribute__((always_inline)) __attribute__((nodebug)) operator long() const { return (long)to_int64(); }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) operator unsigned long() const { return (unsigned long)to_uint64(); }






                      inline __attribute__((always_inline)) __attribute__((nodebug)) operator ap_ulong() const { return to_uint64(); }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) operator ap_slong() const { return to_int64(); }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) int length() const { return _AP_W; };
# 1231 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_fixed_base.h"
                      inline __attribute__((always_inline)) __attribute__((nodebug)) int countLeadingZeros() const {


    if (_AP_W <= 32) {
      ap_int_base<32, false> t(-1ULL);
      t.range(_AP_W - 1, 0) = this->range(0, _AP_W - 1);
      return __builtin_ctz(t.V);
    } else if (_AP_W <= 64) {
      ap_int_base<64, false> t(-1ULL);
      t.range(_AP_W - 1, 0) = this->range(0, _AP_W - 1);
      return __builtin_ctzll(t.V);
    } else {
      enum {__N = (_AP_W + 63) / 64};
      int NZeros = 0;
      int i = 0;
      bool hitNonZero = false;
      VITIS_LOOP_1247_1: for (i = 0; i < __N - 1; ++i) {
        ap_int_base<64, false> t;
        t.range(0, 63) = this->range(_AP_W - i * 64 - 64, _AP_W - i * 64 - 1);
        NZeros += hitNonZero ? 0 : __builtin_clzll(t.V);
        hitNonZero |= (t != 0);
      }
      if (!hitNonZero) {
        ap_int_base<64, false> t(-1ULL);
        t.range(63 - (_AP_W - 1) % 64, 63) = this->range(0, (_AP_W - 1) % 64);
        NZeros += __builtin_clzll(t.V);
      }
      return NZeros;
    }



  }



  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) typename RType<_AP_W2, _AP_I2, _AP_S2>::mult operator*(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2)
      const {
    typename RType<_AP_W2, _AP_I2, _AP_S2>::mult_base r(0), t(0);
    r.V = Base::V;
    t.V = op2.V;
    r.V *= op2.V;
    return r;
  }



  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) typename RType<_AP_W2, _AP_I2, _AP_S2>::div operator/(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2)
      const {
    typename RType<_AP_W2, _AP_I2, _AP_S2>::div_base r;
# 1301 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_fixed_base.h"
        ap_fixed_base<_AP_W + ((_AP_W2 - _AP_I2) > (0) ? (_AP_W2 - _AP_I2) : (0)),_AP_I, _AP_S> t(*this);



        r.V = t.V / op2.V;
# 1334 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_fixed_base.h"
    return r;
  }
# 1349 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_fixed_base.h"
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename RType<_AP_W2, _AP_I2, _AP_S2>::plus operator +( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { typename RType<_AP_W2, _AP_I2, _AP_S2>::plus_base ret(0), lhs(*this), rhs(op2); ret.V = lhs.V + rhs.V; return ret; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename RType<_AP_W2, _AP_I2, _AP_S2>::minus operator -( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { typename RType<_AP_W2, _AP_I2, _AP_S2>::minus_base ret(0), lhs(*this), rhs(op2); ret.V = lhs.V - rhs.V; return ret; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename RType<_AP_W2, _AP_I2, _AP_S2>::logic operator &( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { typename RType<_AP_W2, _AP_I2, _AP_S2>::logic_base ret(0), lhs(*this), rhs(op2); ret.V = lhs.V & rhs.V; return ret; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename RType<_AP_W2, _AP_I2, _AP_S2>::logic operator |( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { typename RType<_AP_W2, _AP_I2, _AP_S2>::logic_base ret(0), lhs(*this), rhs(op2); ret.V = lhs.V | rhs.V; return ret; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename RType<_AP_W2, _AP_I2, _AP_S2>::logic operator ^( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { typename RType<_AP_W2, _AP_I2, _AP_S2>::logic_base ret(0), lhs(*this), rhs(op2); ret.V = lhs.V ^ rhs.V; return ret; }
# 1367 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_fixed_base.h"
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base& operator *=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator *(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base& operator /=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator /(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base& operator +=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator +(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base& operator -=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator -(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base& operator &=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator &(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base& operator |=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator |(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base& operator ^=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator ^(op2); return *this; }





  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base& operator++() {
    operator+=(ap_fixed_base<_AP_W - _AP_I + 1, 1, false>(1));
    return *this;
  }


  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base& operator--() {
    operator-=(ap_fixed_base<_AP_W - _AP_I + 1, 1, false>(1));
    return *this;
  }


  inline __attribute__((always_inline)) __attribute__((nodebug)) const ap_fixed_base operator++(int) {
    ap_fixed_base r(*this);
    operator++();
    return r;
  }


  inline __attribute__((always_inline)) __attribute__((nodebug)) const ap_fixed_base operator--(int) {
    ap_fixed_base r(*this);
    operator--();
    return r;
  }



  inline __attribute__((always_inline)) __attribute__((nodebug)) typename _ap_fixed_factory<_AP_W, _AP_I, _AP_S>::type operator+() { return *this; }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) typename _ap_fixed_factory<_AP_W + 1, _AP_I + 1, true>::type operator-() const {
    ap_fixed_base<_AP_W + 1, _AP_I + 1, true> r(*this);
    r.V = -r.V;
    return r;
  }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, true, _AP_Q, _AP_O, _AP_N> getNeg() {
    ap_fixed_base<_AP_W, _AP_I, true, _AP_Q, _AP_O, _AP_N> r(*this);
    r.V = -r.V;
    return r;
  }



                      inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator!() const { return Base::V == (unsigned long)0; }




                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S> operator~() const {
    ap_fixed_base<_AP_W, _AP_I, _AP_S> r(0);
    r.V = ~Base::V;
    return r;
  }




  template <int _AP_SHIFT>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I + _AP_SHIFT, _AP_S> lshift() const {
    ap_fixed_base<_AP_W, _AP_I + _AP_SHIFT, _AP_S> r(0);
    r.V = Base::V;
    return r;
  }

  template <int _AP_SHIFT>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I - _AP_SHIFT, _AP_S> rshift() const {
    ap_fixed_base<_AP_W, _AP_I - _AP_SHIFT, _AP_S> r(0);
    r.V = Base::V;
    return r;
  }





                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base operator<<(unsigned int sh) const {
    ap_fixed_base r(0);
    r.V = Base::V << sh;
# 1485 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_fixed_base.h"
    return r;
  }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base operator>>(unsigned int sh) const {
    ap_fixed_base r(0);
    r.V = Base::V >> sh;
# 1507 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_fixed_base.h"
    return r;
  }


                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base operator<<(int sh) const {
    ap_fixed_base r(0);
    bool isNeg = sh < 0;
    unsigned int ush = isNeg ? -sh : sh;
    if (isNeg) {
      return operator>>(ush);
    } else {
      return operator<<(ush);
    }
  }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base operator>>(int sh) const {
    bool isNeg = sh < 0;
    unsigned int ush = isNeg ? -sh : sh;
    if (isNeg) {
      return operator<<(ush);
    } else {
      return operator>>(ush);
    }
  }


  template <int _AP_W2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base operator<<(const ap_int_base<_AP_W2, true>& op2) const {


    int sh = op2.to_int();
    return operator<<(sh);
  }

  template <int _AP_W2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base operator>>(const ap_int_base<_AP_W2, true>& op2) const {
    int sh = op2.to_int();
    return operator>>(sh);
  }


  template <int _AP_W2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base operator<<(const ap_int_base<_AP_W2, false>& op2) const {
    unsigned int sh = op2.to_uint();
    return operator<<(sh);
  }

  template <int _AP_W2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base operator>>(const ap_int_base<_AP_W2, false>& op2) const {
    unsigned int sh = op2.to_uint();
    return operator>>(sh);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base operator<<(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          op2) {
    return operator<<(op2.to_ap_int_base());
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base operator>>(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          op2) {
    return operator>>(op2.to_ap_int_base());
  }





                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base& operator<<=(const int sh) {
    *this = operator<<(sh);
    return *this;
  }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base& operator<<=(const unsigned int sh) {
    *this = operator<<(sh);
    return *this;
  }

  template <int _AP_W2, bool _AP_S2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base& operator<<=(const ap_int_base<_AP_W2, _AP_S2>& sh) {
    *this = operator<<(sh.to_int());
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base& operator<<=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          sh) {
    *this = operator<<(sh.to_int());
    return *this;
  }


                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base& operator>>=(const int sh) {
    *this = operator>>(sh);
    return *this;
  }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base& operator>>=(const unsigned int sh) {
    *this = operator>>(sh);
    return *this;
  }

  template <int _AP_W2, bool _AP_S2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base& operator>>=(const ap_int_base<_AP_W2, _AP_S2>& sh) {
    *this = operator>>(sh.to_int());
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base& operator>>=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          sh) {
    *this = operator>>(sh.to_int());
    return *this;
  }
# 1651 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_fixed_base.h"
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V > op2.V; else if (_AP_F > F2) return Base::V > ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V > op2.V; return false; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V < op2.V; else if (_AP_F > F2) return Base::V < ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V < op2.V; return false; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V >= op2.V; else if (_AP_F > F2) return Base::V >= ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V >= op2.V; return false; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V <= op2.V; else if (_AP_F > F2) return Base::V <= ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V <= op2.V; return false; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V == op2.V; else if (_AP_F > F2) return Base::V == ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V == op2.V; return false; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V != op2.V; else if (_AP_F > F2) return Base::V != ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V != op2.V; return false; }





  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(double d) const { return to_double() > d; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(double d) const { return to_double() < d; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(double d) const { return to_double() >= d; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(double d) const { return to_double() <= d; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(double d) const { return to_double() == d; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(double d) const { return to_double() != d; }


  inline __attribute__((always_inline)) __attribute__((nodebug)) af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator[](
      unsigned index) {
    (static_cast<void>(0));
    return af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(this, index);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator[](
      const ap_int_base<_AP_W2, _AP_S2>& index) {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(this,
                                                                index.to_int());
  }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator[](unsigned index) const {
    (static_cast<void>(0));
    return ({ typeof(const_cast<ap_fixed_base*>(this)->V) __Val2__ = const_cast<ap_fixed_base*>(this)->V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), index); __Result__; });
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> bit(
      unsigned index) {
    (static_cast<void>(0));
    return af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(this, index);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> bit(
      const ap_int_base<_AP_W2, _AP_S2>& index) {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(this,
                                                                index.to_int());
  }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) bool bit(unsigned index) const {
    (static_cast<void>(0));
    return ({ typeof(const_cast<ap_fixed_base*>(this)->V) __Val2__ = const_cast<ap_fixed_base*>(this)->V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), index); __Result__; });
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> get_bit(
      const ap_int_base<_AP_W2, true>& index) {
    (static_cast<void>(0));

    (static_cast<void>(0));
    return af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(
        this, index.to_int() + _AP_W - _AP_I);
  }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) bool get_bit(int index) const {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return ({ typeof(const_cast<ap_fixed_base*>(this)->V) __Val2__ = const_cast<ap_fixed_base*>(this)->V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), index + _AP_W - _AP_I); __Result__; });

  }
# 1737 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_fixed_base.h"
  template <int _AP_W2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) bool get_bit(const ap_int_base<_AP_W2, true>& index) const {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return ({ typeof(const_cast<ap_fixed_base*>(this)->V) __Val2__ = const_cast<ap_fixed_base*>(this)->V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), index.to_int() + _AP_W - _AP_I); __Result__; });

  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range(int Hi,
                                                                      int Lo) {
    (static_cast<void>(0));
    return af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(this, Hi, Lo);
  }


  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range(
      int Hi, int Lo) const {
    (static_cast<void>(0));
    return af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(
        const_cast<ap_fixed_base*>(this), Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) const {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range() {
    return this->range(_AP_W - 1, 0);
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range() const {
    return this->range(_AP_W - 1, 0);
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator()(
      int Hi, int Lo) {
    return this->range(Hi, Lo);
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator()(
      int Hi, int Lo) const {
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator()(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator()(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) const {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) bool is_zero() const { return Base::V == (unsigned long)0; }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) bool is_neg() const {
    if (_AP_S && ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; })) return true;
    return false;
  }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) int wl() const { return _AP_W; }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) int iwl() const { return _AP_I; }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_q_mode q_mode() const { return _AP_Q; }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_o_mode o_mode() const { return _AP_O; }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) int n_bits() const { return _AP_N; }
# 1920 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_fixed_base.h"
  inline __attribute__((always_inline)) __attribute__((nodebug)) char* to_string(unsigned char radix = 2, bool sign = _AP_S) const {
    (void)(radix);
    (void)(sign);
    return 0;
  }

};

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
                    inline __attribute__((always_inline)) __attribute__((nodebug)) void b_not(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) {
  ret.V = ~op.V;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
                    inline __attribute__((always_inline)) __attribute__((nodebug)) void b_and(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  ret.V = op1.V & op2.V;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
                    inline __attribute__((always_inline)) __attribute__((nodebug)) void b_or(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  ret.V = op1.V | op2.V;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
                    inline __attribute__((always_inline)) __attribute__((nodebug)) void b_xor(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  ret.V = op1.V ^ op2.V;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N, int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
          ap_o_mode _AP_O2, int _AP_N2>
                    inline __attribute__((always_inline)) __attribute__((nodebug)) void neg(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
  ap_fixed_base<_AP_W2 + !_AP_S2, _AP_I2 + !_AP_S2, true, _AP_Q2, _AP_O2,
                _AP_N2>
      t(0);
  t.V = -op.V;
  ret = t;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N, int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
          ap_o_mode _AP_O2, int _AP_N2>
                    inline __attribute__((always_inline)) __attribute__((nodebug)) void lshift(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op,
    int i) {
  enum {
    F2 = _AP_W2 - _AP_I2,
    _AP_I3 = ((_AP_I) > (_AP_I2) ? (_AP_I) : (_AP_I2)),
    _AP_W3 = _AP_I3 + F2,
  };

  ap_fixed_base<_AP_W3, _AP_I3, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> t(0);
  t.V = op.V;
  t.V <<= i;

  ret = t;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N, int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
          ap_o_mode _AP_O2, int _AP_N2>
                    inline __attribute__((always_inline)) __attribute__((nodebug)) void rshift(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op,
    int i) {
  enum {
    F = _AP_W - _AP_I,
    F2 = _AP_W2 - _AP_I2,
    F3 = ((F) > (F2) ? (F) : (F2)),
    _AP_W3 = _AP_I2 + F3,
    sh = F - F2,
  };

  ap_fixed_base<_AP_W3, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> t(0);
  t.V = op.V;
  if (sh >= 0)
    t.V <<= (int) sh;
  t.V >>= i;

  ret = t;
}
# 2372 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_fixed_base.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator +(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::plus operator +( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator -(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::minus operator -( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator *(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::mult operator *( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator /(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::div operator /( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator &(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator &( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator |(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator |( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator ^(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator ^( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator >>(ap_int_base<(1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator <<(ap_int_base<(1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator +=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator -=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator *=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator /=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator &=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator |=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator ^=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator >>=(ap_int_base<(1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator <<=(ap_int_base<(1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator >(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator <(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator >=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator <=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator ==(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator !=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator +(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::plus operator +( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator -(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::minus operator -( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator *(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::mult operator *( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator /(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::div operator /( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator &(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator &( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator |(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator |( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator ^(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator ^( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator >>(ap_int_base<(8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator <<(ap_int_base<(8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator +=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator -=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator *=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator /=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator &=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator |=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator ^=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator >>=(ap_int_base<(8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator <<=(ap_int_base<(8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator >(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator <(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator >=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator <=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator ==(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator !=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator +(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::plus operator +( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator -(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::minus operator -( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator *(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::mult operator *( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator /(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::div operator /( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator &(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator &( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator |(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator |( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator ^(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator ^( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator >>(ap_int_base<(8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator <<(ap_int_base<(8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator +=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator -=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator *=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator /=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator &=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator |=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator ^=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator >>=(ap_int_base<(8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator <<=(ap_int_base<(8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator >(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator <(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator >=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator <=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator ==(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator !=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator +(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::plus operator +( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator -(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::minus operator -( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator *(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::mult operator *( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator /(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::div operator /( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator &(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator &( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator |(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator |( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator ^(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator ^( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator >>(ap_int_base<(8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator <<(ap_int_base<(8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator +=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator -=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator *=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator /=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator &=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator |=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator ^=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator >>=(ap_int_base<(8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator <<=(ap_int_base<(8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator >(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator <(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator >=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator <=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator ==(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator !=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::plus operator +( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::minus operator -( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::mult operator *( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::div operator /( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator &( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator |( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator ^( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::plus operator +( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::minus operator -( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::mult operator *( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::div operator /( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator &( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator |( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator ^( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::plus operator +( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::minus operator -( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::mult operator *( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::div operator /( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator &( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator |( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator ^( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::plus operator +( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::minus operator -( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::mult operator *( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::div operator /( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator &( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator |( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator ^( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::plus operator +( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::minus operator -( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::mult operator *( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::div operator /( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator &( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator |( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator ^( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::plus operator +( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::minus operator -( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::mult operator *( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::div operator /( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator &( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator |( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator ^( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::plus operator +( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::minus operator -( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::mult operator *( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::div operator /( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator &( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator |( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator ^( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::plus operator +( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::minus operator -( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::mult operator *( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::div operator /( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator &( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator |( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator ^( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator !=(op); }
# 2460 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_fixed_base.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::plus operator +( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator +(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::minus operator -( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator -(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::mult operator *( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator *(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::div operator /( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator /(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::logic operator &( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator &(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::logic operator |( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator |(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::logic operator ^( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator ^(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }



template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator +=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W2, _AP_S2>& operator +=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator +=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator -=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W2, _AP_S2>& operator -=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator -=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator *=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W2, _AP_S2>& operator *=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator *=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator /=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W2, _AP_S2>& operator /=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator /=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator &=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W2, _AP_S2>& operator &=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator &=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator |=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W2, _AP_S2>& operator |=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator |=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator ^=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W2, _AP_S2>& operator ^=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator ^=(op.to_ap_int_base()); }



template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator ==(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator ==(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator !=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator >(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator >(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator >=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator >=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator <(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator <(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator <=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator <=(op); }




template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
                    inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator==(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator==(op1);
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
                    inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator!=(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator!=(op1);
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
                    inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator>(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator<(op1);
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
                    inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator>=(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator<=(op1);
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
                    inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator<(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator>(op1);
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
                    inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator<=(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator>=(op1);
}
# 11 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\ap_fixed.h" 2
# 1 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_fixed_ref.h" 1
# 25 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_fixed_ref.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
struct af_bit_ref {



  typedef ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> ref_type;
  ref_type& d_bv;
  int d_index;

 public:
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_bit_ref(
      const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ref)
      : d_bv(ref.d_bv), d_index(ref.d_index) {






  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) af_bit_ref(ref_type* bv, int index = 0) : d_bv(*bv), d_index(index) {}

  inline __attribute__((always_inline)) __attribute__((nodebug)) af_bit_ref(const ref_type* bv, int index = 0)
      : d_bv(*const_cast<ref_type*>(bv)), d_index(index) {}


  inline __attribute__((always_inline)) __attribute__((nodebug)) operator bool() const { return ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }



  inline __attribute__((always_inline)) __attribute__((nodebug)) af_bit_ref& operator=(bool val) {
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; });
    return *this;
  }



  inline __attribute__((always_inline)) __attribute__((nodebug)) af_bit_ref& operator=(const af_bit_ref& val) {
    return operator=(bool(val));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_bit_ref& operator=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=(bool(val));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_bit_ref& operator=(const ap_bit_ref<_AP_W2, _AP_S2>& val) {
    return operator=(bool(val));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_bit_ref& operator=(const ap_int_base<_AP_W2, _AP_S2>& val) {
    return operator=(val != 0);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_bit_ref& operator=(const ap_range_ref<_AP_W2, _AP_S2>& val) {
    return operator=(ap_int_base<_AP_W2, false>(val));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_bit_ref& operator=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=(ap_int_base<_AP_W2, false>(val));
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_bit_ref& operator=(
      const ap_concat_ref<_AP_W2, _AP_T3, _AP_W3, _AP_T3>& val) {
    return operator=(ap_int_base<_AP_W2 + _AP_W3, false>(val));
  }




  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<1, af_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(ap_int_base<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<1, af_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >(
        *this, op);
  }

  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<1, af_bit_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> > operator,(
      const ap_bit_ref<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<1, af_bit_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >(*this,
                                                                        op);
  }

  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<1, af_bit_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
  operator,(const ap_range_ref<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<1, af_bit_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >(
        *this, op);
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<1, af_bit_ref, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &op) {
    return ap_concat_ref<1, af_bit_ref, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(*this,
                                                                         op);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<
      1, af_bit_ref, _AP_W2,
      af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator,(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &op) {
    return ap_concat_ref<
        1, af_bit_ref, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(*this,
                                                                       op);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<1, af_bit_ref, 1, af_bit_ref<_AP_W2, _AP_I2, _AP_S2,
                                                    _AP_Q2, _AP_O2, _AP_N2> >
  operator,(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &op) {
    return ap_concat_ref<1, af_bit_ref, 1, af_bit_ref<_AP_W2, _AP_I2, _AP_S2,
                                                      _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            op));
  }




  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator==(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    return get() == op.get();
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator!=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    return get() != op.get();
  }


  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator~() const {
    bool bit = ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; });
    return bit ? false : true;
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) bool get() const { return ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }

  inline __attribute__((always_inline)) __attribute__((nodebug)) int length() const { return 1; }





  inline __attribute__((always_inline)) __attribute__((nodebug)) char* to_string() const { return 0; }

};
# 212 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_fixed_ref.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
struct af_range_ref {



  typedef ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> ref_type;
  ref_type& d_bv;
  int l_index;
  int h_index;

 public:

  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref(
      const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ref)
      : d_bv(ref.d_bv), l_index(ref.l_index), h_index(ref.h_index) {}




  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref(ref_type* bv, int h, int l)
      : d_bv(*bv), l_index(l), h_index(h) {
# 242 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_fixed_ref.h"
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref(const ref_type* bv, int h, int l)
      : d_bv(*const_cast<ref_type*>(bv)), l_index(l), h_index(h) {
# 254 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_fixed_ref.h"
  }
# 266 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_fixed_ref.h"
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref& operator=(const bool val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref& operator=(const char val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref& operator=(const signed char val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref& operator=(const unsigned char val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref& operator=(const short val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref& operator=(const unsigned short val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref& operator=(const int val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref& operator=(const unsigned int val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref& operator=(const long val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref& operator=(const unsigned long val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref& operator=(const ap_slong val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref& operator=(const ap_ulong val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref& operator=(const half val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref& operator=(const float val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref& operator=(const double val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }



  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref& operator=(const char* val) {
    const ap_int_base<_AP_W, false> tmp(val);
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
    return *this;
  }



  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref& operator=(const ap_int_base<_AP_W3, _AP_S3>& val) {
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val.V) __Repl2__ = val.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
    return *this;
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref& operator=(const ap_range_ref<_AP_W2, _AP_S2>& val) {
    const ap_int_base<_AP_W2, false> tmp(val);
    return operator=(tmp);
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref& operator=(const ap_bit_ref<_AP_W2, _AP_S2>& val) {
    const ap_int_base<1, false> tmp((bool)val);
    return operator=(tmp);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref& operator=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          val) {
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val.V) __Repl2__ = val.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
    return *this;
  }




  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref& operator=(const af_range_ref& val) {
    ap_int_base<_AP_W, false> tmp(val);
    return operator=(tmp);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref& operator=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    ap_int_base<_AP_W2, false> tmp(val);
    return operator=(tmp);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref& operator=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    ap_int_base<1, false> tmp((bool)val);
    return operator=(tmp);
  }


  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref& operator=(
      const ap_concat_ref<_AP_W2, _AP_T3, _AP_W3, _AP_T3>& val) {
    const ap_int_base<_AP_W2 + _AP_W3, false> tmp(val);
    return operator=(tmp);
  }




  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator==(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop == rop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator!=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator==(op2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator<(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop < rop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator>(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop > rop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator<=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator>(op2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator>=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator<(op2));
  }




  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator==(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop == rop;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator!=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    return !(operator==(op2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator<(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop < rop;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator>(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop > rop;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator<=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    return !(operator>(op2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator>=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    return !(operator<(op2));
  }





  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug))
      ap_concat_ref<_AP_W, af_range_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
      operator,(ap_int_base<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<_AP_W, af_range_ref, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(*this, op);
  }


  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<_AP_W, af_range_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >
  operator,(const ap_bit_ref<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<_AP_W, af_range_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_bit_ref<_AP_W2, _AP_S2>&>(op));
  }


  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<_AP_W, af_range_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
  operator,(const ap_range_ref<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<_AP_W, af_range_ref, _AP_W2,
                         ap_range_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_range_ref<_AP_W2, _AP_S2>&>(op));
  }


  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<_AP_W, af_range_ref, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &op) {
    return ap_concat_ref<_AP_W, af_range_ref, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(
        *this, const_cast<ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>&>(op));
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug))
      ap_concat_ref<_AP_W, af_range_ref, _AP_W2,
                    af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
      operator,(const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>
                    &op) {
    return ap_concat_ref<
        _AP_W, af_range_ref, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            op));
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug))
      ap_concat_ref<_AP_W, af_range_ref, 1,
                    af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
      operator,(
          const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &op) {
    return ap_concat_ref<
        _AP_W, af_range_ref, 1,
        af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            op));
  }


  inline __attribute__((always_inline)) __attribute__((nodebug)) operator ap_ulong() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret.to_uint64();
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) operator ap_int_base<_AP_W, false>() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, false> to_ap_int_base() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }


  inline __attribute__((always_inline)) __attribute__((nodebug)) char to_char() const {
    return (char)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) int to_int() const {
    return (int)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) unsigned to_uint() const {
    return (unsigned)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) long to_long() const {
    return (long)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) unsigned long to_ulong() const {
    return (unsigned long)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_slong to_int64() const {
    return (ap_slong)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ulong to_uint64() const {
    return (ap_ulong)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }



  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, false> operator~() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return (~ret);
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, false> operator!() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return (!ret);
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, false> operator+() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, false> operator-() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return (-ret);
  }


  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, false> get() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) void set(const ap_int_base<_AP_W2, false>& val) {
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val.V) __Repl2__ = val.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) int length() const {
    return h_index >= l_index ? h_index - l_index + 1 : l_index - h_index + 1;
  }
# 615 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_fixed_ref.h"
  inline __attribute__((always_inline)) __attribute__((nodebug)) char* to_string(signed char rd = 2) const {
     (void)(rd);
    return 0;
  }

};
# 679 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_fixed_ref.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
# 725 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_fixed_ref.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > ap_int_base<1, false>(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < ap_int_base<1, false>(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= ap_int_base<1, false>(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= ap_int_base<1, false>(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == ap_int_base<1, false>(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != ap_int_base<1, false>(op); }
# 12 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\ap_fixed.h" 2





template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
struct ap_fixed : ap_fixed_base<_AP_W, _AP_I, true, _AP_Q, _AP_O, _AP_N> {
  typedef ap_fixed_base<_AP_W, _AP_I, true, _AP_Q, _AP_O, _AP_N> Base;


  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed() : Base() {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2,
                                      _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(const volatile ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2,
                                               _AP_O2, _AP_N2>& op)
      : Base(op) {}
# 66 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\ap_fixed.h"
  template <int _AP_W2, bool _AP_S2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(const ap_int_base<_AP_W2, _AP_S2>& op) : Base(op) {}

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(const volatile ap_int_base<_AP_W2, _AP_S2>& op) : Base(op) {}




  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(unsigned V __attribute__((bitwidth(_AP_W))), bool raw) {
    Base::V = V;
    (void)(raw);
  }
# 101 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\ap_fixed.h"
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(const ap_bit_ref<_AP_W2, _AP_S2>& op) : Base(op) {}


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(const ap_range_ref<_AP_W2, _AP_S2>& op) : Base(op) {}


  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& op)
      : Base(op) {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}





                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(bool v) : Base(v) {}
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(char v) : Base(v) {}
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(signed char v) : Base(v) {}
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(unsigned char v) : Base(v) {}
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(short v) : Base(v) {}
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(unsigned short v) : Base(v) {}
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(int v) : Base(v) {}
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(unsigned int v) : Base(v) {}
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(long v) : Base(v) {}
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(unsigned long v) : Base(v) {}
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(ap_slong v) : Base(v) {}
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(ap_ulong v) : Base(v) {}
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(half v) : Base(v) {}
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(float v) : Base(v) {}
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(double v) : Base(v) {}


  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(const char* s) : Base(s) {}

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(const char* s, signed char rd) : Base(s, rd) {}







  ap_fixed &
  operator=(const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &op) = default;
# 168 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\ap_fixed.h"
  inline __attribute__((always_inline)) __attribute__((nodebug)) void operator=(
      const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) volatile {
    Base::V = op.V;
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed& operator=(
      const volatile ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) {
    Base::V = op.V;
    return *this;
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) void operator=(
      const volatile ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) volatile {
    Base::V = op.V;
  }
};





template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
struct ap_ufixed : ap_fixed_base<_AP_W, _AP_I, false, _AP_Q, _AP_O, _AP_N> {
  typedef ap_fixed_base<_AP_W, _AP_I, false, _AP_Q, _AP_O, _AP_N> Base;


  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed() : Base() {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2,
                                       _AP_O2, _AP_N2>& op)
      : Base(op) {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(const volatile ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2,
                                                _AP_O2, _AP_N2>& op)
      : Base(op) {}
# 237 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\ap_fixed.h"
  template <int _AP_W2, bool _AP_S2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(const ap_int_base<_AP_W2, _AP_S2>& op) : Base(op) {}

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(const volatile ap_int_base<_AP_W2, _AP_S2>& op) : Base(op) {}




  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(unsigned V __attribute__((bitwidth(_AP_W))), bool raw) {
    Base::V = V;
    (void)(raw);
  }
# 269 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\ap_fixed.h"
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(const ap_bit_ref<_AP_W2, _AP_S2>& op) : Base(op) {}

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(const ap_range_ref<_AP_W2, _AP_S2>& op) : Base(op) {}

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}




                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(bool v) : Base(v) {}
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(char v) : Base(v) {}
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(signed char v) : Base(v) {}
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(unsigned char v) : Base(v) {}
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(short v) : Base(v) {}
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(unsigned short v) : Base(v) {}
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(int v) : Base(v) {}
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(unsigned int v) : Base(v) {}
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(long v) : Base(v) {}
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(unsigned long v) : Base(v) {}
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(ap_slong v) : Base(v) {}
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(ap_ulong v) : Base(v) {}
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(half v) : Base(v) {}
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(float v) : Base(v) {}
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(double v) : Base(v) {}


  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(const char* s) : Base(s) {}

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(const char* s, signed char rd) : Base(s, rd) {}



  ap_ufixed &
  operator=(const ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &op) = default;
# 327 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\ap_fixed.h"
  inline __attribute__((always_inline)) __attribute__((nodebug)) void operator=(
      const ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) volatile {
    Base::V = op.V;
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed& operator=(
      const volatile ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) {
    Base::V = op.V;
    return *this;
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) void operator=(const volatile ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O,
                                                 _AP_N>& op) volatile {
    Base::V = op.V;
  }
};
# 365 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\ap_fixed.h"
# 1 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_fixed_special.h" 1
# 20 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_fixed_special.h"
namespace std {
template<typename _Tp> class complex;
}







namespace std {
# 48 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_fixed_special.h"
template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
class complex<ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > {
 public:
  typedef ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> _Tp;
  typedef _Tp value_type;




  __attribute__((nodebug)) complex() : _M_real(_Tp()), _M_imag(_Tp()) {}


  __attribute__((nodebug)) complex(const _Tp &__r, const _Tp &__i = _Tp(0))
      : _M_real(__r), _M_imag(__i) {}


  template <typename _Up>
  __attribute__((nodebug)) complex(const complex<_Up> &__z) : _M_real(__z.real()), _M_imag(__z.imag()) {}


  const __attribute__((nodebug)) _Tp& real() const { return _M_real; }
  const __attribute__((nodebug)) _Tp& imag() const { return _M_imag; }







  __attribute__((nodebug)) void real(_Tp __val) { _M_real = __val; }

  __attribute__((nodebug)) void imag(_Tp __val) { _M_imag = __val; }



  __attribute__((nodebug)) complex<_Tp> &operator=(const _Tp __t) {
    _M_real = __t;
    _M_imag = _Tp(0);
    return *this;
  }



  __attribute__((nodebug)) complex<_Tp> &operator+=(const _Tp &__t) {
    _M_real += __t;
    return *this;
  }



  __attribute__((nodebug)) complex<_Tp> &operator-=(const _Tp &__t) {
    _M_real -= __t;
    return *this;
  }



  __attribute__((nodebug)) complex<_Tp> &operator*=(const _Tp &__t) {
    _M_real *= __t;
    _M_imag *= __t;
    return *this;
  }



  __attribute__((nodebug)) complex<_Tp> &operator/=(const _Tp &__t) {
    _M_real /= __t;
    _M_imag /= __t;
    return *this;
  }


  template <typename _Up>
  __attribute__((nodebug)) complex<_Tp> &operator=(const complex<_Up> &__z) {
    auto tmp1 = __z;
    complex<_Tp> tmp2 = {tmp1.real(), tmp1.imag()};
    *this = tmp2;
    return *this;
  }



  template <typename _Up>
  __attribute__((nodebug)) complex<_Tp> &operator+=(const complex<_Up> &__z) {
    _M_real += __z.real();
    _M_imag += __z.imag();
    return *this;
  }



  template <typename _Up>
  __attribute__((nodebug)) complex<_Tp> &operator-=(const complex<_Up> &__z) {
    _M_real -= __z.real();
    _M_imag -= __z.imag();
    return *this;
  }



  template <typename _Up>
  __attribute__((nodebug)) complex<_Tp> &operator*=(const complex<_Up> &__z) {
    const _Tp __r = _M_real * __z.real() - _M_imag * __z.imag();
    _M_imag = _M_real * __z.imag() + _M_imag * __z.real();
    _M_real = __r;
    return *this;
  }



  template <typename _Up>
  __attribute__((nodebug)) complex<_Tp> &operator/=(const complex<_Up> &__z) {
    complex<_Tp> cj (__z.real(), -__z.imag());
    complex<_Tp> a = (*this) * cj;
    complex<_Tp> b = cj * __z;
    _M_real = a.real() / b.real();
    _M_imag = a.imag() / b.real();
    return *this;
  }

 private:
  _Tp _M_real;
  _Tp _M_imag;

};
# 190 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_fixed_special.h"
template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
class complex<ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > {
 public:
  typedef ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> _Tp;
  typedef _Tp value_type;




  __attribute__((nodebug)) complex() : _M_real(_Tp()), _M_imag(_Tp()) {}


  __attribute__((nodebug)) complex(const _Tp &__r, const _Tp &__i = _Tp(0))
      : _M_real(__r), _M_imag(__i) {}


  template <typename _Up>
  __attribute__((nodebug)) complex(const complex<_Up> &__z) : _M_real(__z.real()), _M_imag(__z.imag()) {}


  const __attribute__((nodebug)) _Tp& real() const { return _M_real; }
  const __attribute__((nodebug)) _Tp& imag() const { return _M_imag; }







  __attribute__((nodebug)) void real(_Tp __val) { _M_real = __val; }

  __attribute__((nodebug)) void imag(_Tp __val) { _M_imag = __val; }



  __attribute__((nodebug)) complex<_Tp> &operator=(const _Tp __t) {
    _M_real = __t;
    _M_imag = _Tp(0);
    return *this;
  }



  __attribute__((nodebug)) complex<_Tp> &operator+=(const _Tp &__t) {
    _M_real += __t;
    return *this;
  }



  __attribute__((nodebug)) complex<_Tp> &operator-=(const _Tp &__t) {
    _M_real -= __t;
    return *this;
  }



  __attribute__((nodebug)) complex<_Tp> &operator*=(const _Tp &__t) {
    _M_real *= __t;
    _M_imag *= __t;
    return *this;
  }



  __attribute__((nodebug)) complex<_Tp> &operator/=(const _Tp &__t) {
    _M_real /= __t;
    _M_imag /= __t;
    return *this;
  }


  template <typename _Up>
  __attribute__((nodebug)) complex<_Tp> &operator=(const complex<_Up> &__z) {
    auto tmp1 = __z;
    complex<_Tp> tmp2 = {tmp1.real(), tmp1.imag()};
    *this = tmp2;
    return *this;
  }



  template <typename _Up>
  __attribute__((nodebug)) complex<_Tp> &operator+=(const complex<_Up> &__z) {
    _M_real += __z.real();
    _M_imag += __z.imag();
    return *this;
  }



  template <typename _Up>
  __attribute__((nodebug)) complex<_Tp> &operator-=(const complex<_Up> &__z) {
    _M_real -= __z.real();
    _M_imag -= __z.imag();
    return *this;
  }



  template <typename _Up>
  __attribute__((nodebug)) complex<_Tp> &operator*=(const complex<_Up> &__z) {
    const _Tp __r = _M_real * __z.real() - _M_imag * __z.imag();
    _M_imag = _M_real * __z.imag() + _M_imag * __z.real();
    _M_real = __r;
    return *this;
  }



  template <typename _Up>
  __attribute__((nodebug)) complex<_Tp> &operator/=(const complex<_Up> &__z) {
    complex<_Tp> cj (__z.real(), -__z.imag());
    complex<_Tp> a = (*this) * cj;
    complex<_Tp> b = cj * __z;
    _M_real = a.real() / b.real();
    _M_imag = a.imag() / b.real();
    return *this;
  }

 private:
  _Tp _M_real;
  _Tp _M_imag;

};
# 323 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\etc/ap_fixed_special.h"
template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline __attribute__((nodebug)) bool operator==(
    const complex<ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__x,
    const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__y) {
  return __x.real() == __y &&
         __x.imag() == 0;
}


template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline __attribute__((nodebug)) bool operator==(
    const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__x,
    const complex<ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__y) {
  return __x == __y.real() &&
         0 == __y.imag();
}


template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline __attribute__((nodebug)) bool operator!=(
    const complex<ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__x,
    const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__y) {
  return __x.real() != __y ||
         __x.imag() != 0;
}


template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline __attribute__((nodebug)) bool operator!=(
    const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__x,
    const complex<ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__y) {
  return __x != __y.real() ||
         0 != __y.imag();
}


template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline __attribute__((nodebug)) bool operator==(
    const complex<ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__x,
    const ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__y) {
  return __x.real() == __y &&
         __x.imag() == 0;
}


template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline __attribute__((nodebug)) bool operator==(
    const ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__x,
    const complex<ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__y) {
  return __x == __y.real() &&
         0 == __y.imag();
}


template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline __attribute__((nodebug)) bool operator!=(
    const complex<ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__x,
    const ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__y) {
  return __x.real() != __y ||
         __x.imag() != 0;
}


template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline __attribute__((nodebug)) bool operator!=(
    const ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__x,
    const complex<ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__y) {
  return __x != __y.real() ||
         0 != __y.imag();
}

}
# 366 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\ap_fixed.h" 2
# 361 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\ap_int.h" 2
# 13 "lstm_hls/rnn.h" 2
# 1 "lstm_hls/utils.h" 1



# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\assert.h" 1 3
# 17 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\assert.h" 3
# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\stdlib.h" 1 3
# 36 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\stdlib.h" 3
# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\cstdlib" 1 3
# 40 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\cstdlib" 3
# 37 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\stdlib.h" 2 3

using std::abort;
using std::atexit;
using std::exit;
# 51 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\stdlib.h" 3
using std::div_t;
using std::ldiv_t;

using std::abs;
using std::atof;
using std::atoi;
using std::atol;
using std::bsearch;
using std::calloc;
using std::div;
using std::free;
using std::getenv;
using std::labs;
using std::ldiv;
using std::malloc;

using std::mblen;
using std::mbstowcs;
using std::mbtowc;

using std::qsort;
using std::rand;
using std::realloc;
using std::srand;
using std::strtod;
using std::strtol;
using std::strtoul;
using std::system;

using std::wcstombs;
using std::wctomb;
# 18 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\assert.h" 2 3



extern "C" {
# 45 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\assert.h" 3
extern void __attribute__((__cdecl__))
_wassert(const wchar_t *_Message,const wchar_t *_File,unsigned _Line);
extern void __attribute__((__cdecl__))
_assert (const char *_Message, const char *_File, unsigned _Line);


}
# 5 "lstm_hls/utils.h" 2
# 1 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\ap_axi_sdata.h" 1
# 41 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\ap_axi_sdata.h"
# 1 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\climits" 1 3
# 40 "D:/Xilinx/Vitis_HLS/2023.1/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\climits" 3
# 42 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\ap_axi_sdata.h" 2
# 1 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/ap_int.h" 1
# 43 "D:/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot\\ap_axi_sdata.h" 2

template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
struct ap_fixed;
template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
struct ap_ufixed;

namespace hls {

template <typename T> constexpr std::size_t bitwidth = sizeof(T) * 8;

template <std::size_t W> constexpr std::size_t bitwidth<ap_int<W>> = W;
template <std::size_t W> constexpr std::size_t bitwidth<ap_uint<W>> = W;
template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
constexpr std::size_t bitwidth<ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>> = _AP_W;
template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
constexpr std::size_t bitwidth<ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>> = _AP_W;

template <typename T>
constexpr std::size_t bytewidth = (bitwidth<T> + 8 - 1) / 8;

template <typename T, std::size_t WUser, std::size_t WId, std::size_t WDest> struct axis {
  static constexpr std::size_t NewWUser = (WUser == 0) ? 1 : WUser;
  static constexpr std::size_t NewWId = (WId == 0) ? 1 : WId;
  static constexpr std::size_t NewWDest = (WDest == 0) ? 1 : WDest;
  T data;
  ap_uint<bytewidth<T>> keep;
  ap_uint<bytewidth<T>> strb;
  ap_uint<NewWUser> user;
  ap_uint<1> last;
  ap_uint<NewWId> id;
  ap_uint<NewWDest> dest;

  __attribute__((nodebug)) ap_uint<NewWUser> *get_user_ptr() {
#pragma HLS inline
 return (WUser == 0) ? nullptr : &user;
  }
  __attribute__((nodebug)) ap_uint<NewWId> *get_id_ptr() {
#pragma HLS inline
 return (WId == 0) ? nullptr : &id;
  }
  __attribute__((nodebug)) ap_uint<NewWDest> *get_dest_ptr() {
#pragma HLS inline
 return (WDest == 0) ? nullptr : &dest;
  }
};

}

template <std::size_t WData, std::size_t WUser, std::size_t WId, std::size_t WDest>
using ap_axis = hls::axis<ap_int<WData>, WUser, WId, WDest>;

template <std::size_t WData, std::size_t WUser, std::size_t WId, std::size_t WDest>
using ap_axiu = hls::axis<ap_uint<WData>, WUser, WId, WDest>;


template <std::size_t WData, std::size_t WUser, std::size_t WId, std::size_t WDest>
struct qdma_axis;

template <std::size_t WData> struct qdma_axis<WData, 0, 0, 0> {

  static constexpr std::size_t kBytes = (WData + 7) / 8;

  ap_uint<WData> data;
  ap_uint<kBytes> keep;
  ap_uint<1> strb;
  ap_uint<1> user;
  ap_uint<1> last;
  ap_uint<1> id;
  ap_uint<1> dest;

  __attribute__((nodebug)) ap_uint<1> *get_strb_ptr() {
#pragma HLS inline
 return nullptr;
  }
  __attribute__((nodebug)) ap_uint<1> *get_user_ptr() {
#pragma HLS inline
 return nullptr;
  }
  __attribute__((nodebug)) ap_uint<1> *get_id_ptr() {
#pragma HLS inline
 return nullptr;
  }
  __attribute__((nodebug)) ap_uint<1> *get_dest_ptr() {
#pragma HLS inline
 return nullptr;
  }


  __attribute__((nodebug)) ap_uint<WData> get_data() const {
#pragma HLS inline
 return data;
  }
  __attribute__((nodebug)) ap_uint<kBytes> get_keep() const {
#pragma HLS inline
 return keep;
  }
  __attribute__((nodebug)) ap_uint<1> get_last() const {
#pragma HLS inline
 return last;
  }

  __attribute__((nodebug)) void set_data(const ap_uint<WData> &d) {
#pragma HLS inline
 data = d;
  }
  __attribute__((nodebug)) void set_keep(const ap_uint<kBytes> &k) {
#pragma HLS inline
 keep = k;
  }
  __attribute__((nodebug)) void set_last(const ap_uint<1> &l) {
#pragma HLS inline
 last = l;
  }
  __attribute__((nodebug)) void keep_all() {
#pragma HLS inline
 ap_uint<kBytes> k = 0;
    keep = ~k;
  }

  __attribute__((nodebug)) qdma_axis() {
#pragma HLS inline
 ;
  }
  __attribute__((nodebug)) qdma_axis(ap_uint<WData> d) : data(d) {
#pragma HLS inline
 ;
  }
  __attribute__((nodebug)) qdma_axis(ap_uint<WData> d, ap_uint<kBytes> k) : data(d), keep(k) {
#pragma HLS inline
 ;
  }
  __attribute__((nodebug)) qdma_axis(ap_uint<WData> d, ap_uint<kBytes> k, ap_uint<1> l)
      : data(d), keep(k), last(l) {
#pragma HLS inline
 ;
  }
  __attribute__((nodebug)) qdma_axis(const qdma_axis<WData, 0, 0, 0> &d)
      : data(d.data), keep(d.keep), last(d.last) {
#pragma HLS inline
 ;
  }
  __attribute__((nodebug)) qdma_axis &operator=(const qdma_axis<WData, 0, 0, 0> &d) {
#pragma HLS inline
 data = d.data;
    keep = d.keep;
    last = d.last;
    return *this;
  }
};




namespace hls {

template <typename T, std::size_t WUser, std::size_t WId, std::size_t WDest>
class stream<axis<T, WUser, WId, WDest>> final {
  typedef axis<T, WUser, WId, WDest> __STREAM_T__;

public:

  inline __attribute__((always_inline)) __attribute__((nodebug)) stream() {}

  inline __attribute__((always_inline)) __attribute__((nodebug)) stream(const char *name) { (void)name; }


private:
  inline __attribute__((always_inline)) __attribute__((nodebug)) stream(const stream<__STREAM_T__> &chn) : V(chn.V) {}

public:

  inline __attribute__((always_inline)) __attribute__((nodebug)) void operator>>(__STREAM_T__ &rdata) { read(rdata); }

  inline __attribute__((always_inline)) __attribute__((nodebug)) void operator<<(const __STREAM_T__ &wdata) { write(wdata); }


  __attribute__((nodebug)) bool empty() {
#pragma HLS inline
 bool tmp = __fpga_axis_valid(&V.data, &V.keep, &V.strb, V.get_user_ptr(),
                                 &V.last, V.get_id_ptr(), V.get_dest_ptr());
    return !tmp;
  }

  __attribute__((nodebug)) bool full() {
#pragma HLS inline
 bool tmp = __fpga_axis_ready(&V.data, &V.keep, &V.strb, V.get_user_ptr(),
                                 &V.last, V.get_id_ptr(), V.get_dest_ptr());
    return !tmp;
  }


  __attribute__((nodebug)) void read(__STREAM_T__ &dout) {
#pragma HLS inline
 __STREAM_T__ tmp;
    __fpga_axis_pop(&V.data, &V.keep, &V.strb, V.get_user_ptr(), &V.last,
                    V.get_id_ptr(), V.get_dest_ptr(), &tmp.data, &tmp.keep,
                    &tmp.strb, tmp.get_user_ptr(), &tmp.last, tmp.get_id_ptr(),
                    tmp.get_dest_ptr());
    dout = tmp;
  }

  __attribute__((nodebug)) __STREAM_T__ read() {
#pragma HLS inline
 __STREAM_T__ tmp;
    __fpga_axis_pop(&V.data, &V.keep, &V.strb, V.get_user_ptr(), &V.last,
                    V.get_id_ptr(), V.get_dest_ptr(), &tmp.data, &tmp.keep,
                    &tmp.strb, tmp.get_user_ptr(), &tmp.last, tmp.get_id_ptr(),
                    tmp.get_dest_ptr());
    return tmp;
  }


  __attribute__((nodebug)) void write(const __STREAM_T__ &din) {
#pragma HLS inline
 __STREAM_T__ tmp = din;
    __fpga_axis_push(&V.data, &V.keep, &V.strb, V.get_user_ptr(), &V.last,
                     V.get_id_ptr(), V.get_dest_ptr(), &tmp.data, &tmp.keep,
                     &tmp.strb, tmp.get_user_ptr(), &tmp.last, tmp.get_id_ptr(),
                     tmp.get_dest_ptr());
  }


  __attribute__((nodebug)) bool read_nb(__STREAM_T__ &dout) {
#pragma HLS inline
 __STREAM_T__ tmp;
    if (__fpga_axis_nb_pop(&V.data, &V.keep, &V.strb, V.get_user_ptr(), &V.last,
                           V.get_id_ptr(), V.get_dest_ptr(), &tmp.data,
                           &tmp.keep, &tmp.strb, tmp.get_user_ptr(),
                           &tmp.last, tmp.get_id_ptr(), tmp.get_dest_ptr())) {
      dout = tmp;
      return true;
    } else {
      return false;
    }
  }


  __attribute__((nodebug)) bool write_nb(const __STREAM_T__ &in) {
#pragma HLS inline
 __STREAM_T__ tmp = in;
    bool full_n = __fpga_axis_nb_push(
        &V.data, &V.keep, &V.strb, V.get_user_ptr(), &V.last, V.get_id_ptr(),
        V.get_dest_ptr(), &tmp.data, &tmp.keep, &tmp.strb, tmp.get_user_ptr(),
        &tmp.last, tmp.get_id_ptr(), tmp.get_dest_ptr());
    return full_n;
  }

private:
  __STREAM_T__ V __attribute__((no_ctor));
};


template <std::size_t WData>
class stream<qdma_axis<WData, 0, 0, 0>> {
  typedef qdma_axis<WData, 0, 0, 0> __STREAM_T__;

public:

  inline __attribute__((always_inline)) __attribute__((nodebug)) stream() {}

  inline __attribute__((always_inline)) __attribute__((nodebug)) stream(const char *name) { (void)name; }


private:
  inline __attribute__((always_inline)) __attribute__((nodebug)) stream(const stream<__STREAM_T__> &chn) : V(chn.V) {}

public:

  inline __attribute__((always_inline)) __attribute__((nodebug)) void operator>>(__STREAM_T__ &rdata) { read(rdata); }

  inline __attribute__((always_inline)) __attribute__((nodebug)) void operator<<(const __STREAM_T__ &wdata) { write(wdata); }


  __attribute__((nodebug)) bool empty() {
#pragma HLS inline
 bool tmp = __fpga_axis_valid(&V.data, &V.keep, V.get_strb_ptr(), V.get_user_ptr(),
                                 &V.last, V.get_id_ptr(), V.get_dest_ptr());
    return !tmp;
  }

  __attribute__((nodebug)) bool full() {
#pragma HLS inline
 bool tmp = __fpga_axis_ready(&V.data, &V.keep, V.get_strb_ptr(), V.get_user_ptr(),
                                 &V.last, V.get_id_ptr(), V.get_dest_ptr());
    return !tmp;
  }


  __attribute__((nodebug)) void read(__STREAM_T__ &dout) {
#pragma HLS inline
 __STREAM_T__ tmp;
    __fpga_axis_pop(&V.data, &V.keep, V.get_strb_ptr(), V.get_user_ptr(),
                    &V.last, V.get_id_ptr(), V.get_dest_ptr(), &tmp.data,
                    &tmp.keep, tmp.get_strb_ptr(), tmp.get_user_ptr(),
                    &tmp.last, tmp.get_id_ptr(), tmp.get_dest_ptr());
    dout = tmp;
  }

  __attribute__((nodebug)) __STREAM_T__ read() {
#pragma HLS inline
 __STREAM_T__ tmp;
    __fpga_axis_pop(&V.data, &V.keep, V.get_strb_ptr(), V.get_user_ptr(), &V.last,
                    V.get_id_ptr(), V.get_dest_ptr(), &tmp.data, &tmp.keep,
                    tmp.get_strb_ptr(), tmp.get_user_ptr(), &tmp.last, tmp.get_id_ptr(),
                    tmp.get_dest_ptr());
    return tmp;
  }


  __attribute__((nodebug)) void write(const __STREAM_T__ &din) {
#pragma HLS inline
 __STREAM_T__ tmp = din;
    __fpga_axis_push(&V.data, &V.keep, V.get_strb_ptr(), V.get_user_ptr(), &V.last,
                     V.get_id_ptr(), V.get_dest_ptr(), &tmp.data, &tmp.keep,
                     tmp.get_strb_ptr(), tmp.get_user_ptr(), &tmp.last, tmp.get_id_ptr(),
                     tmp.get_dest_ptr());
  }


  __attribute__((nodebug)) bool read_nb(__STREAM_T__ &dout) {
#pragma HLS inline
 __STREAM_T__ tmp;

    if (__fpga_axis_nb_pop(&V.data, &V.keep, &V.strb, V.get_user_ptr(), &V.last,
                           V.get_id_ptr(), V.get_dest_ptr(), &tmp.data,
                           &tmp.keep, &tmp.strb, tmp.get_user_ptr(),
                           &tmp.last, tmp.get_id_ptr(), tmp.get_dest_ptr())) {
      dout = tmp;
      return true;
    } else {
      return false;
    }
  }


  __attribute__((nodebug)) bool write_nb(const __STREAM_T__ &in) {
#pragma HLS inline
 __STREAM_T__ tmp = in;
    bool full_n = __fpga_axis_nb_push(
        &V.data, &V.keep, V.get_strb_ptr(), V.get_user_ptr(), &V.last, V.get_id_ptr(),
        V.get_dest_ptr(), &tmp.data, &tmp.keep, tmp.get_strb_ptr(), tmp.get_user_ptr(),
        &tmp.last, tmp.get_id_ptr(), tmp.get_dest_ptr());
    return full_n;
  }

private:
  __STREAM_T__ V __attribute__((no_ctor));
};

}
# 6 "lstm_hls/utils.h" 2

typedef ap_axiu<32, 1, 1, 1> stream_t;





template <typename T, int U, int TI, int TD>
T pop_stream(ap_axiu <sizeof(T)*8, U, TI, TD> const &e)
{
#pragma HLS INLINE

 ({ bool _AssertPred = sizeof(T) == 4; __builtin_assume(_AssertPred); });
 union
 {
  int ival;
  T oval;
 } converter;
 converter.ival = e.data;
 T ret = converter.oval;

 volatile ap_uint<sizeof(T)> strb = e.strb;
 volatile ap_uint<sizeof(T)> keep = e.keep;
 volatile ap_uint<U> user = e.user;
 volatile ap_uint<1> last = e.last;
 volatile ap_uint<TI> id = e.id;
 volatile ap_uint<TD> dest = e.dest;

 return ret;
}

template <typename T, int U, int TI, int TD>
ap_axiu <sizeof(T)*8, U, TI, TD> push_stream(T const &v, bool last = false)
{
#pragma HLS INLINE
 ap_axiu <sizeof(T)*8, U, TI, TD> e;

 ({ bool _AssertPred = sizeof(T) == 4; __builtin_assume(_AssertPred); });
 union
 {
  int oval;
  T ival;
 } converter;
 converter.ival = v;
 e.data = converter.oval;


 e.strb = -1;
 e.keep = 0xF;
 e.user = 0;
 e.last = last ? 1 : 0;
 e.id = 0;
 e.dest = 0;
 return e;
}
# 14 "lstm_hls/rnn.h" 2
# 24 "lstm_hls/rnn.h"
void infer(float input[20 * 5], float res[1]);
# 5 "lstm_hls/rnn.cpp" 2
# 1 "lstm_hls/weight.h" 1




float Weight0_f[128][5 + 128] =
{
{1.197011e-01, -3.457074e-02, 6.294800e-02, -9.110953e-02, -9.047117e-02, 2.782760e-02, -1.305427e-02, -6.541340e-02, -7.577017e-03, 4.114455e-02, 9.559657e-03, 1.418299e-02, -6.343923e-02, -2.659705e-02, -2.531160e-02, -3.048216e-02, 3.445169e-02, -6.392402e-02, 1.943903e-02, 9.495609e-02, -8.743672e-03, -7.112099e-03, -5.156728e-02, -5.152092e-02, 1.260968e-02, 1.254282e-01, 2.725114e-02, -9.295686e-02, 5.809104e-02, -8.408645e-02, -4.271126e-02, 3.019546e-02, -7.179438e-02, 1.033843e-01, 1.351171e-01, -4.986651e-02, 1.078468e-01, 4.285289e-02, 5.225406e-02, -7.527873e-02, -7.806733e-04, -1.662016e-02, -3.119788e-01, -1.219758e-01, -1.347389e-02, 6.624507e-02, -7.661918e-02, 6.489836e-02, -2.743692e-02, -9.635153e-02, -7.292732e-02, -7.424144e-02, -3.358947e-02, -3.694034e-02, -1.030460e-02, 1.283448e-01, 6.794494e-02, -2.425403e-02, -6.250015e-02, 4.668899e-02, -7.908983e-02, 7.079002e-02, -4.996599e-02, -4.236086e-02, 5.618596e-02, 8.489478e-02, 4.606272e-02, -6.314325e-02, 6.790047e-02, 1.146707e-01, 1.116072e-02, 4.715319e-02, 5.698056e-02, -1.985325e-02, 6.541882e-02, 4.016474e-02, -1.147646e-01, 2.006202e-02, 7.916451e-03, -3.584343e-02, -1.248744e-01, 1.990991e-02, 6.411611e-02, -1.939593e-02, 9.627651e-02, -4.713998e-02, 1.121781e-02, 6.539541e-02, -3.100898e-02, -7.299121e-02, 2.764100e-02, -2.319905e-02, 1.127032e-01, -5.222457e-02, -3.058044e-02, 4.803327e-02, -9.074057e-02, 3.534140e-02, -5.459204e-02, -4.129644e-02, 8.042316e-02, -4.283655e-02, -1.860519e-02, -1.151977e-02, -1.064227e-01, -5.452349e-02, -5.926724e-02, -7.582822e-02, -6.639500e-03, -3.433876e-02, 1.856489e-01, 6.958152e-02, 1.040646e-01, -7.357300e-02, -1.636889e-02, -2.632939e-02, -9.654886e-03, 2.937475e-03, 3.109168e-02, -3.101174e-02, -8.804165e-03, 1.513298e-02, -1.529733e-01, -1.671183e-02, 1.026116e-01, 7.855986e-02, 2.482630e-02, -1.497017e-01, 7.756099e-02, -1.134868e-02, 9.222677e-02, -2.131343e-02, 1.637833e-02},
{7.771550e-02, -1.260487e-02, 5.832827e-02, 3.773633e-02, 7.052835e-02, -8.633249e-02, 3.303975e-03, 4.769079e-02, 3.460066e-02, -9.355066e-02, 6.952914e-02, 2.507513e-02, -7.928810e-02, 4.928626e-02, -5.836463e-02, 5.176969e-02, 5.787705e-02, -2.805485e-02, -8.787388e-02, 3.456457e-02, 5.572559e-02, -3.911937e-02, -4.782528e-02, -4.553126e-02, 1.070666e-02, -2.678248e-02, 6.176192e-02, -3.514695e-02, -5.241070e-02, 5.059387e-02, -9.507740e-02, 5.107242e-02, -2.891285e-02, 5.261024e-02, 6.397867e-02, -3.123977e-02, 3.258146e-02, 1.693347e-02, 1.111395e-01, -4.798157e-02, -8.225539e-02, 1.078302e-01, -1.508261e-05, 2.925086e-02, -2.896418e-02, 5.254785e-02, -5.456664e-03, 3.347736e-02, 2.386757e-03, -1.232955e-01, 7.009052e-02, -5.212936e-02, -2.342443e-02, 5.012083e-02, -7.581908e-02, -9.561299e-02, -2.423238e-02, -7.807776e-02, -4.940069e-02, -7.494511e-02, 4.896230e-02, 6.356940e-02, 7.633080e-02, -1.730573e-02, -5.815575e-03, 3.241046e-02, -7.045423e-02, 9.146690e-02, 7.409158e-02, 1.951246e-02, 7.924002e-02, 6.726712e-02, 4.758566e-02, -8.906469e-03, -1.424863e-02, -3.029914e-02, -7.531072e-02, -2.197992e-02, -7.666583e-02, -1.905652e-02, -1.381427e-02, -5.952143e-02, -2.174098e-02, -2.619696e-02, -1.690000e-02, 3.226618e-02, 5.586143e-02, 1.703314e-02, 9.686416e-02, 3.842124e-02, 3.692884e-02, 2.691459e-02, 9.226682e-02, 1.402248e-02, 2.266369e-02, 4.915607e-02, 1.349003e-03, -9.221645e-02, -8.625044e-02, -4.623815e-02, 1.419200e-02, -3.728707e-02, -8.407392e-02, -1.053228e-01, 1.222190e-03, -7.485221e-02, 3.637360e-02, 4.498604e-02, -5.948126e-02, 7.318169e-03, -1.993778e-02, 2.118226e-02, -1.655971e-02, 5.187102e-02, 5.435141e-02, -5.822919e-02, 9.888651e-03, 6.154829e-02, -9.656725e-02, -4.329141e-02, 3.218416e-03, -1.363201e-02, -6.143483e-02, 6.342974e-02, 5.115358e-02, -3.775228e-02, 9.066635e-02, -1.370285e-01, 9.052951e-02, 4.072289e-02, -6.061326e-02, -9.229296e-02, 5.232292e-02},
{-1.555458e-02, 1.343189e-02, -3.209205e-02, 4.811300e-02, -2.654185e-02, -8.958909e-02, -1.560899e-02, -6.334605e-02, -1.268894e-02, -5.729265e-02, 6.224130e-02, 5.652311e-04, 2.728505e-02, 2.709028e-02, -3.765344e-02, -1.683154e-02, 9.168249e-03, -2.655666e-02, -5.274738e-02, -1.401119e-02, 6.007247e-02, -6.388436e-02, 3.082411e-02, -9.733670e-02, 8.405865e-02, -9.214588e-04, 5.592369e-02, 4.767516e-03, 7.253590e-02, -2.301568e-02, 2.848905e-02, -6.320259e-02, -4.153691e-02, 4.794677e-02, -2.010399e-02, 5.749509e-02, -2.102417e-02, -4.261532e-02, 1.247981e-01, 8.798714e-02, 1.001434e-01, -5.978344e-02, 1.365084e-01, 5.661489e-02, 3.970886e-02, 2.376222e-02, 7.499256e-02, -1.327524e-03, -4.447654e-03, -1.609082e-01, -5.722646e-02, -6.677952e-02, 7.818105e-03, -7.784835e-02, 3.493360e-02, -7.449758e-02, -1.346886e-02, -1.152241e-01, 3.919324e-05, 4.085259e-02, 8.968642e-03, 6.039428e-02, 1.279189e-02, -9.497173e-02, 7.143916e-02, -6.202760e-02, 6.877847e-02, 8.903506e-02, -7.072968e-02, -3.438699e-03, -3.241569e-02, -5.341569e-02, -5.091090e-02, 6.084931e-02, -5.204447e-02, -2.923046e-02, -7.598291e-02, -8.655372e-02, -4.351687e-02, -8.641124e-02, -2.279811e-02, -7.566821e-02, 7.875422e-02, 7.717568e-02, -5.434446e-02, 9.653191e-02, -7.086939e-02, 8.554895e-02, -1.887618e-02, 4.273449e-02, 8.463165e-02, 3.433328e-03, -6.094646e-02, 9.591728e-02, 2.811631e-03, -9.592113e-02, 4.196896e-02, 4.535601e-02, 6.084045e-02, -3.931382e-02, 4.633736e-02, -3.131058e-02, 4.778690e-02, -7.010339e-02, -1.068955e-02, -2.645248e-02, 7.291678e-02, 5.434180e-03, -5.103308e-02, 4.242058e-02, 1.349159e-01, 3.269657e-02, 8.205263e-02, -3.515741e-02, 9.415850e-02, 5.281230e-02, -1.857867e-02, 5.021252e-02, 2.406432e-02, -1.369847e-02, 8.543202e-02, 4.884470e-02, 1.850452e-02, 2.717516e-02, -7.751141e-02, -6.389068e-03, 1.333217e-02, -2.873078e-02, 7.677995e-02, -6.302188e-02, 1.334787e-02, -7.405969e-03, 3.745832e-02},
{1.760718e-01, -6.180667e-02, 1.005281e-01, -2.271608e-02, -9.629509e-02, -5.116858e-02, 4.011825e-02, 1.978526e-02, -2.415295e-02, -3.350652e-02, 8.506493e-02, 3.373642e-02, 1.389850e-01, -3.083832e-02, 1.235883e-01, 5.738738e-03, -2.757355e-02, 9.246795e-03, 1.216810e-02, -3.842885e-02, 1.734408e-01, -1.024941e-01, -7.489627e-02, -2.330364e-02, -5.808480e-02, 2.332107e-02, -1.217687e-01, 4.398927e-02, 4.534882e-02, -4.878839e-02, -1.285371e-01, -4.600198e-03, 8.915114e-03, -6.560714e-02, 1.360152e-01, -3.305833e-02, -1.337898e-03, -1.975940e-02, 8.224034e-02, 2.615231e-02, -1.575604e-02, -5.410757e-02, -5.209282e-02, -1.888205e-01, -1.541585e-02, 4.956380e-02, 3.780095e-02, -3.258726e-02, 5.557328e-03, -3.789640e-03, -2.450600e-02, 9.331460e-03, 1.208941e-02, 3.300370e-02, 3.281485e-02, -1.000350e-01, -5.782927e-02, 2.645543e-02, 9.033610e-02, -8.777267e-02, 4.442464e-02, 2.213217e-02, 5.352725e-02, 2.897728e-02, 6.298355e-02, -3.216210e-02, -6.673341e-02, -5.317078e-02, 2.718982e-02, -9.719780e-02, -4.080419e-02, -6.588753e-02, 3.427941e-02, -8.136398e-02, -1.410944e-02, 8.586868e-02, -2.683018e-01, 6.965349e-02, -5.838132e-04, -5.194226e-02, -1.255976e-01, -6.242344e-02, -5.302865e-02, -1.072321e-03, 8.750170e-03, -1.215248e-01, 1.638110e-02, -4.090655e-02, 9.057949e-02, 1.151866e-01, -7.258762e-02, 5.472177e-02, -7.062526e-02, 3.362893e-02, -3.962895e-02, 8.984891e-02, 1.176975e-02, -1.243189e-01, -3.517821e-03, -8.722868e-02, 1.093898e-01, -1.415542e-01, -8.341338e-02, -7.227465e-02, -1.149133e-01, -5.538026e-02, -7.978629e-02, -6.915421e-02, -3.916171e-02, -7.006651e-02, 8.553784e-02, -2.938873e-02, 1.215584e-01, -7.773586e-02, 9.373699e-02, 5.357483e-02, -3.885470e-02, 5.892263e-02, -7.808789e-02, 9.928934e-02, -1.076503e-02, -1.008961e-01, -5.325140e-02, -8.350120e-03, 1.139459e-01, 1.962067e-02, -8.556393e-03, 8.476183e-02, 1.066847e-01, -1.147296e-01, -1.062203e-02, -6.599081e-02, 1.265154e-01},
{-1.194435e-02, -8.101762e-02, 1.301790e-02, -2.835338e-02, 5.053486e-02, 3.350756e-02, -4.811072e-02, -5.356660e-02, 2.237934e-02, 5.381579e-02, -4.070826e-02, 8.836504e-02, 1.899709e-02, -6.675356e-02, 5.332405e-02, 2.583214e-02, 5.298347e-02, -3.811087e-02, -9.311636e-02, 5.708698e-02, 2.943736e-02, 8.685953e-02, 5.388050e-02, -4.435332e-02, 1.772278e-02, 1.510145e-02, 5.590139e-03, 2.455776e-02, -5.739019e-02, 5.192941e-02, 1.860229e-03, 3.984820e-02, 4.755044e-03, 1.347457e-02, 7.417993e-03, 6.272358e-02, 1.509213e-02, -1.718180e-02, 9.338894e-02, 3.058022e-02, 1.267901e-01, 3.964835e-02, 1.209797e-01, -2.622649e-02, -1.062299e-04, 6.905938e-02, 3.608773e-02, 7.201664e-02, -3.167558e-02, 8.102047e-02, -1.868916e-02, -4.708183e-03, -7.484010e-02, -8.377392e-02, -3.832849e-02, -4.144751e-02, 5.571716e-03, -1.759597e-02, 1.286876e-02, 7.693233e-02, 3.901442e-02, -8.169310e-02, 6.877070e-02, 5.993163e-02, -2.812594e-02, -8.773419e-02, 5.257530e-02, -7.675644e-02, -6.942698e-02, 3.452010e-02, -8.891132e-02, -4.399500e-02, 7.201149e-02, 6.244982e-02, -5.892728e-02, -1.063968e-02, 2.259780e-02, -7.042155e-02, -2.701440e-02, -1.680040e-02, -1.013081e-02, -5.571099e-02, 6.096381e-02, -7.048414e-02, 5.967725e-02, -3.198699e-02, 2.996599e-03, 1.170768e-02, 6.958244e-03, -1.478083e-02, -8.200558e-02, -5.577640e-02, 8.919503e-03, -4.626836e-03, 3.906385e-02, -3.392293e-03, -7.055787e-02, -1.856027e-02, 4.930852e-02, -1.574533e-02, 7.543992e-02, -1.240686e-02, 4.241029e-02, 7.580244e-02, 2.663353e-02, 4.546472e-04, -6.681408e-02, 5.519602e-03, 2.644939e-03, 2.005371e-02, -5.757480e-02, 2.088400e-03, -5.281738e-02, 7.005075e-02, 7.653769e-02, 2.326665e-02, -1.954374e-02, -3.916095e-02, -8.217401e-02, -2.675853e-03, 3.132795e-02, -3.280992e-03, -8.383972e-03, -2.698172e-02, 4.976772e-03, 1.496928e-02, 2.747203e-02, -9.575339e-02, -3.991234e-02, -3.849917e-02, -1.265073e-02, -3.642862e-02, 8.605340e-02},
{-3.618586e-03, -9.212799e-02, 7.780033e-02, 3.384821e-02, -1.636037e-02, 3.518349e-02, -2.835235e-02, -1.263216e-01, 4.978265e-02, -1.054041e-01, -5.215381e-02, -3.444117e-02, -2.799623e-03, -6.564353e-02, -1.098364e-01, 9.730422e-02, -7.204305e-02, -6.735069e-02, -1.026429e-01, 1.291770e-02, 1.223513e-02, 4.694762e-02, 2.273937e-02, -1.186085e-01, -2.093971e-02, -8.676902e-02, 3.561079e-02, 8.374785e-02, -3.416421e-02, 5.697252e-02, -1.166562e-01, -5.609466e-02, 3.371203e-02, -2.660745e-02, 5.255784e-02, -7.884264e-04, 2.667007e-02, 1.410703e-01, -1.570955e-01, 6.759632e-02, 9.180763e-02, 1.548157e-02, 3.723440e-02, 9.731048e-02, -1.184169e-01, -6.808007e-02, 4.809066e-02, -9.084977e-03, 1.086165e-02, -4.136678e-03, 5.607712e-02, -4.110640e-02, 5.486619e-02, -2.757378e-02, 7.326996e-02, 6.519742e-02, -6.855947e-02, -2.980292e-01, -1.959718e-02, 1.003946e-01, -2.344367e-02, -7.106132e-03, -5.569905e-02, 3.996168e-02, 1.285966e-01, -9.628333e-03, 1.145920e-02, 7.613704e-02, 9.285944e-02, -8.016347e-02, 6.767029e-02, -6.697351e-02, -1.224354e-01, -7.615880e-02, -2.458959e-02, -7.936354e-02, -1.122286e-01, 4.537531e-02, 2.380386e-02, -3.053257e-02, 7.884566e-02, -6.223658e-02, -3.010972e-02, 3.910404e-02, 9.557252e-02, 1.486547e-01, 5.510372e-02, 3.705911e-02, 5.735324e-02, 2.343502e-02, 8.479509e-03, -2.955418e-02, -2.822280e-02, 1.645933e-01, -2.900404e-02, 1.130697e-01, 2.358024e-02, -4.999698e-02, -7.073634e-04, -1.302834e-02, 7.205413e-02, -5.107424e-02, -8.576306e-02, 9.352588e-02, 8.566170e-02, 5.691631e-02, 2.499834e-02, -6.149733e-02, -1.845063e-02, 7.460465e-02, -3.692175e-02, -4.821712e-02, -2.528334e-02, 4.191034e-02, -7.411806e-02, -6.403379e-02, -2.855993e-02, -2.590556e-02, 4.443339e-02, 3.712961e-02, -1.052421e-01, 8.863726e-02, 7.682231e-02, 5.923187e-02, -3.105591e-02, -2.731069e-02, 3.928734e-02, -5.506886e-02, -6.688503e-02, 1.127719e-01, -5.009044e-02, -4.752572e-03, -7.909641e-03},
{2.751844e-02, -1.675885e-02, 7.645909e-02, 4.604558e-02, -1.566414e-01, 2.708480e-02, 1.160992e-03, 5.666575e-02, 6.821528e-02, -3.131807e-03, 7.403590e-02, -8.230338e-02, 3.714324e-02, 9.088061e-03, -2.750221e-02, 2.897167e-02, -8.243649e-02, -1.158375e-01, -1.160974e-01, 1.882373e-02, 4.537161e-02, -5.390928e-02, 7.810390e-02, -7.522354e-02, 6.428695e-02, 6.686337e-02, -9.113407e-02, -6.137664e-04, -2.911540e-02, -2.518808e-02, -7.807323e-02, 4.951478e-02, 6.403209e-02, 1.668039e-01, 2.483065e-02, -3.669854e-02, 3.468731e-02, -4.277751e-03, -4.622881e-03, -4.716213e-02, -6.917223e-02, 5.912936e-02, -2.321744e-01, -2.363028e-02, 4.957380e-03, 2.622538e-02, -4.243448e-02, 7.724021e-02, -5.273313e-02, -7.829411e-02, -3.614210e-02, 1.048260e-02, 4.482150e-02, -5.854251e-02, -4.434588e-04, 8.338467e-03, 1.126970e-01, -1.836129e-02, 1.964514e-02, 1.187439e-02, -2.919147e-02, 6.166092e-02, 8.658154e-02, -9.746048e-02, 8.078264e-02, -4.106424e-03, 6.975187e-03, -5.858469e-02, -6.119571e-02, 6.948731e-02, -5.165381e-02, -1.067121e-02, 1.080950e-01, -8.052278e-02, 2.276471e-02, -5.008466e-02, -1.246166e-01, 1.074493e-02, -2.101817e-02, 5.101540e-02, -1.942332e-02, -3.904868e-02, -2.205731e-02, -9.036290e-02, 3.536548e-02, 6.804954e-02, -1.028460e-01, 3.284482e-02, -1.523295e-02, -6.915442e-02, -6.059072e-03, 3.695336e-02, 4.416066e-02, -2.985213e-02, -3.460510e-02, 5.245417e-02, -5.619336e-02, 1.639872e-02, 1.297268e-02, 1.047450e-01, 7.445487e-02, 3.903814e-02, 3.074321e-02, 3.129073e-02, 1.431208e-02, -4.350311e-02, 1.040200e-01, -2.537754e-02, 1.029447e-02, -6.386473e-02, 1.178843e-01, 2.293636e-02, -6.501277e-02, 3.225045e-02, 7.462131e-02, 6.241527e-03, 1.896906e-03, 6.936237e-02, 7.532579e-02, -5.058105e-02, 6.339344e-02, 3.229177e-02, -9.203121e-03, -7.351834e-02, 4.751346e-03, -6.547645e-02, 3.177447e-02, -3.321886e-02, 4.983065e-02, -9.174209e-02, 3.803722e-03, 1.558539e-02, -1.025616e-01},
{7.930216e-03, -4.243477e-03, -7.435502e-02, -3.705620e-02, 6.677508e-02, 8.477508e-02, 1.558168e-01, -1.136046e-01, 5.369257e-02, -1.493919e-01, 4.312439e-02, 1.234669e-01, -1.986835e-01, -9.325173e-02, -5.917999e-02, 1.388783e-01, 1.783937e-01, -1.744490e-02, -8.122718e-02, -1.208338e-01, 5.016332e-02, 6.171335e-02, 1.132462e-01, -8.837907e-02, 1.371794e-01, 1.315772e-01, 1.026028e-01, 1.862046e-01, 1.165571e-01, -4.679588e-02, -2.360537e-02, -2.023139e-03, 1.078879e-01, -3.084825e-03, -6.685156e-02, -1.388408e-02, -2.160019e-01, -9.253126e-02, 6.903426e-03, -3.892284e-02, 7.038943e-02, -1.505024e-01, 8.833313e-02, 4.482572e-02, -1.048926e-01, 1.811287e-02, 4.628230e-02, 1.556510e-01, 5.801029e-02, -1.069329e-01, -1.278439e-02, 1.818793e-02, 8.433212e-02, -1.109359e-01, 1.431057e-01, 9.608661e-02, 3.480746e-02, 6.464567e-03, -1.196021e-01, 1.495747e-01, 5.544188e-03, -2.473708e-02, 1.109706e-01, -7.255037e-02, 1.844099e-01, -1.828329e-01, 3.016683e-02, 1.231604e-01, 3.896848e-02, 1.384164e-01, 3.283402e-02, -4.521640e-02, 1.111571e-02, -1.620571e-01, -1.339956e-01, -1.004116e-02, 2.013749e-02, -6.548380e-02, 1.677820e-01, -2.512078e-01, 1.113381e-01, 1.160555e-01, -8.374467e-02, -5.641504e-03, 1.050034e-01, 1.048078e-01, -1.336424e-01, 1.692123e-01, -6.502085e-02, -6.673045e-02, 3.862431e-02, -5.000684e-02, 1.956999e-01, 1.013849e-01, 1.448100e-01, -5.935828e-02, 7.025050e-02, -2.800758e-01, -1.728501e-01, 1.909564e-01, 2.348271e-02, 1.493139e-02, 7.680323e-02, 2.344045e-02, -7.930969e-02, -8.353381e-02, 2.912133e-02, 1.345540e-01, 1.278045e-01, -1.761686e-01, 4.825097e-02, -5.599318e-02, -1.307444e-01, 1.349951e-01, -1.364714e-01, -1.808913e-01, 1.149582e-01, -1.133438e-01, -1.329570e-01, -7.272507e-02, -1.062465e-01, 7.877872e-02, -6.058580e-02, -1.306567e-02, -9.582052e-02, 6.984396e-02, -1.316768e-01, -7.616455e-02, -1.200019e-01, 1.022337e-01, -1.286952e-01, 8.166400e-02, -5.600617e-02},
{3.482997e-02, -3.699467e-02, -4.738797e-02, -1.124845e-01, 3.960431e-02, -6.918845e-02, -3.510687e-02, 1.348961e-02, 6.080154e-02, -9.634047e-02, 1.087570e-01, 7.937758e-02, 2.212619e-02, 2.507236e-02, -1.926768e-03, -4.149846e-02, 7.069450e-02, -6.693397e-02, -9.376751e-04, 2.347992e-02, 4.635463e-03, 3.148475e-02, 1.552239e-02, -1.046298e-01, 4.409989e-02, 1.084485e-01, 5.488499e-04, 2.463988e-02, -6.614867e-02, -1.791103e-02, -1.976296e-02, -1.580818e-02, 3.879707e-02, -1.252247e-03, 2.235837e-01, -6.825843e-02, -2.180794e-02, -1.178550e-01, 8.167044e-02, 1.008031e-01, 1.965074e-02, 1.533307e-02, -3.009697e-02, -1.272631e-01, -6.526380e-03, -9.622638e-02, 7.953214e-02, 9.988108e-02, -7.886834e-03, 2.670948e-02, 1.914755e-02, 9.953328e-02, -4.093870e-02, -2.859993e-02, -7.149382e-04, -9.577209e-02, -2.077175e-02, 1.095487e-01, -7.225055e-02, 4.876171e-02, -2.029880e-02, -5.139720e-02, 1.175934e-01, -1.058620e-01, 5.094139e-02, 1.518338e-02, -3.197613e-02, 7.130200e-02, -6.673209e-02, -5.133529e-03, -8.238313e-02, 6.050544e-02, 1.613447e-01, -2.424777e-02, -3.051711e-02, -2.121645e-02, -1.523680e-02, 1.700317e-02, 4.300828e-02, -1.121224e-01, -1.449281e-01, 6.591688e-02, -6.317311e-03, -3.822403e-02, -4.391502e-02, -9.572787e-03, -3.157119e-02, 1.153803e-01, -4.908342e-02, 2.649469e-02, -3.255098e-03, -6.673945e-02, -8.405092e-02, -8.111861e-02, 5.711557e-02, -8.572527e-02, -4.323981e-02, -4.941639e-02, 3.013314e-02, 6.332784e-02, -5.353657e-02, 3.865168e-02, -1.229947e-02, -6.355050e-02, 1.845309e-02, -5.259002e-02, -4.466741e-02, -1.401803e-02, 2.201265e-03, 4.157984e-02, 1.254730e-01, -7.051246e-02, -1.265440e-01, 3.862478e-02, -5.939244e-02, -8.763491e-02, -2.024338e-02, -1.630647e-02, -1.289242e-02, 7.364082e-03, 4.314723e-02, -4.101884e-02, 8.669798e-02, -1.509425e-02, -4.136895e-02, -5.713431e-02, -4.241823e-02, 7.159296e-02, -1.819192e-02, 4.945254e-02, 1.474787e-02, -1.230287e-02, -6.172054e-02},
{1.318932e-01, -6.318951e-02, -1.100556e-01, -1.934580e-02, -1.509844e-02, -7.906059e-02, 4.785193e-02, 5.014182e-02, 1.391875e-02, 1.887550e-02, -5.265376e-02, -3.204533e-02, 7.544699e-02, -3.219916e-02, 9.158561e-02, -2.177746e-02, -1.593429e-02, -8.475582e-02, -6.904641e-02, -4.112926e-03, -7.920764e-03, -2.158346e-02, 2.603188e-02, 6.017766e-02, 3.605292e-02, 4.454635e-02, 6.888498e-03, 7.539339e-02, -7.726362e-02, -5.611151e-03, -1.852569e-02, -1.087741e-03, 1.121570e-01, 2.615183e-02, 2.837001e-02, 2.467428e-02, -4.772928e-02, 1.827700e-02, 5.635810e-02, -7.823951e-02, 7.881714e-02, 5.246719e-02, -1.590128e-01, -1.390758e-02, 5.532674e-02, 3.363588e-02, -4.354230e-02, 1.014990e-01, -9.989782e-02, -6.909119e-02, 7.486534e-02, 6.040271e-02, -2.814179e-02, -1.987625e-02, 9.523353e-02, 7.033936e-03, 1.190059e-01, -3.614966e-02, 1.385807e-03, -2.741019e-02, -6.607667e-02, 2.335294e-02, 8.020107e-02, -6.377464e-02, 5.043929e-02, -2.748342e-02, -1.667517e-02, -6.621884e-02, -3.033868e-02, 6.929047e-02, 3.927179e-02, 6.321278e-02, 7.806388e-02, 5.565500e-02, -1.189249e-02, 3.436954e-02, -3.288902e-02, 4.326471e-02, -6.412742e-03, -8.259812e-02, -2.116752e-02, -2.100575e-02, 6.502798e-02, -3.751749e-02, 4.843681e-02, -9.266178e-02, -3.400713e-02, 6.398904e-02, -5.270213e-02, 3.243979e-02, 1.105375e-02, -1.341510e-02, 1.713898e-02, -1.784831e-02, 9.702545e-02, 6.138439e-02, 5.064179e-02, -1.260363e-01, -6.593914e-02, -1.626729e-02, 6.660026e-02, -3.218787e-02, 6.846577e-02, -6.314269e-02, -8.840479e-02, -1.133942e-01, -7.393766e-02, 1.879939e-02, 2.306077e-02, -6.916384e-02, -2.802778e-03, 2.212153e-02, 3.597702e-02, -8.020527e-02, -1.945376e-02, -3.836404e-02, 4.767380e-02, 2.866014e-02, -2.123981e-02, 7.595827e-02, -6.019654e-02, -5.177106e-02, -6.959678e-02, -3.697944e-02, -5.920871e-02, 5.706131e-02, 4.757914e-02, -1.492226e-01, 1.769990e-02, -9.613531e-02, -8.793329e-02, 2.103721e-02, 6.204594e-02},
{9.373081e-02, -9.435554e-02, -4.344866e-02, -8.457404e-02, -5.121739e-02, -9.568107e-02, -1.762746e-02, 6.600478e-02, -5.612951e-02, 8.394697e-02, 6.364143e-02, 1.215137e-02, -4.310020e-02, 5.031336e-02, 1.582959e-02, -4.856457e-02, 4.492486e-02, 7.547719e-02, -5.604805e-02, 8.684440e-02, -3.609998e-02, 4.225954e-02, 4.690565e-02, 3.920010e-02, 1.849161e-02, 5.665640e-02, -4.659719e-02, 2.820389e-02, -4.133772e-02, -9.300230e-02, 6.116766e-02, -4.928293e-02, -8.938938e-02, 1.063511e-01, 1.330015e-01, 4.136913e-02, 3.879813e-02, -3.662161e-02, 7.607624e-03, -2.687684e-02, 1.000738e-01, 8.123431e-02, -2.171452e-02, -1.080172e-01, 8.348876e-03, 4.074924e-02, -1.976011e-02, -8.306804e-02, 9.580652e-02, 7.219126e-02, -7.104123e-02, 4.926441e-02, 7.560036e-02, -6.678173e-02, -1.395850e-02, -1.027810e-02, 1.080909e-01, -1.040603e-03, -3.596902e-02, -8.981056e-02, 5.634478e-02, -2.098940e-02, 6.974231e-02, -2.643742e-02, 8.620849e-02, 5.707840e-02, -2.374553e-02, -6.415115e-03, -4.369188e-02, 3.088831e-02, 7.885867e-02, 7.677504e-03, 1.102113e-01, -9.125011e-02, 7.030749e-02, -1.390227e-02, -3.952603e-02, -5.284767e-02, 2.226666e-02, 2.162634e-03, -1.159163e-01, -9.954081e-03, -4.156666e-02, -6.320684e-02, -4.625956e-02, -1.312933e-02, 4.225457e-02, 1.043701e-02, -4.361360e-02, -3.030896e-02, 5.546294e-02, 1.630991e-03, -4.440686e-02, 3.699553e-02, -1.586903e-02, 5.592872e-02, -4.388399e-02, 5.228776e-02, -5.274270e-02, -2.901652e-02, -3.577453e-02, 6.410574e-02, 2.878340e-02, 4.026215e-02, 5.969889e-02, -8.325803e-02, -4.173697e-02, 3.879316e-02, -1.363486e-02, -5.325002e-02, 8.575793e-03, -3.750987e-03, 1.298268e-02, -3.074411e-03, 1.183856e-02, -6.748075e-02, 5.111511e-02, 1.396091e-02, 3.526178e-02, 1.476253e-02, 2.938043e-02, -7.944345e-02, 3.141713e-02, -7.987075e-02, -1.071012e-02, -3.866588e-02, -4.431366e-02, -6.221744e-02, 9.561788e-03, -5.219178e-02, -6.994481e-02, -7.713556e-02, 1.977851e-02},
{8.715484e-02, -1.669502e-02, 1.138887e-01, 4.530564e-02, 1.959838e-02, 4.102353e-02, -5.472693e-02, 6.199427e-02, 7.732564e-02, 4.598616e-02, 2.155261e-02, 6.247563e-02, 8.949579e-02, -5.403072e-02, -6.633910e-02, 4.425906e-02, 7.953044e-03, -5.230272e-02, -4.780341e-03, -9.906612e-02, -5.487218e-02, 1.263607e-02, 1.239168e-01, -1.675619e-02, 6.437519e-02, 5.787167e-02, -2.064594e-02, 9.857282e-03, 7.235973e-02, 5.730816e-02, 3.598832e-04, -5.059812e-02, 1.082200e-01, 5.349368e-02, -8.837993e-02, -7.243998e-02, -3.257880e-02, 1.076213e-01, -1.027876e-01, 4.194944e-02, 5.289339e-02, -5.341775e-03, -1.419030e-02, -8.130128e-02, -3.957596e-02, -1.121076e-02, -7.548542e-02, 9.939163e-03, -1.090616e-01, -1.539158e-01, -3.470778e-02, -2.431463e-02, -8.176783e-02, -6.501732e-03, 6.040170e-02, -7.905491e-02, 8.183892e-02, -1.762934e-01, -9.159657e-02, 4.997360e-02, 9.594507e-03, -5.218031e-02, 6.000738e-03, 5.534410e-02, 4.938720e-02, -7.543994e-02, -6.894583e-02, 7.902122e-02, 1.059385e-01, -2.119829e-01, 6.830475e-03, 5.075311e-02, -1.206302e-01, -2.771358e-03, -3.116817e-02, 9.892320e-02, -1.277806e-02, -1.249290e-01, 8.494496e-02, 3.813950e-02, 6.402064e-02, -1.001849e-01, -4.897266e-02, -4.225231e-02, 7.788234e-02, 2.629449e-02, -8.249378e-02, -2.565280e-02, 7.050971e-02, -1.157353e-02, 2.771796e-02, 1.266215e-02, -4.137503e-02, -2.745428e-02, 6.794842e-02, -6.580344e-02, 3.340426e-02, 1.674964e-01, -7.851785e-02, -3.474899e-02, -5.021759e-02, 4.861832e-02, 7.176387e-02, 6.596072e-03, 1.664608e-02, -3.476178e-02, 9.662780e-02, 6.961047e-02, 2.493311e-02, -4.787510e-02, -5.076236e-02, -6.913237e-02, -2.348461e-02, 5.240840e-02, -7.202567e-03, -7.337531e-02, 3.988332e-03, 5.330657e-02, -1.204501e-01, -4.616106e-02, -6.779381e-02, -7.099431e-02, -2.533455e-02, 1.207370e-01, -7.048038e-02, 1.219097e-03, -8.873038e-02, -1.765183e-01, 7.378537e-03, 1.205207e-01, -6.297112e-02, 7.708461e-02, -5.666549e-02},
{1.138145e-02, 2.086662e-02, -7.940002e-02, 5.383144e-02, -5.157157e-02, 3.036911e-02, -6.541876e-03, -7.513792e-02, 7.402945e-02, -4.582027e-02, -3.749694e-02, -1.559016e-02, -3.587364e-02, -7.402385e-03, -6.614752e-02, 6.204430e-02, -2.995799e-02, 5.499494e-02, 7.172195e-02, -5.365528e-02, -7.281620e-03, 5.487604e-02, 8.671904e-02, -6.372125e-02, 7.496637e-02, -2.552207e-02, -3.132218e-02, -5.313278e-02, -7.261360e-02, -5.442706e-02, 8.756915e-02, -6.514359e-02, -7.602914e-02, 7.554942e-02, 6.314322e-02, 6.621257e-02, 2.144693e-02, -8.313695e-02, 9.213554e-02, 5.461440e-03, 7.135808e-03, 4.625403e-02, 1.127935e-01, 5.659330e-02, -2.635628e-02, 1.925922e-02, -3.815237e-02, 8.842743e-02, 4.146227e-02, -1.286388e-01, -4.020912e-03, 7.998848e-02, 1.129207e-02, -5.856463e-02, 3.464692e-02, -8.205239e-02, -6.807599e-03, 3.862077e-02, 3.138484e-02, 3.774182e-02, -6.329562e-02, -2.923317e-02, 1.276531e-02, 2.699883e-02, 8.833081e-02, -7.653497e-02, 4.623536e-02, -5.762343e-02, 4.048506e-02, -2.345627e-02, -6.398971e-02, -6.388965e-02, 2.986083e-02, 1.305120e-03, -3.865255e-02, 1.424289e-03, 2.672249e-02, -3.535473e-02, 8.243180e-02, -4.573238e-02, 3.627748e-02, 3.147040e-02, 3.551551e-02, -8.102512e-02, -4.916144e-02, 5.083670e-02, 2.496273e-02, -3.466371e-02, -5.537737e-02, -2.849906e-02, -1.318929e-02, -4.671249e-02, 1.683196e-02, -4.373197e-02, -1.642145e-03, -3.252108e-02, -8.955779e-02, -8.303572e-02, -7.677304e-02, -6.879964e-02, 3.877141e-02, -3.570106e-02, -7.896025e-02, -8.509333e-02, -5.241393e-02, -8.564524e-02, 5.916460e-02, -3.560716e-02, -2.883607e-02, 2.375823e-02, 6.835448e-02, -5.567600e-02, 1.133840e-02, -1.580828e-02, -5.097216e-02, 3.700564e-02, 8.891918e-02, -3.776396e-03, -6.997831e-03, -1.976407e-02, -3.474112e-02, -1.430166e-02, -7.428046e-02, -5.636466e-02, -4.545861e-02, 1.013159e-02, 3.218849e-02, -1.331807e-01, 2.536086e-02, -7.611994e-02, 3.689243e-02, -1.057949e-01, 6.559625e-04},
{5.283090e-02, -2.666609e-02, -5.017512e-02, -7.205264e-02, -4.304025e-02, -1.304798e-02, -4.342368e-02, -7.051733e-02, 1.211279e-02, 1.229077e-02, -2.036993e-02, -1.409604e-02, -4.418701e-02, 2.146810e-02, -1.361550e-02, -5.243722e-02, 8.627247e-02, 7.217395e-02, 6.641626e-02, 6.422799e-02, -1.178504e-01, -4.733768e-02, 4.370717e-02, 3.435509e-02, 2.752362e-02, -3.921443e-02, 3.481009e-02, -3.544125e-02, -8.500376e-02, 5.717403e-02, 3.962085e-02, 9.190564e-02, 5.779842e-02, 4.887860e-02, 2.815844e-02, -1.824182e-02, -6.300508e-02, 3.560934e-02, 6.409027e-02, 1.362932e-02, -3.464406e-02, -3.425731e-02, 1.550795e-01, 2.203526e-03, -4.078884e-02, 6.596271e-02, 8.013619e-02, 5.930792e-02, -2.746770e-02, -4.482686e-02, -1.329669e-03, -2.591442e-02, -7.640001e-02, -3.491801e-02, 7.818513e-02, 2.409060e-02, 7.081226e-02, -5.402809e-02, 4.922055e-02, 5.530613e-02, -1.253965e-02, 3.261672e-02, 2.041146e-02, 4.711237e-02, -7.628631e-02, 3.078664e-02, -3.894380e-02, 1.681426e-02, -8.985045e-03, -9.831333e-02, 3.290641e-02, 3.506227e-02, -3.740609e-02, -3.923814e-02, -2.910302e-02, -6.191523e-02, 9.878747e-04, 1.306471e-02, -4.494173e-02, -1.284862e-02, 1.915857e-02, -1.529347e-02, -3.694043e-02, -5.203786e-02, -1.147156e-02, -9.557773e-02, -3.688228e-02, -3.792245e-02, -2.648332e-02, 7.635744e-02, -2.810000e-02, -2.808311e-02, 7.468825e-03, -1.364607e-01, 8.364597e-02, 5.591656e-02, -7.873199e-02, -1.680530e-01, 6.458136e-02, -1.174939e-02, -5.137391e-02, 1.053604e-01, -8.097711e-02, 6.846859e-02, 2.434962e-02, 6.262615e-02, -8.347499e-02, -3.592620e-03, 8.063165e-03, 2.738805e-02, -1.438022e-02, -2.567236e-02, -9.213619e-02, 3.265211e-02, 6.458339e-02, 2.168445e-02, -3.061012e-03, -1.739110e-02, 7.735029e-02, -5.110366e-02, 1.365746e-02, -6.258473e-02, -1.119054e-02, 4.225410e-02, -4.805554e-02, -6.222375e-02, -2.198093e-02, -6.137374e-02, 3.789662e-02, -7.665512e-02, 4.139565e-02, 5.817150e-02, 2.188464e-02},
{-5.720391e-03, -1.157699e-01, 1.620528e-02, 2.593515e-02, -2.019452e-02, -1.799918e-03, -6.728164e-02, -4.731974e-02, -8.592312e-02, -1.245878e-02, -3.521924e-02, -2.693933e-02, -3.559945e-02, 5.163198e-02, -7.827063e-02, -7.253537e-02, 1.548976e-02, 6.273754e-02, 3.469626e-03, -4.380021e-02, -9.509531e-02, -2.236491e-02, 1.613941e-02, 2.803979e-02, 2.300755e-02, 3.889810e-02, -5.361839e-02, 3.620672e-02, -7.072467e-03, 4.333842e-02, -2.186721e-02, 4.850013e-02, -2.434648e-02, -7.566609e-03, -6.732751e-02, -9.335885e-02, 8.986974e-02, -6.497079e-03, -5.486255e-02, -5.257929e-02, -9.020420e-02, 4.537828e-03, 1.226707e-01, 1.145250e-02, 8.607347e-02, 5.713535e-02, 4.125401e-02, -1.824139e-02, -7.336867e-02, -6.485556e-02, -2.902524e-02, 8.655933e-02, -8.278879e-02, -1.699031e-02, 7.857452e-02, -8.448719e-02, -6.940351e-02, -1.181201e-01, -2.902237e-02, -5.201800e-02, 7.264168e-02, -2.990906e-02, -2.805510e-02, -3.806692e-02, -5.971352e-02, 4.880153e-02, -2.878970e-02, 2.746034e-02, 9.588453e-03, 6.040236e-02, -6.549299e-02, -1.521627e-02, -2.490629e-02, -3.756930e-02, -6.717584e-02, -6.374063e-02, -2.004535e-01, -8.572464e-02, 2.951979e-02, 3.153224e-02, 1.202838e-03, -2.145305e-02, 1.379293e-02, 3.418281e-02, -1.829919e-02, -8.166660e-03, 6.807916e-02, -8.614077e-02, -1.245542e-02, 7.399432e-02, -4.418377e-02, 4.653143e-02, -8.050293e-02, -6.768485e-02, 2.947727e-02, 6.559107e-02, 1.718533e-02, -5.653134e-03, -3.073782e-02, 1.238644e-02, -3.894034e-02, -2.868222e-02, -1.093559e-02, 6.571296e-04, -4.648713e-04, -5.671928e-02, 5.364963e-03, -7.513555e-02, 3.613470e-02, -2.226767e-02, -7.880943e-02, 7.636309e-02, 1.049823e-01, -3.060191e-02, -2.271018e-02, 4.529623e-02, 3.187751e-03, -5.091058e-02, 2.035264e-02, -4.866078e-02, -6.831019e-02, 7.115606e-02, 2.816911e-02, 4.472132e-02, -6.500042e-02, -1.942958e-02, -4.497495e-02, -1.372390e-02, 4.667123e-02, 5.494911e-02, -5.607615e-03, 4.836442e-02, 2.249013e-02},
{-2.210312e-01, 6.803720e-02, -1.079554e-01, -4.130756e-02, -2.601017e-01, 1.959082e-02, 3.748790e-02, 7.094115e-02, 9.610403e-02, -6.308056e-02, -5.252294e-02, 1.335823e-01, -2.263210e-01, -1.128329e-01, -1.137200e-01, 1.240267e-01, 1.268158e-01, -1.000661e-01, -6.140707e-02, -1.945917e-02, 1.247674e-01, 4.271122e-02, 5.266824e-02, 2.358168e-02, -3.775250e-02, 1.952818e-01, 2.641610e-02, 1.842306e-01, 1.712899e-01, 1.788805e-01, 5.430867e-03, -1.414400e-01, -2.247048e-02, 3.629588e-02, 1.213853e-01, 1.126185e-01, 2.607631e-02, 9.497651e-02, -2.661138e-02, 4.372017e-02, 1.022058e-01, -2.204080e-01, -2.760952e-01, 4.952883e-02, -1.821060e-01, -1.214044e-01, -9.276826e-03, 1.091695e-01, 8.646762e-02, 1.973737e-02, -8.674756e-02, 2.081075e-01, 2.483157e-02, -1.967558e-01, 5.630028e-02, 2.125753e-01, 1.368946e-01, -1.364113e-01, -5.324725e-02, -1.750381e-01, -6.015782e-02, 4.908651e-02, 2.822954e-01, -2.481845e-02, 2.881348e-02, -4.983160e-02, 5.841821e-02, 7.163916e-02, 2.209034e-02, -1.495811e-01, 4.947480e-02, 1.582743e-03, -7.299521e-02, 7.033656e-02, -1.576032e-01, 6.275898e-02, 1.426308e-01, 1.219577e-01, -9.081244e-03, -2.143521e-01, -1.688436e-02, -3.850926e-02, -2.097376e-01, 1.979406e-02, 3.324211e-02, 1.855682e-01, -1.645342e-01, -3.862352e-02, -3.722973e-01, -6.934575e-02, 4.302685e-02, 7.250606e-02, -3.380056e-02, 1.397223e-01, -2.623180e-02, -4.205665e-02, 5.603095e-02, 1.033010e-01, -2.045962e-02, 1.064523e-01, -7.121197e-02, -2.192564e-01, 2.170054e-01, -3.604864e-02, 1.226675e-01, -6.086419e-02, 1.718645e-01, 1.941018e-02, 2.312436e-02, -5.464960e-02, 3.734434e-01, -3.153080e-01, -2.731967e-01, 2.284454e-02, -3.591471e-02, -6.348675e-02, 2.318135e-02, -1.126702e-01, 2.349485e-02, -1.494001e-01, -4.989414e-02, 1.403394e-01, -3.225991e-01, -1.378789e-01, -1.852738e-01, -3.162701e-02, -2.729155e-01, -1.174642e-01, -8.980961e-02, -2.200215e-02, -8.769188e-02, 6.258694e-02, -7.135820e-02},
{1.816373e-02, -1.255807e-01, -1.569943e-02, 3.654364e-02, -2.692779e-01, -4.902035e-03, -2.579842e-02, -8.139471e-02, -9.349900e-02, -4.394202e-02, -4.645998e-02, -6.970610e-02, -5.760310e-02, -4.699369e-02, -7.804743e-02, -1.825773e-02, 6.184944e-02, -5.460705e-02, -2.252731e-02, -8.699756e-03, 7.872295e-02, -7.266264e-04, 7.863289e-02, -6.118573e-02, -2.483589e-02, -1.522947e-02, -1.428288e-01, -1.399344e-02, 6.675956e-02, -9.746730e-02, -9.301345e-03, -8.421752e-02, -7.304283e-02, 1.204483e-02, 1.146073e-01, -8.008360e-02, 3.093457e-02, 1.060145e-01, 1.368512e-01, 4.171755e-02, 8.565558e-02, -1.070744e-02, -2.743446e-01, -1.876569e-01, -6.359443e-02, 9.059288e-02, -2.594819e-02, 7.185822e-02, 1.130601e-01, 1.026437e-01, -2.220385e-02, 8.120568e-02, -8.423542e-02, 1.079702e-01, -6.303892e-02, 8.627306e-02, 9.645774e-02, -2.400043e-03, 1.129787e-02, -7.779548e-02, -1.975796e-02, -1.173379e-02, 1.205147e-02, -4.879795e-03, 1.441715e-02, 4.004066e-02, -3.105522e-02, 5.824532e-02, -6.629509e-02, 5.634283e-02, -5.471533e-02, -4.461579e-02, 8.338784e-02, -9.671779e-02, 7.353035e-02, -9.492122e-02, 1.248583e-01, 7.589716e-02, 1.180883e-02, 9.849256e-02, -1.122513e-02, 4.971775e-02, 4.380425e-02, -5.153463e-02, 8.602604e-02, -2.146924e-02, -2.537898e-02, -4.219096e-02, -5.729441e-02, 6.777760e-02, -8.373299e-02, -7.094283e-03, -4.362603e-02, -3.606225e-02, -4.159141e-02, -6.011756e-02, 1.046189e-02, -3.198914e-01, 2.424002e-02, -9.367248e-02, -4.570816e-02, -3.153784e-02, -5.632823e-02, 1.746848e-02, -6.115957e-02, -1.735163e-02, -9.568474e-03, -1.034672e-03, 6.318196e-02, -5.305815e-02, 1.085010e-01, 8.472563e-02, -1.147789e-01, -3.008260e-02, 1.760024e-02, 5.551513e-02, -1.888933e-02, 6.307272e-02, -3.952204e-02, 2.239300e-02, 8.590734e-02, -8.591808e-03, -3.125243e-02, -3.004319e-02, 1.048080e-02, 9.188953e-02, 1.014379e-01, 2.882403e-02, 7.403272e-02, -1.410734e-01, 2.697966e-02, -9.988335e-02, 6.880987e-02},
{-8.890850e-03, -9.124386e-02, -1.182586e-01, -1.450180e-01, -8.426743e-03, 2.249010e-02, 1.344039e-02, -1.789828e-01, 4.493978e-02, 1.907970e-02, -1.013021e-01, 2.581352e-02, -4.901472e-02, 5.160461e-02, -9.933668e-02, -2.842056e-02, 2.340719e-01, -1.331649e-01, -9.331968e-02, -1.158338e-02, 5.618453e-02, -1.440324e-02, -1.274832e-01, 6.918060e-02, 1.218401e-02, -5.071723e-02, -2.907054e-02, -3.562606e-02, 2.958373e-03, -3.261319e-02, 8.406609e-02, -3.993683e-02, 1.858039e-01, -3.517480e-02, -5.649203e-02, -1.313683e-02, -4.379280e-01, -1.112882e-01, 1.367288e-02, -4.221120e-02, 1.710218e-01, -2.428862e-02, 1.675493e-01, -4.720647e-02, -7.572664e-02, -5.292330e-02, -3.490356e-02, 2.759186e-02, -1.143925e-02, -5.323323e-02, -3.366664e-02, 4.803193e-02, 2.616925e-02, 7.344151e-02, 2.396792e-03, -6.631672e-02, 9.303129e-02, -1.789951e-01, -9.034760e-02, 1.728165e-01, 4.342280e-02, -6.728718e-02, -2.683372e-02, -6.532909e-02, 3.325194e-02, -1.238966e-01, -7.810517e-02, -4.324407e-02, 6.732168e-03, 2.854799e-02, -2.439933e-02, 4.998497e-02, -7.416432e-02, 6.504961e-03, -8.372547e-02, -5.678429e-03, 2.030719e-01, 1.033023e-01, 4.118344e-02, -9.709303e-02, 1.311284e-01, 7.244667e-02, -2.626784e-02, -3.148665e-02, 7.913948e-02, 9.717156e-02, 1.242832e-02, 3.604506e-02, 4.979789e-02, 6.778249e-03, 1.848128e-03, 5.162083e-02, 1.927193e-01, -6.963449e-02, 4.668314e-02, -2.554201e-03, 5.674739e-02, -5.325099e-01, 4.218635e-03, -2.483113e-02, 4.956244e-02, -1.387165e-01, 1.378083e-01, 8.337656e-02, 2.003135e-02, -3.824801e-02, 4.383504e-02, 5.961967e-02, -3.558030e-02, -6.079862e-02, -1.127636e-01, 4.881512e-02, -7.773505e-02, 9.890904e-02, -2.072122e-02, -1.154705e-02, 3.261450e-02, -7.850470e-02, -8.579771e-02, -8.190525e-03, -8.930008e-02, 8.509557e-02, 2.836012e-02, 1.542413e-01, 2.783496e-02, -9.069307e-03, 2.418041e-02, -4.415613e-02, 1.311844e-02, 5.011850e-02, -6.540319e-02, -3.126029e-03, -6.014205e-02},
{-1.349621e-01, -1.118610e-01, -1.348765e-01, -1.107920e-01, -6.045679e-02, -3.194787e-02, 6.814917e-02, -9.053298e-02, 6.831853e-03, -4.389191e-02, -5.703325e-02, -6.433231e-02, -1.101222e-01, -7.706485e-02, 5.617819e-02, -2.154166e-02, -5.164697e-02, -2.302134e-02, -4.094444e-03, 3.191170e-02, 7.449139e-02, 9.135437e-03, 4.345476e-03, 1.187868e-01, 7.027660e-02, -6.392878e-03, 7.418898e-02, 7.110893e-02, -1.153742e-02, -1.982823e-02, -9.345123e-02, 3.841243e-02, -5.343285e-02, -5.520472e-02, -1.145818e-01, 2.662984e-02, -1.822469e-01, -4.189410e-02, 9.931507e-02, 7.504430e-02, 1.658453e-02, 4.046104e-02, -4.870417e-02, -7.549151e-02, 4.487603e-03, 1.669950e-02, -1.015872e-01, 3.572560e-02, -9.821875e-02, -8.976673e-02, -5.080281e-02, 6.796817e-02, -2.412023e-02, -6.216359e-04, 7.664618e-02, -1.154145e-01, 7.968742e-02, 1.091716e-01, -1.600053e-02, 2.853173e-01, -1.763500e-02, 9.691723e-02, -6.011375e-02, -6.202421e-02, 4.942229e-02, -2.912311e-02, -1.166029e-01, -9.521384e-03, 1.864265e-02, 3.202695e-01, -8.306891e-02, -3.790979e-02, 4.664171e-02, -9.888209e-02, -7.371704e-02, -6.474545e-02, -7.550364e-03, -8.852229e-03, -7.424673e-02, 2.744973e-02, 2.743743e-02, 5.858985e-02, 4.999610e-02, 2.746568e-02, 3.543364e-02, 1.917488e-02, -9.167569e-02, 2.036936e-01, -6.738036e-02, -3.023629e-02, 4.643773e-02, -4.022738e-02, 1.410331e-01, -7.721252e-02, 8.427732e-02, 3.291570e-02, 3.946792e-02, -1.992248e-01, -2.654926e-02, -1.349034e-02, 1.291288e-01, -8.834492e-02, 5.486050e-02, 4.872835e-02, 6.374934e-02, -1.143853e-01, 1.356178e-02, 7.804698e-02, 8.501518e-02, -7.982724e-03, -9.373700e-02, 4.104644e-02, 1.128082e-02, -1.664095e-02, -1.014976e-01, -1.399588e-01, 6.970815e-02, 5.548148e-02, -8.380663e-02, -9.449140e-02, -2.240082e-02, -2.831342e-02, 6.836893e-02, -1.596291e-02, 8.569280e-03, 1.195597e-01, 2.211407e-02, -7.277996e-02, 6.570120e-02, -1.001150e-01, -1.046300e-01, -1.210852e-02, 1.495137e-02},
{-7.524558e-03, 3.959169e-02, -1.158011e-01, -1.071618e-02, -3.782035e-02, 3.472085e-02, 1.040986e-02, 2.302351e-02, 2.466759e-02, 2.656581e-02, -1.049615e-02, -7.876177e-02, 7.668822e-02, -3.432558e-02, 5.111241e-02, -1.360643e-02, 4.086286e-02, -8.326861e-02, 2.890474e-02, -2.786617e-02, -1.043277e-02, -7.861366e-02, 4.841075e-02, 5.479857e-02, 2.695077e-03, -6.487373e-03, -6.016229e-02, 6.840093e-02, -3.958511e-02, -3.086644e-02, -3.968995e-02, -7.010563e-02, 4.068622e-02, 1.051085e-01, 9.143533e-03, -1.791308e-02, 7.223460e-02, -8.683356e-02, 3.023350e-02, 1.307106e-02, 1.105786e-01, -4.731604e-02, 2.375040e-02, 5.056142e-02, -8.846971e-02, 2.849639e-02, 3.756244e-02, 5.836432e-02, 9.008925e-02, -3.185421e-02, -3.827408e-02, -1.842164e-02, 7.302193e-02, 2.017278e-02, -2.093601e-03, -3.491625e-02, 8.506916e-02, -2.025757e-02, 3.166931e-02, -4.150289e-02, 4.255958e-02, 8.586157e-03, -1.607893e-02, -8.625145e-04, 6.975836e-02, -7.183345e-02, 5.469485e-02, -4.076299e-02, 1.554059e-02, 2.916392e-03, -2.521121e-02, -1.129695e-02, -9.907068e-02, -8.216249e-02, -7.194804e-03, 8.909650e-02, 5.019462e-02, 3.120785e-02, 7.318712e-02, -3.019463e-02, 3.554102e-02, -4.408461e-02, 3.277975e-03, 5.897720e-02, 6.463539e-02, -5.384589e-03, 8.339251e-02, -2.991298e-02, 1.016060e-02, 9.505405e-02, -6.549177e-02, -6.736162e-02, -4.467388e-02, -5.463991e-02, 9.043349e-02, -6.069632e-02, 8.138054e-02, -7.227898e-02, -2.075379e-02, -7.127140e-02, 9.183773e-02, 2.364651e-02, 3.125000e-02, -6.553425e-03, 6.335102e-02, 3.781329e-02, 3.693590e-02, -3.106192e-02, -7.665136e-02, -6.484360e-02, 8.427928e-02, 9.336914e-02, -2.724994e-02, 3.702732e-02, 2.506426e-03, -6.074923e-02, 4.300189e-03, 6.413513e-02, 6.126198e-03, 1.621265e-02, 4.632942e-02, -4.808475e-02, -7.533854e-02, 7.777158e-02, 6.210180e-02, 1.024991e-01, -5.785463e-02, -4.195365e-02, -6.525398e-02, 5.910483e-02, 8.827530e-02, 6.795448e-02, 9.511811e-02},
{-1.842986e-01, -3.478588e-02, -1.133981e-02, 4.158489e-02, -9.259077e-02, -4.512625e-03, 9.371430e-03, 4.258390e-02, 3.820348e-02, -4.368851e-02, 6.525545e-02, 2.278544e-02, 4.793719e-03, 3.487298e-02, 4.053122e-02, -2.577727e-02, -9.096274e-03, -1.714761e-02, -9.622825e-02, -6.521428e-02, 9.126613e-02, 5.476997e-02, -2.310410e-02, -1.049789e-01, -4.871221e-02, 7.174612e-02, 3.768470e-02, -5.331728e-02, 4.142780e-02, 1.442599e-02, -9.592052e-02, 2.329966e-02, -2.987443e-02, -2.379526e-03, 1.034056e-01, -5.365366e-02, -7.013365e-02, -2.578253e-02, -2.887473e-02, -1.416726e-03, 1.250124e-01, 2.753554e-02, -7.001758e-02, 3.990135e-02, 4.254054e-03, 6.891553e-02, -1.216128e-02, 1.457858e-02, 3.388406e-02, 5.784164e-02, 2.239739e-02, 1.710318e-02, 6.798095e-03, -1.354277e-01, -9.727754e-03, 4.981999e-02, 7.602065e-02, -1.195233e-01, -3.638025e-02, -1.902935e-02, -7.132431e-02, 9.462416e-02, 8.712000e-02, -2.504669e-02, 2.830171e-02, 4.655699e-02, 3.241387e-02, -5.224725e-02, -2.423667e-02, -1.362667e-02, -3.954953e-02, -9.711431e-03, -3.532412e-02, 2.016797e-02, -3.517366e-02, -8.014975e-02, -2.206287e-02, 9.168592e-02, 1.257788e-02, -6.451810e-02, -1.232384e-02, -6.260905e-02, -2.918777e-02, -7.766066e-02, 9.321439e-02, -1.706984e-02, -9.681235e-02, 3.146982e-02, -1.543900e-02, 4.003324e-02, 1.685857e-02, 9.338015e-02, 3.143380e-02, 1.918408e-01, 2.989974e-02, 2.929349e-02, 1.078804e-01, 2.157051e-02, -9.053618e-02, -1.263903e-02, 6.864454e-02, 4.283122e-02, -4.518420e-02, 8.483852e-02, 7.699127e-02, 5.760847e-03, 3.136888e-02, 6.806643e-02, 1.438172e-02, 6.251681e-04, 8.856548e-02, -9.797366e-03, -5.363907e-02, 4.489483e-02, -5.691699e-02, 2.860408e-02, 1.164233e-01, -1.204121e-01, -3.714624e-02, -3.946479e-02, -2.034445e-03, 3.068963e-02, -5.781769e-02, 7.817776e-02, 6.524098e-02, -2.988310e-02, -1.051050e-01, -5.716740e-02, -9.135075e-02, 7.009176e-02, 5.152284e-02, -6.439000e-02, -1.231470e-01},
{1.919353e-02, 5.387573e-03, -7.070513e-03, 7.697626e-02, -2.688086e-01, -1.073221e-01, 5.234262e-02, -7.860352e-02, 4.327684e-02, 2.300526e-02, 8.094967e-02, -3.293955e-02, -2.236369e-02, -9.836138e-02, 5.486142e-02, -6.289628e-03, 1.384748e-01, -9.484413e-02, -5.300489e-02, 3.381146e-02, -2.029034e-02, 7.147052e-02, 2.431727e-02, -1.096403e-01, 9.120290e-02, 5.146619e-02, -1.088103e-01, -1.174552e-02, 9.069006e-02, -3.081873e-02, -1.319325e-01, -1.334007e-01, -1.619958e-01, 1.476621e-01, 2.409808e-01, 1.019028e-01, 5.627772e-02, -2.997324e-02, 2.061858e-02, -1.100031e-01, 4.901213e-03, -1.556115e-02, -4.567465e-01, -3.452302e-01, -8.173929e-02, 2.382760e-02, -2.526471e-03, 3.961608e-02, 5.584419e-02, -1.016404e-02, -9.117272e-02, 6.892087e-02, 4.052631e-02, -5.529646e-03, -6.672639e-02, 7.924284e-03, 1.542834e-01, 1.569165e-01, 2.163013e-02, -8.749413e-02, 2.750840e-02, 1.013233e-01, 9.035087e-02, 1.212758e-02, -3.435998e-02, 6.807990e-02, -4.365319e-02, -2.773846e-02, 1.406390e-02, -4.541943e-02, 8.450741e-02, -1.174237e-02, 1.344578e-01, -1.161542e-01, -1.104938e-01, -1.245964e-02, 2.564446e-01, -3.578398e-02, -7.910780e-02, -2.505748e-02, -2.373925e-01, -7.728972e-02, -1.173737e-01, -3.928073e-02, -9.584240e-03, 3.055534e-02, -4.526714e-02, 4.891326e-02, -3.957610e-02, 1.981697e-02, 4.135279e-02, 1.634441e-02, 2.868155e-02, 5.520948e-02, 7.562678e-02, -1.093989e-01, 1.855624e-02, 1.064735e-01, -6.596947e-03, 1.371383e-01, 1.546995e-02, -1.869279e-01, 2.780506e-02, -7.177366e-02, -9.056666e-02, 3.894492e-03, 1.852086e-01, -1.270346e-01, -3.648566e-02, -8.829851e-02, 1.468957e-01, -2.797708e-01, -1.632183e-01, 9.366374e-02, -9.085344e-02, 1.517338e-02, 1.949012e-02, -9.354800e-02, 1.087249e-02, 2.269012e-02, -2.941215e-02, 1.142423e-01, -1.395754e-01, -8.371887e-03, 4.748061e-02, 6.612395e-02, -2.949681e-02, -1.032386e-01, -9.839762e-02, -7.240649e-02, 1.480778e-02, -1.034545e-01, -1.470719e-01},
{1.740186e-02, 6.404185e-02, -7.286353e-02, 6.801644e-02, 2.635408e-02, 1.195681e-02, 6.518232e-02, 3.608231e-02, -3.293759e-02, -5.312324e-02, 8.589191e-02, -7.373693e-02, 9.586317e-02, 6.323567e-03, 2.286543e-02, -6.337601e-02, -6.963301e-02, 7.703263e-03, 5.799114e-02, 8.230598e-02, -3.408750e-03, 2.681200e-02, 5.877503e-02, -3.969468e-02, -8.333380e-02, 4.553689e-02, 4.958253e-02, -3.346989e-02, -1.001055e-01, -2.433117e-03, 8.492884e-02, 6.580496e-02, 1.403410e-01, -1.502446e-02, -2.964222e-02, -1.813949e-02, -3.166345e-02, -7.190333e-02, 9.403836e-02, 1.321047e-02, -4.570945e-02, -4.761715e-02, 1.853317e-01, 6.181345e-02, -5.308352e-02, -6.013957e-04, -1.142784e-01, 1.729307e-02, -1.586665e-02, -1.800288e-01, -1.975212e-03, 7.234006e-02, -8.724428e-02, 1.394326e-01, -6.971196e-02, -4.411539e-02, 7.546854e-02, 7.569334e-02, 2.738816e-02, -2.758455e-02, 4.614207e-02, 3.151913e-02, -2.576106e-02, -3.740204e-02, -1.054445e-01, 3.253757e-02, -5.237076e-03, 8.956432e-02, -6.418940e-02, 7.565968e-02, -2.133419e-02, -8.478171e-02, -8.896017e-03, 5.973509e-02, -5.796142e-02, 4.667658e-02, -1.304159e-01, -2.193654e-03, -4.719891e-02, -5.268577e-02, -4.455972e-02, -6.092656e-02, 5.446561e-02, -1.267598e-02, 1.382775e-02, 1.309859e-02, 1.086590e-02, -4.127279e-02, 1.603215e-02, 4.035122e-02, -2.012750e-02, -1.104011e-01, -7.376388e-02, 5.796171e-02, 5.380196e-02, 3.867679e-02, -7.535001e-02, -1.655967e-01, -2.439916e-02, 8.376236e-04, -6.388102e-02, 4.978049e-02, -6.412058e-02, 7.558297e-02, -4.078443e-02, 8.746831e-02, -7.100086e-02, -8.224119e-02, 4.603794e-02, 8.162550e-02, -7.449033e-03, 1.441367e-01, 1.088499e-01, 6.869356e-02, -3.138651e-02, 3.266685e-02, -7.075572e-02, 1.057466e-01, -4.322652e-02, 9.742282e-02, 7.557225e-02, -2.978672e-02, -7.196926e-02, -6.548722e-02, 4.648336e-02, -1.477816e-02, 9.639718e-02, -3.619070e-02, -3.340535e-02, 1.989154e-03, 7.533739e-02, -7.676017e-02, -1.153491e-03},
{-6.669871e-03, 1.675329e-02, 5.180248e-02, 4.133208e-02, -3.126791e-02, 3.384898e-02, -7.265520e-02, 4.295088e-02, 4.672279e-02, -8.769560e-02, 4.989826e-02, 3.289766e-02, -2.929919e-02, -1.630291e-02, -7.517157e-02, 1.397347e-02, -5.991453e-02, -5.666519e-02, -1.585820e-02, -3.401276e-02, 2.326306e-02, 1.425397e-02, -6.615116e-02, 9.180599e-02, -7.116222e-02, 5.128682e-02, 6.903789e-02, 5.708292e-02, -5.746321e-02, -5.030373e-02, 7.029372e-02, 6.755924e-02, 3.386917e-02, 1.138861e-01, 9.862320e-02, 6.660572e-02, -4.269159e-02, -7.509536e-02, -2.892738e-02, 8.498591e-03, 1.982258e-02, 1.782492e-02, 1.014948e-01, -6.854061e-02, 3.538962e-02, -7.413735e-02, -6.498101e-02, 6.302285e-02, -9.087644e-02, -1.245024e-02, -4.781983e-02, -7.734034e-02, -4.053367e-02, 5.737043e-02, 4.336783e-02, -6.296095e-02, 8.204886e-02, -9.193829e-02, -5.010418e-02, -3.270774e-02, 7.337725e-02, 5.624975e-02, 1.701153e-02, -7.235229e-03, 8.388916e-02, 6.493979e-03, -5.780168e-02, -4.932590e-02, -4.747247e-03, -9.889194e-02, 1.806229e-02, -8.071395e-02, 2.616883e-02, -2.870416e-02, 1.728415e-02, -7.306097e-02, -1.192012e-01, -7.306826e-02, 2.005609e-02, -7.675707e-02, -7.479276e-02, -6.738932e-02, 3.720572e-02, 3.969576e-02, -3.829271e-02, 2.606280e-02, 4.488249e-02, 4.338795e-02, 3.033906e-02, 8.432037e-02, 2.172423e-02, -7.790498e-02, 6.236624e-02, -3.128004e-02, -4.837213e-03, 1.388779e-02, 3.792573e-03, -2.450635e-02, -4.266443e-02, -2.271529e-02, -4.102272e-02, 3.040606e-02, -1.413627e-02, -8.440315e-02, 6.313817e-02, -3.892443e-02, 5.621925e-02, 8.133680e-03, 5.643921e-02, 5.116314e-02, 6.071453e-02, -6.425787e-03, 5.183121e-02, 5.576279e-02, -3.068696e-02, 2.799143e-02, 1.390772e-02, -1.001661e-02, -3.144970e-02, 2.846782e-02, 6.839026e-02, 7.792602e-02, -1.985536e-02, -7.030752e-02, -1.240823e-02, -2.503761e-02, -2.139931e-03, -3.440215e-02, -2.727296e-02, -1.847605e-03, -7.275686e-02, 1.255524e-02, -5.717028e-02},
{1.424617e-02, -2.078803e-02, -6.136633e-02, -2.391491e-02, -1.140591e-01, -9.424946e-02, -1.736299e-03, 4.740780e-02, 2.976203e-02, 4.952938e-02, 4.567654e-02, -1.197000e-01, 1.263065e-02, -4.986061e-02, -5.041032e-02, 5.144977e-02, -8.621090e-03, -1.917868e-02, -9.117524e-02, -3.288154e-02, -1.944302e-02, 1.357088e-02, 1.373561e-02, 7.699908e-02, -3.841788e-02, 3.249504e-02, -4.235994e-02, 6.206116e-02, 6.736139e-02, 3.066608e-03, -1.155219e-01, 2.313664e-02, -4.259880e-02, 1.299758e-01, -2.727951e-02, 5.721962e-02, -9.150690e-02, -1.200240e-01, 1.741442e-01, 7.240947e-02, -5.580135e-02, -3.898239e-02, -2.261051e-01, -1.697955e-01, 6.975070e-02, 3.262488e-02, -1.515351e-02, -4.878974e-02, 2.470114e-02, -1.449762e-01, -1.319931e-01, 2.351998e-02, 2.625820e-02, 5.626442e-02, -6.391073e-02, 5.781719e-03, 4.903922e-02, 1.727512e-01, -3.861700e-02, 7.503850e-02, -5.725838e-02, -2.733929e-02, -2.566415e-02, -9.698725e-02, -3.632137e-02, 1.510014e-02, 6.066612e-02, -2.496691e-02, 1.425348e-02, 1.358883e-02, -8.509825e-02, -1.513692e-02, 1.318487e-01, -7.418722e-02, 4.831879e-02, 6.991688e-02, 8.790500e-02, -1.114865e-01, -2.526506e-02, 5.052816e-02, -1.118557e-01, 1.003802e-01, -3.846903e-02, 6.386906e-02, -3.165821e-02, 4.969381e-02, 6.272025e-02, 4.005596e-02, 4.006696e-02, -9.060251e-02, 7.246570e-02, -9.125927e-02, 1.726599e-01, -6.591113e-02, 6.326667e-02, 3.678803e-02, 4.633470e-02, -1.169648e-01, -4.707531e-02, 6.990831e-03, -2.379056e-02, 9.580309e-03, 4.340870e-02, -6.869745e-02, -6.138081e-02, -1.266990e-01, -3.374069e-02, -5.391403e-02, -7.268412e-02, 2.785374e-02, 1.283884e-01, 6.861255e-02, 3.560219e-02, -7.769567e-02, 7.384481e-02, 5.574012e-02, -8.189881e-02, -7.603513e-02, -6.471664e-02, -5.930417e-02, -2.919400e-02, -2.122283e-02, -1.544740e-01, -1.309731e-01, -1.172933e-02, -3.002875e-03, 2.809189e-02, -2.078479e-01, -6.833772e-02, -1.135028e-01, -9.380162e-02, -7.268386e-02, 4.951905e-02},
{-3.501559e-02, 4.140333e-02, -1.182911e-02, -1.163616e-01, -6.701824e-02, -7.183368e-02, -6.233905e-02, 6.913464e-02, 2.594716e-02, 1.064408e-03, -4.518874e-02, -4.513327e-02, -9.353951e-02, -3.338448e-02, 7.770504e-03, 6.866963e-02, 2.955248e-03, -4.270382e-02, -3.963453e-02, 4.801151e-02, 5.645182e-02, -4.728910e-02, 9.156547e-02, -6.613448e-02, 6.201852e-02, 9.751186e-02, -1.051353e-01, 8.708099e-02, 9.588833e-02, 2.729396e-02, -1.966454e-02, -3.625599e-02, -6.399562e-02, 1.499163e-01, -3.160876e-02, -6.193494e-02, 9.717351e-03, -2.192791e-02, 3.714545e-02, 4.077165e-03, 5.389731e-02, -1.213739e-01, -2.625304e-01, -8.827212e-02, -6.548271e-02, -5.247231e-02, 1.809301e-03, 3.189391e-02, -1.658716e-02, -1.385685e-02, 2.590782e-02, 3.511075e-02, 5.489368e-03, -7.549120e-02, 6.300892e-03, 1.310091e-01, 1.196947e-01, 1.353049e-01, 3.596441e-02, -8.117764e-02, 1.422881e-02, 6.275479e-02, 6.660102e-02, -7.102878e-02, -3.284566e-02, -5.851807e-02, 1.370640e-02, 6.205887e-02, 5.794748e-02, 6.950642e-02, -4.828945e-02, 3.174491e-02, 1.376496e-01, -1.069383e-01, 1.601831e-02, -9.203581e-02, 7.201852e-03, 8.000501e-02, 5.386104e-03, -1.023902e-01, 7.571414e-02, -4.653583e-02, -5.868787e-02, -8.407953e-02, 2.297769e-02, -5.267099e-03, 1.624808e-02, 2.692747e-02, 2.677996e-02, 2.229159e-02, -2.732442e-03, -9.308790e-02, 1.023221e-01, -7.805528e-02, 7.725859e-02, -1.113851e-01, -5.774343e-02, 7.687822e-03, -7.381587e-02, 1.147689e-01, 1.437033e-03, -9.184417e-02, -5.783651e-02, 2.218373e-02, 5.748430e-03, 3.880712e-02, 7.069429e-02, -3.197135e-02, -2.347766e-02, -9.785715e-02, 9.141266e-02, -2.376506e-04, -7.227513e-02, 2.300469e-02, 9.830284e-03, -3.299124e-02, 3.654818e-02, -6.109016e-02, 2.728821e-02, 1.325364e-02, -3.347331e-02, 7.377377e-02, -1.234943e-02, 7.139810e-02, -8.520562e-02, 8.436161e-03, -9.751290e-02, -1.215473e-01, 2.313275e-02, -7.801883e-02, -6.868732e-02, 2.295450e-02, -1.072437e-01},
{6.404219e-02, -1.655321e-01, -3.655285e-02, 2.667400e-03, -1.057370e-01, 6.193228e-02, -6.886496e-02, -2.447811e-02, 4.946014e-02, 1.609195e-02, -4.745886e-02, 8.631423e-02, 5.275403e-02, 8.034465e-02, -3.651372e-03, -1.288859e-02, 1.037008e-01, -8.736052e-02, 5.845845e-02, 3.715758e-02, 1.299100e-02, -7.755201e-02, 8.176157e-02, -1.133082e-01, 4.761313e-02, 3.980475e-02, 2.040980e-02, 2.529703e-02, -1.917639e-02, -8.690351e-02, -2.668163e-02, -1.294320e-02, -3.150413e-02, 3.176295e-02, 1.485579e-02, 5.754288e-02, -3.994988e-02, 3.002140e-02, 1.111202e-01, -3.287434e-02, 6.500432e-02, -7.380010e-03, 4.349199e-02, -5.569528e-02, 1.690139e-02, 4.061658e-03, 6.035217e-02, -3.209612e-02, 1.499977e-02, -1.097096e-01, 7.171289e-03, -3.043180e-02, -2.568521e-02, -6.573377e-02, 6.497849e-02, 5.983299e-02, -7.469618e-02, -3.834977e-02, 1.515750e-02, -1.355510e-02, 1.174611e-02, 2.574020e-02, 7.544430e-02, 8.265279e-02, 6.500712e-02, -6.838383e-02, -1.767297e-02, 7.176731e-02, 8.596179e-02, 2.149324e-02, 5.571662e-02, -6.313998e-02, 7.757142e-02, -1.922767e-02, 3.634496e-02, 4.353412e-02, 5.378777e-02, 3.521609e-02, 6.547825e-03, 4.630226e-03, -2.233602e-02, 3.936626e-02, -8.909998e-04, -2.660118e-02, -5.006674e-02, -3.915297e-02, 3.196105e-02, 6.261073e-02, -8.885211e-02, 6.216669e-02, -4.920853e-02, 6.126936e-02, -6.859533e-02, 1.592836e-03, -4.974910e-02, -7.683276e-02, 4.648873e-02, -1.023275e-01, -6.002291e-02, -4.735905e-02, 8.144215e-02, 2.902498e-02, -9.073497e-04, 5.448625e-02, -6.289447e-02, -9.180774e-02, 9.689582e-02, -1.674501e-03, 3.423213e-03, 7.098352e-02, 1.248464e-01, 3.053461e-02, -3.356695e-02, 2.062892e-02, 6.908114e-02, -5.233548e-02, -3.334726e-02, -7.177770e-02, 1.727720e-03, 5.306487e-02, -5.018917e-02, -2.340446e-02, 4.791453e-02, 6.520276e-02, 6.781275e-03, 3.024752e-03, 4.814146e-03, -1.105186e-01, 4.430102e-02, 1.759115e-02, 2.058824e-02, -6.460223e-03, -5.774149e-02},
{-3.316753e-02, -1.664475e-01, -6.831384e-02, 9.218223e-02, -8.086501e-02, -5.425858e-02, -4.459596e-02, -4.694379e-02, 6.906222e-02, -6.497757e-02, 6.356321e-02, -4.470100e-02, -1.088057e-01, 5.007219e-02, 2.554628e-02, 3.891654e-02, -4.815901e-02, 2.828582e-02, 9.481101e-02, -7.711303e-02, 1.446945e-01, 6.949115e-02, 3.467805e-02, 7.068290e-02, 1.537501e-02, 4.955669e-02, -1.192869e-01, -1.613430e-02, -4.196679e-02, -2.946714e-02, -7.711112e-02, -5.631556e-02, -4.057111e-02, 7.184496e-03, 2.888196e-01, 9.971710e-02, 1.083745e-01, -3.425913e-02, 2.018128e-01, -2.418680e-02, 1.831672e-01, 1.713652e-01, -2.921159e-01, -2.974681e-01, -2.095751e-02, 8.186199e-03, -2.554141e-02, -5.027609e-02, 3.252294e-01, 3.031596e-01, -8.331089e-02, 1.404839e-02, -6.674777e-02, 7.183923e-02, -3.324397e-02, 1.587900e-01, 6.721129e-03, -1.013462e-01, 3.051973e-02, -6.924564e-02, 2.358521e-02, -6.051310e-03, 9.163095e-02, 4.371489e-02, 4.528740e-02, 6.044080e-02, -6.411542e-02, -3.761298e-02, 5.677638e-02, -8.711902e-02, 1.010386e-01, -4.106881e-02, 1.532617e-01, -8.631834e-02, -3.187857e-02, -9.413391e-02, 1.343552e-01, -4.555744e-02, 5.117525e-02, -5.197344e-02, -3.068653e-01, -5.144558e-02, -6.591081e-02, -7.449029e-02, 1.895717e-02, 9.644395e-03, -3.040392e-03, 9.972405e-02, 4.066332e-03, 4.726692e-02, 6.280871e-02, -3.561779e-02, -7.973916e-02, 1.244788e-01, -8.420513e-02, -4.924082e-02, -3.308471e-02, -1.765089e-01, 4.670629e-02, -8.325449e-02, 9.042144e-02, -3.771736e-02, 1.910000e-02, 4.115178e-02, -3.720656e-02, -3.025468e-02, 1.301816e-01, 8.068147e-02, 2.354193e-02, 8.835481e-02, 1.293448e-01, -5.842535e-02, -2.030948e-01, 1.977246e-02, -1.296047e-01, -3.708304e-02, 3.580239e-03, -2.874542e-02, -6.484319e-02, -5.330503e-03, 2.639332e-03, 1.416382e-01, -1.228639e-01, 8.124189e-02, -6.894150e-03, 8.154698e-02, 8.280940e-02, 9.356121e-02, -3.712284e-02, -1.266758e-01, -8.870900e-02, -9.363613e-02, -4.347455e-02},
{9.059369e-02, -5.360599e-02, -1.591521e-01, 3.252909e-02, -8.193848e-02, 4.850164e-02, -1.832754e-03, -2.202005e-02, -6.965952e-02, -2.591193e-02, 2.838748e-02, 2.126540e-02, -2.263980e-02, -8.494166e-03, 8.701708e-02, 3.556526e-02, 1.080954e-01, 5.908565e-03, 4.361356e-04, 2.837531e-02, -1.398923e-01, -5.788185e-02, -1.211771e-01, -2.932248e-02, -2.601555e-02, 4.155620e-02, 2.016246e-02, -1.075014e-01, -2.182959e-02, -3.532317e-02, 2.659828e-02, 4.884493e-02, 2.615838e-02, -1.108178e-01, -1.979847e-02, 2.141555e-02, -8.576104e-02, -9.251546e-03, 1.489351e-02, 8.494470e-02, 5.990238e-03, -3.197000e-03, 2.133895e-01, 1.935395e-01, 5.831228e-02, 2.452025e-02, -4.095528e-02, 5.196090e-02, 9.323677e-02, 4.100047e-02, 7.866754e-02, 6.763978e-02, 8.442584e-02, 4.139415e-02, 3.955070e-02, -1.803715e-01, -2.805968e-02, -1.520390e-02, -3.350644e-03, 5.556503e-02, -1.278602e-02, -3.634550e-02, -8.275051e-02, -6.627762e-02, 1.941426e-02, -7.131018e-02, -4.752040e-02, 1.208100e-02, -1.794525e-04, -6.001686e-02, -6.943929e-02, 1.198892e-02, -4.067801e-02, -4.289326e-02, -4.107128e-02, 4.345290e-02, 1.491481e-01, -3.423361e-02, 1.679916e-02, 7.658853e-02, 4.539494e-02, -6.839278e-02, -2.171858e-02, -7.901364e-02, 2.112416e-02, 4.782130e-02, 6.469345e-02, -3.672228e-02, -2.488279e-02, 4.396492e-02, -3.314438e-02, 1.689713e-02, 2.539899e-03, -8.859859e-02, -3.570146e-02, 5.764019e-02, -6.500715e-02, -3.871226e-01, 8.001347e-02, -7.814511e-02, -5.687854e-02, -7.685191e-02, -3.289594e-02, 1.672480e-02, -5.160931e-02, 4.295473e-02, 1.018248e-01, -1.066400e-02, -1.078653e-01, 1.300175e-02, 4.779409e-02, 1.423442e-01, -7.261843e-02, 2.872149e-02, -4.198380e-02, 6.098835e-02, -1.251442e-02, -6.573495e-02, 5.533086e-02, -1.521790e-02, -7.546403e-02, 1.106347e-01, 2.472769e-02, 2.125085e-02, 3.177698e-02, 5.380447e-02, 1.114175e-01, 5.019551e-02, -5.347657e-02, -2.817649e-02, 3.672238e-02, 8.881928e-02, -4.144260e-02},
{2.987385e-03, -1.909744e-01, -1.429046e-01, 9.744070e-02, -3.233835e-01, 1.882367e-01, 2.112399e-02, -2.656240e-02, 8.506247e-02, -3.550014e-02, 8.883554e-02, -5.926709e-03, -2.703867e-02, 6.963386e-02, -5.196309e-02, 1.430301e-01, 1.626821e-01, 1.397404e-02, -7.561594e-02, -1.944157e-02, 2.675285e-02, 9.780435e-02, -1.699568e-01, 1.958225e-02, -4.864991e-02, 4.462254e-02, -6.454615e-02, 6.084903e-02, 9.305660e-03, 9.413043e-02, -3.727689e-02, 7.103008e-02, 8.830933e-04, 3.085025e-02, 2.388635e-01, 1.620545e-01, -7.578620e-02, -2.093633e-01, 7.931872e-02, 1.558481e-02, 3.659326e-01, 2.686127e-02, 8.300396e-02, -2.268150e-01, -6.147933e-02, -4.901964e-02, 1.390389e-02, 1.124856e-01, 5.292023e-01, 3.134877e-01, -1.447932e-01, 9.852839e-02, 1.347901e-01, -2.211591e-02, 3.105573e-02, 7.503948e-02, -2.223547e-02, -2.751688e-01, -1.117743e-01, 1.942681e-01, 6.959220e-02, -5.303179e-02, 1.386289e-01, 1.820361e-02, 3.408324e-02, -3.025504e-02, -6.228086e-02, -1.842596e-02, 6.470876e-02, 8.940919e-02, -1.351281e-01, -6.419502e-02, 4.026053e-02, -1.744378e-02, -3.138511e-02, -1.197050e-01, 2.226499e-01, -8.678671e-02, 8.000006e-02, -1.278926e-01, -2.124670e-01, -4.165856e-02, -1.030544e-01, -3.942317e-02, -1.546878e-02, 1.927386e-01, 5.200108e-02, 2.668022e-02, -5.318609e-02, -1.337322e-01, 7.576383e-02, 8.530036e-03, 1.056845e-01, -9.749644e-02, -1.834841e-01, -2.743829e-02, -2.172914e-01, -5.055783e-01, 1.486756e-01, 7.242361e-02, 1.032212e-01, -1.881502e-02, 5.025924e-02, 1.175269e-01, 5.152299e-02, -1.481762e-01, 1.512453e-01, 1.649411e-01, -2.430356e-02, 1.027182e-01, 2.226261e-01, -1.297569e-01, -1.880926e-01, 1.021286e-01, -1.267225e-01, -3.739829e-02, -2.423157e-02, -9.301819e-02, 8.342505e-02, -1.639031e-01, -1.603259e-01, 2.699855e-01, 1.183458e-01, 1.001423e-01, 3.520850e-02, 2.805694e-02, -1.526752e-01, 2.326698e-01, -1.227409e-01, 1.652353e-01, -1.013967e-01, -2.649848e-02, -1.111038e-01},
{1.161886e-01, -1.339898e-01, 9.056224e-02, 3.906990e-03, -1.821741e-01, 2.796763e-02, 5.862543e-02, -5.939445e-02, 3.560719e-02, -1.295009e-02, 4.375796e-03, 4.714840e-02, -5.357075e-02, -3.616304e-02, 7.968143e-02, 4.041936e-02, -1.115130e-02, 6.751619e-02, -3.114127e-02, 8.850452e-02, -4.431123e-02, -2.943242e-02, -5.021746e-02, 8.530543e-03, 1.307477e-02, -1.361352e-02, -8.330230e-03, 5.163672e-02, -8.855512e-02, 2.070474e-02, -7.001177e-02, 2.561812e-02, -4.899714e-02, 3.921543e-02, 2.315598e-02, -3.139083e-02, -1.039847e-02, 6.224030e-02, 1.039210e-01, 5.571573e-02, 4.561973e-02, -5.564445e-02, 1.161053e-01, -1.539381e-01, 9.099281e-02, 2.140404e-02, -8.689872e-02, -1.896679e-03, -7.966270e-02, 3.082281e-02, 4.569774e-03, -5.267011e-02, -1.158171e-02, 4.206995e-02, 9.008805e-03, -4.812288e-02, -7.756528e-03, 9.004082e-03, 5.470006e-03, 1.827955e-02, -2.590387e-04, 6.319608e-02, -1.925856e-03, 6.677273e-02, 9.069279e-03, 1.790667e-02, 5.683093e-02, 7.701169e-02, -3.453765e-02, -8.961096e-02, 7.169136e-02, 2.125168e-02, -1.708314e-03, -8.156499e-02, -6.573050e-02, 4.032620e-02, -5.457378e-02, 5.728950e-02, 2.199796e-02, -6.150517e-02, -8.381117e-02, -1.138120e-01, -4.172826e-02, -7.249644e-02, 3.069258e-02, 2.492288e-02, 7.911081e-02, 5.874565e-02, -3.707900e-02, -7.720093e-02, -4.862310e-02, -8.800531e-02, -7.392818e-02, 5.910672e-02, -8.124887e-02, -4.117036e-02, -3.337187e-02, -1.326714e-01, -2.659600e-02, -3.230540e-02, 2.311630e-02, 9.698103e-02, -8.470850e-02, -1.292602e-02, 7.871196e-02, 4.574907e-02, -8.793803e-02, -4.738491e-02, -1.146374e-01, 5.197822e-02, 6.198504e-02, 1.166580e-01, 6.072487e-02, -2.867947e-02, -6.531636e-02, -2.466100e-03, 7.009434e-02, -5.040992e-02, -8.159652e-03, 5.801373e-02, -7.670870e-02, -3.962787e-03, -1.015180e-01, -4.813068e-02, 6.324423e-02, -6.379012e-02, -4.653793e-02, -7.340736e-02, 1.079090e-01, -2.421612e-02, 9.720953e-02, -2.062358e-02, 2.157079e-02},
{-3.969482e-03, -2.878955e-03, -1.902560e-01, -1.393366e-01, -1.081089e-01, -1.289135e-03, 1.033917e-01, -1.976623e-02, -9.189871e-02, -6.354517e-02, -4.761645e-02, 7.112762e-02, -3.801110e-02, -9.770802e-02, -9.027158e-02, 9.716689e-02, 2.120526e-02, -4.855336e-03, -2.875150e-02, 1.710729e-02, -2.235676e-02, 2.576472e-02, -8.095539e-02, 1.728779e-01, 1.047403e-01, 9.216026e-02, -4.929095e-02, 3.156628e-02, 4.537163e-02, 7.620772e-04, 5.870897e-02, -3.334970e-03, -2.045983e-02, 3.868791e-02, 1.492803e-01, -3.980810e-03, -7.880867e-02, -4.716395e-02, 3.865174e-01, 9.469764e-02, 1.917360e-01, -6.342181e-02, -3.791350e-01, -3.082559e-01, -7.920343e-02, 5.393835e-02, 1.046041e-01, 1.257415e-01, 6.140536e-02, 6.537443e-02, -1.586365e-01, 2.807448e-02, -5.551070e-02, -3.347447e-02, 6.402998e-02, 1.207075e-01, 7.555138e-02, -1.230359e-01, -1.311519e-01, 1.486932e-01, -9.311202e-02, 5.060435e-02, 1.621445e-01, -3.813988e-02, -2.197510e-02, -1.426386e-02, -1.927598e-03, 3.032051e-02, 4.441110e-02, 1.403661e-01, -1.140333e-01, -1.310728e-01, 1.205458e-01, -2.303788e-02, 2.825026e-02, -2.841400e-02, 2.122246e-01, 1.743866e-02, 3.542024e-02, -3.502697e-02, -2.949290e-01, 2.308593e-01, 4.276450e-02, -6.915312e-03, 9.636394e-02, -7.462668e-03, 3.485769e-02, 1.771712e-01, 9.523115e-03, 5.523001e-02, 7.990490e-02, -3.740795e-03, 2.049243e-01, -9.896008e-02, -7.114311e-03, 6.358260e-02, -5.109204e-02, -3.488718e-01, 7.185633e-02, -7.084579e-02, 2.077558e-02, -1.506771e-01, 3.801112e-03, 7.994368e-02, 1.664865e-01, -9.376574e-02, 1.482643e-02, 1.822768e-03, 1.173846e-01, 4.227601e-02, 1.050617e-01, -4.183082e-02, -2.057058e-01, -1.728002e-03, -1.166001e-01, -1.003764e-01, -1.566816e-02, -3.661369e-03, 2.598851e-02, 5.552523e-02, -5.892399e-02, 1.172372e-01, -8.822802e-02, -1.146714e-01, -6.594646e-02, -4.644161e-02, -1.189054e-01, -6.312567e-02, -4.020952e-02, -7.538359e-02, -1.431446e-02, -6.302371e-02, -1.167091e-01},
{-1.929263e-02, -8.136323e-02, -1.785672e-02, 1.731881e-02, -6.712996e-02, 6.366234e-02, 1.116103e-01, -1.300774e-01, -6.489268e-02, -6.933252e-03, 3.026085e-02, 4.780097e-02, -2.704171e-02, 1.148790e-03, 4.833244e-02, 1.038855e-01, 1.221274e-01, 3.733597e-02, -3.468642e-02, -2.397235e-02, -1.208676e-01, 3.634742e-02, -1.406498e-02, 1.009912e-01, 6.304823e-02, -5.253803e-03, -4.882066e-02, -7.875533e-02, -2.557547e-02, -4.532775e-02, -1.933582e-02, 6.682766e-02, 9.668270e-02, -3.205373e-02, -8.914054e-02, -3.835772e-02, -1.387021e-01, 3.295394e-02, 1.200608e-01, 7.168815e-02, 2.315133e-01, -2.869788e-02, -2.368989e-01, -4.178214e-02, -7.542063e-02, 9.794203e-02, -9.406320e-03, 6.211225e-02, 7.877277e-02, 1.973153e-01, -1.136412e-01, -5.355316e-02, 3.649604e-02, 3.126136e-02, 7.139833e-02, 9.918405e-02, -6.817492e-03, -1.041506e-01, -1.076110e-01, 1.749105e-01, -1.881882e-02, 8.909804e-02, -9.552019e-03, -2.390288e-02, 4.069897e-02, -3.154379e-03, -6.473836e-02, 1.876632e-02, 1.230825e-01, -3.827893e-02, -2.144036e-02, -4.970699e-02, -4.995200e-02, -1.133203e-01, -1.027728e-01, -6.928799e-02, 1.899505e-01, 2.543600e-02, 5.459509e-02, 1.928383e-02, -1.071087e-01, 6.877889e-02, -4.014779e-02, 6.215195e-02, 7.684349e-02, -1.764758e-02, 5.548500e-02, 6.394210e-02, 6.564719e-02, -4.423487e-03, 7.092221e-02, 2.786211e-02, 1.573624e-01, 3.883161e-02, -2.493807e-02, -4.946577e-02, 9.073699e-02, -1.477444e-01, -7.634458e-02, -4.582043e-02, 1.016066e-01, -1.522156e-01, 5.236700e-02, 1.797754e-01, 8.210962e-02, 2.993697e-02, -1.151869e-02, 6.768226e-02, -4.364714e-02, -2.567866e-02, 5.872399e-02, -3.671950e-02, -1.595327e-01, 1.016254e-01, -1.380698e-01, 9.280381e-02, 1.243899e-01, -3.792085e-02, -1.318546e-03, -7.136516e-02, 6.618461e-03, 9.253008e-02, -5.624222e-02, -2.496788e-02, -7.323600e-02, 8.097102e-02, 6.551441e-02, 7.608719e-02, 2.945231e-02, 4.099187e-02, -6.411940e-02, 1.241954e-01, -3.675859e-02},
{3.098211e-02, 2.104521e-02, 3.233014e-02, -2.132426e-01, -1.191706e-01, 1.092161e-01, -1.620049e-02, -5.617844e-02, -1.036811e-01, -1.027503e-01, 1.045925e-01, 2.229713e-01, 3.186734e-02, -1.380575e-01, -4.215253e-02, 1.106777e-01, 7.767248e-02, -1.394415e-01, -9.961009e-02, 7.700890e-03, -2.739909e-02, -3.959218e-02, -2.276311e-01, 2.882846e-01, 2.960170e-02, 5.083875e-02, 2.647945e-01, 1.071742e-01, -4.387974e-02, 1.624408e-01, 1.307768e-01, -1.532378e-01, 3.725932e-02, 5.636045e-02, 1.959033e-02, 7.991669e-02, -2.563469e-01, -1.995691e-01, 2.451652e-01, 9.446612e-02, 1.315881e-01, -1.379947e-01, 2.060260e-01, 1.642056e-02, -6.956235e-02, -1.016902e-01, -3.372568e-02, 2.138052e-01, -2.750308e-01, -1.340638e-02, -1.947025e-01, 2.572038e-01, 8.685981e-02, -9.611347e-02, 1.130130e-01, 4.930118e-02, 1.290427e-01, 7.123331e-02, -3.572477e-02, 1.961280e-01, -4.411872e-02, -5.304727e-02, 1.558626e-01, -2.844931e-01, 8.496475e-02, -2.401970e-01, -1.667102e-02, -1.456779e-02, -7.939253e-03, 1.195878e-01, -2.275231e-01, -5.604099e-02, -1.258702e-01, -1.052934e-01, -2.618490e-01, -1.911597e-02, 1.798078e-01, -1.384654e-01, 2.688448e-01, -1.766938e-01, 2.212920e-01, 4.122458e-01, -4.196201e-02, 3.152552e-03, -1.221230e-02, -7.902970e-02, 1.921568e-02, 3.485749e-01, -6.661361e-02, -2.444618e-01, 5.369483e-03, -9.322083e-02, 2.316590e-01, -4.065018e-01, 4.361427e-02, 1.426228e-01, 5.897991e-03, -4.852806e-01, -1.463532e-02, 7.014544e-02, 6.873637e-02, 1.766297e-01, -4.161825e-02, 7.832137e-03, 1.546927e-01, -1.889070e-01, 8.630616e-02, -1.561374e-02, 1.595137e-01, -1.208243e-01, -1.634258e-01, -3.774355e-02, -3.892914e-02, -5.188125e-02, -1.463920e-01, -1.821844e-01, 3.525285e-02, -9.745206e-02, -2.757887e-02, -7.264581e-02, -2.256303e-01, 2.528010e-01, 1.533551e-01, 1.388574e-02, 2.857761e-02, 5.689094e-02, -1.716061e-01, -3.587005e-02, -6.497889e-02, 3.915255e-02, -2.079942e-01, 5.234248e-02, -1.561739e-01},
{-1.036771e-01, 8.587480e-02, 5.548275e-02, -5.847591e-04, -8.511091e-02, -7.250280e-02, 4.260199e-03, -3.522806e-02, -1.919927e-02, -8.326251e-02, 1.485797e-01, 1.621040e-02, -5.104898e-02, -1.641773e-02, -6.475862e-02, 4.513130e-02, -4.667942e-02, -5.913680e-02, -5.734898e-03, 5.749687e-02, -5.351628e-02, -1.776104e-02, 4.358021e-04, 5.946498e-02, -4.789439e-02, 8.143555e-02, -5.007207e-02, 2.389712e-02, 8.564052e-03, 7.909860e-02, 4.527132e-02, 4.115141e-02, -3.617207e-02, -5.305334e-02, -1.454825e-02, 5.955675e-02, -4.464808e-02, -4.709626e-02, -5.787637e-02, -3.557525e-02, 1.065870e-01, -6.650325e-02, -2.840622e-01, -4.933336e-02, -2.019245e-02, -7.744578e-02, -9.098382e-02, 8.475256e-03, 5.303987e-02, -7.663274e-02, -3.548753e-02, 2.415116e-02, 6.248179e-02, 3.613534e-02, -3.879337e-02, -6.594706e-02, 3.680064e-02, 4.757503e-02, -4.133029e-02, 9.418362e-02, 1.753064e-02, -1.865274e-02, -4.128018e-02, 5.664661e-02, -4.420026e-02, 1.985537e-03, -2.366522e-02, 4.664306e-02, -2.528911e-02, -2.412442e-02, 3.139114e-02, 2.913535e-02, -1.386238e-03, 4.966218e-02, -1.566952e-02, -6.942622e-02, -1.893423e-02, -1.109891e-01, -6.613590e-02, -1.099049e-01, -3.754815e-02, 1.251252e-02, -2.403355e-02, 8.747266e-03, 5.273821e-02, -8.659437e-03, 2.244074e-02, 4.243944e-02, 6.120970e-03, -3.160696e-02, 6.300490e-02, -3.634028e-02, 9.625938e-02, 5.893651e-02, 1.029055e-01, -2.752285e-02, -6.770255e-02, -4.189108e-02, -6.022966e-02, -4.856129e-02, 4.454888e-02, 3.359935e-02, -7.452413e-03, -1.770265e-02, 5.038754e-02, -6.988082e-03, -5.787420e-02, -6.835087e-02, -6.702182e-02, 1.284136e-02, 8.243401e-03, 2.436713e-02, -1.953053e-01, -6.148335e-02, -3.655860e-02, 1.261832e-03, 5.496780e-02, -5.117242e-02, 5.750512e-02, -6.111600e-02, -5.889550e-02, 4.640505e-04, 7.933873e-02, 6.131547e-03, -5.236962e-02, 2.695858e-02, -1.106840e-02, -1.456532e-01, -9.950758e-03, -1.993746e-02, 7.655253e-02, -3.834738e-02, 5.526422e-02},
{7.831167e-02, -1.360470e-01, -3.053094e-01, -4.638890e-01, -8.161223e-01, 8.898167e-02, 1.527467e-01, -2.501925e-01, -2.247421e-02, -2.369821e-01, 1.645158e-01, -4.941762e-02, -2.007129e-01, -1.270733e-01, -1.434520e-01, 1.904348e-01, 1.525860e-01, -1.522287e-01, -2.047197e-01, -1.364626e-01, -1.389518e-01, 1.046806e-01, -3.280825e-01, 5.475762e-02, 7.447032e-02, 1.115202e-01, -5.890707e-02, 3.148048e-02, 1.817978e-01, -1.177070e-01, 1.489537e-01, 1.309700e-01, -1.332787e-01, -1.075425e-01, 5.418957e-02, 8.278852e-02, -2.016239e-01, -1.246678e-01, 1.911049e-01, 1.889502e-01, 3.371484e-01, -5.345375e-02, 1.199041e-01, -2.082186e-01, -1.486487e-01, -1.162234e-01, 1.279836e-01, 1.973549e-01, 3.607347e-01, 5.435241e-01, -1.626117e-01, 1.599864e-01, -8.990161e-02, -4.022224e-02, 2.601913e-01, 3.330403e-02, 1.144213e-02, 8.605741e-02, -1.134381e-01, 4.398254e-01, 1.222107e-01, 8.978049e-02, 4.430180e-02, -7.692338e-02, 1.529838e-01, -7.995750e-02, -1.605008e-01, 8.792878e-02, 3.763242e-02, 4.391524e-01, -3.959701e-01, -5.933479e-02, 1.282604e-01, -1.310004e-01, -1.577102e-01, -2.453129e-01, 5.269490e-01, -7.063603e-02, 9.319902e-02, -1.609946e-01, -2.437581e-01, 2.838547e-01, -6.572860e-02, -2.169887e-01, 6.964567e-02, 1.859415e-02, 7.960337e-02, 1.817940e-01, 4.309006e-02, 9.663559e-02, 1.154224e-01, -2.407463e-01, 1.011683e-01, -3.004495e-01, -2.624251e-02, 6.404576e-02, -2.253356e-02, -7.972310e-01, -1.849568e-02, -1.767301e-02, 2.081985e-01, -1.804909e-01, -9.583694e-02, 1.520519e-01, 1.355228e-01, -8.531487e-02, 6.566233e-02, 1.329943e-01, -6.887402e-02, -8.299322e-02, -3.309918e-01, -3.006146e-02, -2.494832e-01, -3.444361e-02, -1.361096e-01, 1.136333e-01, 2.878055e-02, -6.841275e-02, 5.507667e-03, -2.322790e-01, -2.501648e-01, 1.971820e-01, 5.645448e-01, 1.037620e-01, 1.187485e-01, 2.521302e-01, -2.970997e-02, 3.295716e-01, -1.660179e-01, -6.747518e-02, -2.318564e-01, -2.354305e-02, -1.792147e-01},
{1.471080e-01, 5.846975e-02, 4.081684e-02, -3.118456e-02, 7.097297e-02, -7.294614e-02, 4.310398e-02, -4.802852e-02, -1.199376e-01, -7.883193e-03, -1.390539e-02, 3.034980e-02, 1.155754e-02, 9.469574e-02, 9.723492e-02, 6.203098e-03, -4.595823e-02, 3.908677e-02, 8.988335e-02, -2.436571e-02, -7.033589e-02, -7.210432e-03, 2.279542e-02, 6.264069e-02, -3.236090e-02, 1.280957e-02, -2.501085e-02, -1.047842e-01, -9.918789e-02, -8.331610e-02, -6.769505e-02, -5.722433e-02, 4.556248e-02, 5.169196e-02, 2.091535e-04, -1.052906e-01, -2.406348e-02, 2.963009e-02, 8.104599e-02, 4.645352e-02, 5.213955e-02, 5.602705e-02, 7.707975e-02, -5.528121e-02, 4.606801e-02, 2.110541e-04, -6.097955e-03, 5.759156e-02, -1.487156e-02, -8.809599e-02, -6.129136e-02, 3.460767e-02, -1.126322e-01, 6.567845e-02, 1.638637e-03, -1.843952e-01, -3.466019e-02, -5.140067e-02, 6.036581e-02, 2.109922e-02, 5.894908e-02, -3.260889e-02, 2.688071e-02, 3.108816e-02, 4.979313e-02, 7.021374e-02, 2.454535e-02, 3.948464e-02, -1.100913e-01, -1.401708e-02, -8.438706e-02, 4.759946e-02, -8.545494e-03, 1.040989e-02, 7.579741e-02, -5.799424e-02, -1.253341e-01, -7.280682e-02, -9.250283e-02, -5.036887e-02, 7.571399e-02, -4.226469e-02, 1.864402e-05, 5.729648e-02, 6.023454e-02, -7.733284e-02, 1.225568e-01, -8.270065e-03, 1.015999e-01, 6.539819e-02, 6.140928e-03, -6.078047e-02, 3.885568e-02, -3.716927e-02, -4.254185e-02, -6.396012e-02, 2.466331e-02, -1.305281e-01, 9.866190e-02, -4.993425e-02, 8.371175e-02, 1.376533e-01, -1.957554e-02, 4.635973e-03, -5.197071e-02, -4.621319e-02, 5.317513e-02, -8.070861e-02, 2.158337e-02, 5.964283e-02, 1.006866e-01, 1.226455e-01, -2.575198e-02, 3.436835e-02, -2.539782e-02, 6.405132e-02, -2.116084e-02, 4.778896e-02, -4.884464e-02, -2.668741e-03, 5.902923e-02, -7.686327e-02, 4.633503e-02, 8.863706e-02, 9.091700e-02, 4.797240e-02, 9.872763e-03, -9.482060e-02, 4.388073e-02, -6.283989e-02, 1.207762e-01, -3.060402e-02, -2.515162e-02},
{-2.608626e-01, -1.220265e-01, 9.387947e-02, 4.474910e-02, -7.555792e-01, -7.879183e-02, -8.377081e-02, -2.627477e-02, 5.140240e-01, -2.942383e-03, 2.262823e-01, -1.370654e-01, -4.948255e-01, 1.890516e-02, -9.582719e-02, -1.170660e-01, 1.109399e-01, 2.552460e-02, -9.873479e-03, -1.431856e-01, 1.986252e-01, 3.003438e-01, 2.383627e-01, -5.387254e-02, 1.009813e-01, 2.935906e-01, -4.193620e-01, 9.755115e-02, 2.570870e-01, -2.831959e-01, -2.738127e-01, -1.085221e-01, -2.715346e-01, 9.004964e-03, 1.582653e-01, 1.171631e-01, 3.295226e-01, 1.660155e-01, 1.277172e-01, -1.646525e-01, 2.426784e-01, -1.494958e-01, -6.101631e-01, -3.827986e-01, -9.897319e-02, 1.827655e-01, 1.564451e-01, -5.590849e-02, 3.951714e-01, 2.064881e-01, -1.892309e-01, -6.505844e-02, 5.402271e-02, -3.268031e-01, -7.026320e-02, 1.734135e-01, -5.923374e-02, 2.594385e-01, 1.786043e-02, -4.197813e-01, -5.708551e-02, 1.428597e-01, 3.681417e-01, 2.809680e-01, -1.930928e-02, -3.620531e-02, 2.075986e-04, 4.854139e-02, -1.079064e-01, 9.146409e-02, 2.064999e-01, 5.107096e-02, 3.540345e-01, -3.089430e-01, -4.931349e-02, -3.939451e-02, 2.670201e-01, 3.116182e-02, -7.003468e-02, 8.216447e-02, -4.738714e-01, -3.457523e-01, -2.495591e-01, -2.881588e-02, 2.283731e-01, 2.184271e-01, -3.778781e-01, 7.716925e-02, -3.088162e-01, 1.207278e-01, 1.756438e-01, -1.739255e-01, 7.691274e-02, 7.062143e-02, 1.965625e-01, -1.715611e-01, 1.983813e-01, 1.142624e-01, -1.732893e-01, 3.472190e-01, -1.106715e-01, -2.829212e-01, 1.421457e-01, 1.126434e-01, -1.683690e-01, -3.025371e-02, 1.968118e-01, -1.177158e-01, 8.671953e-02, 8.817929e-02, 3.989562e-01, -4.637195e-01, -3.215525e-01, 6.580135e-02, -1.759951e-01, 1.492041e-01, 5.534001e-02, -3.157693e-01, 1.103798e-01, 3.095926e-02, 6.031070e-02, 2.575757e-01, -5.078042e-01, -1.478675e-01, -1.305121e-01, 2.914041e-01, -3.156080e-01, -3.437375e-02, -2.330240e-01, -2.772758e-01, -7.715875e-02, -2.785528e-01, -1.848412e-01},
{-1.145254e-01, -1.647403e-01, -1.004844e-01, 2.444145e-01, -4.628841e-01, -4.910186e-02, -1.909353e-02, 1.794490e-02, 2.512993e-01, -7.273418e-02, -1.057405e-01, -1.192059e-01, -1.690909e-01, -4.260841e-03, -1.116162e-01, -1.648356e-02, 2.460630e-01, 1.670588e-03, 1.500130e-02, -9.172670e-02, -1.997391e-01, 1.387025e-01, -4.145875e-02, -5.872450e-02, 9.611662e-03, 2.033367e-01, -2.145653e-01, 1.336162e-02, 6.759097e-02, -9.903172e-02, -9.424669e-02, 4.621556e-03, -5.156328e-02, -4.943579e-02, 3.346801e-01, 1.415839e-01, 7.089633e-02, 5.256447e-03, 1.148042e-01, -1.233020e-01, 2.622301e-01, 2.116734e-02, -3.378965e-01, -2.046719e-01, -1.313012e-01, -2.069169e-02, 6.152851e-02, -2.849560e-02, 3.696388e-01, 2.173252e-01, 7.142404e-03, 1.254977e-01, 9.548528e-02, -1.643816e-01, -5.529935e-02, 2.029468e-01, -2.998279e-02, -1.405698e-01, 3.253374e-03, -9.483165e-02, -9.584026e-02, 1.009562e-01, 2.307532e-01, 7.932516e-03, 9.525795e-02, -4.784649e-02, 6.381658e-02, 9.698021e-02, 5.431829e-02, -1.311065e-03, 1.211795e-03, 9.447055e-02, 8.223015e-03, -7.378369e-03, 8.239631e-02, 6.796902e-02, 5.251061e-01, -9.710108e-02, -1.350235e-01, -3.742570e-02, -2.625790e-01, -9.836428e-02, -1.752212e-01, -5.669152e-02, 5.880347e-02, 1.342278e-01, -3.790470e-02, 5.755980e-02, -2.337359e-01, 7.501808e-02, 4.730018e-02, 9.247378e-02, 1.042312e-01, 1.400884e-01, -9.289641e-03, -1.798671e-01, 1.128725e-02, -3.480223e-01, 1.019305e-01, 1.127738e-01, -2.469254e-02, -4.157890e-01, 1.638947e-02, 2.951787e-02, -1.195730e-01, -8.476721e-02, 7.624389e-02, 1.807773e-02, 1.026666e-02, 6.599109e-02, 3.079121e-01, -2.497920e-01, -2.614570e-01, 2.513786e-02, -1.299783e-01, 9.445257e-02, 7.694554e-02, -7.914669e-02, 1.311245e-01, -1.120166e-01, -8.122893e-02, 8.918741e-02, -4.286432e-01, 7.536188e-02, -7.686021e-02, 3.418395e-02, -1.022058e-01, 1.249524e-01, -1.297989e-01, -1.120399e-03, -2.806868e-02, -3.557495e-02, -1.261850e-03},
{5.798103e-02, -7.363141e-02, -6.886771e-02, -4.475957e-02, 7.492254e-02, 1.915271e-02, -8.611082e-03, -4.498935e-02, -3.587259e-02, 2.631391e-02, 1.480357e-02, 4.569894e-02, 8.739243e-02, 2.402319e-02, 4.801193e-02, -5.214921e-02, -7.984259e-02, 1.270439e-02, 7.605974e-02, 1.337342e-02, -9.681860e-02, -3.250071e-02, 3.062796e-02, -6.737315e-04, 2.536972e-03, -5.680744e-02, 6.072605e-02, -3.660113e-02, -8.308389e-02, 1.312898e-02, 9.764960e-02, -2.754948e-02, 3.847589e-02, -1.290142e-02, -1.933466e-02, -2.591796e-02, -1.937576e-02, -3.479546e-02, -4.089471e-02, 8.241578e-02, 3.599538e-02, -1.290840e-02, -7.256218e-02, -7.016110e-02, 3.330982e-02, -8.455052e-02, -6.829399e-02, -5.267266e-02, -1.376980e-02, -2.033250e-02, 3.720193e-02, 1.458203e-02, 3.899442e-02, -1.034639e-02, -6.871611e-03, 3.822982e-02, 3.411912e-02, 1.506483e-02, -8.122279e-02, 1.907791e-02, 2.065441e-02, 5.054777e-02, 9.921611e-03, -8.431633e-02, -2.049247e-02, -7.336356e-02, -2.474196e-02, 9.944618e-02, 2.693021e-02, -7.853700e-02, 7.218190e-02, -7.568745e-02, -2.211539e-02, -2.035423e-02, 4.031712e-02, -6.783013e-02, -6.638366e-02, -1.572142e-02, 2.932763e-02, -5.462192e-02, -1.334344e-02, -8.140107e-03, 1.386230e-02, 4.916494e-02, 5.831355e-02, -8.416972e-02, 7.878680e-02, 9.206878e-02, 6.165291e-03, -1.144741e-02, 3.237109e-02, -8.903224e-02, -4.811280e-02, -6.174545e-02, -5.096853e-02, -7.980666e-02, 3.046430e-02, 5.745748e-02, -3.354541e-02, -7.476888e-02, -2.012704e-02, 2.793247e-02, -6.911627e-03, 2.485332e-02, -1.624447e-02, -5.117409e-02, 7.556169e-02, 3.981403e-02, -4.959266e-02, 4.960188e-02, -3.167925e-02, -5.116587e-02, 9.539437e-02, 4.442222e-02, 5.146718e-02, -1.628067e-02, -5.287332e-02, 4.644061e-02, -1.094340e-01, -1.458761e-02, 7.770305e-02, 3.203048e-02, -1.738692e-02, 1.029381e-02, 2.402109e-02, 4.277553e-02, -4.888606e-02, -1.400359e-01, 1.927277e-02, 5.163003e-02, 2.846868e-03, -2.249102e-02, 2.817141e-03},
{3.857423e-02, -1.001234e-01, -3.586430e-02, 6.588487e-02, -1.856623e-01, 9.112319e-02, -2.230496e-02, -3.060043e-02, 7.468521e-02, 3.888539e-02, 3.330546e-02, 8.957855e-02, 2.880150e-02, 9.946034e-03, 2.365935e-02, -3.535147e-02, -4.070890e-02, -9.913176e-02, -7.148868e-02, -7.385878e-02, 2.023723e-02, 2.542358e-02, 4.469629e-02, 7.856236e-02, -3.443018e-02, -7.579625e-02, 7.121193e-02, -4.125360e-02, -1.699719e-02, -5.192128e-03, 2.399349e-02, -8.219784e-02, -4.118144e-03, -3.624329e-02, 1.535573e-02, -5.904065e-02, -2.801412e-02, -2.832043e-02, 8.035516e-02, 6.284971e-02, 1.144192e-01, -3.391965e-02, 9.961127e-02, -5.075366e-03, -5.013594e-02, -1.372947e-02, -3.687854e-03, -1.174270e-02, -9.760322e-03, 2.495852e-02, -8.058044e-02, -3.817401e-02, 3.203904e-02, 9.259805e-02, -3.352961e-02, -1.381930e-01, 4.878035e-02, -6.933612e-02, -7.516527e-02, -1.412505e-02, 2.831269e-03, -8.499546e-02, 5.683682e-02, 3.694751e-02, -5.728625e-02, -1.842491e-02, -9.958385e-02, -4.232790e-02, 3.105405e-02, 1.478511e-02, -4.223561e-02, -9.157564e-02, 9.418736e-02, 4.620335e-02, 3.681251e-02, -3.842024e-02, 7.205480e-02, -6.754839e-02, 5.324003e-02, -9.395438e-02, 4.214516e-02, -3.677813e-02, 6.153429e-02, -9.903394e-02, 8.495592e-02, -7.493673e-02, 4.102475e-02, -1.463603e-02, 8.493647e-02, -6.599709e-02, -4.718695e-02, -9.215375e-02, -8.098268e-03, -1.794239e-02, -6.937454e-03, 4.661645e-02, -3.757960e-02, -5.913433e-02, -2.495832e-03, 2.772874e-02, 3.400445e-02, -1.895054e-02, 3.135267e-02, 5.041903e-03, 8.052358e-02, -8.339139e-02, -5.139113e-02, 1.357409e-02, 7.218537e-02, -6.812925e-02, 9.463415e-02, 7.677077e-02, -1.112326e-01, 6.453151e-02, -8.256399e-05, -4.315002e-02, 6.767632e-03, -4.430567e-02, -6.856938e-02, -7.885549e-02, -5.765301e-03, 3.415274e-02, -3.978565e-02, 9.188403e-02, 1.048429e-02, 9.099736e-02, 8.534498e-02, -4.025909e-02, -2.754430e-02, -4.096246e-03, 4.200808e-03, 1.477355e-02, -2.279273e-02},
{1.793842e-01, -4.459615e-02, 6.745656e-02, 2.485467e-02, 9.543566e-02, -1.197016e-01, 4.682404e-02, -3.694100e-02, -7.404519e-02, 3.130773e-02, 3.067277e-02, 2.661322e-02, 8.940609e-02, 3.671994e-02, 6.472587e-02, -9.565503e-02, 1.484991e-02, -5.903185e-02, 5.015116e-02, 1.068468e-01, 4.673721e-02, -5.067794e-02, 1.140145e-01, 5.648961e-02, -2.647034e-02, 7.411660e-02, -1.079234e-01, 3.000842e-02, 1.150047e-02, 6.361796e-03, -3.274173e-02, 4.283433e-02, -6.272300e-02, 7.383486e-03, -2.056373e-02, -3.630126e-02, 5.202055e-02, 1.154899e-01, -6.000496e-02, -2.803626e-02, 1.308822e-02, 1.009847e-01, 1.448768e-02, -1.069456e-01, 1.541303e-02, -7.055359e-02, 1.258696e-02, -1.210386e-02, -1.147565e-01, -4.184848e-02, -2.114864e-02, -2.217081e-02, 1.441846e-02, 2.470930e-02, -1.004719e-01, -4.386129e-02, 1.173710e-01, 8.416341e-02, 2.469550e-02, -2.023703e-01, -3.909518e-02, -1.715573e-02, 4.760149e-02, 6.847821e-02, -8.040529e-02, 3.713323e-02, 2.933825e-02, -5.545015e-02, -6.894387e-02, 1.279171e-02, -1.981759e-02, -7.493666e-02, 1.460913e-01, -1.594140e-02, 5.045846e-02, 7.287686e-04, -2.135734e-01, -2.531233e-02, -1.163075e-01, 5.550976e-02, -7.318943e-02, -3.610738e-03, -6.434186e-02, -4.865126e-02, -6.187522e-02, 3.870995e-03, 5.822043e-02, -1.040355e-01, 5.413159e-02, 8.757246e-02, -9.104937e-02, -1.236710e-01, 2.187398e-02, 1.232059e-01, -6.637695e-02, 5.979060e-02, -1.097419e-01, 1.093473e-03, -5.701664e-02, -9.191949e-02, -8.245233e-03, -9.716835e-02, 6.935811e-02, -2.695850e-02, -9.789821e-02, -2.116281e-02, -3.617641e-02, -6.498215e-02, -1.118478e-01, -1.546397e-02, 1.967966e-01, -2.738536e-02, 1.375492e-01, 9.246573e-02, -1.938936e-02, -4.253083e-02, 4.967792e-02, 2.400959e-02, -3.481730e-02, -6.263218e-02, 4.599752e-02, 4.822417e-02, -1.721922e-01, 2.585703e-02, 3.122494e-02, 3.316860e-02, 5.548192e-02, -2.296858e-02, -9.025281e-03, -1.256985e-01, 9.721684e-02, -1.667442e-01, -1.252201e-02},
{5.071299e-02, -6.872963e-02, -5.886177e-02, -1.254911e-02, -4.946336e-02, 6.350680e-02, -2.466922e-02, -1.053824e-02, 4.282656e-02, -2.859282e-02, 1.153436e-01, 4.563345e-02, 3.705090e-02, 6.118848e-02, 3.419299e-02, 8.619484e-02, 7.097379e-02, 1.021747e-02, 2.046024e-02, 3.569278e-02, 1.574453e-02, -3.562184e-02, -3.965827e-02, 6.474918e-02, 4.602654e-02, 5.778581e-02, -5.952545e-02, -3.947206e-02, -3.048835e-02, 4.045875e-03, -4.727885e-02, 7.767393e-03, 1.543847e-02, 5.322276e-02, 5.038647e-02, 1.279266e-02, -8.514841e-03, 3.396070e-02, 3.673216e-02, 3.975251e-02, -2.185383e-02, 5.495887e-02, -1.394331e-01, -1.300980e-02, -5.981009e-02, -1.047838e-01, -8.864174e-02, 5.766850e-03, -7.912691e-02, -1.480811e-01, -1.150497e-01, 1.541341e-02, -8.755274e-02, -2.340437e-02, -6.384933e-02, 2.630375e-02, 2.438064e-02, -8.955174e-02, 4.043696e-02, -9.781549e-03, 6.115482e-02, -3.756797e-02, -9.124222e-03, -1.047379e-02, 4.435878e-02, -7.475211e-02, -2.746947e-02, -2.645367e-02, 4.275225e-02, 1.527874e-02, 4.804948e-02, 8.156347e-02, 8.461957e-02, -1.153313e-02, 3.580245e-02, 1.086776e-02, 5.265446e-02, 3.665780e-02, 3.086475e-02, 4.627693e-02, -6.590357e-02, -1.269242e-02, -7.469739e-02, -3.219171e-02, 6.026104e-02, 7.756296e-02, 4.107796e-02, 3.426407e-02, -9.702419e-02, -2.901244e-02, 9.256956e-03, -3.599240e-02, -5.925912e-02, 1.196229e-02, -4.495354e-02, 5.180198e-02, 2.354766e-02, 1.026055e-01, 2.417258e-02, 6.595148e-02, -4.949498e-02, -3.833321e-02, 5.182357e-02, -2.767016e-03, 2.054356e-02, -3.198563e-02, 5.813615e-02, 6.128123e-02, -1.117562e-02, 9.376655e-03, 4.334571e-02, -9.938610e-02, 2.982780e-03, 6.658513e-02, 1.694594e-03, -9.412409e-02, 6.376670e-02, -3.984554e-02, -6.292082e-02, 3.531550e-02, -9.268964e-02, 1.150341e-02, -6.592422e-03, -6.288208e-02, -8.732302e-02, -3.866577e-02, -2.667657e-02, -9.629034e-02, -8.811256e-02, 6.204426e-02, 4.046269e-02, 7.960422e-02, -8.399116e-02},
{-1.990157e-01, -1.875110e-01, -2.350834e-01, -1.613507e-01, -2.959882e-01, -1.217063e-02, 1.247463e-02, -4.802211e-02, -7.593744e-03, 4.709620e-03, 3.955172e-02, 1.444661e-01, -2.147302e-01, 2.777413e-02, -3.605817e-02, 1.075462e-01, 7.191490e-02, -4.473434e-02, -1.115039e-01, -9.640885e-02, -7.504237e-02, 1.743509e-01, -1.890878e-01, 4.979605e-02, 9.406266e-02, 2.447601e-01, 3.557940e-03, 1.904790e-01, 7.163829e-02, -5.736928e-02, 1.684572e-02, 1.698354e-02, -1.183965e-01, 7.535723e-02, 7.132671e-01, 1.702323e-01, 2.384728e-04, -8.764015e-02, 4.785992e-01, 3.956250e-02, 3.832271e-01, -6.942655e-02, -9.643260e-02, -3.935685e-01, -1.263747e-01, -1.910474e-02, 1.025474e-01, 8.762728e-02, 2.897980e-01, 4.350512e-01, -3.060512e-01, 6.000585e-02, 9.255132e-02, -8.549722e-02, 1.132569e-01, 1.151170e-01, -2.096636e-04, -5.539889e-03, -1.153903e-01, 2.400037e-02, 7.664443e-03, -4.903084e-03, 1.318538e-01, -2.971210e-02, 1.229064e-01, -7.332197e-02, -3.930445e-02, -7.273255e-02, 1.681483e-02, 1.289584e-01, -7.796746e-02, -8.398903e-02, 4.132078e-01, -3.711578e-02, -1.283707e-01, -1.694654e-01, 2.400490e-01, -1.558564e-01, 1.094537e-01, -1.888663e-01, -3.045253e-01, 7.599940e-02, -1.329173e-01, 5.117510e-03, 4.860703e-02, 1.825017e-01, -7.212971e-02, 9.705222e-02, -1.376715e-01, -1.020729e-01, 4.993172e-02, -1.346660e-01, 2.606070e-02, -2.137987e-01, -1.340921e-01, 4.350210e-02, -9.277864e-03, -6.770665e-01, 1.085646e-01, 1.286470e-01, 8.561946e-02, -3.766848e-02, 7.675824e-02, -4.376424e-02, 2.047539e-02, -1.570043e-01, 1.785923e-01, 6.368893e-02, 7.408630e-03, 5.729323e-02, 6.972953e-02, -2.020756e-01, -2.799340e-01, 2.688832e-03, -1.716517e-01, 3.792839e-02, 9.100062e-02, -9.544428e-02, 1.069764e-01, -8.377912e-02, -7.293523e-02, 2.313215e-01, 4.357769e-02, -1.791174e-02, -5.157095e-02, 4.674980e-03, -2.063269e-01, 2.254683e-01, -1.789143e-01, -1.360337e-01, -4.191066e-02, -1.593481e-01, -2.687260e-02},
{-2.923872e-01, -1.038549e-01, -4.443395e-01, -7.017630e-02, -2.874002e-01, 2.079764e-01, 6.443834e-02, 2.096135e-03, 2.333580e-02, 4.005951e-02, 8.867353e-04, 7.489941e-02, -8.953413e-02, -5.948894e-02, -5.321307e-02, 1.677343e-01, 2.374621e-01, 4.419279e-02, 1.082353e-02, -1.985274e-01, -2.457184e-01, 8.144299e-02, -6.648595e-02, -1.735963e-01, 6.906507e-02, 1.514490e-01, 9.758873e-02, -4.383068e-02, -2.643772e-03, -2.562711e-02, 2.128058e-01, 7.682017e-02, -2.578551e-02, -6.576011e-02, 2.570541e-01, 8.724992e-02, -2.885286e-01, -1.717467e-01, 2.075069e-01, 1.313141e-01, 5.295503e-01, 7.178999e-02, 1.789371e-01, -2.878441e-01, -1.078267e-01, -4.250254e-02, 9.426983e-02, 1.456868e-01, 3.680674e-01, 3.073720e-01, -2.307508e-01, 6.130275e-02, 1.013410e-01, 5.793419e-02, 1.915929e-01, 3.312306e-01, -7.555069e-02, -3.188060e-01, 2.959925e-02, 3.287192e-01, 2.975570e-02, 1.624104e-01, 2.619250e-02, 2.788860e-02, 1.035850e-01, -5.829791e-02, -8.820010e-02, 7.312232e-02, 1.481260e-01, 1.666612e-01, -1.619034e-01, -1.457499e-01, -5.566279e-03, -6.593438e-02, -1.174451e-01, -8.329599e-02, 3.899202e-01, -2.280979e-01, 1.875737e-01, -1.740247e-01, -2.242769e-01, 6.831598e-02, -3.626313e-02, 1.075128e-02, 5.263567e-02, 2.485777e-01, 1.106861e-01, 3.569586e-01, -5.461941e-02, -2.251138e-01, 1.151844e-01, 6.366460e-02, 2.398609e-01, 4.082717e-02, -1.262439e-01, -7.121781e-02, -2.449813e-01, -4.713333e-01, 5.153792e-02, -4.034947e-02, 3.759228e-02, -7.137955e-02, 6.130619e-03, 9.618135e-02, 1.228809e-01, -1.464217e-01, 1.842162e-01, 9.421106e-03, 1.936569e-02, 8.517388e-02, 1.387846e-01, -3.511740e-01, -6.257903e-01, 9.879051e-02, -3.063514e-01, 4.326779e-02, 8.335851e-02, -1.438251e-01, 2.028087e-02, -2.864457e-01, -2.305852e-01, 1.907733e-01, 5.705687e-02, 4.201747e-02, 2.513509e-02, 1.050328e-01, -5.633141e-02, 2.267708e-01, -1.517444e-01, 2.308398e-01, -1.409216e-01, 1.640630e-01, -7.028801e-02},
{-8.778970e-02, -2.505216e-01, -1.490974e-01, 1.229457e-01, -9.374394e-02, 1.139901e-01, -1.655815e-02, -1.142223e-02, -2.059272e-02, -1.023041e-02, 2.211438e-02, 4.366539e-02, -1.207670e-02, -1.113996e-02, -2.065239e-02, -2.219955e-02, 3.338854e-02, -5.183662e-02, 5.685267e-02, 2.762839e-02, 8.190952e-02, 4.216867e-02, -2.183185e-02, -8.503415e-02, 9.170869e-02, 2.346819e-02, -7.222220e-02, -2.072580e-02, 5.601317e-02, -2.781634e-02, -8.431598e-02, 7.688089e-02, 6.537286e-03, 4.364378e-02, 1.313139e-01, -1.849783e-02, 1.093969e-03, -6.071104e-02, -3.127130e-02, 9.875303e-02, 8.213083e-02, -1.667313e-02, -1.757107e-01, -4.723240e-02, -9.875084e-02, 7.902363e-03, 5.246725e-02, -5.471156e-03, 2.483535e-01, 1.158074e-01, 3.128920e-02, 3.197303e-02, -1.643347e-02, 9.029398e-03, -5.536702e-02, -7.017137e-03, 5.407193e-02, -1.299954e-02, -1.270612e-02, -3.564747e-02, 1.118274e-02, -2.717569e-02, 2.713698e-02, 4.982187e-02, -4.017003e-02, -8.432450e-02, 2.392823e-02, -5.174605e-02, 8.878010e-02, 3.022700e-02, 5.289454e-02, 4.478468e-02, 1.997579e-02, -4.874906e-02, -1.265889e-02, -1.972349e-02, 9.139535e-02, 9.558424e-02, -6.601266e-03, -1.041440e-01, -1.915830e-01, -5.293848e-02, 2.523227e-02, 4.185674e-02, 3.824500e-03, 1.153293e-02, 5.633661e-02, 6.788614e-02, -7.018512e-02, -2.655128e-02, 5.388444e-02, 9.980828e-02, 9.848616e-02, 1.671651e-01, -4.087735e-02, -5.079284e-02, -2.434025e-02, -2.022829e-01, 2.561785e-02, -4.281781e-03, 2.757262e-02, -5.187013e-02, -6.466232e-02, 2.445250e-02, -6.509733e-02, 1.441618e-02, -4.431181e-02, 3.084326e-02, 4.064250e-02, -6.501605e-04, 7.836920e-02, -5.964805e-02, -9.470499e-02, -3.188608e-02, -1.222946e-01, 2.723439e-02, -4.129726e-03, -5.633945e-02, 4.768601e-02, -2.558019e-02, 9.313975e-04, 1.311449e-01, -5.414695e-02, 7.110512e-02, -5.234516e-02, 3.476033e-02, 5.471843e-02, 1.773086e-01, -1.037616e-01, 1.994253e-02, -3.591199e-02, 9.500409e-02, -2.425788e-02},
{7.795203e-03, 7.763437e-03, 1.457201e-02, -3.699070e-02, -1.134688e-01, 2.660102e-02, 5.299894e-02, 7.478160e-02, 5.707821e-02, 5.541816e-02, 6.475291e-02, 8.596770e-02, 3.530917e-02, -2.835516e-02, 1.382490e-02, 2.841115e-02, -6.106811e-03, 6.251310e-03, -8.112176e-02, 8.128063e-02, -1.129610e-01, 1.468894e-02, -9.146686e-02, -8.631143e-02, -5.432977e-02, 1.078951e-01, 1.481551e-02, 3.522168e-02, -7.531571e-02, -7.165222e-03, 9.449338e-02, 5.140363e-02, 7.950794e-02, 4.465548e-03, 1.377350e-02, 4.311699e-02, -3.535883e-02, 6.691240e-02, 1.758470e-01, 8.103783e-02, -4.736061e-02, -1.414246e-03, -4.609637e-02, 2.371814e-02, 9.031464e-02, -1.707547e-02, -6.579662e-02, 7.295503e-02, 2.594850e-02, -2.307324e-02, -1.070670e-01, 5.423715e-02, 4.263443e-02, 6.931315e-02, -7.232788e-02, -5.970478e-02, 7.364120e-03, 9.054891e-02, 5.553151e-03, -4.546604e-02, 5.634748e-02, 3.746807e-02, -5.207896e-02, 5.748964e-02, -5.332066e-02, -3.078552e-02, 3.389725e-02, 9.206642e-02, 2.877727e-02, -1.081879e-04, -8.338849e-02, -3.571239e-02, -1.093287e-02, -4.826455e-02, 5.540000e-02, -4.720357e-02, -5.788538e-02, -9.857100e-02, 3.791345e-02, 9.374101e-03, 5.383200e-02, -2.264208e-03, 8.245993e-02, 8.345979e-02, -6.112925e-02, -5.646517e-02, -7.963720e-02, 1.425263e-03, 8.721736e-02, -9.285520e-03, 3.386975e-02, -9.243916e-02, -4.681798e-03, -9.546217e-02, -7.565062e-02, -8.683845e-02, -8.710964e-02, -1.152340e-01, 6.446885e-02, 3.181054e-02, -2.500372e-02, -2.453911e-04, 3.282848e-02, -8.934969e-03, -1.129432e-02, 5.005188e-02, -1.133003e-02, 3.333166e-02, 5.163581e-02, -4.826922e-02, -3.909947e-02, 6.923870e-02, -8.792487e-02, -5.882636e-02, -2.764896e-02, 1.300228e-02, -5.371296e-03, 3.812721e-02, 7.728239e-02, -5.289428e-03, 7.231958e-02, -6.025810e-02, -8.905733e-02, 6.650889e-02, -4.171489e-02, 8.588485e-02, -2.533309e-02, -3.522303e-02, -7.245986e-02, 3.860010e-02, 5.552077e-03, -7.142343e-02, 5.672354e-02},
{2.536158e-02, 4.819043e-02, 2.025951e-02, 1.269650e-02, -1.088906e-01, 4.312062e-02, 2.157544e-02, -7.362625e-02, -2.539896e-02, -8.676926e-02, 4.312024e-02, 1.635734e-02, -5.225003e-02, -4.318100e-02, -1.022517e-01, 3.597428e-02, 4.687222e-02, 1.370494e-02, 3.181078e-02, -1.106455e-02, -1.012315e-01, -6.572640e-02, 8.087666e-03, 1.894489e-02, 7.920568e-02, 8.448843e-02, 4.685296e-02, 8.405336e-03, 7.868837e-02, 5.565717e-02, -4.415818e-02, -4.157546e-02, 2.371667e-02, 1.869850e-03, 6.270126e-03, 4.249924e-03, 4.108625e-02, 4.034227e-02, 8.630981e-02, -7.156817e-02, -2.742945e-02, -7.862170e-03, 1.078452e-01, -4.991882e-02, -5.780186e-02, -3.270677e-02, -9.396007e-03, 1.419900e-02, 6.963579e-02, -4.215871e-02, 2.719632e-02, -4.048036e-02, -1.653777e-03, 5.211590e-02, 7.556245e-02, 2.452006e-02, -2.639660e-02, -1.428989e-01, 1.754728e-02, 7.660867e-02, -3.431803e-02, -1.064691e-02, 9.553559e-02, 1.571558e-02, -1.356090e-02, -2.321281e-02, 3.651170e-02, 3.745387e-02, 7.678878e-02, 2.123468e-02, 3.140552e-02, -5.201130e-02, -4.611965e-03, 4.190289e-02, -7.392242e-02, 7.279888e-02, 8.576693e-02, 2.134582e-03, 2.836336e-02, -9.214491e-02, 5.530280e-02, -3.401926e-02, -5.752303e-02, 3.971673e-02, -7.116156e-03, 8.593307e-03, -3.911884e-02, 1.060970e-01, -1.144055e-02, 3.844594e-02, -1.331935e-03, -1.673113e-02, -3.491914e-02, -6.593567e-02, 5.525266e-02, -7.422258e-02, 3.799709e-02, -6.794772e-02, -8.090323e-03, -3.763284e-04, 8.745666e-03, -6.996410e-03, -4.966368e-02, 7.646485e-02, 8.703896e-02, 2.451873e-03, -3.302425e-02, 3.599810e-02, 2.912924e-02, -7.559472e-02, -7.356542e-02, 5.303007e-02, -1.149245e-02, -2.711212e-02, -4.731871e-02, 1.406196e-02, -5.912006e-02, -5.611481e-02, 6.801532e-02, 6.138423e-02, 6.701375e-02, 7.852292e-02, 2.880331e-02, -8.979931e-03, -4.988507e-02, 4.466051e-02, -3.562671e-02, -6.195647e-02, 5.200417e-02, -3.678661e-02, 1.533304e-02, 6.119385e-02, 7.728039e-02},
{1.013719e-01, -9.839730e-03, -4.332634e-02, 4.312765e-03, -7.935869e-03, -8.384433e-02, 3.332883e-05, -3.306920e-02, -1.485223e-01, 2.688504e-02, 1.055626e-01, -1.070118e-01, 2.611988e-02, 1.620318e-02, -2.241725e-02, -6.347726e-02, -1.163105e-01, 6.280139e-02, -1.849122e-02, 1.227863e-01, -6.739749e-02, 2.008122e-02, 4.484241e-02, 1.658514e-02, 2.430027e-02, -5.559044e-02, -2.730228e-02, -5.310261e-02, -4.564156e-02, -2.625434e-02, -1.075044e-01, -2.369450e-02, 5.685465e-02, 1.227306e-01, -4.027836e-02, -1.114534e-01, 6.893229e-02, 5.643239e-02, 2.700583e-02, 6.784016e-02, -5.837690e-02, 4.550132e-02, 1.237974e-01, -6.656994e-02, 1.427398e-01, 1.206442e-01, -6.323396e-02, -1.387120e-01, -1.464946e-01, -4.625556e-02, 7.608815e-02, 1.108733e-02, -4.523768e-02, 8.433323e-02, -9.300809e-02, -1.000572e-01, 1.029867e-01, 1.373444e-01, 1.586109e-02, -2.434320e-02, -1.408135e-01, -4.696103e-02, 2.092187e-02, -1.511704e-02, 6.965450e-03, 1.253853e-01, 1.736982e-02, 6.145839e-02, -1.434047e-01, -1.738461e-01, 1.728342e-02, -9.574869e-02, 1.117271e-01, 8.616205e-02, -1.127016e-02, 5.861713e-02, -1.481016e-01, 2.011859e-02, -1.278662e-01, 1.029221e-01, -3.861874e-02, 8.723804e-02, 3.354127e-02, 9.320159e-02, 6.226752e-02, -1.177977e-02, 1.327133e-01, -1.156664e-01, 7.733992e-02, 1.389085e-01, -3.397583e-02, -1.988615e-01, 5.077282e-02, 1.608233e-02, 5.061150e-02, -1.300155e-02, -1.270713e-01, -1.470723e-01, 6.679844e-02, 2.009472e-02, -3.172373e-02, 1.226576e-02, -2.992892e-02, -1.602799e-01, -8.099987e-02, -3.840739e-02, 4.541449e-02, -1.449595e-01, -8.222067e-02, 3.324231e-02, -7.114952e-02, 1.766066e-01, 1.728940e-01, -1.041920e-01, 1.343230e-01, 8.484428e-02, -5.364319e-02, 1.374615e-01, 1.047622e-03, -5.316186e-02, 4.928557e-02, -6.968746e-02, 4.350029e-02, -6.343476e-02, 1.061628e-01, -1.065014e-01, 1.246586e-01, -7.918144e-02, 1.490314e-01, -1.532977e-01, -8.516353e-03, -8.683353e-02, 7.567819e-02},
{3.532638e-02, -2.171805e-02, 4.833351e-02, -7.258346e-02, -4.048123e-03, 2.436078e-02, 1.566233e-02, -5.180404e-02, -4.410890e-02, 7.429402e-02, 6.103340e-02, -6.110276e-02, 4.184963e-02, -5.623676e-02, -1.629459e-02, -1.780713e-02, 2.981420e-02, -1.298789e-02, -6.322740e-02, 5.477692e-02, 1.403525e-02, 1.092454e-01, -5.249488e-02, 4.815491e-02, 2.546675e-02, 4.486442e-02, 9.961527e-02, 4.788350e-02, 5.436866e-02, -1.849150e-02, 6.618629e-02, 7.026835e-02, 4.641029e-02, -2.226472e-02, 9.833594e-02, 5.418222e-04, 1.003685e-03, 4.957261e-02, 7.466259e-02, -3.895713e-02, 9.461032e-02, -2.472380e-03, 4.956233e-02, -1.254343e-01, 3.089540e-03, 5.200286e-02, -7.956228e-02, 5.241743e-03, 4.111424e-02, -7.356880e-02, -8.352944e-02, -5.148428e-02, 6.239156e-02, -9.385802e-02, 6.015881e-02, -4.491846e-02, 8.179935e-02, 8.591898e-03, -7.470319e-03, -3.652287e-02, -2.833705e-02, 1.396671e-02, 2.916395e-03, 2.592548e-03, 5.553566e-02, 1.373098e-02, -5.474592e-02, -7.319977e-02, 8.249380e-02, -6.183539e-02, -1.302054e-02, 4.995489e-02, 3.759664e-02, 1.838817e-03, -2.786183e-02, 1.617209e-03, 1.282480e-02, 3.312816e-03, -5.595901e-02, -9.901798e-02, 2.693805e-02, 8.872530e-03, 7.350328e-02, -5.624120e-03, -4.072576e-02, -4.450615e-02, 5.449051e-02, 1.181634e-01, -1.064617e-01, 1.541793e-02, -5.455734e-02, 3.942295e-02, 7.887490e-02, -7.257546e-02, -3.577390e-02, 2.077866e-02, -4.851054e-02, 7.663097e-02, -2.999943e-02, 5.213949e-02, 5.824847e-02, 2.153915e-02, -4.685288e-02, 7.103682e-02, 1.925795e-02, -5.397993e-02, 5.689521e-02, 8.900093e-02, 3.281852e-02, 4.656706e-02, 5.654588e-02, 9.970624e-03, -6.248596e-02, -7.001587e-02, 5.572405e-02, -3.155990e-02, -7.513013e-02, -8.251113e-03, -7.750494e-02, -3.501031e-02, -3.799202e-02, 1.011542e-01, 5.676681e-02, 6.378955e-02, 2.283305e-02, 8.511078e-02, -6.306820e-02, -1.514571e-01, -2.486193e-02, -5.917896e-02, -4.564523e-02, -5.797355e-02, 7.421493e-02},
{-8.764774e-02, -4.621581e-02, -8.529498e-02, -2.753410e-01, -9.866705e-02, -2.671648e-02, 5.577447e-02, -1.653611e-02, 1.635568e-01, -3.931707e-02, 1.295584e-01, 6.228475e-02, -8.473404e-02, -1.060571e-01, -6.122923e-02, 1.271283e-01, 9.283664e-02, -3.038359e-02, -1.297388e-01, -5.605218e-02, 1.617267e-01, 4.445800e-03, 2.754827e-02, 5.829084e-02, 1.655168e-01, 1.167711e-01, -5.111348e-02, 8.930157e-02, -2.873124e-02, -4.414732e-02, -3.640021e-02, -1.533290e-01, -5.191487e-02, 1.221291e-01, 1.441261e-01, 4.051318e-02, 1.991922e-01, 3.619742e-02, 7.852073e-02, 4.053351e-02, 9.758300e-02, 1.296727e-02, -4.635656e-01, -2.078776e-01, -1.186049e-01, -5.367242e-02, -2.207206e-02, 1.438183e-01, 1.876049e-01, 9.535198e-03, -6.140871e-02, 3.603954e-02, -1.090787e-02, -1.319657e-01, -1.607846e-02, 1.680170e-01, 8.182762e-02, 8.392854e-02, -1.226493e-01, -5.085477e-02, -3.929642e-02, 2.858753e-02, 5.634302e-02, 3.189165e-03, 1.263025e-01, -1.595402e-01, -7.652711e-02, -2.517256e-02, 4.174835e-02, 1.123509e-01, 1.722417e-03, -1.683399e-02, 9.716401e-02, -9.413149e-02, -1.515626e-01, -6.059156e-02, 3.460157e-01, 2.339440e-02, 7.004649e-02, -4.671216e-02, -1.232576e-01, -4.892392e-02, -8.124812e-02, 4.339223e-02, 2.623965e-02, 1.239239e-01, -2.795258e-02, 2.286267e-01, -1.721911e-01, -1.165199e-01, 1.427585e-01, -1.519054e-01, 5.030302e-03, 1.597479e-02, -5.082400e-02, 4.025413e-02, -2.445848e-02, 4.853297e-02, -3.070057e-02, 1.577958e-01, -1.854697e-02, -2.243110e-01, 3.769047e-02, -3.048163e-02, -4.722922e-02, -9.033348e-02, 2.752219e-02, 8.562714e-03, 3.226668e-02, -2.782296e-03, 9.132989e-04, -2.238694e-01, -1.678871e-01, 5.418133e-02, -6.237338e-02, 4.916413e-03, -7.143282e-03, -1.385360e-01, 7.973690e-02, -2.547403e-02, -6.459331e-02, 2.245006e-01, -1.341955e-01, -8.078036e-02, -3.818171e-02, 5.692137e-02, -1.765854e-01, 3.014014e-02, -1.052627e-02, -7.070323e-02, -1.069702e-01, -1.837704e-02, -1.115467e-01},
{4.969569e-03, -6.428028e-02, 4.472645e-02, -9.664379e-02, -9.971338e-04, -6.959458e-02, 2.039896e-02, -4.388577e-02, -2.898462e-02, -5.020858e-02, -1.983764e-02, -7.742593e-03, -2.254171e-02, 6.736943e-02, -5.976860e-02, -2.557718e-02, -6.184144e-02, 9.358270e-02, 6.054353e-02, 3.805195e-03, -1.245855e-02, 4.589892e-03, -1.623865e-02, 7.349257e-02, -1.736780e-02, 8.796069e-02, -2.468572e-02, 6.250412e-02, -9.694875e-03, 3.105312e-02, 6.130597e-02, 8.078376e-03, 4.770536e-02, -5.534697e-02, -5.136809e-03, 1.245216e-03, 9.810334e-02, -6.551198e-02, 3.231575e-02, -6.750841e-02, 2.855103e-02, 7.810344e-02, -2.219684e-02, -3.514354e-02, 5.511837e-02, 1.740044e-02, -2.509166e-02, 2.874931e-02, 5.352830e-02, 3.647484e-02, -4.075824e-02, 8.207827e-02, 4.360188e-03, 1.109475e-01, -6.878595e-02, -4.024672e-04, -8.649237e-02, 2.014995e-02, 8.718184e-02, -5.968689e-02, -5.780882e-02, 2.438953e-02, -1.182824e-02, -7.963693e-02, 5.571348e-02, 5.434602e-02, -3.394994e-02, 2.154468e-03, -4.510583e-04, -1.236797e-01, -7.234307e-02, -5.839489e-02, -3.156480e-02, -3.066843e-02, 1.880760e-02, 2.581984e-02, 5.923346e-02, -5.798415e-02, -9.108401e-02, 3.087511e-02, 3.050792e-02, 4.136591e-02, 4.169595e-02, 5.267724e-02, -5.860486e-02, 4.920497e-02, 7.467156e-02, -1.325601e-02, 6.848077e-03, 1.456527e-02, -6.989474e-02, -1.163277e-01, -1.079121e-02, 5.398339e-03, -5.642828e-02, -4.488322e-02, 2.920661e-02, -1.741072e-01, -4.919498e-02, 5.215087e-02, -7.254252e-02, -4.017146e-02, 5.980983e-02, -2.504483e-02, 3.897355e-02, -6.455186e-03, -1.993524e-02, -7.613385e-02, -1.083982e-01, -1.905533e-03, 6.407195e-02, 3.917907e-03, 4.220884e-02, -8.106606e-02, 4.623038e-02, -1.939748e-02, -7.046646e-02, 7.642453e-02, -5.610361e-02, 6.996968e-02, -5.841853e-02, 2.751493e-02, -5.331384e-02, -3.211689e-02, 1.950007e-02, 1.691465e-02, 3.246286e-02, -1.688207e-02, -1.447321e-02, -2.797006e-02, -6.270926e-02, -7.173194e-02, 5.046001e-02},
{-1.069425e-01, -5.633130e-02, 1.195408e-01, 1.335569e-01, -1.208558e-01, -1.240624e-01, -8.405060e-02, 9.032421e-02, -4.114066e-02, -2.933288e-02, 6.600544e-02, -9.014227e-02, -6.097475e-02, 8.369798e-02, 9.010267e-02, 3.216918e-02, -2.762418e-02, 5.437025e-02, -7.936742e-02, -5.796969e-02, -9.089660e-03, 6.535073e-02, 3.261005e-02, -4.929566e-03, -4.399164e-02, 4.686757e-02, 6.636929e-02, -5.332620e-02, -1.319192e-01, -2.043997e-01, -7.808254e-02, -1.192926e-01, -1.041836e-01, 1.081190e-01, -9.890805e-02, 1.320032e-02, -1.108385e-01, 9.085184e-03, -1.319383e-01, -1.450900e-01, 1.761503e-02, 7.892967e-02, -2.933914e-01, -1.298393e-01, 3.532420e-02, 2.069347e-02, -2.508306e-01, 3.527123e-02, -4.003789e-02, -2.160373e-01, 6.985131e-02, -5.086758e-03, 4.224939e-02, 1.087784e-01, 5.455914e-02, 9.640985e-02, 1.738940e-01, 1.340847e-01, -1.779103e-03, 9.766230e-02, 9.761377e-02, -6.395707e-02, 1.076169e-02, -2.636319e-02, -8.464684e-02, 3.702636e-02, 2.303786e-02, 1.548607e-02, -1.146808e-01, 1.131819e-01, 1.541886e-01, -9.270413e-02, 2.043632e-02, -1.402224e-01, 3.230553e-03, 1.578836e-01, 3.430308e-02, -6.290921e-03, -1.488639e-01, -4.282784e-02, 1.381636e-02, -3.599665e-02, -1.614888e-02, -6.183380e-02, 1.001592e-01, 2.900630e-02, 1.089129e-01, -6.960211e-02, -2.183533e-02, -7.454458e-02, 3.598846e-02, -4.601235e-02, 3.878972e-01, 2.553727e-01, -2.807645e-02, 2.202599e-02, -1.176005e-01, 2.947352e-01, -9.414008e-02, 3.150488e-02, 1.159359e-03, -1.581764e-01, 9.095169e-02, -1.479523e-02, -1.415040e-01, -2.491073e-01, 1.229212e-01, -9.739828e-02, -1.988372e-02, 5.896336e-02, 1.192753e-01, 2.088948e-02, -3.773844e-02, -6.523316e-02, 5.507119e-02, -1.034397e-01, -1.257379e-02, 2.861886e-02, 5.943102e-02, 6.185513e-02, 6.509548e-02, 4.850316e-02, -2.511076e-01, -7.168181e-02, 1.330290e-01, 6.852590e-02, -4.415258e-02, -8.798791e-02, 7.122850e-02, -7.134563e-02, 2.946317e-02, -5.749193e-02, 4.015965e-02},
{2.229657e-02, -2.562740e-02, -9.367689e-03, -3.478716e-04, -5.160436e-02, 4.367458e-02, 3.825008e-02, 2.966345e-02, 3.172365e-02, 4.964210e-02, -5.384853e-03, -3.173099e-02, -9.433965e-03, 4.609735e-02, -4.272756e-02, 4.280220e-02, 3.860108e-02, -1.432720e-02, 2.307772e-02, 7.419907e-02, -2.886420e-02, 5.443070e-02, 3.983482e-02, -6.984368e-02, -2.081828e-02, 1.588853e-02, -3.629971e-02, 1.081583e-02, 7.559647e-02, 6.786311e-02, 4.807180e-02, -7.374361e-02, -6.913701e-02, 8.127796e-03, 1.230113e-01, -1.976839e-02, 1.602139e-03, -1.097635e-02, 1.016664e-01, -4.020254e-03, 8.520809e-02, -9.041880e-02, 1.745380e-03, -2.141139e-02, -1.254219e-02, -9.006330e-02, -7.917902e-02, -2.313835e-02, -6.687557e-02, 2.165014e-03, -2.129341e-02, -2.857534e-02, 5.012154e-02, 8.376156e-02, 3.086164e-02, -8.039251e-02, 3.540746e-02, -9.476954e-02, 2.536774e-02, -4.226219e-02, 3.477607e-02, 7.411851e-03, -1.003084e-02, -4.030155e-03, 1.885380e-02, 5.353202e-02, -7.193055e-02, -5.587237e-02, -7.680884e-02, 5.541420e-02, -5.252318e-02, -6.175144e-02, -2.537388e-02, 6.946786e-02, 2.090649e-02, -5.683343e-02, -3.884405e-02, -9.129610e-03, -8.760735e-03, 4.808209e-02, 4.358307e-02, -1.068704e-04, -1.584842e-03, 3.955653e-02, -3.492128e-02, -2.780323e-02, 3.863133e-02, -4.009453e-02, -3.266430e-02, 6.954905e-02, -8.570297e-03, -7.643113e-04, 3.848930e-02, 8.559071e-03, 4.405050e-02, 2.041322e-03, -3.353494e-02, -3.350890e-02, -7.671944e-02, -4.608782e-02, -7.595658e-02, 7.343346e-02, -4.797049e-02, -3.176633e-02, -2.020751e-02, -1.015430e-01, -1.342127e-02, -2.363435e-02, -8.434682e-02, -6.810929e-02, -3.328137e-02, -8.831628e-02, -1.368182e-01, -4.459175e-02, -1.459092e-02, -1.237488e-02, 1.907185e-02, 2.490201e-02, -1.849266e-02, 7.455565e-02, 6.164396e-02, 8.588882e-02, -3.154531e-02, -4.600060e-02, -4.936140e-02, -1.132740e-03, 1.588065e-02, -1.123306e-01, 6.451357e-02, -5.805166e-02, 6.821162e-02, -2.702140e-02, -5.074897e-02},
{8.460464e-02, 1.147730e-01, 2.689057e-02, 1.729997e-01, -1.783167e-01, -1.170239e-02, -5.606695e-02, -6.095702e-02, 7.950608e-02, 7.289332e-02, 1.155140e-01, -1.668415e-01, 5.844944e-02, 7.302546e-02, 8.570703e-03, -3.763832e-02, 3.713897e-02, -6.885739e-02, 7.144565e-02, 4.011906e-02, 1.453018e-01, 1.130922e-02, -1.070498e-02, 5.027921e-02, 3.752483e-04, 4.516863e-02, -1.695645e-01, 5.460256e-04, 2.566464e-02, -1.308181e-01, -7.116690e-02, -9.019622e-02, -8.294954e-02, 8.869675e-02, 2.714145e-01, 4.425569e-03, 3.026589e-02, -1.954629e-02, 1.332407e-01, -1.472370e-01, 9.053783e-02, 5.039275e-02, -6.406308e-01, -3.957579e-01, 4.732034e-02, 1.460415e-01, 4.799982e-02, -8.454727e-02, 2.370657e-01, 1.261377e-01, 7.508996e-02, -1.051369e-01, -6.857902e-02, -1.444202e-02, -3.085426e-02, 1.158979e-02, -6.690701e-03, -1.110486e-02, 9.749088e-02, -2.030189e-01, 3.776029e-02, -5.722953e-02, 1.224631e-01, 1.684486e-01, -1.339705e-01, 6.493054e-02, 9.396989e-03, 4.325061e-02, -1.253170e-02, 1.423962e-02, 5.507090e-02, 5.478926e-02, 3.261972e-01, -2.585083e-03, 6.572510e-02, 3.457844e-03, 3.809113e-01, 3.148865e-02, -1.273839e-01, 2.745876e-02, -2.617153e-01, -7.307488e-02, 6.575501e-03, 3.938675e-02, 1.049504e-01, -9.734225e-03, 3.057460e-02, -4.100332e-02, 1.945511e-02, 1.836259e-01, 1.697039e-02, 1.312037e-01, -1.397504e-02, 1.727136e-02, 4.942203e-02, 2.917223e-02, -1.439603e-02, -2.572084e-01, 1.449761e-01, -6.601529e-03, -9.956102e-02, -1.307310e-01, 4.847959e-02, 9.723428e-02, -1.591913e-02, 1.060126e-02, 5.501239e-02, -1.261739e-01, 1.112319e-01, 6.012034e-02, 3.321188e-01, -2.466262e-01, -3.164834e-01, 6.231855e-02, 2.888202e-03, 6.018653e-02, -8.466765e-03, -7.460827e-02, 1.173180e-01, 4.557774e-02, 6.632003e-02, -4.201483e-02, -1.245803e-01, -1.056176e-01, 1.570120e-02, 5.824910e-02, 2.712913e-02, 1.243448e-01, 8.420148e-02, -1.716251e-01, 9.954625e-03, -2.397851e-01, 1.085158e-01},
{3.204729e-02, -2.655669e-02, 2.757091e-02, -8.516727e-02, 2.178217e-02, -3.594121e-02, -6.058633e-02, -2.516294e-03, 2.663440e-02, 4.733154e-02, -4.699774e-02, 5.111067e-02, 6.300863e-02, -4.589764e-02, -4.270710e-02, 4.043145e-02, 1.310364e-03, -1.565628e-02, 1.596699e-02, -7.356278e-02, -7.426398e-02, 8.407088e-02, 1.136097e-01, 5.522289e-02, -6.833854e-03, -5.318536e-02, 4.281798e-02, 1.917040e-02, 2.836318e-02, 3.489168e-02, 8.450364e-02, 8.349933e-02, 4.329502e-02, 8.449225e-02, -1.017788e-02, 1.268665e-03, 6.941622e-02, 3.648312e-02, 4.188423e-04, -2.557313e-02, -6.060249e-02, -8.360378e-02, -3.791576e-02, -1.086716e-01, -1.864050e-04, 7.091622e-02, 8.189827e-02, -5.612511e-02, 8.495986e-02, -5.502398e-02, 3.986605e-02, 5.049878e-02, 5.937473e-02, 2.879375e-02, -4.803040e-02, -1.189389e-01, 1.004697e-01, -1.296389e-01, 5.486707e-02, 2.286460e-02, 3.786522e-02, 6.238100e-02, -8.591215e-02, 5.028497e-02, -3.605763e-02, 8.229296e-02, 4.735439e-02, 5.386781e-03, 2.947218e-02, -7.805917e-02, -8.305924e-02, -4.825231e-02, -7.465954e-02, -2.829291e-02, -2.261875e-02, 5.095020e-02, -2.849846e-03, -3.149192e-02, -2.704626e-02, -7.289600e-02, 7.415444e-02, 2.547985e-02, 4.305536e-02, -5.551448e-02, -1.696186e-02, 5.733871e-02, 2.939258e-02, 1.033373e-01, 5.578999e-04, -7.945794e-02, 4.534045e-02, -5.991210e-02, -5.105762e-02, 6.892145e-02, -1.724424e-02, 3.273613e-03, 3.341811e-03, -6.065900e-02, 8.017902e-02, 5.328285e-02, -6.066528e-02, -3.562568e-02, -8.160413e-02, 3.464437e-03, -3.185444e-03, -3.020896e-02, -7.249256e-02, -2.578668e-02, 3.353763e-02, 3.026137e-02, -7.929277e-02, 3.865372e-02, -7.998580e-02, 7.311527e-02, 7.918973e-03, 6.141831e-02, -2.597605e-02, 7.371335e-02, -9.964489e-03, 5.485156e-02, -9.768156e-02, -4.271395e-02, 7.257964e-02, -4.144870e-02, -8.371831e-02, 1.037374e-02, 4.353485e-02, 1.337213e-02, -9.398504e-02, 3.329694e-02, -1.535139e-02, -6.594507e-02, 5.348831e-02},
{1.056384e-01, -7.533316e-02, 3.455027e-02, -6.111605e-02, -4.835651e-02, -4.565538e-02, -2.447190e-02, -7.338545e-02, 1.309448e-02, -6.300751e-02, 1.732729e-02, -6.730352e-02, -5.657848e-02, 7.268774e-03, 3.123397e-02, -7.953528e-02, 8.276919e-02, -8.638036e-02, -2.757878e-02, 8.355530e-02, -6.093827e-02, 2.449530e-02, 3.908769e-02, -1.016974e-01, -4.591988e-02, -1.423354e-02, -8.513214e-02, 1.986464e-02, -1.578526e-02, -7.076211e-02, -1.396600e-02, 7.271194e-03, 3.968978e-02, 7.555557e-02, 2.683664e-02, -2.367046e-02, 1.911705e-02, -7.236137e-03, 3.074083e-02, -5.351892e-02, -4.578510e-02, 5.386873e-02, 1.416945e-01, 6.760959e-02, -7.351081e-02, -6.069607e-04, -5.631546e-02, -4.288660e-03, -1.098870e-02, -7.219909e-02, 6.741338e-02, -3.785370e-02, -2.463370e-02, 7.367359e-03, 1.244958e-02, -5.224178e-02, 2.048071e-02, -2.607487e-02, -1.061966e-03, 9.882358e-02, 9.049538e-03, -2.053638e-02, -4.865537e-02, 1.834719e-02, 8.664392e-02, 1.198750e-02, 6.484409e-02, -1.072623e-02, 1.723360e-02, 3.754951e-02, -8.288477e-02, 4.522547e-02, -5.352399e-02, -7.094808e-03, -1.219974e-02, -6.925146e-02, -2.586446e-02, -2.904354e-02, -1.202646e-02, 1.741763e-02, 2.739333e-02, -8.234770e-02, -2.147962e-03, 7.740719e-02, -7.336213e-02, 9.814030e-03, 8.246622e-02, -1.814924e-02, -6.822655e-02, 5.935936e-02, 1.112650e-02, 7.262280e-02, -7.702854e-02, 2.656792e-03, -5.301639e-02, 3.625596e-02, -3.812229e-02, 2.104922e-02, 1.313467e-02, 1.265667e-02, -4.454007e-02, -4.664490e-02, -3.204449e-02, 6.139502e-02, -7.156273e-02, -3.584035e-02, 8.813748e-02, -7.263684e-02, 2.217647e-02, 3.614299e-02, 8.215585e-02, 9.720958e-02, -5.616564e-02, 8.116863e-02, -5.955930e-02, 3.057488e-02, -4.196481e-02, 6.000589e-02, -8.380912e-02, 8.982381e-02, -4.600910e-03, 7.111372e-02, -7.161707e-02, -2.967873e-02, 6.934173e-02, 2.514536e-02, -7.372782e-02, 2.627467e-02, 5.237711e-02, 8.579052e-02, -5.042144e-02, 3.101525e-02, 2.640487e-02},
{7.903136e-02, -1.858689e-01, 2.097854e-02, 7.933538e-02, 2.116465e-02, -4.685897e-02, -1.056841e-02, -4.516588e-02, 6.246532e-02, 5.959129e-02, 4.308973e-02, -1.394083e-02, -7.367833e-02, 2.050456e-02, 2.790577e-02, 4.533422e-02, 2.352296e-02, -1.576352e-02, -1.064582e-02, -2.155304e-02, 2.114248e-01, 1.343587e-02, 6.232280e-03, -2.577268e-02, -2.680456e-02, 1.850100e-01, -1.682843e-01, -3.170222e-02, 2.825538e-04, -1.249952e-01, -1.279817e-01, -5.724960e-02, -4.879317e-02, -3.338002e-02, 1.552043e-01, 2.582580e-02, 2.652000e-02, -2.088819e-02, -3.220573e-02, -6.959065e-02, 7.344884e-02, -6.154313e-02, -1.689179e-01, -6.727330e-02, -1.543829e-02, -3.682362e-02, -7.718920e-03, 1.091830e-01, 2.530176e-01, 1.950598e-01, 1.322473e-02, 9.102827e-02, 1.091394e-01, -8.057308e-02, -6.452044e-04, 2.022542e-02, -9.087311e-02, 9.642012e-02, 2.071613e-02, 1.422824e-02, 2.758491e-02, -1.623477e-02, 5.601342e-02, 6.287843e-02, 9.224209e-02, -3.536655e-02, 9.984593e-02, 5.102662e-02, -4.775317e-02, 3.498565e-02, 9.432811e-02, 3.309843e-02, 9.507210e-02, -6.188897e-02, -1.878583e-02, -4.801978e-02, -3.632772e-02, 1.272895e-01, -9.854787e-02, -6.023750e-04, -1.320121e-01, -1.332125e-01, -3.397866e-02, -9.381153e-02, 5.374949e-04, -2.400054e-02, 1.075733e-02, 6.381524e-02, 6.486821e-03, 2.175906e-02, 8.162930e-02, 1.011121e-01, -4.765662e-02, 1.139412e-01, 5.185981e-02, 1.109378e-02, 3.628987e-02, -1.988953e-01, 8.225556e-02, 3.867267e-02, 5.079126e-02, -1.696720e-01, -5.313120e-02, 4.187886e-02, -7.682744e-02, -9.665877e-03, 1.077752e-02, 8.818100e-02, 4.150178e-03, 3.406798e-02, 1.616832e-01, -1.362007e-01, -1.603554e-01, 2.627073e-02, -8.513550e-02, -4.754296e-02, 9.933054e-02, -6.139872e-02, -9.644151e-02, 6.154521e-02, -3.363308e-02, 6.639125e-02, -1.661709e-01, 8.925324e-02, 7.236343e-02, -1.142058e-02, -7.675348e-02, 7.457514e-02, -1.587788e-02, -1.104702e-01, 1.450914e-03, -8.710692e-02, 1.696718e-02},
{-3.234580e-02, -1.482724e-02, -3.803744e-02, 4.264896e-02, -3.761737e-02, 2.888570e-02, 1.822372e-02, -3.224056e-03, 8.269791e-02, 7.831680e-02, 2.358717e-02, -5.490511e-02, 1.871897e-02, -7.983573e-02, 6.328746e-02, 3.678907e-02, -8.619896e-02, -4.274187e-02, 6.970610e-02, -4.537296e-02, -5.361898e-02, 2.544500e-02, 6.033628e-02, 7.230537e-02, -1.543599e-02, -2.710042e-02, 1.527653e-02, 1.172678e-02, -1.413732e-02, -3.036141e-02, 6.271104e-02, 6.692544e-02, -3.136699e-02, 4.069400e-03, -6.508701e-02, -9.980220e-03, 9.065067e-03, -7.148991e-02, 7.943123e-02, -7.224414e-02, 3.267477e-02, -1.592145e-02, 2.061195e-02, 4.192640e-02, 5.521333e-02, 5.791655e-03, 3.235098e-02, 4.563484e-02, 5.133380e-02, 1.310399e-01, -9.102973e-02, -5.069788e-02, 3.200959e-02, -5.575269e-02, -5.106096e-02, 1.022267e-02, -7.245030e-02, 7.225819e-02, -5.514880e-02, 9.088869e-04, -1.372762e-02, -3.920405e-02, 9.220326e-02, -8.006421e-02, 4.141390e-02, 4.667539e-02, 2.432372e-02, -3.693340e-02, -5.723981e-02, 4.198789e-02, -4.073168e-02, 9.006742e-02, 8.495014e-02, 5.007795e-03, 1.075864e-02, 2.647829e-02, -2.111226e-02, 4.236585e-02, 2.782288e-02, -1.003075e-01, -9.200523e-02, -6.297224e-02, -6.470094e-02, -5.492771e-02, 7.555149e-02, 5.001444e-02, -7.386614e-03, 1.348766e-02, -6.413252e-02, -3.963124e-02, -2.697515e-02, -1.137405e-01, 6.378526e-02, 8.393154e-02, 5.322086e-02, -6.178986e-02, -2.627416e-02, 2.471688e-02, 6.694568e-02, 3.316140e-02, 5.076858e-02, -3.179561e-02, 2.612174e-02, -3.858730e-02, -6.299442e-02, 4.252271e-02, -1.752155e-02, 3.897315e-02, 5.489431e-02, -8.668999e-02, -2.119878e-02, -6.588212e-02, -1.648723e-01, -5.586473e-02, -7.618890e-02, -6.519009e-02, 4.622096e-02, 4.092282e-02, -4.114956e-02, 4.349027e-02, 7.760318e-02, -2.356101e-02, 1.032319e-01, -3.065649e-02, -1.290541e-02, 2.704819e-02, -6.674627e-02, 4.895148e-02, -1.597264e-02, -1.003726e-01, -8.008604e-03, 2.786577e-02, 5.067405e-02},
{7.677275e-02, -5.824296e-03, 2.690507e-02, -1.906720e-02, 8.979305e-02, -1.684171e-02, 2.966853e-02, 8.246463e-03, 7.770467e-03, 3.316224e-02, -4.487200e-02, 2.444108e-02, -3.445284e-02, -2.783649e-02, 3.963629e-02, -6.825862e-02, 7.022378e-02, -7.478900e-02, 6.951384e-02, 7.522002e-02, -4.310365e-02, 1.882434e-02, -4.551385e-02, 3.703295e-02, -6.027794e-02, 4.895222e-02, 4.660539e-02, -4.641694e-02, -5.742310e-02, 6.624176e-02, -9.636063e-02, 2.754868e-02, 1.277120e-01, -2.995813e-02, 1.949473e-02, -2.516834e-02, -5.944758e-02, 8.020245e-02, -2.294319e-02, -5.988369e-02, -5.462677e-02, 9.579122e-02, 6.465262e-04, -4.438678e-02, 7.221023e-02, 3.975798e-02, -8.954097e-03, -3.857977e-02, -2.029642e-02, -1.742934e-02, 1.582130e-02, 3.082168e-02, 6.630424e-02, 6.949428e-02, -1.035183e-02, 2.191835e-02, 1.012421e-01, 4.255695e-02, 5.832521e-03, -4.028205e-02, 1.550005e-02, 3.839399e-02, 6.779625e-02, -2.379978e-02, 4.211546e-03, 7.718764e-02, -8.762529e-02, 6.228954e-02, 3.568384e-02, 1.251735e-02, 1.002625e-01, 6.192769e-02, 2.042501e-02, 3.874238e-02, 7.804083e-02, -1.431587e-02, 3.992423e-02, 2.507230e-03, -1.114007e-01, 9.415173e-03, 2.843051e-02, -3.511713e-02, 6.018248e-02, 4.968480e-02, 7.182808e-02, -1.031739e-01, 6.828973e-02, -5.513237e-02, 1.067503e-01, -5.594999e-02, 1.087499e-02, 2.432512e-02, 1.044609e-01, 1.829267e-02, 1.043972e-01, -1.004732e-01, -2.815736e-02, -1.071373e-01, -5.507088e-02, -2.873451e-02, -2.360669e-02, 6.114804e-02, -8.357471e-03, 3.812025e-02, -4.758766e-02, 3.937190e-02, -6.181902e-02, -6.546631e-02, -5.281123e-02, -1.858613e-03, 5.245604e-02, 6.516367e-02, -7.031648e-02, -5.580448e-02, 9.375720e-02, -2.098309e-02, -9.241040e-02, 4.902631e-02, -6.328244e-03, -2.902164e-02, 2.034512e-02, 7.376108e-03, -1.001514e-01, -5.835228e-02, -3.454645e-02, 8.317814e-02, 9.121428e-02, -1.762830e-01, 5.429884e-02, -1.216177e-01, 2.501659e-02, 6.445103e-02, -3.859673e-02},
{6.317392e-02, -1.050063e-01, 3.095108e-02, -1.483018e-02, 4.371164e-02, -8.896463e-02, -2.236226e-02, 1.670012e-02, 6.377906e-02, 2.513749e-02, -1.906248e-02, -4.742214e-02, 1.854396e-02, 3.133643e-02, 2.993059e-02, 4.902335e-02, -9.533204e-04, -5.084712e-03, -4.100857e-02, -2.850305e-02, 9.632640e-02, -6.429107e-02, 1.047450e-01, -7.520353e-03, -2.417666e-02, 8.547699e-02, 1.531233e-02, -1.045170e-02, -5.469257e-02, 4.185374e-02, -1.016596e-01, 6.793586e-02, 7.279871e-02, -5.358123e-04, 1.572843e-02, 4.476314e-02, 2.011982e-02, 4.052089e-02, 6.483232e-02, 3.514963e-02, 3.667025e-03, -1.952443e-02, -5.755158e-02, 1.641648e-02, 8.800443e-02, -2.720167e-02, -5.131949e-02, 1.427473e-02, -1.351447e-03, -1.595970e-01, 7.609295e-03, 6.515994e-02, -7.004622e-02, 1.003389e-01, -3.519043e-02, -3.954117e-02, 1.196064e-01, 1.901405e-02, 4.771905e-02, -1.102497e-01, 2.113054e-02, 4.632246e-03, 3.643195e-02, 3.561955e-02, 1.509433e-02, -3.083794e-02, -4.965302e-02, -6.429641e-02, -6.477235e-02, -6.270132e-02, -2.727913e-03, -6.540292e-02, 2.182491e-02, -9.773153e-02, -6.634390e-02, -5.347563e-02, -8.595756e-02, -2.776871e-02, -7.378251e-02, 1.635813e-02, 3.083460e-02, -1.108481e-01, -1.447267e-02, -8.534060e-02, -5.610054e-02, 6.452911e-02, -1.997131e-02, -7.719220e-02, 2.832384e-02, 8.317243e-02, 4.545092e-02, -1.081902e-01, 8.791794e-02, 2.299844e-02, 6.365494e-02, 7.491414e-03, -8.894443e-02, 2.795163e-02, 4.708036e-02, 2.370918e-02, -1.221014e-02, -1.011794e-01, 2.055558e-02, -1.379734e-02, -8.600502e-02, -6.229033e-02, 9.336570e-03, -2.761348e-02, -2.810784e-02, -2.747538e-02, 6.812676e-02, 8.606681e-02, 5.359146e-02, 8.745804e-02, -1.178215e-02, 9.700589e-03, 4.760234e-02, 4.330271e-02, -3.461784e-02, 9.174807e-02, 2.417673e-02, 3.173517e-02, -7.485559e-02, 4.519118e-02, 9.391376e-02, 4.638868e-02, -5.838883e-03, -1.516400e-01, -2.412525e-02, -6.936831e-02, 9.663454e-02, -8.335701e-02, -9.156262e-03},
{-5.359831e-02, 4.001689e-02, -8.723708e-02, -8.647682e-02, -5.794133e-02, -8.581475e-02, 1.724793e-02, -2.112272e-02, 7.073250e-02, 6.434728e-02, 3.878163e-02, -6.971418e-02, 1.147886e-02, -1.322741e-02, -7.993876e-02, -1.126753e-02, 7.801718e-02, -5.490728e-02, 2.466847e-02, 3.343269e-02, -3.682884e-02, 1.005888e-01, -4.866317e-02, -2.854488e-02, -1.076245e-02, 8.777774e-02, -3.169880e-02, -8.066277e-02, -5.089726e-02, 1.633261e-03, 7.912344e-02, -3.497897e-02, -8.398267e-02, -3.350280e-02, 5.251018e-02, 4.547470e-02, -5.800999e-02, 1.399317e-02, -7.200594e-02, 2.211518e-02, 7.877520e-02, -1.570112e-02, -6.349092e-03, 2.768824e-02, 9.678075e-03, 4.457947e-02, 6.343363e-02, -1.176802e-02, -1.535559e-02, 8.412617e-02, 1.315416e-02, -7.016902e-02, 8.325248e-02, 3.208358e-02, 5.119934e-02, -4.912608e-02, -8.795374e-02, -1.061374e-02, 1.223644e-02, -2.901824e-02, 7.453971e-02, -7.275182e-03, 4.279689e-02, 5.732155e-02, 2.035995e-02, -6.652787e-02, 2.565790e-02, -6.252570e-02, -3.383028e-03, 5.905541e-02, 6.361534e-03, -1.666605e-02, 7.027313e-02, 1.480318e-02, -1.215231e-02, 3.351508e-02, 1.027277e-01, -4.629424e-02, 7.012717e-02, 4.281598e-02, -1.035867e-01, -1.785316e-03, -6.028003e-02, -8.638455e-02, 4.027904e-02, 5.725731e-02, 6.351078e-02, 3.178111e-02, -9.330626e-02, -8.019170e-02, -8.482604e-02, -1.105160e-01, -4.712552e-02, -6.056781e-02, 6.131327e-02, -2.030101e-02, -8.983330e-03, 3.433552e-02, -3.329417e-02, 7.686156e-03, -7.624015e-02, -6.484436e-02, -2.387426e-02, 9.462168e-03, 7.802819e-02, -1.843742e-03, -5.408058e-02, -6.697065e-02, -8.873549e-02, -5.204099e-02, -7.821143e-02, 2.638000e-02, -7.522066e-02, 7.271173e-02, 3.585452e-03, -6.016417e-02, 3.833328e-02, -7.704134e-02, -6.896777e-02, -2.088773e-02, -5.203778e-03, 6.061452e-02, 8.746526e-02, -8.934893e-02, -8.352167e-02, -5.151052e-02, 3.988652e-02, -6.096077e-02, -1.819040e-02, -2.799922e-02, 5.300719e-02, -5.784372e-02, -5.566800e-02},
{6.093911e-02, 1.310101e-02, -2.387094e-02, -8.439184e-02, 4.419766e-02, 2.700737e-02, 5.541113e-03, 8.919102e-02, 6.167973e-02, -5.443826e-02, 9.553237e-03, 5.140566e-02, -1.008300e-01, 5.395544e-02, -7.886234e-02, -4.054013e-02, 3.786840e-02, 4.760175e-03, 3.971820e-02, -4.814722e-02, 4.061218e-02, -6.141006e-02, 6.414893e-02, -9.905907e-04, 3.606971e-02, -2.291029e-03, 9.205908e-02, 2.322713e-02, -5.029638e-02, 3.995879e-02, 9.292150e-02, -5.598882e-02, 1.052724e-01, 3.929824e-02, -4.174583e-02, -7.855325e-02, -6.823371e-02, -8.462693e-02, 3.685624e-04, 7.660927e-02, 1.012432e-01, -4.098647e-02, 2.789506e-02, -7.969286e-02, 6.274916e-02, 7.405105e-02, -3.386044e-02, 3.855922e-03, 5.283967e-02, -2.550787e-02, -9.823721e-02, -5.717522e-02, -1.582919e-02, -7.007810e-02, 2.535689e-02, 2.364750e-02, -1.817487e-02, -5.120760e-02, 4.932311e-02, -5.809548e-02, -7.633350e-02, -4.118147e-02, 9.256931e-02, -5.421395e-02, 8.194533e-02, -7.745820e-02, -1.338251e-02, -6.920910e-02, -1.785177e-02, 1.056429e-02, -4.935721e-02, 4.362357e-03, 2.642637e-02, 7.208520e-02, 4.580729e-02, 1.136794e-02, -7.651985e-02, -6.990459e-02, -6.492799e-02, -4.282260e-02, -5.017146e-03, -6.461876e-02, -9.422362e-03, -7.544659e-02, -2.731143e-02, 6.212214e-02, -7.192701e-02, 9.764552e-03, 4.027161e-02, -3.256848e-02, -6.045978e-02, 2.995202e-02, 7.282249e-02, 2.761326e-03, 1.301214e-02, 5.635576e-02, 6.083803e-02, -5.484290e-02, 3.361220e-02, 5.315497e-02, 3.318842e-02, 6.935568e-02, -2.395458e-02, 1.789790e-02, -1.085350e-02, 7.272384e-02, 1.569566e-02, 4.453335e-02, -4.411296e-02, -8.758375e-04, -7.513113e-02, 2.643952e-02, -3.440478e-03, 3.101134e-02, -7.656664e-02, -1.676800e-02, 6.202424e-02, 1.751590e-02, -5.977602e-02, -4.232165e-02, -1.459047e-02, -3.185064e-02, 7.272901e-03, -4.968556e-03, -9.328043e-02, 8.463223e-02, 1.408689e-02, -1.028877e-01, 2.087146e-03, -9.285345e-03, -5.291105e-02, 7.222851e-02, 8.479327e-02},
{1.002820e-01, -1.968240e-02, 6.173059e-02, 1.915377e-02, -2.399281e-03, -6.395462e-03, 3.588332e-02, -3.445109e-02, -7.988783e-03, -4.182182e-02, -6.185228e-02, -3.079344e-02, -7.132647e-04, -4.530581e-02, 4.751474e-02, -3.412293e-02, 2.002362e-02, -8.164231e-02, -7.388764e-02, -3.043994e-02, 5.593694e-02, -4.135323e-02, 8.789647e-02, -9.814616e-02, -2.639610e-02, 3.949490e-02, -3.858938e-02, -6.720778e-02, 7.968897e-02, 3.358125e-02, 7.593964e-02, -2.522343e-02, -4.706304e-02, -2.175379e-02, 8.017263e-02, -4.786661e-02, -5.327566e-02, -6.766423e-02, -4.322810e-02, 5.498405e-02, 8.623908e-02, -9.517852e-02, -2.177313e-01, -3.687326e-02, -1.962148e-02, 8.308739e-03, -7.434841e-02, 7.475161e-02, -4.725953e-02, 8.149818e-05, -1.086139e-01, 2.681330e-02, 7.786619e-02, -3.800233e-03, 1.007659e-02, -3.355499e-02, 5.941671e-02, -4.133526e-03, 4.929743e-02, -4.114940e-02, 8.634583e-02, -3.826692e-02, -1.189307e-02, -8.521613e-02, -1.679598e-02, -6.954799e-02, -7.232036e-02, 6.448699e-04, -6.549140e-02, 6.327527e-02, -5.412615e-02, 4.714819e-02, -3.174576e-02, 8.306515e-02, 2.192641e-02, -8.225834e-02, 8.455869e-02, -2.866318e-03, 3.625505e-02, -5.215634e-02, 1.856808e-02, 3.201270e-02, 3.995252e-02, -8.162088e-02, 2.138666e-02, 3.061163e-02, 6.563421e-02, 1.360944e-02, 2.285328e-02, -3.406544e-02, -1.448773e-02, -3.696313e-02, 2.811630e-02, -3.666687e-02, -5.535761e-02, -6.450747e-03, 4.847939e-02, 7.866699e-02, -3.131814e-02, 4.108296e-02, 1.220226e-02, 7.423809e-02, 1.064221e-02, -3.110619e-02, 3.711906e-02, 4.350367e-02, -7.768648e-02, 4.072725e-02, -5.287100e-02, 7.630805e-03, 4.830312e-02, -9.536959e-02, -1.166492e-01, 1.495607e-02, 2.115804e-02, -5.912139e-02, -7.555034e-03, -6.764957e-02, -3.374711e-02, -7.990664e-02, 6.197940e-02, 2.587383e-02, 4.426197e-02, -2.412640e-02, -2.735021e-02, 5.757230e-04, -1.091600e-01, -1.612858e-01, -8.478449e-02, 3.189448e-02, -3.578774e-02, -4.018648e-02, 4.582446e-02},
{5.722418e-02, -2.211936e-01, 4.160542e-02, 2.676419e-01, 1.891258e-01, 1.357724e-01, 9.067611e-02, -6.511748e-02, 9.422484e-02, -5.831553e-02, 1.469291e-02, -4.220842e-03, 1.401772e-02, 1.166478e-02, -9.517428e-02, 3.059532e-02, 2.074478e-01, -2.080330e-02, 3.005908e-02, -1.353859e-01, 2.564269e-01, 1.012179e-01, 1.453072e-01, -2.540519e-01, -3.862200e-02, 1.067943e-01, -3.686721e-01, -2.017176e-02, 1.206290e-02, 2.923513e-02, -3.115569e-01, -1.121191e-01, -2.457833e-01, -3.509934e-02, 2.490116e-02, 8.376159e-02, -7.922221e-02, 9.732810e-03, -1.355336e-01, 7.444135e-03, -5.739600e-02, -4.753724e-02, -6.018882e-02, -1.878444e-02, -3.547198e-02, -1.663864e-03, -1.052239e-02, 3.516619e-02, 2.488881e-01, -4.844443e-02, -1.702425e-02, -1.311161e-02, 8.111999e-02, -1.116586e-01, -3.262237e-02, -1.073374e-01, 4.707604e-02, -3.107378e-01, -6.564485e-02, -1.653405e-01, -2.709192e-02, 4.680831e-02, 1.069396e-02, 6.454269e-02, 1.166436e-01, 5.624439e-02, -5.549693e-03, 3.061825e-02, 1.395435e-01, -3.394484e-01, 9.461753e-02, 6.860926e-02, 9.686163e-03, -6.688302e-02, 6.585499e-02, -5.794206e-02, 6.768640e-02, -3.950636e-02, 4.553925e-02, -1.621669e-01, -1.424062e-01, -3.083636e-01, -3.748548e-01, -7.187799e-02, 1.207128e-01, 1.179187e-01, -3.577029e-02, -8.301488e-02, -8.787983e-02, 7.707414e-02, 9.209257e-02, 1.365304e-01, 1.081894e-01, 3.016158e-01, -2.124849e-01, 6.933188e-02, -7.706317e-03, 1.729943e-01, 9.227420e-02, 2.579428e-02, 7.439917e-02, -1.942742e-01, 9.300032e-02, 1.306190e-01, -1.115177e-01, -1.698755e-02, 9.035610e-02, 9.331662e-02, -1.561591e-01, 9.565110e-02, 6.264725e-01, 3.359264e-04, -8.819598e-02, 3.000658e-03, -8.806519e-02, 2.454645e-02, 4.105572e-02, -1.341833e-01, 1.892205e-02, -2.282934e-01, -5.818862e-02, 6.156782e-02, -3.661622e-01, -3.076258e-02, -6.620164e-03, 4.490917e-02, -5.676613e-02, -2.063407e-01, -6.739189e-02, 2.356738e-02, 3.401522e-02, -7.777400e-02, -9.260695e-02},
{2.999092e-02, 2.457713e-02, -9.023583e-02, -8.992051e-03, -2.782009e-01, -1.237184e-01, 3.353080e-02, 5.971270e-02, 2.836201e-02, 1.624759e-02, 1.371733e-01, -4.843485e-02, -8.564257e-02, 3.193181e-02, 1.003480e-01, 9.492433e-03, 1.327072e-01, -1.192652e-01, 9.157998e-04, -3.372823e-02, 7.585739e-02, -6.627473e-02, 2.687584e-02, 1.010339e-01, 6.039007e-02, 1.982351e-01, -9.771311e-02, 7.101642e-02, -1.295893e-02, -1.453955e-01, -3.947617e-03, -7.915242e-02, -4.855544e-02, 2.541826e-02, -1.817809e-02, 1.851896e-02, -1.281138e-01, -2.478951e-03, 1.139736e-01, -4.145091e-02, 1.636250e-01, -5.250149e-02, -6.241499e-01, -2.071998e-01, 6.560694e-02, 9.742040e-02, -1.227971e-02, 8.937168e-02, 1.305359e-01, 5.682700e-02, 1.716814e-02, 6.066610e-02, 2.461609e-02, 1.301730e-01, 4.136438e-02, 9.059144e-02, 6.974806e-02, 1.916000e-01, 4.627772e-02, -1.769825e-01, -1.189986e-01, -5.629760e-02, 2.082253e-01, -1.569289e-03, -1.133398e-02, 5.655154e-02, 2.316465e-02, -2.865198e-03, -9.915993e-02, 3.127505e-01, 7.040070e-02, -3.571603e-02, 1.840968e-01, -7.591071e-02, -2.999723e-02, 9.713741e-05, 1.624122e-01, -4.425862e-02, -9.378164e-02, 7.941033e-02, -9.905313e-02, 5.619147e-02, -5.296225e-02, 5.177213e-02, 2.797902e-02, -6.920737e-02, -4.224938e-02, 1.169190e-01, 2.615864e-02, 1.165768e-01, 6.727159e-02, -1.800514e-01, 2.476481e-01, 2.247125e-02, 5.015061e-02, 5.407253e-02, -6.788906e-02, -7.211538e-02, -8.703494e-02, 1.972321e-02, -3.590953e-02, -2.629901e-01, 1.569606e-01, -4.215819e-02, -5.078828e-02, -1.253019e-01, 1.215824e-01, 4.007196e-02, -5.722798e-02, 5.032021e-02, 1.867664e-01, -9.289454e-02, -6.542426e-02, -6.049834e-03, -5.973169e-02, -3.732025e-02, -5.083367e-02, 2.815278e-02, -6.600780e-04, 8.699679e-02, -3.723330e-02, 3.242688e-02, -2.283936e-01, -5.580847e-02, 9.981015e-02, 5.536809e-02, -2.024868e-02, -6.826667e-02, 1.446457e-02, -1.170901e-01, -4.467219e-02, -3.650845e-02, -1.529268e-01},
{-3.317734e-02, 1.674964e-02, -5.437676e-02, 2.215235e-02, -5.360432e-02, -7.790717e-02, 1.429165e-02, 3.310817e-02, -6.840413e-02, 1.478988e-02, 1.811954e-02, 6.506561e-02, 2.714296e-02, 4.901731e-02, -3.768929e-02, 2.743373e-02, 8.496640e-02, -8.018726e-03, -3.875534e-02, -4.316838e-02, 4.858749e-02, -7.422859e-02, -2.540218e-02, 1.468391e-02, -5.037871e-02, -1.882185e-02, -2.025890e-02, -2.818570e-02, -6.313933e-02, 6.248607e-02, -7.141855e-02, 4.562912e-02, -5.576932e-02, -5.381727e-02, -5.916264e-02, -6.005198e-02, 6.022601e-02, -5.022075e-02, -7.559031e-02, 7.953443e-02, 7.152372e-03, 2.809337e-02, -1.568052e-01, 3.249443e-02, -4.597255e-02, 6.719755e-02, -4.763917e-02, -6.191318e-02, -7.773630e-02, -1.217077e-01, 5.505740e-02, 2.186687e-02, 6.018947e-02, -7.006791e-02, 5.958040e-02, -6.269398e-03, -4.462577e-02, -5.854921e-03, -1.594103e-03, 1.116590e-02, -2.349724e-02, -3.639509e-02, 1.153667e-01, -8.744410e-02, -1.986515e-02, -8.840036e-02, 5.455050e-03, 5.049322e-03, 6.416225e-02, 8.190673e-02, 9.764367e-03, 8.303194e-02, -3.920378e-03, -9.329597e-02, -2.495807e-02, 6.235215e-02, 4.810961e-02, 3.628829e-02, 5.383253e-02, -1.110393e-01, -8.096385e-02, 6.830440e-02, 2.858321e-02, -4.820825e-02, 5.312010e-02, -3.202023e-02, 7.629294e-02, 6.941625e-02, -1.009934e-01, -3.976968e-02, 3.662881e-02, -8.624528e-02, -5.577095e-02, 1.331186e-01, 4.315536e-02, 2.037968e-02, 1.879776e-02, -5.849249e-02, 2.490640e-02, 5.565528e-02, -9.611027e-03, 5.765582e-02, -8.192064e-02, 6.369536e-02, -1.103464e-02, -9.819393e-03, -2.416695e-02, -5.216318e-02, 5.627309e-02, -6.136774e-02, -2.008417e-02, -2.436758e-02, 2.619263e-02, -7.234965e-02, 1.708439e-02, 1.506170e-02, 8.070461e-02, 1.818743e-02, -1.037601e-02, -5.541782e-02, 3.930165e-03, 3.421460e-02, 3.633758e-02, 4.434079e-02, -5.693446e-02, -5.568717e-02, 1.030343e-03, -6.468567e-02, -1.011399e-01, -7.858838e-02, 3.556800e-02, -3.600128e-02, 5.890729e-02},
{-5.937687e-02, -2.095040e-01, -1.516712e-02, 1.547996e-01, -1.296047e-01, 7.758369e-03, 1.831733e-02, 2.486160e-02, 5.021980e-02, 1.095538e-02, -3.483718e-02, -9.810472e-02, -9.865475e-02, 9.311400e-02, -7.175215e-02, -1.039487e-01, 5.628167e-02, -3.358964e-02, -6.476829e-03, 4.453913e-02, -2.581597e-02, 5.364206e-02, 3.967045e-02, -1.321983e-01, -2.784690e-02, 1.779818e-02, -1.159593e-01, -1.122277e-01, -3.876092e-02, -3.760593e-02, -5.230630e-02, 6.470367e-02, -2.209681e-01, -3.720525e-02, 1.043817e-01, -4.334772e-02, 1.384714e-01, 1.810434e-02, -7.238415e-03, 1.363270e-02, 1.962114e-02, 6.271636e-02, -3.123657e-01, -4.963239e-02, 9.507474e-02, 8.243829e-03, -7.648296e-02, -4.620235e-02, 2.417972e-01, 8.462769e-02, -2.921566e-02, -1.716403e-02, 1.358759e-01, -5.312288e-03, -1.092820e-01, -2.201022e-02, -8.672729e-02, -6.424236e-02, 1.208413e-01, -1.642031e-01, -5.970611e-02, -1.885701e-03, -1.753572e-03, -2.647059e-02, 4.510154e-03, 9.967235e-02, 5.443458e-02, 3.493619e-02, 3.706147e-02, 2.706478e-03, 1.610364e-02, 5.492199e-03, -3.456888e-03, -1.748890e-02, 7.260191e-02, -3.642225e-02, 8.156505e-03, -5.410941e-02, -5.451662e-02, -2.262371e-02, -1.772083e-01, -1.831001e-01, -6.419569e-02, -1.823711e-02, 2.539138e-02, 2.933730e-02, 6.297680e-02, -1.101645e-01, 1.544568e-02, 5.953469e-03, 6.339575e-02, 1.054623e-01, -4.092432e-02, 2.809477e-01, -1.438165e-01, -8.722243e-03, 3.916560e-02, -1.366674e-02, 8.700182e-02, -7.168178e-02, 7.236204e-02, -1.408018e-01, 9.022839e-02, 2.734552e-02, -1.744536e-01, -5.513473e-02, 1.340821e-01, 3.185382e-02, -5.065318e-04, 2.675160e-02, 1.323436e-01, -3.796760e-03, -1.092840e-01, -4.953904e-02, 2.160329e-02, 1.287430e-02, 3.264747e-02, -8.322097e-02, -3.903702e-04, 4.838632e-02, -6.519195e-02, -8.492295e-02, -2.541462e-01, -1.052378e-01, 8.696260e-02, -5.671396e-02, -5.339099e-04, 1.290623e-01, 1.861873e-02, -1.156766e-01, 8.408309e-02, -7.339044e-02, 3.097616e-02},
{1.156853e-01, -2.250568e-02, -1.241142e-01, -8.102664e-02, -3.722723e-02, 3.087741e-02, -3.824085e-02, 1.815255e-02, -8.022527e-02, -8.108001e-02, -8.627905e-04, 1.429523e-02, -4.443956e-02, 5.679841e-02, 2.260168e-02, -7.869492e-02, 5.918988e-02, 7.392939e-03, -6.047273e-02, -6.667960e-02, -6.841706e-02, -7.659081e-02, -5.428282e-02, 2.941868e-02, -5.953215e-02, 2.078303e-02, -9.137785e-02, 7.864128e-03, 5.642653e-02, 6.057963e-02, 2.465474e-02, 6.663086e-02, -2.724925e-02, -3.978526e-02, -2.552497e-02, -8.149320e-02, -7.225822e-02, 3.786628e-02, 3.737753e-02, -2.193918e-02, 2.422200e-02, -5.533138e-02, -1.066675e-01, 6.600157e-02, -5.466944e-02, -5.620448e-02, -7.772216e-03, 1.834923e-02, 2.948484e-02, -4.284931e-02, -1.190237e-02, -3.461953e-02, -7.253905e-02, -4.035538e-02, 1.805032e-02, -2.158711e-02, -5.385316e-02, 1.900940e-03, -2.550524e-02, -6.104454e-02, 5.892497e-03, -5.050785e-02, -3.282567e-02, 2.075028e-02, -5.449524e-02, 8.693497e-02, 7.865913e-02, 1.287222e-02, 5.308556e-02, -1.290834e-01, 7.094172e-02, -2.372806e-02, 1.553241e-01, -3.749539e-02, 4.510633e-02, 1.295034e-02, -1.013209e-01, -8.259053e-02, -9.744262e-02, -5.031938e-02, -8.741949e-02, 6.391635e-02, 6.077945e-02, 2.963284e-02, -4.835048e-02, -8.301606e-02, 4.504757e-03, 7.326102e-02, 4.197080e-02, -7.533276e-02, -3.124725e-02, -1.357050e-01, -3.657901e-03, 8.966148e-02, -3.089174e-02, -7.246624e-02, 2.392284e-02, 3.858731e-03, -6.235613e-02, 8.716718e-02, 2.647667e-02, 5.589214e-02, 5.581434e-02, -1.037442e-01, -4.607870e-02, -8.694364e-02, 1.022664e-01, 6.545081e-02, -9.693249e-02, -6.518215e-02, 1.120725e-01, -4.826207e-02, -4.055371e-02, -3.136452e-02, -1.642611e-02, -6.649692e-02, 7.569418e-02, 3.325918e-02, 2.945787e-02, 3.969277e-02, -6.407507e-03, 5.808193e-02, -5.967912e-02, 1.427775e-02, 6.790869e-02, -2.824344e-02, -2.278495e-02, -1.286845e-01, 1.558065e-02, -6.275369e-02, -7.675865e-03, -9.493340e-02, 2.284987e-02},
{1.706267e-01, 8.137030e-03, -7.589581e-02, -7.847127e-02, -8.444145e-02, -5.551960e-02, -6.104473e-03, 3.080196e-03, -5.682956e-03, -7.207067e-02, 4.617910e-02, 6.990941e-02, 5.044726e-02, 8.139828e-03, 6.391998e-02, 4.786564e-02, 5.413610e-02, -5.940763e-02, 5.981034e-02, 6.871425e-02, 1.745946e-03, -1.991574e-02, 1.733076e-02, -7.977169e-02, 9.623627e-02, 6.739405e-02, 5.220028e-02, -3.845701e-02, -7.811666e-03, -6.980824e-02, 8.428457e-02, -3.166090e-02, 1.191024e-01, -5.252279e-02, -8.820276e-02, 8.986770e-03, 6.349795e-02, 3.369632e-02, 1.336681e-01, 4.099287e-02, -4.356779e-02, 6.327122e-02, -1.464607e-02, -2.250606e-03, 4.778160e-02, -7.543776e-02, 2.950644e-02, 4.873943e-02, -6.896882e-02, -1.301769e-02, 3.744908e-02, -2.938414e-02, 8.055590e-03, 3.452522e-02, 6.548638e-02, -4.729683e-02, 5.669777e-02, -1.736740e-02, -3.250177e-03, 5.467461e-02, -4.850758e-02, -8.354633e-02, -3.845713e-02, -1.238978e-02, -3.372826e-02, -1.283745e-02, -4.609292e-02, 8.329695e-02, -6.650348e-03, 6.826091e-03, -1.648508e-02, 3.408023e-02, -5.386246e-02, -4.162049e-02, 5.650462e-02, -7.566243e-02, -1.081551e-01, 2.719608e-02, -4.980812e-02, -9.381671e-02, 3.186471e-03, -3.712720e-02, 3.519882e-02, 1.855429e-02, 6.708765e-03, 3.247521e-02, 4.478288e-02, 2.947484e-02, -5.824737e-02, -5.221521e-02, -4.654214e-02, -2.901506e-02, -8.296741e-02, -6.472651e-02, -1.743137e-04, -7.558434e-02, -3.460174e-02, 6.461888e-02, -7.950157e-02, -2.719734e-02, 9.871233e-03, 1.270783e-01, -8.739592e-02, -7.937736e-02, 8.244744e-02, 5.460364e-02, -5.285857e-02, 5.616271e-02, 4.983148e-02, 1.693950e-02, -2.499572e-02, -2.839179e-03, -6.215664e-02, 3.160956e-02, 3.710014e-02, -4.024912e-02, 6.177371e-02, -4.675985e-02, -5.831877e-02, -5.516846e-02, 6.879285e-02, -1.027380e-02, -5.089238e-02, 8.180539e-03, -3.101515e-02, -1.279884e-02, 2.756465e-02, -8.451566e-02, 4.019823e-02, -6.539673e-02, -1.107770e-02, 4.245178e-02, 1.266003e-02},
{4.010754e-02, -6.871614e-02, -1.440104e-02, 5.219968e-02, -6.979273e-02, -2.397790e-02, 8.145611e-02, 1.199526e-02, 2.164940e-02, -2.589859e-02, -7.023213e-03, -5.182749e-02, -7.441290e-02, -7.051732e-02, 6.711088e-02, 2.394528e-02, -8.355147e-02, 4.334095e-02, 3.678409e-02, -2.294346e-03, 3.915882e-02, -6.858334e-03, 1.235708e-02, 6.151192e-02, 1.557372e-02, 1.511500e-02, -3.641858e-02, -3.955967e-02, 4.229033e-02, 6.744979e-02, 4.153946e-02, -1.067877e-02, -3.512620e-02, 1.084918e-01, 6.288787e-02, -3.933444e-03, -2.358929e-02, -7.368458e-02, 1.226304e-01, -6.679956e-03, 5.109964e-02, -7.365362e-02, 7.421780e-02, -1.056217e-01, -5.024116e-02, 4.535611e-02, -5.981451e-02, -7.177947e-02, -4.440560e-02, 7.327255e-03, -1.193508e-01, -5.679838e-02, -7.183367e-04, 1.018699e-02, 8.418008e-02, -2.628294e-03, -2.907443e-02, 1.031521e-01, -4.221783e-02, -7.948361e-02, 2.057604e-03, -4.685729e-02, -5.153322e-02, 9.392276e-03, -5.538886e-02, 2.694106e-02, -2.324961e-03, -7.795247e-02, 5.861806e-02, 1.397341e-01, 8.336578e-02, -8.392986e-02, 1.132807e-01, 6.503730e-02, 6.047634e-02, 1.593710e-02, -5.659234e-02, 4.638303e-02, 5.276546e-02, 4.792815e-02, 1.315372e-03, -7.085668e-02, 9.115959e-03, 1.479140e-02, 5.623170e-02, 4.583262e-02, 2.294728e-02, 4.942727e-02, -1.664141e-02, 5.786758e-03, 6.717065e-03, -1.177273e-01, 1.004119e-02, -6.122291e-02, -4.690751e-02, 5.485232e-02, -8.019735e-03, 2.044404e-02, -1.712142e-02, -1.920877e-02, 7.477506e-02, -5.535513e-02, 3.262283e-02, -5.621357e-02, -4.279198e-02, 1.255321e-02, 2.945270e-02, -8.377659e-02, -8.513765e-02, -7.638565e-02, 6.277613e-02, -7.443842e-02, 4.114411e-02, 2.295495e-02, 8.743611e-02, 5.414975e-02, 1.014872e-03, -8.525141e-02, 8.237164e-02, 2.172509e-02, -1.634373e-03, 8.584649e-02, 8.243721e-02, 2.058065e-03, 1.534348e-02, 9.599436e-02, -5.842505e-02, 1.297434e-02, -4.776796e-02, -3.368456e-02, -5.224558e-02, -4.548112e-02, -4.749911e-02},
{-6.835786e-01, 3.756226e-01, -1.033529e-01, 7.389771e-02, -5.205532e-01, 4.385116e-01, -1.049063e-01, -2.165471e-01, 2.961279e-01, 9.895018e-02, 1.686123e-01, 4.569145e-01, -8.245711e-02, -5.181485e-01, -9.636503e-02, 3.452487e-01, 5.623927e-01, -1.125878e-01, 2.824609e-02, -1.425900e-01, -7.163416e-01, 3.481893e-01, -4.585967e-01, 3.807308e-01, -1.598540e-01, 1.517382e-01, 2.492927e-01, 1.635198e-01, 3.079627e-01, 4.890107e-01, 6.485325e-01, 1.365536e-01, 1.891300e-01, -1.668597e-01, -3.233727e-02, 4.836903e-01, -6.470977e-01, -8.179082e-01, 4.400053e-01, 5.225196e-02, 6.184228e-01, -1.714476e-01, 5.611924e-01, 1.862945e-01, -1.528669e-01, 1.071679e-01, 3.249359e-01, 2.646030e-02, 1.096897e-01, 2.437993e-01, -1.945882e-01, 1.389490e-01, 1.221764e-01, -2.948220e-01, 1.291009e-01, 6.341381e-02, -1.199810e-01, -5.321392e-02, -1.635562e-01, 1.034458e+00, 2.224574e-02, 1.749257e-01, 1.651863e-01, -1.007920e-01, -1.302905e-01, -7.757146e-01, 5.093688e-03, 4.103270e-02, 4.525868e-02, 2.794206e-01, -7.662029e-01, -1.288403e-01, -2.842410e-01, -1.208124e-01, -2.590882e-01, -1.976742e-01, 8.952434e-01, -4.379307e-01, 7.775344e-01, -3.434153e-01, 1.017783e-01, 6.515679e-01, -2.596872e-01, 1.116410e-02, -1.093144e-01, 2.648899e-01, -1.877583e-01, 5.975431e-01, -3.058403e-01, -4.466525e-02, -9.926396e-02, 1.477359e-02, 6.216514e-01, -3.083206e-01, 5.328859e-01, -3.170165e-01, 3.422183e-01, -6.490394e-01, -4.181687e-02, 2.846850e-02, -1.517833e-01, 1.581147e-02, 5.782344e-01, 3.284882e-01, 3.024066e-01, 7.896522e-02, -1.022923e-01, 4.855100e-02, 3.774001e-01, 1.514329e-01, -3.532357e-01, -3.359360e-01, -5.659065e-01, -9.811041e-02, -2.739701e-01, -1.439736e-01, 4.965623e-02, -1.437165e-01, 2.934155e-01, -4.303565e-02, -3.104443e-01, 1.743226e-01, 2.040089e-01, -7.157040e-02, -1.764697e-01, 5.079972e-01, -2.041321e-01, 3.747907e-01, -3.949153e-02, 1.990858e-01, -2.899336e-01, 4.612626e-01, -2.816698e-01},
{-1.451589e-01, -1.082667e-01, -1.051699e-01, -1.291565e-01, -1.100527e-02, -4.274495e-03, 3.101613e-02, -1.006873e-01, 8.957533e-03, -2.861417e-02, -6.453827e-03, 2.520696e-02, -8.364592e-02, -2.261460e-02, -9.623013e-02, -7.678643e-03, -2.691299e-02, -6.739921e-02, -1.762441e-02, -1.059197e-01, 6.096517e-02, 1.284704e-01, 4.547986e-02, -5.126055e-02, 1.330687e-01, 2.245459e-02, 8.434511e-02, 1.000539e-01, -2.318907e-02, 2.739418e-02, -3.267246e-02, 3.006756e-02, -5.977840e-02, 3.414806e-03, 2.791164e-02, 2.447203e-02, -5.869588e-02, -1.039972e-01, 1.096817e-01, 9.476639e-02, 9.600160e-02, -2.130114e-02, -1.742842e-02, -3.519602e-02, -5.579861e-02, -1.986746e-02, 1.127248e-02, 8.813337e-02, -3.694652e-03, 5.977706e-02, -1.469750e-01, 7.756290e-02, 3.602887e-02, -9.674475e-02, 4.272398e-02, -8.860367e-02, 5.911035e-02, -5.207450e-02, -9.624954e-03, 1.149264e-01, 2.786877e-02, 6.516943e-02, 6.647607e-02, -9.887323e-02, 1.579156e-02, 2.261291e-02, -5.971918e-02, -4.596458e-02, 1.110298e-01, 1.265076e-02, 5.416368e-03, -2.778771e-02, -3.294639e-02, -6.956264e-02, -1.412869e-02, -1.494116e-02, 1.193528e-01, -2.151360e-03, -1.201227e-02, -1.198905e-01, 3.484001e-02, -4.483456e-03, -1.022640e-01, -1.400355e-02, -1.647141e-02, 5.274012e-02, 4.932542e-02, 5.622360e-02, -1.584021e-02, -1.143822e-01, -7.779916e-03, -1.901489e-02, 4.945111e-02, 2.581016e-02, 2.786061e-02, -5.979811e-02, -7.049310e-02, -9.989880e-02, 2.178705e-02, 1.467894e-02, -1.978000e-02, 2.267591e-02, 7.814623e-02, -5.132574e-02, 7.482980e-02, -6.553324e-02, 1.307399e-01, -5.579391e-02, 3.336224e-03, -6.623989e-02, -7.344422e-02, -4.904389e-02, -1.743983e-01, -2.885770e-02, 1.533263e-02, -1.076499e-01, 1.180502e-01, -6.256013e-02, -8.301031e-02, 2.726139e-02, 1.998488e-02, 1.314969e-01, -4.077839e-02, 7.550270e-02, -1.911788e-03, 2.863521e-02, -2.169651e-02, 9.330622e-02, -1.406920e-01, -3.384697e-02, -7.308821e-02, 6.697585e-03, -2.531719e-02},
{1.426083e-01, -1.310868e-02, 4.679872e-02, -5.705988e-03, -2.214091e-02, 2.494234e-02, 4.728968e-02, -7.553106e-02, -1.040716e-01, 6.124500e-02, 3.890581e-02, -3.132362e-02, -4.214272e-02, 4.303119e-02, 4.581141e-02, -1.179200e-02, -2.632759e-02, -8.005100e-02, 3.878033e-02, -2.633782e-02, 5.018161e-03, -9.910792e-02, 4.915310e-02, 8.752171e-02, 2.246350e-02, -7.409821e-02, -1.063048e-01, 2.424084e-02, -3.684534e-03, -8.320078e-02, 8.471210e-03, 4.434051e-02, -2.668656e-02, 1.408313e-01, -4.694774e-02, -6.761544e-02, 1.073446e-02, 7.711694e-02, 4.967298e-02, 2.278796e-02, -5.862210e-02, 1.121143e-01, 6.011418e-03, 6.311382e-02, 3.771529e-02, 4.963360e-02, -2.076609e-02, -5.701715e-02, -7.701898e-02, -1.089326e-01, 9.353991e-02, 6.446792e-03, 6.092664e-02, 1.913169e-02, 1.945206e-02, -1.342472e-01, 1.663480e-01, 1.256008e-01, -5.714512e-02, -1.554326e-03, 4.914233e-02, -2.043196e-02, -6.882104e-02, 9.552536e-03, 5.359972e-02, 3.798394e-02, -9.119081e-02, -4.254835e-02, -4.977793e-02, -3.660762e-02, 1.013075e-01, 3.665311e-02, 1.214624e-01, -4.235250e-02, -1.357053e-02, -5.657102e-02, -2.382672e-01, 7.237284e-02, -3.792709e-02, -1.149637e-02, -6.017436e-02, 4.543577e-02, -6.251483e-02, 1.211354e-02, -4.969217e-02, -5.429592e-02, 5.814098e-02, 3.149561e-02, 1.131212e-01, 1.048812e-01, 2.835753e-03, -1.396105e-02, 1.188500e-01, 9.009767e-02, -4.367181e-02, -9.981624e-03, -1.525644e-02, 3.541912e-02, -1.400154e-02, 1.681930e-02, 6.414043e-02, -9.618394e-02, -1.093564e-02, -1.100851e-01, 2.618336e-02, 1.881754e-02, 8.740221e-02, -2.972234e-02, -8.458722e-02, -6.700873e-02, 2.013636e-02, 6.324944e-02, 9.566634e-02, 1.963448e-02, 7.157254e-02, -4.786766e-02, 1.404251e-02, 2.011838e-02, -2.899945e-02, 6.190949e-02, 8.075704e-02, 5.485925e-02, -4.289149e-02, 7.856239e-02, -5.354037e-02, -4.779283e-02, 9.688344e-02, -1.450012e-01, -1.985426e-02, -1.342076e-01, 4.537399e-02, 1.525584e-02, 7.197043e-02},
{1.437446e-01, -1.534886e-01, -1.039884e-01, -2.484956e-02, -4.264460e-01, -2.214286e-03, 7.371168e-02, -4.782051e-02, -1.645141e-02, -1.208235e-02, 1.152481e-01, 1.080340e-01, -6.881470e-03, -2.133294e-03, -9.740372e-02, 2.026039e-02, 3.835591e-02, -5.391951e-02, 2.452806e-02, -1.176355e-02, -9.813316e-02, 2.243086e-02, 9.682143e-02, -7.838573e-02, 1.314601e-01, 7.084486e-02, 9.435759e-02, 4.009836e-03, -1.661277e-02, -1.297564e-02, 1.039349e-01, 7.174928e-02, 1.602869e-02, -6.164946e-02, -4.448900e-03, 2.006415e-02, -1.041139e-01, 1.196487e-02, -6.094058e-03, 1.836477e-02, 4.643665e-02, 4.831314e-02, -2.794705e-01, 5.910078e-02, -8.357950e-02, -9.805661e-02, 7.022999e-02, 1.640806e-02, -9.787164e-03, -1.502476e-01, -8.033984e-02, 9.713854e-02, -2.126714e-02, 1.863320e-02, 3.285462e-02, -2.661094e-02, -2.181821e-02, -3.923833e-02, -1.116760e-01, 2.663619e-01, 5.754193e-03, 3.876132e-02, 4.252553e-02, -1.044316e-01, 7.299297e-02, -2.158194e-02, -2.559128e-02, 6.538156e-02, 1.209470e-01, 1.870166e-01, 3.900177e-02, -6.905970e-02, -1.042315e-01, -5.241607e-02, 1.413148e-02, 2.219868e-02, 4.768549e-02, -6.126151e-02, 4.261364e-02, -2.070998e-04, 4.417728e-02, 8.677824e-02, -2.102216e-02, -1.188767e-01, 1.401136e-01, 5.968203e-02, 7.339256e-02, -2.544645e-02, -1.065620e-01, -9.695208e-02, 1.349638e-01, 5.918313e-02, 7.949591e-02, 1.437892e-01, 4.346830e-02, 1.152857e-02, -7.175105e-02, 7.297179e-03, -9.863455e-03, 9.638210e-02, 6.975523e-02, 6.106688e-02, 6.132109e-02, 1.618977e-01, 5.407323e-02, -8.604027e-02, 7.352284e-02, -2.477796e-03, 5.487499e-02, -2.666469e-02, -3.141986e-03, -4.937039e-02, -1.417152e-01, 1.294766e-01, -1.165319e-01, -1.933678e-03, -3.753970e-02, -4.436069e-02, 5.297827e-02, -6.195052e-02, -7.790092e-02, -1.624998e-02, 3.004797e-02, 2.481936e-02, -5.983355e-02, -3.136112e-02, -1.214081e-02, -2.046096e-01, 1.730525e-02, -4.459419e-02, 2.374037e-02, 1.661462e-02, -9.819879e-02},
{-1.532674e-01, -2.021296e-01, -4.747207e-02, 4.416075e-02, -3.491371e-01, -1.612831e-02, 1.328153e-01, -9.308448e-02, 2.135022e-01, -9.140079e-02, 1.416128e-01, 7.351010e-02, -1.981132e-01, -7.845642e-02, -4.142729e-02, 1.017071e-01, 1.439246e-01, 6.638652e-03, -1.257819e-01, -8.213275e-02, 6.042047e-02, 1.195785e-01, 5.055341e-02, -1.082908e-01, 3.048060e-02, 6.081260e-02, -1.108302e-01, 1.564717e-01, 1.839474e-01, -1.178483e-01, -8.155363e-03, 2.525439e-02, -3.366483e-01, 1.476140e-01, 3.456172e-01, 1.609540e-01, 1.266554e-01, -1.197120e-01, 2.466361e-01, 4.330712e-02, 4.259490e-01, -1.379372e-01, -2.352442e-01, -3.793812e-01, -7.468855e-02, 1.914608e-02, -3.420327e-03, 2.551529e-02, 3.160491e-01, 2.656743e-01, -1.012156e-01, -1.522305e-02, 1.245205e-01, -8.818343e-02, -5.668080e-02, 1.295661e-01, -5.550101e-02, 1.416973e-01, -9.465259e-02, -1.941530e-01, -9.376036e-02, 9.424933e-03, 2.337961e-01, 4.682880e-02, -2.194315e-02, 3.932289e-02, -6.462178e-02, 1.136179e-01, -5.700757e-02, 1.496449e-01, -1.610884e-02, -5.834753e-02, 1.579680e-01, -8.327483e-02, -2.005283e-02, -8.830351e-02, 1.759729e-01, 7.433650e-02, -3.662858e-03, -1.879865e-02, -1.074311e-01, -1.120453e-01, -1.149426e-01, -2.840951e-02, 3.427591e-02, 2.004458e-01, -6.327734e-02, 1.835222e-01, -1.211914e-01, 9.285657e-02, 7.429229e-02, -1.043944e-01, 1.822160e-03, -7.614306e-02, -1.387434e-01, -2.419849e-01, -6.607679e-02, -4.823228e-01, 2.836035e-02, 7.794655e-02, 4.087253e-02, -2.756208e-01, 1.211360e-01, -8.613908e-02, -3.764983e-02, 5.615540e-03, 1.872261e-01, -7.548673e-02, -3.615347e-02, -2.043441e-02, 2.522405e-01, -2.122774e-01, -2.347466e-01, 3.035218e-02, -1.360314e-01, -3.677706e-02, 1.614689e-02, -5.610234e-02, -3.476847e-02, 1.361854e-02, -4.874227e-02, 5.078678e-02, -1.718778e-01, -2.474920e-02, -1.331975e-02, 1.059705e-01, -1.897759e-01, 2.300259e-01, -1.077656e-01, -2.409989e-01, -1.645828e-02, -1.851853e-01, -1.036408e-01},
{-1.722703e-02, 1.339510e-01, 6.467197e-03, -1.423039e-01, -3.688741e-02, -7.518824e-02, -5.753245e-02, -7.282262e-02, 1.539694e-01, 3.141065e-02, 4.838593e-02, 4.211863e-02, -1.334036e-01, 6.623419e-02, -1.111715e-01, 5.642553e-02, -1.035848e-02, 3.014842e-03, -8.352862e-02, 4.099513e-02, 9.666587e-02, -3.268021e-04, -5.938428e-02, -2.923686e-02, 7.781352e-03, 1.273750e-01, -9.792318e-03, 7.405577e-02, 8.118570e-02, -8.813893e-02, -1.012154e-01, 1.611391e-02, -1.468463e-01, 3.136516e-02, 2.440504e-01, 7.103900e-02, 6.195564e-05, 2.488113e-02, 3.805152e-01, -1.625206e-02, 8.471122e-02, -1.912222e-02, -2.696179e-01, -2.274787e-01, -4.387973e-02, 2.000069e-02, 4.197712e-02, -1.934194e-03, 2.008019e-01, 1.911739e-01, -1.223283e-01, -3.860336e-02, 9.439464e-02, -1.314558e-02, -4.974378e-02, 5.936462e-02, -9.696351e-03, 1.052600e-01, -5.662816e-02, -6.960413e-02, 8.932680e-02, 5.236819e-02, 1.015858e-01, -9.196770e-02, 5.916768e-02, -1.078988e-01, -7.917530e-03, -4.342698e-03, 6.394841e-03, 5.696208e-02, 1.454866e-02, -1.101556e-02, 1.705310e-01, 2.100394e-02, 2.088252e-02, -1.103025e-01, 1.737902e-01, 6.661501e-02, -3.429383e-02, -1.007268e-01, -2.902115e-01, -4.609234e-02, -7.056797e-02, 4.784590e-02, 9.252718e-02, 1.099003e-01, -4.142414e-02, 3.616657e-02, -1.540030e-01, 7.777550e-02, 2.551835e-02, -6.136592e-02, 4.856544e-02, -9.211984e-02, 3.293852e-02, 7.848762e-02, 1.119736e-01, -6.105657e-02, -2.515275e-02, 9.257907e-02, -5.055835e-02, 3.809273e-02, 8.012610e-03, 4.160780e-02, -5.250853e-02, -5.408029e-02, 1.026027e-01, 6.742612e-02, 1.233033e-01, 2.413957e-02, 9.274846e-02, -2.210158e-01, -1.113865e-01, 4.189361e-02, 1.012302e-02, -8.631329e-02, 2.357312e-02, -4.064574e-02, -3.689410e-03, -6.247629e-02, -4.786043e-02, 1.383500e-01, -2.066685e-01, -5.737884e-02, -2.659733e-02, -5.427934e-02, -5.360443e-02, 8.919910e-02, -7.354931e-02, -3.478621e-02, -8.842180e-02, -3.696423e-02, -3.931214e-02},
{-5.086831e-02, -1.685808e-02, -7.809329e-02, 7.956885e-02, -5.394491e-02, -6.103028e-02, 6.022231e-02, -3.042273e-02, 6.073483e-02, -4.930450e-02, 5.492687e-02, -1.876115e-02, 3.800734e-02, -2.066795e-03, -5.603356e-02, -5.770424e-02, -3.464519e-02, 1.228261e-02, 2.685628e-03, -4.893396e-02, 6.998122e-02, -4.625579e-02, 7.576030e-02, 5.820262e-02, 1.626427e-02, -3.254284e-02, 6.780394e-02, 3.288678e-02, -4.697166e-02, 5.993787e-02, 3.939895e-02, 5.348577e-03, -1.829830e-02, -2.672107e-02, 1.211853e-02, -2.135476e-02, 3.693236e-02, -3.596400e-02, 8.120650e-02, -5.334591e-02, -1.555866e-02, 5.393966e-02, -1.735570e-01, -1.477930e-01, -7.525387e-02, -4.757036e-02, -3.105553e-02, 3.096537e-03, 8.216324e-02, 8.325361e-02, -2.514035e-02, -5.195218e-03, -1.839475e-03, -7.073588e-03, 3.557025e-02, -1.068381e-03, -5.133726e-02, 2.422122e-02, -1.304422e-02, 3.765383e-02, 7.894590e-02, -7.544908e-04, 2.196977e-03, -2.775466e-02, -5.243403e-02, 2.271841e-03, -7.066160e-02, 6.484648e-02, 8.126743e-02, -4.015763e-02, -7.511592e-03, 7.040405e-02, 3.049315e-02, 3.561326e-03, 8.689668e-02, -2.842282e-02, 5.222300e-02, -9.597512e-02, 5.588603e-02, -8.645205e-02, -5.530800e-03, -1.032005e-01, -9.655834e-02, 3.358203e-02, -3.013298e-02, -4.217722e-02, -7.713187e-02, -1.992836e-02, 4.634913e-02, -1.431493e-02, -4.876272e-02, -4.507773e-02, -4.618648e-02, 4.439650e-02, -7.379427e-02, -6.897727e-02, -5.935099e-02, 9.604269e-02, 6.350660e-02, -5.626541e-02, -8.215661e-02, 5.541296e-02, 8.099154e-02, -5.879926e-02, -8.979342e-02, 9.118544e-03, -7.931034e-02, -9.277949e-02, 2.057819e-02, 8.560647e-04, 9.120166e-02, -6.261455e-02, 3.638846e-02, 6.428501e-02, -7.058645e-02, -7.720950e-02, -7.529654e-02, -6.162456e-02, 9.432870e-02, -4.979196e-02, -6.400117e-03, 6.158435e-02, -7.226577e-02, 2.600672e-02, -2.739470e-02, -6.632446e-02, 4.958056e-02, -3.604696e-02, -9.414699e-03, -3.093623e-02, 4.684744e-02, -1.097903e-02, 1.107607e-02},
{-2.142114e-02, 5.778089e-02, -3.438269e-02, 3.786145e-02, -5.165902e-02, 2.450246e-02, 4.440488e-02, -4.417645e-02, 6.925287e-02, -1.659771e-02, 1.130345e-01, 6.919919e-02, 5.607675e-02, 3.557959e-02, 6.382432e-02, -4.216093e-02, -6.775039e-02, 3.246187e-02, -6.006108e-02, 4.258337e-02, -1.519482e-02, -5.429197e-02, 1.360977e-02, 5.895520e-02, 3.323772e-02, -5.158904e-02, 1.875390e-02, 5.201299e-02, -7.961694e-02, 2.170920e-02, 1.233027e-02, -2.173928e-02, -3.253720e-02, -3.717311e-02, 1.047412e-01, -6.984630e-02, 5.219624e-02, -5.423384e-02, 8.877668e-02, -1.134120e-02, 1.154082e-01, -1.699519e-02, 9.359245e-02, 5.665991e-02, -3.573614e-02, -9.014343e-02, -3.813998e-02, -8.222769e-02, 3.414853e-02, -1.160125e-01, -2.712984e-02, 4.917568e-02, 5.903633e-02, -2.696989e-02, 6.941075e-02, 5.860247e-02, -2.211177e-02, 1.471864e-02, -1.381974e-02, 6.701011e-02, -6.928714e-02, -1.270895e-03, -1.453025e-02, -3.532813e-02, 1.698006e-02, 8.923498e-02, 4.732775e-02, 6.448048e-02, 5.425533e-02, -3.800881e-03, 1.498328e-02, -5.239573e-02, 8.861772e-03, 6.113103e-02, 8.284318e-02, -6.767689e-04, 5.667277e-02, 4.811763e-03, -4.046989e-03, -1.030150e-01, 3.257278e-02, 2.279813e-02, 6.501870e-02, -5.990192e-03, -5.287515e-02, -2.214766e-02, -2.293888e-02, 1.000126e-01, 7.990694e-02, 7.887324e-03, -4.165690e-03, -8.060858e-02, -6.667838e-02, -5.474839e-02, 6.368461e-02, 4.492161e-02, 5.733920e-02, 7.570234e-03, 8.457875e-02, 4.211545e-02, -4.169676e-02, 1.434892e-02, -6.523320e-02, 2.318964e-02, 4.805826e-02, -6.827086e-02, 7.400799e-02, -4.923991e-03, -6.917533e-02, 5.654636e-02, -6.895928e-02, 3.028962e-02, -8.590432e-02, 4.102693e-02, -6.797212e-02, 7.741538e-02, 4.507650e-02, 2.625547e-03, -7.551701e-02, -3.357140e-02, -4.450914e-02, -5.679586e-02, 1.887038e-02, -1.247245e-03, -3.841127e-02, -5.386946e-02, -6.565516e-02, -5.847187e-03, -4.027706e-04, 1.495621e-02, 2.505503e-02, 5.058222e-02, -4.404226e-02},
{4.743482e-02, 5.425237e-02, -6.003788e-02, -6.547020e-02, -7.296919e-02, 3.910046e-02, 6.073527e-02, 1.972973e-02, -2.285779e-02, -5.445436e-02, -4.033266e-02, 4.187862e-02, 3.883167e-02, -5.900556e-02, 6.022894e-03, -4.388665e-02, 5.639493e-02, -8.417384e-02, -4.012369e-02, 7.679530e-03, -9.388242e-02, -4.099178e-02, -2.656215e-02, -2.664657e-03, -3.001679e-02, 9.318917e-02, 3.368719e-02, -8.472460e-02, -9.145563e-02, -1.179177e-02, -2.619424e-02, 3.385616e-02, 7.153581e-02, 5.712893e-02, -5.231186e-02, 2.289541e-02, -1.187702e-01, 2.303620e-02, 5.193303e-02, 8.423337e-02, 1.204992e-01, -4.407704e-02, -2.525972e-02, -8.765574e-02, -6.407736e-03, 2.172531e-02, -3.989726e-02, 7.085950e-02, -8.342152e-03, -4.315395e-02, -4.810909e-02, -8.501669e-02, -5.862349e-02, -7.143784e-02, -1.135826e-02, 1.631423e-02, -2.048677e-04, -7.511517e-02, -6.909122e-02, 4.386415e-02, 3.022175e-02, -5.478063e-02, 2.756776e-02, -3.076375e-02, -4.712918e-02, -6.748582e-02, -6.394473e-02, 5.237387e-02, 8.678777e-02, -1.259741e-02, 4.026606e-02, -6.821672e-02, -6.417221e-02, -4.826230e-02, -1.511315e-03, 2.214833e-02, 1.203102e-01, 5.144606e-02, 4.915675e-02, -7.020912e-02, -4.874028e-02, -4.217162e-03, -6.276233e-02, 2.592937e-02, -8.160355e-02, 8.328146e-02, -8.143684e-02, 3.788241e-02, 7.778786e-02, 8.744821e-03, 4.399290e-02, 2.309976e-02, 2.122772e-02, -1.722084e-04, -3.767280e-02, 8.118074e-02, -6.124753e-02, -1.202876e-01, -1.779771e-02, -5.866840e-02, -7.143276e-03, -6.770258e-02, 4.957930e-02, -2.997300e-02, 7.463669e-03, 8.127613e-04, -1.954688e-02, 5.243267e-02, -3.224442e-02, 5.235504e-02, -3.037838e-02, -1.905208e-02, -2.141898e-02, 2.206531e-02, 6.429772e-02, 7.180545e-02, -5.492516e-02, -1.584817e-02, -6.676310e-02, -7.326458e-03, -3.808242e-02, -1.610257e-02, 2.269854e-02, -2.028835e-02, 7.330050e-02, 9.962752e-02, -7.504348e-02, -1.183291e-01, 3.589386e-02, 2.540316e-02, -5.729970e-02, -3.673003e-02, -5.886119e-02},
{1.668644e-01, -3.003314e-02, 1.207663e-02, 1.772730e-01, 8.130777e-02, 4.164656e-03, 1.204965e-02, -8.983949e-02, -4.080086e-03, 1.315855e-02, 9.898147e-03, 6.475792e-02, 8.088651e-02, 3.649062e-02, 5.926410e-02, 7.914706e-02, -1.046628e-01, -6.535938e-02, 6.007595e-02, 4.393016e-02, 3.143011e-02, 5.558188e-02, -2.775703e-02, 3.195594e-02, 1.210446e-02, -1.268761e-02, -4.250110e-02, 6.288296e-02, -7.547521e-02, -3.629702e-02, 1.905321e-02, -6.047000e-02, 9.716860e-02, 3.488932e-02, 6.150182e-02, -5.650356e-02, -5.982504e-03, 7.435762e-02, 4.759056e-02, 3.986935e-02, -1.036714e-01, -5.390722e-02, -1.644511e-02, -4.949915e-02, 7.905722e-02, -2.600247e-02, 8.934548e-03, 4.689239e-02, -6.038249e-02, -4.328135e-02, 8.958043e-02, 4.913644e-02, -9.252707e-02, 7.152759e-02, 2.369879e-02, -1.173360e-01, 8.111495e-02, -9.550558e-04, -4.500277e-02, 1.790087e-02, -7.571632e-02, -5.485973e-02, -5.983548e-02, 6.395557e-02, -3.825381e-02, -3.220448e-02, 2.560120e-02, 7.453216e-02, 4.104568e-02, -2.048585e-01, -4.811244e-02, 4.860044e-02, -3.207253e-02, 2.597151e-02, 8.626229e-02, 9.659136e-02, -1.331846e-01, -4.834031e-02, -4.091746e-02, 6.743485e-02, 6.752700e-02, -5.315283e-02, -4.536469e-02, -4.846727e-03, 1.042841e-01, 7.844912e-03, 1.087607e-02, 2.320547e-03, 9.323789e-02, -4.107519e-02, -1.301263e-02, -1.913609e-02, -7.539851e-02, 5.408482e-02, 3.485589e-02, -2.966867e-02, -2.709749e-02, -2.867039e-02, 3.330228e-02, 3.306093e-02, 8.781218e-02, 7.487433e-02, -9.512753e-03, -3.759914e-02, 6.236509e-02, 1.462810e-02, 5.445619e-02, -9.423836e-02, 3.136403e-02, -3.942626e-02, -9.553063e-02, 5.992028e-02, 1.552230e-01, -4.085761e-02, 9.158534e-02, 7.042515e-02, -8.682668e-02, 3.663199e-02, -1.900390e-01, -1.392071e-02, -2.658036e-02, -7.218736e-02, -8.252513e-02, 1.439892e-01, -5.912913e-02, -1.101941e-02, 1.041365e-01, -1.040347e-01, -3.800484e-02, 4.421713e-03, -4.762729e-02, -5.667297e-02, 1.051954e-01},
{1.624943e-01, 2.360542e-02, 8.367417e-02, 2.968350e-02, -1.175247e-01, -1.711273e-02, -8.854079e-02, -6.540360e-02, -1.749325e-02, -6.048065e-03, -1.022868e-02, 4.666467e-02, 8.626742e-02, -3.632554e-02, 2.172417e-02, -8.707571e-02, -1.371776e-02, 5.679288e-02, 1.248551e-02, -4.777903e-02, 8.766584e-02, -1.146534e-01, 2.371198e-02, 8.765576e-02, -7.362358e-02, -2.850038e-02, -1.171975e-01, -1.010947e-01, -3.475305e-03, -1.691456e-02, -7.478670e-02, 5.897529e-02, 6.554641e-03, 3.411762e-02, 6.497274e-02, -3.428062e-02, 1.250435e-01, 1.144769e-03, 6.537141e-03, -1.024618e-02, -8.569506e-02, 7.770102e-02, -7.814348e-02, -1.720642e-01, 7.227747e-02, -2.438823e-02, -1.060706e-02, 2.196438e-02, 9.373049e-02, -8.276547e-02, 3.058899e-02, -3.592305e-02, 1.286005e-02, 7.310289e-02, -8.552410e-02, -1.076261e-02, -7.174189e-03, 1.420377e-01, 2.172661e-02, -3.523783e-02, -7.233709e-02, -2.061666e-02, -5.711295e-02, 7.822595e-02, -4.004185e-02, 1.209843e-01, -6.296544e-03, -3.160359e-02, 2.175450e-02, -9.138164e-02, -3.080721e-02, -7.180500e-02, 2.230432e-01, -8.423967e-02, 9.159420e-02, 1.524735e-02, -5.572030e-02, -5.430457e-02, -5.009475e-02, 6.260166e-02, -6.550004e-02, -7.606991e-02, -2.233100e-02, -1.281863e-02, -5.230310e-03, 2.653527e-02, -1.793330e-02, -1.083678e-01, -5.071258e-02, 6.106166e-02, -5.587939e-02, -2.529382e-03, 3.831879e-02, 9.453051e-02, -1.036148e-02, -1.881285e-02, -6.355260e-02, -1.639379e-01, 3.653590e-02, -8.345516e-02, -1.881248e-02, -1.111951e-01, 7.569186e-02, 1.238844e-02, -8.726506e-02, 2.320475e-03, 8.571552e-02, 2.704623e-02, 2.455111e-02, -5.003245e-02, 1.332379e-01, 5.460392e-02, -3.092670e-02, -3.457873e-02, 5.253712e-02, 2.710258e-03, 1.167606e-02, -1.377471e-02, -9.244134e-02, -1.834611e-02, 6.174482e-02, -4.621161e-02, -5.656119e-02, -2.603097e-02, 7.447403e-03, -3.886455e-02, -3.276701e-02, -2.470785e-02, 3.945542e-02, -1.483167e-01, 9.592311e-02, -1.426219e-01, -5.844196e-02},
{1.704464e-01, -1.133880e-01, -1.029073e-01, 1.131237e-02, -3.404405e-01, 1.420851e-01, 9.741599e-02, -1.949400e-02, 1.039429e-01, -1.679749e-01, 1.457640e-01, 9.057157e-02, -1.416362e-01, -4.970058e-02, -1.546599e-01, 1.639346e-01, 1.162469e-01, -1.518665e-01, -1.637697e-01, -5.317777e-02, 1.366683e-01, 1.120457e-01, 8.850252e-02, -9.921986e-02, 1.604240e-01, 2.076221e-01, -4.596686e-02, 3.339396e-02, 7.538568e-02, 2.326936e-02, -4.514847e-02, -8.142990e-02, -1.247628e-01, 6.283174e-02, 1.380180e-01, 4.178396e-03, 7.664818e-02, -1.316384e-01, 3.744189e-01, 1.021951e-01, 2.248342e-01, -1.444571e-01, -2.024141e-01, -3.362244e-01, -1.600440e-01, 3.333756e-02, 6.482620e-02, 1.866872e-01, 3.911195e-01, 2.825085e-01, -5.125668e-02, 1.904683e-01, -6.911861e-02, -6.900739e-02, 5.585223e-02, 4.937294e-02, 1.125183e-01, -1.225799e-01, -1.021434e-02, 2.460930e-02, 1.537954e-01, 8.370431e-02, 2.128991e-01, -7.775282e-02, 2.263862e-01, -1.254884e-02, -5.281596e-02, 1.368243e-02, 1.703887e-01, 7.358834e-02, 4.774627e-02, -1.366840e-02, 1.206299e-01, -1.941745e-01, -8.924831e-02, -1.633326e-02, -3.860593e-02, 1.023787e-01, 1.056600e-01, -1.420800e-01, -2.932231e-01, -9.676088e-02, -1.689350e-01, -1.164581e-01, 2.426966e-01, -2.170225e-02, -2.166418e-02, 8.722799e-02, -1.279940e-01, -1.009743e-01, 1.204590e-01, -1.073508e-01, -1.303065e-02, -8.236959e-03, -1.924763e-01, 4.156697e-02, -7.043625e-02, -9.611430e-02, -3.510769e-02, 7.888398e-02, 1.297147e-01, 4.412636e-02, -8.067569e-03, -4.414982e-02, 8.119906e-02, -1.521391e-01, 2.233485e-01, 7.662570e-02, -3.880776e-02, -1.415647e-01, 3.216877e-01, -1.707543e-01, -1.786636e-01, 1.290796e-01, -1.865370e-01, -1.214111e-01, 1.358101e-01, -1.588701e-01, -8.731551e-02, -6.925558e-02, -9.670360e-02, 9.321980e-02, -2.365528e-02, -2.453917e-02, 5.039835e-02, 1.587659e-01, -1.390044e-01, -1.065382e-01, -1.035417e-02, -5.299744e-02, -8.918761e-02, -1.931546e-01, -1.304924e-01},
{1.394598e-01, -1.392425e-01, -5.083873e-02, 1.755334e-01, -1.054902e-01, -6.855180e-02, -1.069404e-01, 8.853035e-02, -5.436557e-02, -5.833718e-02, 6.615210e-03, -1.815069e-01, 6.478447e-02, -4.075846e-02, 3.331822e-02, -7.732335e-02, -4.519662e-02, -2.084652e-02, 9.302797e-03, 5.268587e-02, 6.713566e-02, -1.705833e-03, 3.854520e-02, 3.287670e-02, -7.841022e-02, 3.446307e-02, -1.272204e-01, -1.043592e-01, -1.011737e-01, -5.977175e-02, -4.972449e-02, 2.017850e-02, -3.738878e-03, -2.936202e-03, 5.197205e-02, -7.464351e-03, 1.167011e-01, -4.121096e-02, 1.436183e-01, -4.001782e-02, 1.333775e-01, 1.911774e-01, -8.445533e-02, -1.386461e-01, 1.142034e-01, 1.277485e-01, -6.193261e-02, 9.965931e-03, 5.929021e-02, 4.576308e-02, -1.374332e-02, -8.990070e-02, -6.499988e-02, 1.875166e-01, -7.937890e-02, -1.068737e-01, 7.473522e-02, 1.739302e-01, 5.099956e-02, 9.603094e-02, -1.131245e-01, 4.004360e-02, 5.929451e-02, 1.904463e-02, -1.536669e-01, 1.447000e-01, 3.753671e-02, -6.191690e-02, 4.158728e-03, 9.047699e-03, 7.016415e-02, -5.410720e-02, 1.770190e-01, 5.834959e-02, -2.862168e-02, 1.040137e-02, 1.088051e-01, 5.475527e-02, -2.306621e-01, 1.322945e-01, -7.477707e-02, -5.176760e-02, 5.437028e-02, 4.084506e-02, -3.540557e-02, -2.086210e-01, 5.560702e-02, -8.775087e-02, 1.685939e-01, 3.676587e-02, -7.265365e-02, -2.663326e-01, -6.799173e-02, 9.813913e-03, 1.551287e-02, -4.110822e-02, -1.229152e-01, -2.399048e-01, 3.214926e-02, -1.433747e-01, -2.239680e-02, -6.483300e-02, -9.477530e-02, -1.110627e-01, -9.926737e-02, 6.748640e-02, -4.194371e-02, -4.642395e-03, -1.393704e-01, 1.484588e-01, -1.785555e-02, 1.127189e-01, -7.662958e-02, 6.870959e-03, -2.808581e-02, 1.423433e-01, -1.257804e-01, 1.331764e-02, 3.276815e-03, 2.907991e-02, 6.549382e-02, 1.036972e-02, -9.655999e-02, 8.613723e-02, 1.963383e-02, 2.321216e-03, 7.969002e-02, 8.923259e-02, 6.549394e-02, -8.982480e-02, -1.988335e-02, -6.057440e-02, 1.401566e-01},
{-9.103399e-02, -3.167292e-02, 9.064167e-02, -1.636307e-02, -9.031935e-02, 4.822683e-02, 7.233129e-02, 6.555375e-02, 1.372614e-02, 5.635732e-02, 1.272123e-01, 4.896484e-02, -1.192415e-01, -7.818828e-02, -4.024921e-02, 5.779050e-02, -5.299928e-02, 6.185809e-02, -5.149802e-02, -1.320986e-02, -7.209633e-02, 6.245115e-02, 2.364908e-02, -1.498518e-01, -1.739028e-02, 1.506896e-02, -1.385786e-02, 3.165387e-02, -3.287926e-02, 1.215580e-01, -3.264284e-02, 1.500990e-02, -7.554036e-03, -5.702289e-03, 1.442221e-03, 4.165521e-02, -2.586810e-02, -8.239907e-02, -8.564302e-02, 7.706634e-02, 8.751920e-03, 9.565981e-03, -2.145836e-01, -1.194999e-01, -6.778115e-02, -3.585382e-02, -1.030156e-02, -4.161823e-02, 8.465278e-02, 9.406501e-02, -1.000342e-01, 4.291220e-02, 2.896181e-02, -7.683399e-03, 4.044642e-02, 4.600326e-02, 5.897203e-02, -5.143835e-02, 5.689832e-02, -3.772727e-02, 9.006231e-02, -3.355794e-02, 8.530738e-03, -8.516390e-03, 1.076589e-01, -8.124246e-02, 2.473936e-02, -6.745687e-03, 7.082652e-02, -5.988464e-02, 7.476894e-02, 4.469427e-02, 5.003863e-02, -4.609230e-02, 7.110625e-02, 7.320285e-02, 1.385874e-01, 2.740435e-02, 1.421419e-01, -1.259405e-01, -7.181703e-02, 7.731603e-03, 7.476143e-02, -4.069803e-02, 8.376396e-02, 2.367508e-02, -4.542966e-02, 1.429979e-01, -5.532314e-02, -2.070707e-02, -5.501873e-02, -6.687366e-03, -9.047236e-02, 1.534040e-02, 3.190939e-02, -6.299148e-02, 6.557452e-02, 1.650611e-02, 3.422843e-02, -4.847157e-02, -5.204026e-02, 7.890964e-02, -1.386079e-02, 8.774108e-02, -9.793332e-03, -4.640155e-02, 3.779194e-02, 6.356136e-02, -6.597002e-02, -8.067759e-02, 1.066960e-01, -6.508210e-02, -2.312179e-01, -5.382763e-02, -7.203662e-02, -4.726764e-02, 1.001225e-01, -1.014169e-01, -7.562773e-03, -6.685065e-02, -6.794624e-02, 4.584219e-02, 6.743716e-02, 6.078057e-02, -7.396917e-02, 6.784113e-02, -2.691995e-02, -1.206439e-01, -1.656706e-02, -4.772929e-02, 3.361822e-02, -9.652164e-02, -8.842836e-02},
{7.049701e-02, 9.486401e-03, 6.981791e-03, -9.262078e-02, 8.740765e-02, 4.463085e-03, 1.780740e-02, 2.710470e-02, 1.693075e-02, 2.753816e-02, -3.040769e-02, 1.934658e-04, 4.326317e-02, 2.064850e-03, -9.161620e-03, 6.198794e-02, 8.597459e-02, 3.068943e-02, 6.884152e-02, 3.050649e-02, 3.480935e-02, -8.262391e-02, -2.954601e-02, 7.264386e-02, -2.155284e-02, -7.115105e-02, 2.128048e-02, -8.071088e-02, 2.077465e-02, 5.406245e-04, 8.137307e-03, -4.681389e-02, 1.192802e-02, 7.230285e-02, 5.930545e-02, -5.428301e-02, -4.687855e-02, -2.092080e-02, -1.736098e-02, 6.966531e-02, 3.615372e-02, 2.446527e-02, 9.343506e-02, 1.169812e-02, 2.446214e-02, -5.305834e-02, 2.330644e-02, 7.581799e-02, 6.759859e-02, -8.554430e-02, -7.237968e-02, 2.717292e-02, -5.044293e-02, -4.261418e-02, 6.022469e-02, 4.050013e-02, -3.002893e-02, -3.447741e-02, 1.107522e-02, 1.617757e-03, 4.999308e-02, 7.563641e-02, -6.420667e-02, 3.785574e-02, -6.983850e-02, -1.890777e-02, 7.761911e-03, -3.332082e-02, 2.712319e-02, -3.760956e-02, 2.914117e-03, 1.619099e-02, 2.222564e-02, -9.755610e-03, -4.441884e-02, 1.244769e-02, -8.188031e-02, 6.322385e-02, -2.538284e-02, -3.959888e-02, 4.776253e-03, -5.790078e-02, 4.490117e-02, -7.074257e-02, -7.292178e-02, 3.388441e-02, 5.296171e-02, -3.122268e-02, 4.988575e-02, 5.936290e-02, 7.417219e-02, -1.889770e-02, 2.966895e-02, -5.685061e-02, 9.835780e-02, 2.598315e-02, -8.157258e-02, -1.365430e-01, 8.597533e-02, -4.085343e-03, 4.433906e-02, -6.173662e-02, -6.281489e-02, -5.440895e-02, -5.644013e-02, -1.279661e-02, 3.327280e-02, 1.615559e-02, -8.381719e-02, 3.447677e-02, 2.284007e-02, 6.733363e-02, -4.161324e-02, 5.431518e-02, 2.263581e-02, 6.849787e-02, -5.794125e-02, 6.317420e-02, 5.061977e-02, 7.599647e-02, -6.992907e-02, -1.218476e-02, 3.314886e-02, -5.794625e-02, 5.973678e-02, -3.231333e-03, 6.359793e-02, -1.079917e-01, -8.746450e-03, -9.954742e-02, 1.813464e-02, 4.213082e-02, -2.314604e-03},
{3.919059e-02, -1.483071e-01, 7.361695e-02, 9.093527e-02, -5.270281e-02, -3.128827e-02, 2.060158e-02, -3.735351e-02, 3.814061e-02, -5.109883e-02, -8.834101e-02, -6.482200e-02, 2.715713e-02, 4.429891e-03, -4.048992e-02, 6.133784e-02, -8.915069e-02, 9.942143e-02, 9.710328e-02, 2.895305e-02, 5.435897e-02, 1.856127e-03, 7.912078e-02, 5.054849e-02, 2.454816e-02, -2.939881e-03, 1.433503e-02, 1.933932e-02, -9.505968e-02, -4.157230e-02, -1.401606e-01, 5.106406e-02, 7.029586e-02, -5.456001e-03, -1.593531e-02, -3.684710e-02, 9.613745e-02, 1.399931e-01, -8.344707e-02, 2.255772e-02, -6.531450e-02, -6.263115e-02, -3.724321e-02, 7.135127e-02, 8.260828e-02, -1.925378e-02, -8.544161e-03, 5.590601e-02, 5.643667e-02, -1.015991e-01, 6.863766e-02, -3.569912e-02, -1.073986e-02, 3.623408e-03, -1.025453e-01, -3.386067e-02, -2.625887e-02, -9.824521e-02, -3.438563e-02, -6.096512e-02, -7.573428e-03, 1.434243e-02, 4.726632e-02, -7.919754e-04, 6.186698e-02, 7.048059e-02, 1.886241e-02, -4.198518e-02, -8.898440e-02, -9.927771e-02, 7.833615e-02, 1.076179e-03, -1.585980e-01, 6.450758e-03, -2.717276e-02, 1.107530e-01, -8.359014e-02, 9.157789e-02, -1.128813e-01, -3.235357e-03, 4.833719e-02, -2.328420e-02, -6.943167e-02, 1.500240e-02, 8.812173e-03, 3.829439e-02, -5.929811e-03, -1.005569e-01, 8.127320e-02, 8.455892e-02, -4.619857e-02, 1.067860e-01, 6.400619e-02, 2.515534e-01, -1.654457e-02, -5.524645e-02, 7.527719e-02, 1.312022e-01, -2.182797e-02, -8.613046e-03, -2.544901e-02, -8.707214e-02, -7.068443e-02, 6.732081e-02, -3.536166e-02, -3.264834e-02, 2.004584e-02, -8.657682e-04, -1.919011e-02, -5.194871e-02, 1.821299e-02, -4.508032e-02, 1.677370e-01, 4.358471e-02, 6.517694e-02, 2.017890e-02, 5.815483e-02, 2.942899e-03, 2.009016e-02, -1.335647e-02, 1.067737e-01, -1.045462e-02, -1.902478e-01, 4.965921e-02, 9.536805e-02, -9.687527e-02, 1.305946e-02, 1.378359e-02, 6.906486e-02, -4.442421e-02, 3.944985e-02, -8.065491e-02, 6.166241e-02},
{9.472228e-02, 8.340891e-02, -5.001671e-02, -3.149288e-02, -8.011775e-02, 1.381409e-02, -3.743637e-02, 3.269202e-02, 2.609277e-02, -3.076401e-02, 9.854827e-03, -3.505462e-02, -5.807331e-02, 4.814397e-02, 3.457142e-02, -5.145365e-02, 6.333098e-02, -9.100389e-02, 1.323235e-02, -6.773778e-02, 2.173270e-03, 2.922537e-02, -4.452725e-02, 1.362579e-01, 9.044645e-02, 1.679166e-02, -3.548562e-02, -2.601933e-02, -3.707512e-02, -6.188182e-03, -1.343273e-02, 4.656057e-02, -1.021683e-01, -1.049410e-02, 8.018037e-02, -7.596437e-02, 1.575775e-02, -1.431019e-02, 7.301327e-02, 5.284936e-02, -4.284330e-02, 3.326633e-02, 8.330444e-02, -1.027065e-01, -1.133473e-01, 2.053943e-02, -8.158252e-02, 3.391488e-02, 4.923132e-02, -1.641512e-02, -5.514011e-03, -5.011504e-02, -3.650574e-02, -2.803147e-02, -5.859347e-02, -1.086049e-01, 1.002131e-01, 4.815812e-02, 3.967344e-02, -5.567546e-02, -7.315416e-02, 5.888696e-02, -4.257299e-02, -5.175859e-02, -1.193902e-02, -3.795403e-02, 6.909861e-02, 1.819047e-02, 9.685980e-02, -1.668258e-01, 2.368442e-02, -6.476586e-02, 4.701921e-02, -2.675293e-02, -4.454814e-02, -7.647286e-02, -5.958777e-02, -5.596837e-02, -4.268936e-03, -9.117839e-02, -1.373719e-01, 6.825580e-02, -5.358272e-02, -8.062600e-02, 1.005923e-01, 3.188318e-03, 4.160376e-02, -1.809767e-02, 4.203329e-03, 6.396946e-02, -4.846591e-02, 5.313960e-02, 1.926957e-02, -2.275982e-01, 7.313427e-02, -4.470109e-02, 8.257970e-02, -1.740350e-01, -2.739078e-02, 4.996179e-02, 7.275194e-02, 4.309048e-02, 1.663793e-02, 4.731526e-02, 4.195940e-02, -3.330588e-02, 6.563273e-02, 9.280056e-02, -6.982043e-03, 8.576968e-03, 1.186207e-01, -3.649427e-02, 4.962545e-02, -6.963331e-02, -1.029164e-01, -1.931045e-03, 4.369755e-02, -3.337547e-02, -6.063472e-02, 3.906507e-02, -6.084223e-02, 5.785377e-02, 6.353422e-02, 4.220580e-02, 8.446808e-02, 5.791247e-02, -9.001741e-02, 5.729990e-02, 2.335949e-02, -4.050080e-02, 2.350634e-02, -3.940588e-02, -6.289231e-02},
{-1.334890e-01, 4.452934e-01, 9.188880e-02, -9.874661e-03, 3.278995e-02, -1.082767e-01, -1.587753e-01, -1.767188e-01, 1.074715e-01, -2.890886e-02, 1.588553e-01, -3.519793e-02, 9.250942e-02, -3.115255e-01, 4.396273e-02, 3.266722e-02, -1.767704e-01, -7.339681e-02, 2.170242e-02, 5.778609e-02, -3.635302e-02, -3.232854e-03, -9.717834e-02, 2.769674e-01, -4.215342e-03, -1.997106e-01, 9.463829e-02, -3.209625e-02, -6.877956e-02, 1.999846e-01, 1.910286e-01, -5.160355e-02, 6.590121e-02, -1.835790e-01, -1.997584e-01, 1.197192e-01, -2.861504e-01, -1.303179e-02, 1.689214e-01, -1.185127e-01, -1.975082e-02, -1.067482e-01, 9.089296e-02, 3.742516e-02, 1.046751e-01, 1.596593e-02, 9.387593e-02, -1.495932e-01, -3.538881e-01, -1.269192e-01, 1.353011e-02, -8.028574e-02, 3.942474e-02, -3.115890e-02, -5.260589e-02, 4.300975e-02, -1.724418e-02, 2.810823e-01, -1.172876e-01, 2.054330e-01, -1.055309e-01, -6.145075e-02, 5.738346e-02, -5.665187e-02, -1.821130e-01, -1.311777e-01, 4.080465e-03, 3.616289e-02, -1.565548e-01, 1.336503e-01, -1.563074e-01, -3.322520e-02, -1.065064e-01, -5.603136e-02, -8.513436e-03, -1.446741e-02, 2.182447e-01, -4.250164e-02, 2.166175e-01, 8.136731e-02, 3.036386e-01, 3.056280e-01, -5.389767e-02, -7.051189e-04, 7.272779e-04, -1.688418e-01, -1.650277e-01, 9.982938e-02, 1.177408e-01, 8.702726e-02, -1.567217e-01, -3.386289e-02, 2.863186e-01, -1.662744e-01, 6.009065e-01, 1.440090e-02, 4.489798e-01, -2.472088e-01, -1.143958e-01, -1.142772e-01, -5.565664e-02, 1.083732e-01, 2.852111e-01, -7.266533e-02, 1.588418e-01, 1.166722e-01, -2.198970e-01, -1.095835e-01, 3.701149e-01, -5.373323e-02, -1.639494e-01, 4.757980e-02, 4.651663e-02, -3.587252e-02, -3.877321e-02, -1.146850e-01, -5.625872e-02, 1.270582e-01, -8.377218e-02, 1.141394e-01, -5.659466e-02, -1.322156e-01, 2.047273e-03, 5.247942e-02, -1.363322e-01, 9.167280e-03, 8.894988e-02, -5.297214e-02, 2.162287e-01, -5.918825e-02, 1.603430e-03, -4.580573e-02, -2.126056e-02},
{-6.815716e-02, 5.964949e-02, -1.655462e-01, -4.229474e-02, -6.473835e-03, 6.866009e-02, 5.862113e-02, 1.710919e-02, -9.581385e-02, -5.502041e-02, 7.143116e-02, -4.442825e-02, 1.077370e-01, -1.542925e-02, -2.199943e-02, 3.764160e-02, 7.387872e-02, -2.642952e-02, -9.778401e-02, -8.274724e-02, -5.335196e-03, -2.242899e-02, -1.335921e-01, -1.921884e-02, 5.481424e-02, 1.087388e-03, -7.490069e-02, -1.878022e-02, -6.527062e-02, 2.811959e-02, 6.724589e-02, -1.798669e-02, 3.361019e-02, -4.592260e-02, 1.898295e-01, 2.893046e-02, -1.352779e-02, -1.886378e-01, 2.914534e-01, 9.589154e-02, -5.326418e-02, -5.286469e-02, 2.927794e-01, -5.417135e-02, 6.644379e-02, 6.267949e-02, -1.374404e-02, -6.391139e-03, 1.838003e-01, 8.531327e-02, 1.375394e-02, 6.944292e-02, -2.343647e-02, -5.222632e-02, -2.596130e-02, -1.612712e-01, 2.398292e-03, 8.907305e-02, -6.757437e-02, 6.334271e-02, 2.353325e-02, 5.336391e-02, 3.883344e-02, -7.433705e-02, -1.480533e-02, -1.832637e-02, 3.662480e-03, -6.271219e-02, 1.067140e-01, 8.333017e-02, -1.245057e-01, -1.018060e-01, 1.661877e-01, 8.423757e-03, -2.142771e-02, 6.419388e-02, -1.941428e-01, -1.419410e-01, -7.406833e-02, 7.293965e-02, -9.510570e-02, -3.875879e-02, -7.637578e-02, -5.082154e-02, -4.041732e-02, 4.458757e-02, -9.443818e-02, -8.867841e-02, -5.064447e-02, -6.581213e-02, 8.589684e-02, 5.525403e-02, 6.910700e-02, -2.477290e-01, -1.078208e-01, 3.570508e-02, -2.107760e-02, -1.907800e-01, -5.817600e-03, -6.811368e-02, 1.086113e-01, 1.258698e-01, -8.693509e-03, 3.695903e-02, -9.294931e-02, 4.921415e-02, -3.411658e-02, -9.649354e-03, 3.652364e-02, -7.338803e-02, 3.380470e-02, -7.748690e-02, -2.616410e-02, -6.928833e-02, 1.217593e-02, 5.968999e-02, -5.499762e-02, -7.008997e-02, -8.029748e-02, -1.298223e-02, -2.163308e-02, -2.554871e-02, 1.026961e-01, 1.027296e-01, 8.930787e-02, 7.572563e-02, 3.498807e-02, 3.836489e-02, 5.505692e-02, -3.961339e-03, -8.687143e-02, -6.149582e-02, -4.918576e-02},
{-3.785214e-02, 1.075249e-01, -8.012323e-03, 3.675689e-02, -9.547587e-04, 1.483966e-01, 1.098695e-01, -3.243543e-03, 8.497885e-02, -7.543620e-02, -6.716816e-02, 1.176036e-01, 4.430056e-02, -1.078460e-01, -7.820614e-02, 8.321178e-02, -1.652575e-02, -7.847536e-02, -4.655362e-02, 2.108140e-02, 3.714908e-03, 1.286858e-01, 8.063173e-03, -6.110128e-02, 1.209660e-01, -2.586416e-02, -2.513965e-02, 1.733487e-01, 6.145128e-02, 1.126261e-01, 1.058382e-01, -1.202262e-01, 6.588045e-02, 1.635651e-01, -3.280232e-02, 7.957984e-02, -1.897457e-01, -2.063992e-02, 1.047825e-02, 4.620171e-02, 1.471550e-01, -1.175174e-01, 1.948278e-01, 8.501132e-02, -9.696303e-02, -1.493056e-01, 7.467165e-02, 1.695126e-01, -9.401878e-03, -2.424497e-01, -1.144068e-02, 1.204755e-01, -6.228741e-02, -7.058682e-02, 1.354472e-01, 1.329960e-01, 7.245968e-02, -6.487745e-02, -5.445600e-02, 5.462158e-02, 3.523942e-02, -5.037614e-02, -4.697300e-02, -8.588583e-02, 1.729593e-01, -5.310548e-02, -8.509882e-02, -1.056661e-02, 2.634028e-02, -8.992679e-02, 4.429274e-02, 6.053671e-02, -1.117614e-01, -2.538380e-02, -4.194376e-02, -9.872221e-02, 1.547354e-01, -4.059474e-02, 1.357582e-01, -1.026210e-01, 1.859628e-01, -1.121895e-02, -1.169511e-01, -1.028615e-01, 1.108870e-01, -3.448715e-03, 8.043521e-04, 1.366065e-01, -1.445890e-01, -1.264109e-01, 3.492445e-02, 3.718181e-02, 3.099909e-02, 1.957183e-01, 8.056416e-02, -1.032307e-01, -1.016646e-02, -2.122719e-01, -1.410106e-01, 1.262096e-01, 6.417094e-02, 3.790160e-02, -2.111480e-03, -4.714259e-02, 8.686700e-03, -5.310440e-02, 5.886167e-02, 1.892527e-02, -1.613943e-02, -7.833841e-02, 6.628980e-02, -1.042417e-02, 2.402473e-02, -1.586517e-02, -1.285291e-01, -9.350003e-02, 9.701525e-02, -3.211239e-02, -1.018650e-01, -1.106339e-01, 2.068294e-03, 8.257984e-02, 3.856666e-02, 4.685134e-02, -8.849381e-02, 3.172599e-02, -1.033274e-01, -8.637413e-02, -2.587524e-02, 8.338644e-02, -8.562540e-02, 8.885747e-02, -3.815107e-02},
{1.202691e-01, 9.186931e-02, -1.790854e-02, 2.829900e-02, 7.406117e-03, -1.197611e-01, -9.218547e-02, 1.141221e-02, 6.201390e-02, -7.841188e-02, 2.679485e-02, -6.528968e-02, 1.057993e-01, -2.513488e-02, 5.951459e-02, 1.386171e-03, 1.058691e-02, 2.050694e-02, 2.146249e-02, -2.969073e-02, -3.037359e-02, -9.691779e-02, 8.340039e-02, -5.367429e-02, 5.897955e-02, -3.082391e-02, -3.565242e-02, -3.734277e-02, -7.289102e-03, -7.957427e-02, -5.450613e-02, 4.871556e-02, 1.146620e-02, 3.782512e-02, -1.513653e-01, 5.122150e-02, 1.306346e-01, 3.488135e-02, 5.844000e-02, -6.818850e-02, -9.885161e-02, -6.885713e-02, 1.089854e-01, 6.357342e-02, -3.746772e-02, 4.461122e-03, -2.488708e-02, -5.668492e-03, 2.885947e-02, -1.336592e-01, -1.215855e-02, -8.282874e-02, 5.055676e-02, 6.771684e-02, -4.489108e-02, -1.031212e-01, -7.678591e-02, 9.707842e-02, 8.286043e-02, -1.240888e-01, 1.212119e-02, -4.642921e-02, 5.516488e-02, -7.283787e-02, -3.265077e-02, 6.575454e-02, -5.833995e-02, -1.854668e-02, -5.896290e-02, 3.544835e-02, 4.997616e-02, -1.609290e-02, 1.640142e-02, 9.378300e-02, 6.107004e-02, 2.129600e-02, -1.375218e-01, -7.494340e-02, -4.263354e-02, -6.018722e-02, 1.182242e-01, -7.083439e-02, -4.247328e-02, 2.301143e-02, -8.333744e-03, -7.845389e-02, -7.001596e-02, -7.486363e-02, -3.423535e-02, -3.331087e-02, -6.511152e-02, -9.244788e-03, 3.469031e-03, -1.889984e-02, 8.134472e-02, 6.590306e-02, -8.819102e-02, 1.913982e-02, 5.312762e-04, -6.542603e-02, 2.300203e-02, 4.265345e-02, -1.003897e-01, 5.666035e-02, 1.266852e-02, 4.897951e-02, 8.270994e-03, -6.513036e-02, 5.457797e-03, 5.460287e-02, 1.242002e-01, 1.312414e-01, 9.868781e-02, -7.929369e-02, 6.561540e-02, -8.548860e-02, 4.816425e-02, 5.254470e-02, 2.086855e-02, 9.482961e-02, -3.640145e-02, -3.181800e-02, 1.691147e-02, -2.807772e-02, 1.273699e-02, -5.802032e-02, 2.972026e-02, 6.282897e-02, 9.932510e-02, -6.182241e-02, -2.460901e-02, -9.332870e-02, 5.191579e-02},
{-1.219947e-01, 2.855002e-01, -1.810907e-01, -7.872532e-02, 2.874839e-01, -2.825061e-02, -1.807198e-01, -3.660738e-01, -2.293777e-01, 3.137932e-02, -2.678639e-01, -7.219493e-02, 2.822233e-01, -3.161529e-02, 3.329607e-01, -1.131338e-01, 1.784233e-01, 3.512730e-02, 1.595028e-01, 1.202981e-01, -2.081843e-02, -2.584711e-01, -2.466661e-01, 5.482410e-01, -1.875584e-01, -2.977550e-01, -6.070411e-02, -3.952532e-01, -1.746851e-02, -1.811338e-01, -3.341487e-02, 8.510913e-02, 4.712168e-01, -1.596261e-01, -1.950094e-01, 6.788140e-03, -5.898209e-01, -9.720615e-02, 2.304710e-01, -7.728373e-03, 1.376445e-01, 2.274236e-01, -2.454243e-02, -2.070753e-01, 1.618109e-01, 3.180094e-01, -1.543658e-01, -9.374540e-02, -9.575985e-02, -1.011950e-01, 1.026362e-01, -1.259977e-01, -1.878594e-01, 2.978465e-01, 4.020977e-02, -9.824740e-02, -1.410226e-01, -1.211937e-01, 3.721854e-04, 7.033311e-01, -1.912882e-01, -1.792456e-01, -2.893458e-01, -1.201958e-01, -2.835413e-01, 1.644134e-01, 1.203774e-01, 1.342418e-03, -7.034761e-02, 3.926565e-01, -1.644291e-01, -2.707115e-01, -2.183909e-01, -4.341019e-02, 1.528430e-02, 4.368201e-02, 4.486284e-01, 2.693642e-01, 7.606469e-02, 1.699522e-01, 1.725747e-01, 4.041097e-01, 1.717227e-01, 2.234590e-01, -2.604853e-01, -3.080598e-01, 8.951828e-02, 1.747354e-01, 3.291648e-01, 1.039488e-01, -2.203923e-01, 3.455990e-01, 5.474720e-01, -1.033563e-01, 4.221812e-01, 1.795650e-01, 1.790571e-02, -6.009533e-01, 2.823838e-01, -3.789087e-01, -5.623013e-02, -4.592118e-01, -4.854513e-02, 2.750987e-01, 1.599582e-02, 6.619381e-02, -1.609933e-01, -3.788235e-02, 2.843932e-01, 2.066976e-01, -2.077484e-01, 2.358501e-01, -1.440425e-01, -4.288254e-02, -7.174771e-02, 8.352198e-02, -1.242991e-01, 1.189859e-01, -4.093557e-02, 1.402627e-01, 1.095013e-01, -2.046557e-01, 7.838291e-02, 2.481350e-01, 2.094387e-01, 9.165657e-02, 2.308764e-01, -1.187660e-01, 2.525608e-01, -5.073241e-03, 3.256384e-02, 3.686216e-01, 1.819920e-01},
{7.028569e-02, 5.887755e-02, -4.944168e-02, -6.455866e-02, 5.823771e-02, 1.022389e-01, 4.016545e-02, -3.079562e-02, 1.312796e-02, -7.786338e-02, -1.924229e-02, 6.484159e-02, -3.727063e-02, 3.953040e-02, 7.663347e-03, -2.277966e-02, -2.661502e-02, 2.216049e-02, 2.098427e-03, -3.869281e-02, -1.003134e-01, -5.499204e-02, -6.802070e-02, -8.334284e-02, -1.143898e-02, -2.566131e-02, -1.638851e-02, 6.070283e-03, -5.646408e-02, -2.268317e-02, 6.415180e-03, -8.326334e-02, 9.766011e-02, -1.406567e-02, 1.307617e-01, 5.223929e-02, -2.759675e-02, -1.073664e-01, 1.252014e-01, 3.786514e-02, 8.180153e-02, -7.742603e-04, 2.125901e-01, -1.299922e-01, -1.141168e-01, -2.201841e-02, -5.094496e-02, -2.733638e-02, -2.317461e-03, -3.505165e-02, -1.085275e-01, -4.896593e-02, -3.068821e-02, -7.137032e-02, 2.029007e-02, -9.148454e-02, -3.477402e-02, -7.710429e-02, 6.887050e-02, 1.231862e-01, 8.387551e-02, -6.943497e-02, -6.307942e-02, 1.341015e-02, -3.364625e-02, 3.767242e-02, -9.083191e-02, 2.823457e-02, -2.499699e-02, 1.742782e-02, 2.028071e-02, -2.952991e-03, 6.800110e-02, -5.923971e-02, -5.329116e-02, 5.181117e-03, 1.009161e-01, -6.574816e-02, 1.820051e-02, -1.105488e-01, -3.899843e-02, 9.119234e-02, -3.067414e-02, 3.123499e-02, -7.335135e-04, 9.150416e-02, -7.187524e-02, -5.492483e-02, -1.033280e-01, -8.785631e-02, -2.973357e-02, -1.601638e-02, 6.838174e-02, -4.275272e-02, -1.899876e-02, -6.174333e-02, 6.128205e-02, -1.682865e-01, -1.586952e-03, -1.938414e-02, -5.938018e-02, 1.137766e-01, 1.705993e-02, 3.164720e-02, 7.356305e-02, 1.612899e-02, 9.143697e-02, 4.497448e-02, -2.032768e-02, -1.134301e-01, 9.661239e-02, -1.171217e-01, -3.356832e-03, 2.593059e-02, 3.200946e-02, -4.069403e-02, -6.757170e-02, -7.664403e-02, 5.629128e-03, 1.181782e-02, -4.210899e-02, -4.374049e-02, 1.106785e-02, 5.966321e-02, -1.015103e-01, 6.789694e-02, 1.324673e-02, -7.602071e-02, 1.297399e-02, 8.232100e-02, 3.049783e-03, 5.479044e-02, -8.994630e-02},
{2.287324e-01, -4.625072e-02, 3.307738e-03, 4.934459e-02, 8.894757e-02, -6.225339e-02, -1.140803e-01, -4.854382e-03, -1.081676e-01, -4.158236e-02, 1.079253e-01, -4.659646e-02, -3.616691e-02, 3.408858e-02, 4.122007e-02, -9.544568e-02, -7.273374e-02, 2.757606e-02, 5.583789e-02, 8.435929e-02, -3.878609e-02, -4.659046e-02, 1.170552e-02, 6.802697e-02, -5.535959e-03, 3.912104e-02, -7.772241e-02, -7.905632e-02, -7.173444e-02, -4.539976e-02, -3.424187e-02, -1.267097e-02, 4.853597e-02, -5.314247e-02, -1.408838e-02, -1.301064e-01, 5.944824e-02, -8.095591e-03, 7.893189e-02, 9.645146e-02, -1.008541e-01, 8.049133e-02, 1.723680e-01, -1.387769e-01, 8.500368e-02, 1.082353e-01, -1.026023e-01, -1.107490e-01, 3.522509e-02, -5.848940e-02, -3.203508e-02, 4.038087e-02, -2.214099e-02, 1.007521e-01, 5.052164e-02, -1.101268e-01, 1.004079e-02, 5.620349e-02, 1.071728e-01, 3.772138e-02, -5.735172e-02, -9.629654e-02, 4.591005e-02, 1.747415e-02, -1.069147e-01, 1.323533e-02, -3.300362e-02, -7.262278e-02, -6.832518e-02, 5.095892e-02, 3.680215e-02, 3.877214e-02, -1.695569e-04, 5.937334e-02, -9.171234e-03, -2.275096e-03, -1.050333e-01, -7.969474e-02, -1.360323e-02, 5.315708e-02, -3.488184e-02, 2.999646e-02, 7.293332e-02, -1.017122e-02, -7.835258e-02, -1.283632e-01, 8.178043e-02, 6.395878e-02, 1.483063e-01, 1.041611e-01, -6.619797e-02, -1.449511e-01, -7.118610e-02, -1.121049e-01, -2.183487e-02, 9.227573e-02, -4.512989e-02, -2.319710e-01, 2.827751e-02, 1.193807e-02, 3.620736e-02, 6.698085e-02, 4.142734e-02, -2.521183e-02, 9.344565e-02, -1.798994e-02, 3.169512e-02, -2.078981e-02, -1.133832e-01, 1.974054e-03, -5.527313e-02, 1.123283e-01, 8.906896e-02, -7.742666e-02, 8.937119e-02, 8.901384e-02, -4.813949e-02, -9.602182e-03, 3.006289e-02, 8.173219e-02, -2.024520e-02, -1.114554e-01, 3.183738e-02, 9.548730e-02, -5.259622e-02, 1.425399e-02, 1.134708e-01, -3.179052e-02, 4.772486e-02, -1.078653e-01, 1.605447e-02, -6.144203e-02, 1.197199e-01},
{-3.667347e-02, -6.407216e-02, -5.926451e-02, -1.802277e-02, 3.340798e-03, 7.839569e-02, -6.070086e-02, -4.209706e-02, 9.126783e-02, -9.417847e-02, 6.563234e-02, 8.543967e-02, -5.394658e-02, -5.513203e-02, -5.877810e-02, 7.359548e-02, -3.798355e-02, 5.124557e-02, 6.471879e-03, -9.357167e-02, 5.944144e-02, 1.178754e-01, 4.032414e-02, 3.617845e-02, 9.149719e-02, -4.221004e-02, -2.675098e-02, -3.044382e-02, -1.438160e-02, 7.750712e-02, 6.260020e-02, -7.894356e-02, -4.316849e-02, 8.198219e-02, 6.551313e-03, 1.009901e-02, -8.148892e-02, 5.268339e-02, -1.117821e-03, 5.685701e-02, -2.407669e-03, -9.949175e-02, 2.338967e-02, -6.333274e-02, -4.553558e-02, 4.054740e-02, -3.581404e-02, -6.340303e-02, -8.005416e-02, 2.816589e-02, -1.206622e-01, -3.023778e-02, -8.544542e-02, -7.662372e-04, -1.317114e-02, 8.588321e-02, 7.377926e-02, -1.200212e-01, 6.969311e-02, 7.131800e-02, 1.667041e-02, 6.850156e-02, 6.371708e-03, -5.378037e-02, 7.468974e-02, -4.625425e-02, 1.018299e-03, -7.577860e-02, -9.919155e-03, 1.040230e-02, -3.276185e-02, 9.645888e-02, -4.654903e-03, 4.530044e-02, -9.647512e-02, 2.105477e-03, -2.745790e-02, 7.581869e-02, 6.252744e-03, 7.508168e-04, -2.835818e-02, 4.916720e-02, -2.587143e-02, -2.884440e-02, -3.780532e-02, 7.686709e-02, 7.092431e-02, 1.024613e-01, 1.890503e-02, 3.252888e-02, -6.823602e-02, 2.714760e-03, 4.571257e-02, 1.597854e-02, 6.912617e-02, -6.763304e-03, 5.980277e-02, -6.629080e-02, 7.339260e-03, 8.586334e-02, -3.027808e-02, -1.995604e-02, -4.472376e-03, -1.845037e-02, 7.161561e-02, -8.586306e-02, 6.954042e-02, -3.435904e-02, -5.402806e-02, 5.229830e-02, 5.133537e-02, 2.463746e-02, -6.114333e-02, 7.758677e-03, 3.577743e-02, -8.948546e-03, -8.898287e-03, -1.757920e-02, 5.968430e-02, -6.027518e-02, 6.345420e-02, 3.727272e-02, 2.732009e-02, -5.386728e-02, -2.851828e-02, 1.049920e-01, 7.041707e-03, -1.466376e-01, -5.844720e-02, 5.228483e-03, -9.515279e-02, 3.225168e-02, 5.082456e-02},
{-1.729641e-01, 5.537265e-03, -5.617273e-02, -9.694717e-02, -3.364584e-01, 1.248167e-03, 7.882614e-02, -3.011687e-02, 5.101250e-02, 3.372368e-02, 9.740648e-02, -4.310451e-02, -1.635299e-01, 3.015783e-02, -8.145860e-02, 2.412912e-02, -8.940231e-02, 6.167593e-02, 6.308920e-02, 7.310488e-03, -5.748244e-02, 6.545320e-02, -3.841022e-02, -2.184284e-02, 6.404788e-02, 1.531317e-01, 2.762079e-02, -5.106123e-03, 6.746123e-03, 1.165322e-01, -9.410521e-02, -8.508989e-02, -8.258948e-02, 2.145668e-03, 1.470781e-01, 8.245514e-02, 7.496220e-03, 9.915799e-03, -7.593141e-03, 1.049200e-01, 1.684450e-01, 8.537564e-02, -3.451217e-01, -3.452599e-01, 3.136735e-02, 9.315837e-02, -1.133554e-01, -3.035325e-03, 1.066158e-01, 1.690690e-01, -2.788112e-01, 3.472159e-02, 2.873576e-02, -1.459509e-01, 7.227471e-02, 3.149469e-02, 5.794680e-02, 1.058996e-01, -9.159750e-02, -1.050688e-01, -1.214742e-01, 7.411335e-02, 2.368083e-02, 5.962928e-02, -3.118886e-02, -1.098322e-03, -6.533988e-02, 6.717744e-02, 7.802372e-02, -4.243434e-02, -4.416888e-02, -2.582632e-02, 1.167337e-01, -7.511524e-02, 1.772984e-02, -8.708770e-02, 3.441123e-01, -1.173513e-01, 1.011789e-01, -3.538446e-02, -1.239292e-01, 7.711285e-02, -6.346138e-02, -2.488030e-03, 5.251372e-02, 3.211226e-02, -2.792576e-02, 3.096475e-01, -9.163730e-02, 1.062888e-02, -3.029337e-02, -1.757964e-01, 8.384452e-02, -1.061643e-01, 4.100509e-02, -1.411738e-02, 1.091149e-01, 1.982926e-01, -9.858019e-02, 5.415228e-02, 6.856121e-02, -1.421824e-02, 7.632378e-02, 6.514397e-02, 8.923399e-02, -1.494883e-02, 2.522771e-02, 7.202959e-02, 5.344814e-02, 9.497721e-02, 1.216338e-01, -1.438351e-01, -3.025362e-01, -7.278759e-02, -5.326660e-02, 2.485481e-02, -2.416411e-02, -1.743543e-02, 7.170004e-02, 1.237756e-02, -3.138238e-02, 1.343264e-01, -6.388959e-02, -4.408306e-02, -2.010423e-02, 3.297163e-02, -2.781932e-02, -1.609730e-02, -1.216573e-01, -8.151708e-02, 2.240771e-02, 3.202957e-02, -1.019399e-01},
{6.092896e-03, 5.168813e-02, 1.042810e-01, -5.640822e-03, -4.539408e-03, 9.550873e-02, -3.070154e-02, 1.776999e-03, 5.458673e-03, -3.347467e-02, 6.761328e-02, -5.997844e-04, -3.785468e-02, 7.920879e-03, -7.488177e-02, 7.433426e-02, -4.199563e-02, 3.492147e-02, 1.586497e-02, -1.205348e-03, -9.702781e-02, 2.095222e-02, -4.300506e-02, -1.225544e-01, -3.514015e-02, 8.128243e-03, -3.998017e-02, 5.037748e-02, 2.647050e-04, 2.885347e-02, -3.962145e-02, -1.171789e-03, 6.590428e-02, -1.504239e-02, -1.966831e-02, 8.361288e-02, 9.361420e-02, 3.436767e-02, 6.547914e-02, -6.410126e-02, -6.492209e-02, -8.069580e-02, 1.357522e-01, -5.934135e-03, 5.204580e-02, 3.882507e-02, 6.900546e-02, 2.246386e-02, -2.823353e-02, -1.730196e-01, -5.591228e-02, -4.859426e-02, 6.509352e-02, 6.951292e-02, 5.308954e-02, 6.133223e-02, 3.293718e-03, -5.183232e-02, 2.128632e-02, 7.553976e-02, -3.119132e-03, -3.743902e-02, -2.073677e-02, 6.153600e-02, -4.986583e-02, -1.944860e-02, 5.122451e-02, -4.841311e-02, 1.934961e-04, -8.389712e-02, -1.010322e-01, 2.135945e-02, 6.903113e-02, -6.190110e-02, -3.343713e-02, 5.385072e-03, -5.195428e-02, 6.665465e-04, 3.958353e-02, 4.867794e-02, 1.157340e-04, 2.992139e-02, -7.631081e-02, -2.822333e-02, 1.008562e-01, -7.293609e-02, -8.199968e-02, -6.312434e-02, -9.354367e-02, 4.228827e-03, -7.069373e-03, -1.871154e-02, -8.160459e-02, -1.045223e-01, 1.673851e-02, -9.978097e-02, -2.405665e-02, 5.487076e-03, 2.074562e-02, -3.712581e-02, 8.690174e-02, 2.343684e-02, -4.644740e-02, -2.975692e-02, -6.276588e-02, 3.458390e-02, -4.803285e-04, 5.367007e-02, -3.305080e-02, -9.911084e-02, 3.792550e-02, 3.175226e-02, -8.826821e-03, 4.503476e-02, -8.290954e-02, -4.625678e-02, 4.436521e-02, -4.289301e-02, -8.481602e-02, -2.780837e-02, -7.772764e-02, -6.359772e-02, 6.028625e-02, 4.068945e-02, -3.290888e-02, -6.388291e-02, -3.166258e-04, -5.921327e-02, -4.907247e-02, 5.402444e-02, 1.007924e-02, -6.975580e-02, 1.743198e-02},
{6.060334e-02, -9.955267e-02, 4.536996e-02, -1.440206e-02, -2.714710e-02, 2.272455e-03, 1.316087e-02, -9.486265e-03, 7.528888e-03, 3.632889e-02, 1.961793e-02, 1.841654e-02, 1.102535e-01, -6.686624e-03, -3.971589e-02, -2.080252e-02, -3.760885e-02, 8.588511e-02, -5.883659e-02, -4.973093e-03, 1.101406e-01, 3.055243e-02, 8.278213e-02, 4.003114e-02, -8.816769e-02, -2.968028e-02, -2.867157e-02, 5.733773e-02, 4.761033e-02, -5.421527e-02, -5.888205e-02, -3.698011e-02, 9.506336e-02, -5.754595e-04, -8.606005e-02, 1.836968e-02, 4.271588e-02, 2.762157e-02, -6.234230e-03, 3.053895e-03, -4.433861e-02, 9.977309e-02, 7.853239e-02, -3.165560e-02, -5.684581e-02, 1.161025e-03, -4.743725e-02, 3.871507e-06, 4.831361e-02, -7.145184e-02, 1.972379e-02, 8.476885e-02, 3.039142e-02, -3.712024e-02, 5.397201e-02, -1.116656e-01, -3.968564e-02, -7.761417e-02, 4.554794e-02, 2.310095e-02, -4.699197e-02, -1.100851e-02, -8.051518e-02, -5.945829e-02, -4.779873e-02, 9.415163e-03, 7.134358e-03, 5.296542e-02, -7.911015e-02, -5.280218e-02, -2.099280e-02, 3.918485e-02, -4.271245e-02, 4.618271e-02, 6.563212e-02, -6.572575e-02, -2.328242e-01, 1.531331e-02, 5.024623e-02, -6.445004e-02, -6.578646e-03, -2.354643e-02, 3.000908e-02, 2.633718e-02, 1.381279e-02, 5.303302e-02, 7.305682e-02, -8.286064e-02, 1.524191e-02, -1.348233e-02, -2.054401e-02, -2.212764e-02, 7.984836e-02, 1.012860e-01, 1.837410e-02, 7.984876e-02, 3.817248e-02, -1.560000e-01, -1.666806e-02, 3.387821e-02, 5.927121e-02, -3.205553e-02, -7.216167e-02, -1.245972e-02, -3.969467e-02, 8.319082e-03, -6.382781e-02, -4.279194e-02, -1.365054e-02, 6.422073e-02, -4.722252e-03, 1.306845e-01, 6.409299e-02, -8.251604e-02, -5.778984e-02, -7.652737e-03, -6.800542e-02, -5.943314e-02, -6.452505e-02, -7.299846e-02, 6.339356e-02, 7.051518e-02, 7.103945e-02, 1.047094e-01, 1.229190e-02, -8.545385e-02, -1.177702e-02, 1.870769e-03, 3.361963e-02, 1.055739e-03, -3.890246e-02, 8.474037e-02, 5.522971e-02},
{-8.394658e-02, -9.269780e-02, -8.100360e-02, -5.253930e-02, -1.278501e-01, -5.771452e-02, -6.328337e-02, 4.949368e-02, 6.329346e-02, -1.019359e-01, -1.499179e-02, -9.491740e-02, -6.044850e-02, -8.709423e-03, 4.056352e-02, -7.636531e-02, 1.198946e-02, 6.736272e-03, -1.092254e-01, -2.109220e-02, 2.159541e-02, 1.629365e-02, 4.251589e-02, 5.866204e-02, 3.094586e-02, -5.256321e-02, 1.530588e-02, -9.513486e-03, 4.024334e-02, -1.199886e-01, 2.976378e-03, -9.585410e-02, 3.393454e-02, 5.899879e-02, -4.907604e-02, -1.688971e-02, -1.691131e-01, -1.454855e-01, 8.694276e-02, -5.891966e-02, 5.871775e-02, -1.116268e-01, -3.949447e-02, 1.879841e-02, -5.600056e-02, 1.447110e-02, -1.408662e-02, 2.296728e-02, -2.482405e-02, -2.899940e-01, 5.014947e-02, -5.050169e-02, -1.077040e-02, -7.901192e-03, 9.221992e-02, -9.949961e-02, 5.910110e-02, 2.017409e-01, 5.540021e-02, -1.330907e-01, -7.795100e-02, -5.690253e-02, 7.187868e-02, -1.082618e-01, 1.173154e-01, -1.804530e-03, 6.042009e-02, -2.031750e-03, 1.137810e-02, 1.249086e-01, 7.899894e-02, -2.894443e-02, 6.055934e-02, -1.467807e-01, -7.252988e-02, 5.611914e-02, -1.049319e-01, -4.259456e-02, -1.143223e-01, 4.398039e-03, 2.746955e-02, 1.118208e-01, 5.018010e-02, 2.465417e-02, -4.285094e-02, -1.972818e-02, -1.110084e-02, 3.044007e-02, -1.862902e-02, 6.959241e-03, 1.425270e-03, 9.628680e-02, 1.935444e-01, 3.217952e-02, 1.293487e-01, -4.610514e-02, 8.592654e-02, -3.624957e-02, -4.546081e-02, 6.186186e-03, -3.499800e-02, 5.929472e-02, 1.321094e-01, -3.996914e-02, -2.013936e-02, -1.315151e-01, -1.510554e-02, -1.478039e-02, 6.058487e-02, -1.024576e-01, 1.628521e-01, 1.537437e-01, 5.526081e-02, 4.409359e-02, -2.813312e-02, -5.537981e-02, 6.220755e-03, -9.446220e-02, -1.045406e-01, -2.931247e-02, -8.592602e-03, 6.609020e-02, -7.120614e-02, 5.173117e-02, -5.475395e-02, 3.747630e-02, -5.294698e-02, -1.387419e-01, -3.538288e-02, -8.039461e-02, 2.128853e-02, -1.156306e-01, -1.354608e-01},
{1.180845e-02, 9.660405e-02, -7.044183e-02, -1.057902e-01, -1.257474e-01, 1.236161e-01, 4.031718e-02, 5.348152e-02, -1.898031e-02, 2.427672e-02, 9.164251e-02, 5.562387e-02, -1.915224e-02, -7.028601e-02, -4.443231e-02, 1.047443e-01, -4.683478e-02, 2.211154e-02, 6.184139e-02, -9.530266e-02, -9.455390e-02, 5.224295e-02, 5.791374e-02, -9.448709e-03, 2.582259e-02, 4.060492e-02, 7.369703e-02, 1.064455e-01, 7.459670e-03, 7.269889e-02, 4.166819e-02, -9.362468e-02, -5.353705e-02, 9.334289e-02, 2.479460e-02, 8.884723e-02, -1.022740e-01, 6.275070e-02, -1.068557e-01, -5.554964e-02, 7.270207e-02, -7.216860e-02, -6.974026e-02, 1.436921e-02, -9.622148e-02, -2.740698e-02, 9.670176e-02, -8.369644e-03, 6.407277e-02, -2.264032e-01, -3.070315e-02, -5.646811e-02, -2.792755e-02, -1.353960e-01, 1.308747e-02, 5.099162e-03, -8.634137e-02, -4.544555e-02, -8.143410e-04, -1.189822e-01, 9.309638e-02, -4.727484e-02, 2.316458e-02, 1.921536e-02, 9.966779e-02, 4.211939e-02, 1.555126e-02, 2.847684e-02, 2.598403e-02, -1.700902e-01, 5.808193e-02, -7.995071e-02, 1.186228e-03, -7.836644e-02, -5.765468e-02, -5.434823e-02, 1.069864e-01, -1.401387e-02, 3.564423e-02, 9.389128e-04, 2.622646e-03, 8.870358e-02, -1.068896e-01, -5.912685e-02, -3.742411e-02, -4.811730e-02, -4.463072e-02, 1.327424e-01, -2.493644e-02, -6.426983e-02, 5.207240e-03, 5.192669e-02, 1.967987e-02, -3.578488e-02, -4.295517e-02, -7.052328e-02, -4.399723e-02, 1.349938e-02, 4.958269e-02, 3.296259e-02, -3.151037e-02, 7.576696e-02, -1.970679e-02, 6.725645e-02, 7.253329e-02, 4.316462e-02, 8.080821e-02, 4.343536e-03, 1.186757e-02, -1.670999e-02, 8.639237e-02, 1.339737e-02, -4.170505e-02, -6.845222e-02, 1.120861e-02, -1.982343e-02, -4.987893e-02, 1.800480e-04, -7.174825e-03, -3.243969e-02, -6.995730e-03, 1.021210e-01, -9.387135e-02, 6.301504e-02, 3.359802e-02, 1.046291e-01, -5.805787e-02, -1.292194e-01, -5.767389e-02, 9.636788e-02, 2.848610e-03, -3.471517e-02, -6.230902e-02},
{2.363680e-02, -6.937209e-02, -4.339036e-02, -3.553344e-02, -8.869238e-02, -3.081097e-03, -4.422650e-04, 4.126559e-02, 7.496572e-02, 5.415537e-02, 1.758749e-02, 5.035761e-02, -4.453211e-02, 1.919011e-02, -6.658819e-02, 5.975920e-02, 4.055491e-03, 8.439412e-02, 2.800568e-02, -7.407830e-02, -4.623262e-03, -7.946846e-03, 2.170355e-03, -1.071457e-01, 9.452831e-02, 1.164421e-01, -4.557227e-02, -6.927668e-02, 2.698440e-02, 1.624990e-02, -3.915388e-02, -5.308226e-02, 2.929153e-02, -8.845646e-03, -1.753193e-02, -5.630373e-02, -6.705438e-02, -5.024218e-02, 1.299641e-02, 2.366328e-02, 8.879083e-02, 6.411312e-02, -8.023296e-02, 1.390914e-02, -5.863018e-03, 7.072133e-03, 5.208352e-02, -3.417677e-02, 3.644349e-02, -2.446039e-02, -1.363466e-01, -4.821172e-02, -7.800163e-02, -7.197231e-02, -1.176718e-02, -8.510866e-02, 1.057475e-02, -3.514721e-02, 1.229169e-02, 1.059574e-01, -6.680993e-02, 6.776810e-02, -2.259808e-02, -6.358706e-02, 7.881605e-02, 5.706450e-02, -3.115941e-04, -4.439776e-02, 5.040036e-02, -5.052545e-02, 3.049513e-02, -1.937557e-02, 5.540323e-02, -2.160232e-02, -5.560912e-02, -5.024799e-02, 4.037702e-03, -6.793936e-02, -1.240538e-02, -2.749170e-02, -1.518492e-02, -6.248998e-02, -8.346207e-02, -7.885215e-02, 2.280874e-02, -9.806580e-03, -3.546018e-02, 1.660241e-01, 5.167693e-02, -8.609315e-03, -4.737569e-03, -1.479887e-01, -2.988767e-02, -1.428086e-01, 5.672693e-03, 1.027860e-01, -5.323886e-02, -1.167975e-01, 7.841508e-02, 3.913177e-02, 1.651237e-03, -4.363333e-02, -6.043574e-02, 6.567115e-02, 1.267131e-02, -8.684105e-02, -2.036378e-02, 1.777255e-02, -2.149587e-01, 8.546134e-02, 4.085056e-03, 5.089425e-02, -1.696577e-01, 1.040381e-02, 1.794577e-03, -5.379251e-02, -2.804724e-02, 1.737838e-02, 3.596476e-02, 1.397992e-03, -7.076795e-02, 1.280678e-01, -4.595588e-02, -3.151042e-02, 6.158553e-02, 4.799030e-03, -1.288300e-02, -3.161545e-02, -8.922186e-02, -2.861581e-02, -2.968181e-03, -6.323775e-02, 5.445437e-02},
{-1.769188e-02, 2.498915e-02, 5.438226e-02, -3.720983e-02, 1.014775e-02, 4.767137e-02, -1.637821e-02, 7.650090e-02, 3.085004e-02, 5.143812e-02, -2.907808e-02, -6.143823e-02, -1.395047e-03, 5.492940e-02, 6.614056e-02, 6.762655e-02, 6.114639e-02, 3.643889e-02, -2.013168e-02, 1.168225e-02, -1.023203e-01, -1.930033e-02, 2.072295e-02, 5.194484e-02, 6.109118e-02, 4.390915e-02, -1.383125e-02, -3.153276e-02, 1.157223e-02, -2.021706e-02, -9.881762e-02, 7.935789e-02, -3.404962e-02, 5.618417e-02, -2.635173e-03, -5.388932e-02, 4.679539e-02, 7.826506e-02, 2.691821e-02, -7.023089e-02, 9.608971e-02, -7.309837e-02, -1.979298e-01, -5.896406e-02, 7.169903e-02, 3.511063e-02, -1.748760e-02, -4.310067e-02, -6.849083e-02, -1.359748e-02, 5.940060e-02, -5.632462e-02, 8.673044e-02, 2.673346e-02, 1.969806e-02, -7.193526e-02, 7.531535e-02, 5.736936e-02, -7.336722e-02, -1.490278e-02, 5.161138e-02, -6.956617e-02, -9.250357e-03, -8.510354e-02, 2.255962e-02, -3.804943e-02, 1.687831e-02, 5.053506e-02, -2.696909e-02, -1.558607e-02, -3.720658e-02, 6.691120e-02, -1.194140e-02, 1.232577e-02, -2.072683e-02, -2.515602e-02, 3.880141e-02, -6.270790e-02, 6.356116e-02, -4.161010e-03, -1.034266e-01, 5.824788e-02, -7.678159e-02, 8.564223e-02, -2.691905e-02, 6.727943e-02, -2.976634e-02, 9.150615e-02, 6.543931e-02, 6.455260e-02, 3.385818e-03, 7.365619e-02, 8.124470e-02, 3.530456e-02, 1.079974e-01, -1.008987e-02, 2.699717e-02, -5.207281e-03, 2.097224e-02, -8.601297e-02, -5.186546e-02, -5.022161e-03, -3.477637e-02, 2.889596e-02, 6.908488e-02, 2.169870e-02, 8.126885e-02, -4.246843e-02, 4.922916e-02, -2.662294e-02, 4.140002e-02, -1.129066e-02, -4.624136e-02, -5.787356e-02, -7.882151e-02, -6.388514e-02, -7.246692e-02, 7.455388e-02, -3.234389e-03, 8.655085e-03, 7.365189e-02, -6.795063e-03, -7.909032e-03, 2.611517e-02, 3.116746e-02, -5.613647e-02, -1.612355e-03, -5.501529e-02, -4.113038e-02, -5.577709e-02, 9.003295e-02, 1.557069e-03, -2.769960e-02},
{-6.694469e-03, 7.593307e-02, 7.271542e-02, -1.889121e-01, 4.175400e-02, -7.057489e-02, -2.366415e-02, 3.374463e-02, -8.764168e-02, 3.951341e-02, 4.512035e-02, 1.698636e-02, 3.830803e-02, -8.663318e-02, -5.002958e-02, 8.662643e-02, 1.059628e-02, -5.050800e-02, -2.168965e-02, -7.272893e-02, -5.715379e-02, -2.437392e-02, -3.276436e-02, -3.510949e-02, -2.998053e-03, -2.371540e-02, -7.057893e-02, -8.491193e-03, 5.147453e-02, -9.513643e-02, -3.235147e-02, -3.578408e-03, -8.328759e-02, 2.902728e-02, -3.485786e-02, 3.715380e-02, -7.646771e-02, -4.600345e-02, 1.369171e-01, -5.231151e-02, -9.415840e-02, 3.440537e-02, 1.316872e-01, 5.271057e-02, 3.587165e-02, -2.321109e-02, -7.136871e-03, 5.242145e-02, -1.758687e-02, -1.058090e-01, -8.778068e-02, 7.568351e-02, -4.694855e-02, 8.031345e-02, -4.642056e-02, 3.319803e-02, -4.557303e-02, -5.657791e-02, 1.504169e-02, 3.808117e-02, 1.827768e-02, -3.009017e-02, -9.666537e-02, 1.326784e-02, 9.557277e-02, -6.771696e-02, -1.428516e-02, 5.246003e-02, -7.098430e-02, -1.621514e-02, -7.575171e-02, -5.167133e-02, -3.477285e-02, -8.356203e-02, -1.242744e-02, -7.796845e-02, -9.052619e-02, -5.198098e-02, 6.200660e-02, 6.122532e-02, 1.273122e-01, 3.753637e-02, -6.575914e-02, 7.204539e-02, 9.025735e-02, -4.139190e-02, 5.738883e-02, -3.335982e-02, -3.894129e-02, 4.363972e-02, -1.918089e-02, -5.516576e-02, 5.137398e-02, -1.292711e-01, 8.400740e-02, -8.842976e-02, -3.393378e-03, -9.924582e-02, 1.766903e-02, 6.400482e-03, 2.752871e-02, 4.895093e-02, 1.515966e-02, 3.312515e-02, -4.468725e-02, 1.158664e-02, 6.154460e-02, 9.561358e-02, -4.935971e-02, 8.936847e-03, 3.920902e-02, -3.780299e-02, 1.979700e-02, 3.927429e-02, -3.534444e-02, 4.612663e-02, -5.427565e-02, 4.934105e-02, -4.867275e-02, 5.311518e-02, -5.529644e-02, -5.497429e-02, -1.123862e-02, -4.342244e-02, 5.276762e-02, -2.576610e-02, 4.639727e-02, -2.076350e-02, 5.320472e-02, -5.397994e-02, -8.446899e-02, 1.874311e-02, -5.519553e-02},
{1.067408e-01, 3.971101e-02, 2.483912e-03, -1.279361e-01, 2.585422e-02, 5.682001e-02, -3.803321e-02, -9.602727e-03, 2.225053e-02, 6.557389e-02, 7.672646e-02, 6.678744e-02, -9.953695e-02, 5.432332e-02, -7.447446e-02, -4.825868e-02, 5.527541e-02, 7.205528e-02, -5.419607e-02, 4.731254e-02, -1.515289e-01, -2.998723e-02, 7.196179e-02, 2.735101e-02, -5.466819e-02, 9.068268e-02, 4.390473e-02, 7.323299e-02, -1.896457e-02, -7.188911e-02, 2.507509e-02, -7.701147e-02, -6.153393e-03, -1.037665e-02, 7.542792e-02, 1.144030e-03, -2.286224e-02, 2.276220e-02, 3.927773e-02, -4.962660e-02, 1.204130e-01, -5.889421e-02, 1.067823e-01, -3.763175e-02, 3.040535e-02, -7.014575e-02, 4.397198e-02, -4.162696e-02, -1.523572e-02, -1.096814e-01, -9.027659e-02, 7.156229e-02, 5.372958e-02, 2.027909e-02, 7.342713e-02, -8.475285e-03, 9.291344e-02, -3.015437e-02, -7.378021e-02, 6.091304e-02, -7.423263e-02, -6.186763e-02, 6.493451e-02, -2.559489e-02, -2.473487e-02, -5.300783e-04, 3.857554e-02, -2.490187e-02, -7.611370e-02, 5.875257e-02, -7.644185e-03, -4.014988e-02, -1.588413e-02, 5.318034e-02, -2.355017e-02, 4.780931e-02, 8.685201e-02, 3.617023e-02, -4.954167e-03, 3.669954e-02, -1.823637e-02, 1.071668e-01, -3.022280e-02, 5.494604e-02, -5.952331e-02, -1.555648e-02, 4.295398e-02, -3.045734e-02, -8.716527e-02, 6.470346e-02, -2.935843e-02, 3.213510e-02, -3.547642e-02, -8.178173e-02, 1.079125e-01, -3.067673e-02, 4.028014e-02, 1.118472e-03, -7.054107e-02, 5.587678e-02, -2.612140e-02, -6.045672e-02, -1.498109e-02, 5.833931e-02, -4.576906e-02, 2.519631e-02, -6.424498e-02, -7.666955e-02, -3.208791e-02, 6.637942e-02, 1.361932e-01, 6.756718e-02, -4.424099e-02, -7.309674e-02, -6.183035e-02, 3.059824e-02, 4.749492e-02, 8.551378e-02, -5.175558e-02, -4.490644e-02, -7.863201e-02, -6.382608e-02, -3.806964e-02, -1.994374e-02, -2.628759e-02, 5.962070e-02, 5.817543e-02, -4.709103e-02, 7.096390e-02, -9.878334e-02, -1.709899e-02, 1.019137e-02, -3.930902e-02},
{-5.398826e-02, -1.117662e-01, -8.906998e-02, 1.129033e-01, -2.089407e-01, -1.040138e-01, 2.860201e-02, -9.285068e-03, 1.702074e-01, -3.315975e-02, 1.453491e-01, -4.472914e-02, -1.416114e-03, -1.846146e-02, 3.147652e-02, 6.449285e-03, 1.682626e-01, -1.177379e-01, -1.137582e-02, -6.809221e-02, 1.881308e-01, -1.097974e-01, -2.573276e-02, -6.782189e-02, 8.820728e-02, 6.893144e-02, -1.524564e-01, -1.670309e-02, 6.176211e-02, -1.700830e-01, -1.098458e-01, 4.004611e-02, -1.689428e-01, 1.186496e-02, 2.979970e-01, 8.784391e-02, 1.118782e-01, -1.297957e-01, 2.701917e-01, -1.852124e-01, 1.997525e-01, 3.232578e-03, -4.030826e-01, -4.584523e-01, -7.084302e-02, -9.266533e-03, -8.736429e-02, 5.991624e-02, 2.645948e-01, 8.217745e-02, -1.651877e-02, 7.459285e-02, 1.300468e-01, 1.648588e-02, 4.834151e-02, 4.519647e-02, 4.950317e-02, 1.118195e-01, -3.505082e-02, -3.146835e-01, -7.003978e-02, -1.439634e-01, 2.330148e-01, 6.477929e-02, -7.492775e-02, -5.321701e-04, 7.072532e-02, -9.046561e-02, 5.955188e-02, 1.719001e-02, 1.046742e-01, -6.299789e-02, 2.802955e-01, -5.911577e-02, -1.266305e-02, 2.617904e-02, 2.515918e-01, -1.498823e-01, 1.590725e-02, 7.027675e-02, -3.368095e-01, -1.831208e-01, -2.353796e-02, -1.718927e-02, 2.287131e-03, -2.956953e-02, -1.509890e-01, -1.621095e-01, 2.597628e-02, 1.366337e-01, 4.507021e-02, -3.281161e-02, 3.112841e-02, -5.863955e-02, 2.022006e-04, -2.754065e-02, 4.133012e-03, -2.055969e-01, 1.381655e-02, -5.993656e-02, -2.717577e-02, -3.070654e-02, 6.494094e-02, -4.625233e-02, -1.247538e-01, -3.273521e-02, 8.785835e-02, -3.094549e-02, 1.928120e-02, -2.680912e-04, 2.858520e-01, -2.923404e-01, -2.576578e-01, -2.754485e-02, -2.434195e-02, 8.127469e-02, -7.933890e-02, -2.833982e-02, 9.269531e-02, 4.834629e-02, 9.756076e-02, -1.567426e-03, -2.100976e-01, 3.381151e-02, 6.012372e-02, 7.247035e-03, 2.399335e-02, 5.404432e-02, 7.091772e-03, -2.337769e-01, -1.167280e-01, -2.418304e-01, 3.033518e-02},
{3.063507e-01, -1.742056e-01, 2.103257e-02, 1.961603e-01, -5.651521e-01, -1.504889e-01, -2.291455e-02, 1.173408e-01, 1.554573e-02, -3.569536e-02, 7.077899e-02, -1.084267e-01, -8.234645e-02, 4.563891e-02, 2.022447e-03, -6.682920e-02, -1.113236e-01, -3.499738e-02, 7.893658e-04, -2.276222e-02, 1.032525e-01, -2.500604e-02, -1.989908e-02, -5.682226e-02, -3.728751e-02, 4.535253e-02, -1.868379e-01, -2.419064e-02, -3.620792e-02, -1.393517e-01, -2.460192e-01, -3.895672e-02, -2.335959e-01, 1.046458e-01, 3.239301e-01, -1.224126e-01, 2.310184e-01, -6.680749e-02, 2.792984e-01, 8.701227e-02, 2.712811e-01, 1.445638e-01, -3.008647e-01, -3.218126e-01, 3.415155e-02, 4.756214e-02, -1.415950e-01, -1.662083e-02, 3.554311e-01, 3.953365e-01, 9.087103e-03, -9.858135e-02, -8.342149e-02, 5.773600e-02, -5.681374e-02, -2.152815e-01, 1.597867e-01, 1.816954e-01, 1.443911e-02, -1.923269e-01, -2.902202e-02, -6.962571e-02, -7.021023e-03, 5.540914e-02, -4.327870e-02, 7.797190e-02, 7.444075e-02, 6.612003e-02, -1.734319e-02, -1.709248e-01, -2.097767e-02, -1.350839e-02, 4.384095e-01, -2.078595e-01, 9.290449e-02, 2.793104e-02, -7.753330e-02, 9.277814e-02, -1.901918e-01, 1.238397e-01, -5.310941e-01, -2.916088e-01, -1.377818e-01, -1.059738e-01, 1.651844e-01, -6.362232e-02, -1.184357e-02, -3.773132e-02, 9.154239e-02, 4.763426e-02, 1.142760e-03, -1.819054e-01, 3.512290e-02, -1.326695e-01, -3.249287e-02, 2.167446e-03, -3.888706e-02, -4.359192e-01, 1.759384e-02, 5.923767e-02, 7.592188e-02, -1.933409e-01, -1.641398e-01, -4.857489e-02, -2.415870e-01, -7.096253e-02, 5.292222e-02, -1.709263e-01, -1.156679e-01, 2.170079e-02, 1.786017e-01, -4.947331e-02, -3.449295e-02, 5.446377e-02, 1.167030e-01, 2.394504e-02, -7.082556e-02, 5.523553e-02, 1.362093e-02, 2.696262e-02, 2.265036e-02, 9.683465e-02, 4.026677e-02, 6.680311e-03, -2.046353e-02, 1.231122e-01, 6.445625e-02, 1.084453e-01, 6.555482e-03, -2.913305e-01, 1.929593e-02, -3.101277e-01, 3.171697e-02},
{2.872976e-01, -2.560644e-01, 1.676664e-01, 9.238803e-02, -6.410959e-01, 9.867374e-02, 9.281950e-02, -2.101998e-01, -8.282182e-02, -1.093242e-01, 2.820046e-01, -2.165688e-03, -3.640503e-01, -1.764467e-01, -1.903514e-01, 1.569464e-01, -1.639679e-02, 2.725315e-02, 3.723859e-02, -6.691407e-02, -3.613063e-01, 7.268380e-02, -2.409351e-01, -3.395594e-02, 1.339487e-01, 1.958128e-01, -1.060838e-01, 1.192048e-01, 1.672799e-01, 2.669809e-02, 8.360390e-02, 3.893917e-02, -1.234013e-01, -2.229700e-01, 1.753068e-01, 1.207947e-02, 2.951938e-02, -2.522093e-01, 1.593209e-01, 7.690018e-02, 4.431444e-01, -5.380454e-02, -1.170730e-02, -3.691162e-01, -9.440083e-02, -3.583910e-02, -2.426813e-02, 1.736372e-01, 2.634436e-01, 3.075800e-01, -2.743351e-01, 1.617187e-01, -2.281721e-01, -2.600296e-03, 1.271526e-01, 1.205469e-02, -4.923353e-02, 2.263673e-01, -1.052333e-01, 3.519731e-01, -1.165699e-01, 6.697326e-02, 3.090149e-02, 1.164069e-01, 6.817717e-02, -4.422151e-02, -1.227588e-01, 1.691683e-01, -1.162473e-01, 1.100536e-01, -4.480160e-01, -1.261193e-01, 8.985396e-02, -3.785304e-01, -1.703056e-01, -1.868969e-01, 3.210167e-01, -8.706699e-02, 6.400689e-02, -2.063071e-02, -9.507473e-02, 3.012112e-01, -5.824293e-02, -2.261560e-01, 1.666445e-01, -9.522866e-02, -1.536665e-01, 3.618911e-01, 8.237406e-02, 1.099890e-01, 6.842206e-02, -4.024898e-01, 4.825320e-03, -3.976459e-01, 1.367788e-01, 1.791511e-02, 2.030178e-01, -8.310363e-01, -1.912288e-01, 1.115742e-01, 2.837066e-01, -3.847246e-01, -5.933596e-02, 1.520808e-01, 1.442691e-01, -1.310615e-02, -7.077222e-02, -2.202895e-02, -1.901333e-01, 2.343781e-02, -2.151298e-01, -1.000686e-01, -4.126287e-01, 5.423712e-02, -1.120378e-01, 1.604672e-02, 1.400973e-01, -1.080810e-01, -3.170446e-02, -1.532436e-01, -1.282779e-01, 2.223704e-01, 2.851158e-01, -3.621579e-02, -3.119378e-02, 2.680700e-01, 8.148512e-02, 4.587473e-01, -1.054766e-01, -3.949637e-01, -1.494239e-01, -1.155718e-01, -1.403865e-01},
{-6.441066e-02, -3.012654e-02, -1.153984e-01, -1.925397e-02, 4.639330e-02, 8.336326e-02, 3.629576e-02, 6.392643e-02, 1.607387e-02, -5.456212e-02, 9.828246e-03, 8.219907e-03, -1.280057e-02, 7.154328e-02, -7.690425e-03, -5.216020e-02, 1.063047e-01, -3.495868e-02, 5.200243e-02, 3.366032e-02, -9.152754e-02, 7.368018e-02, 1.644000e-03, 1.743785e-02, -6.245604e-03, -2.245707e-02, -7.617742e-02, -7.495593e-02, 8.278192e-02, -3.055164e-02, 1.703482e-02, 5.015241e-02, 4.844622e-02, 8.132019e-02, 6.282192e-02, 5.825415e-02, -7.323882e-02, -5.263854e-02, 2.930987e-02, -7.692969e-02, 9.977515e-02, -7.792952e-02, 1.247464e-01, -6.247407e-02, -3.013291e-02, -8.457344e-02, -6.012420e-02, 1.672603e-02, -7.184137e-02, -1.560825e-01, 5.925367e-03, -4.229692e-02, -5.015478e-02, -4.711412e-02, 2.137082e-03, -8.841430e-02, -8.563633e-02, -1.264718e-02, -1.170319e-02, -1.903569e-02, -2.577104e-04, -5.616897e-02, 4.126827e-02, 2.211234e-02, 1.756387e-02, -3.092364e-02, 3.124928e-02, 3.498730e-02, 6.598538e-02, -1.190421e-01, 9.033082e-02, 6.471035e-02, -2.650108e-02, 3.850860e-02, 6.551275e-02, 7.111474e-02, 5.034167e-02, -4.912730e-02, 8.069143e-02, -4.572659e-02, -4.896266e-03, 2.684310e-02, -7.421543e-02, 3.138047e-02, 5.316237e-02, -2.426484e-02, -4.646816e-02, 7.809313e-02, -7.156853e-02, -2.922825e-02, 5.858109e-02, 7.939716e-02, -8.751422e-03, 8.783135e-02, -6.454681e-03, 6.670055e-02, -6.618593e-02, 2.689459e-03, 4.713039e-02, -5.472313e-03, 3.290547e-02, 4.618665e-02, 7.213279e-02, -5.701445e-03, 1.501061e-02, -4.541757e-02, 2.264209e-02, 7.174916e-02, 3.706608e-03, -8.346762e-03, 1.274738e-01, -4.342618e-03, 2.900655e-02, 9.084477e-02, 7.462410e-02, -5.519602e-02, -5.287091e-02, -2.041517e-04, 7.868291e-02, -7.240012e-02, 2.117117e-02, 1.061909e-01, 8.304094e-02, -4.631795e-02, -5.790250e-02, 5.532442e-02, -5.690162e-02, -1.482427e-01, -3.665155e-02, -7.496860e-02, -4.369721e-02, -6.754409e-02, 2.156504e-02},
{1.322705e-01, -9.467930e-02, 1.412207e-02, -7.029805e-02, -8.871034e-02, 5.151292e-02, -5.756158e-02, 2.460272e-02, -2.547639e-02, 2.966654e-02, 4.619395e-02, 5.366795e-02, 3.786594e-02, -3.724426e-02, 5.696744e-02, -7.647746e-02, -7.319437e-02, 4.043199e-02, 5.288121e-02, -8.997361e-02, 3.695335e-02, 2.009940e-02, -3.110987e-02, -2.579028e-02, 4.076765e-02, -1.973359e-02, 1.014777e-01, 4.786102e-02, 2.488438e-02, -1.938023e-02, -4.405905e-03, 5.417198e-02, 9.062405e-02, 3.683043e-02, -2.126287e-02, -9.701620e-02, -3.567912e-02, 4.621463e-02, -1.902002e-02, 1.191057e-02, 4.095148e-02, 1.124021e-02, 1.580538e-01, -8.208776e-02, -3.911076e-02, -2.214289e-03, -6.897409e-02, 4.578559e-02, -5.679084e-02, -9.849455e-02, 8.193035e-02, 1.421823e-02, 1.653846e-02, 9.190178e-02, 1.419603e-03, -4.754566e-02, 2.429007e-02, -7.465895e-02, 6.573974e-02, 7.300325e-02, 2.353758e-02, -6.196193e-02, 3.395469e-02, 7.119347e-02, -1.151779e-02, 5.054842e-02, -9.066365e-02, -5.414843e-02, 2.459122e-02, -3.123375e-02, -3.407101e-02, 1.755025e-02, -1.078458e-02, 4.183432e-02, -6.579369e-02, -4.790563e-02, -1.445196e-01, -1.203428e-02, 7.643526e-02, -1.720339e-02, 4.004986e-03, -8.849280e-02, -1.730950e-02, -2.052264e-02, -5.495370e-02, -3.741137e-02, 2.164695e-02, 3.093021e-02, 5.330149e-02, 2.062831e-02, -3.977076e-02, -4.361764e-02, -3.577303e-02, 1.396775e-02, -8.568363e-03, -8.138880e-03, 1.458186e-02, -6.520666e-02, 3.866027e-02, 4.742435e-02, -4.745061e-02, 7.459626e-02, -8.200682e-02, 1.653122e-03, -4.317270e-02, 1.232949e-02, 7.045522e-02, 7.592735e-02, -7.899391e-02, -5.972731e-02, -2.766399e-02, -7.038517e-02, -4.815330e-02, 4.498545e-03, -7.352044e-02, -8.954109e-02, -2.581876e-02, -8.229300e-02, -1.215879e-02, -1.426296e-02, 4.069939e-02, -4.984963e-02, 5.915686e-02, 3.840844e-02, 2.722501e-02, 5.532151e-02, 1.354071e-02, -1.913918e-01, -8.160758e-02, 2.292276e-02, -2.609044e-02, 5.912586e-02, -7.079426e-02},
{-2.157129e-02, 2.288348e-02, -1.024793e-01, 1.456066e-02, -1.764595e-02, -2.489129e-02, -3.127529e-02, 3.924913e-02, 3.441897e-02, -6.734131e-02, -8.340277e-02, 1.042785e-01, 4.561029e-02, -1.410019e-02, -7.808843e-02, 6.496803e-02, -1.908095e-02, 3.394545e-03, 1.420117e-02, 2.201031e-02, -8.889701e-02, -1.852010e-02, 6.846020e-03, -4.054192e-03, 5.233231e-02, 4.718889e-03, 3.924555e-02, 8.614592e-02, 3.566310e-02, -3.081097e-02, -3.145812e-02, -1.820192e-02, -5.620793e-02, 5.778573e-02, 5.173822e-02, -1.879609e-02, -5.777603e-02, 6.569064e-02, 1.775042e-01, 8.420431e-02, 8.578656e-02, -2.390092e-02, -1.015176e-01, 2.416786e-02, -2.618727e-02, -8.692830e-02, 3.986689e-02, -3.489426e-02, 3.412254e-02, -1.789762e-01, -3.987480e-02, 2.305904e-02, 3.338037e-02, -2.717897e-02, 4.112257e-02, 6.696242e-02, -5.827992e-02, -4.646645e-02, 3.719853e-02, -6.780992e-02, -4.309131e-02, 4.473022e-02, 2.424652e-02, 6.225927e-02, -1.125887e-02, -9.502486e-02, -7.379591e-02, 8.469975e-03, 4.290342e-02, -3.327389e-02, -6.619258e-02, 1.119790e-02, -5.088263e-02, -6.755451e-02, 3.124879e-02, -4.401153e-02, 7.336770e-02, -8.275371e-02, 1.622861e-02, 2.223626e-02, 3.059542e-02, 4.291250e-02, -1.608689e-02, -3.056743e-02, 3.053092e-03, 2.741703e-02, 5.074728e-02, 9.402414e-02, -1.870823e-02, -7.650714e-02, -5.963803e-02, -9.450181e-02, 4.324578e-02, -3.943545e-02, 5.419675e-02, -1.390513e-02, 2.114379e-02, -7.476411e-02, 4.889106e-02, -6.756960e-02, 8.373804e-02, -4.944231e-02, -5.329451e-02, -1.546211e-02, 1.168645e-01, 4.520671e-02, 9.423646e-02, 5.754570e-02, 6.830106e-02, -8.009478e-02, -3.632157e-02, 2.275946e-02, 2.202995e-02, -8.827563e-02, 1.697583e-02, 5.461346e-02, 6.984085e-02, 3.145828e-04, 3.381195e-02, -6.711180e-02, -7.622252e-02, 1.412409e-02, 6.111601e-02, -3.185630e-02, 1.277380e-02, 6.338072e-02, -9.036475e-02, -6.414870e-02, 3.591555e-02, 7.577210e-02, -2.908780e-02, -8.696359e-02, -6.467533e-02},
{5.008208e-02, 7.449308e-03, -7.348446e-02, -8.640783e-02, -4.717524e-02, 7.211912e-02, 2.903128e-02, -1.849570e-02, 1.136473e-02, 4.064246e-02, 7.771591e-02, -1.674068e-02, 4.934837e-02, -6.651372e-02, 6.673754e-02, 6.930086e-02, -7.071283e-02, 6.054122e-02, 6.768617e-02, 4.720612e-02, -1.309660e-01, -5.771719e-02, -4.070975e-02, -1.788051e-02, 5.311818e-02, 1.670177e-02, -4.091945e-02, -4.532972e-02, -7.423832e-02, 1.347450e-02, -1.259071e-02, -6.040348e-02, 5.959526e-02, 7.202781e-02, 1.509744e-02, 6.459282e-02, -7.651056e-02, 1.391403e-02, 1.418585e-01, -5.867720e-02, 1.248800e-02, -4.668865e-02, -1.278679e-02, -1.117613e-01, 1.061701e-02, 2.146752e-03, 9.097843e-03, -1.089838e-02, -1.277823e-02, -1.152013e-01, -1.042202e-02, 4.682071e-02, 8.567531e-02, -6.136945e-03, -4.788120e-02, -1.117855e-01, -4.860131e-03, 3.396713e-03, 3.635961e-02, 4.403044e-02, -7.145859e-02, 2.379095e-03, 1.779149e-02, 2.774465e-02, -4.106748e-02, -3.537545e-02, 7.919288e-03, 9.220371e-02, -2.129969e-02, -1.023237e-01, 4.902283e-02, 1.062518e-02, 3.578370e-02, -4.696964e-02, 5.700562e-02, -7.858597e-02, 8.153976e-02, -7.847176e-02, 5.250643e-02, -7.776767e-02, 3.231777e-02, -7.626633e-02, -4.193257e-02, 5.976961e-02, -7.330564e-02, 8.043650e-02, -6.272984e-02, -2.245807e-02, 6.467782e-02, -5.020519e-02, -6.042938e-02, -8.667982e-02, 2.412548e-02, 6.849425e-02, 1.937295e-02, -1.193119e-02, 3.528753e-02, -3.515067e-02, -8.974264e-02, -7.192441e-02, 7.556925e-02, -1.881211e-02, 1.102352e-02, 7.094210e-02, -3.589559e-02, 3.959276e-02, 5.132569e-02, 6.196928e-02, -4.939406e-03, -6.478284e-02, 7.371520e-02, 2.397083e-02, -6.780245e-02, 5.447096e-02, -6.079477e-02, 3.342614e-02, 6.851758e-02, -3.229797e-02, 4.988450e-02, -8.087670e-02, -5.410540e-02, 2.963839e-02, -3.314815e-02, 7.850521e-02, 9.886673e-03, -5.143845e-02, -8.464716e-02, -1.204264e-01, 2.058667e-02, 6.013059e-02, -4.631085e-02, 7.133764e-02, 8.209836e-02},
{1.292358e-01, -8.154041e-02, 2.664794e-03, -3.317104e-02, 8.889255e-03, -4.384223e-02, -6.123304e-02, 5.307952e-02, 1.775602e-02, -8.728203e-02, -5.775390e-04, 4.859221e-02, -4.205943e-02, -4.265748e-02, 1.796290e-02, -5.285306e-02, 7.123542e-02, -3.716493e-02, -5.368470e-02, 4.234330e-02, -1.266550e-02, 3.341180e-02, -2.356619e-02, -4.621216e-02, -3.325903e-02, -2.412180e-03, 6.534590e-02, -1.074191e-02, -7.936112e-02, 1.871857e-02, -2.074440e-02, -8.708663e-02, 9.831748e-02, 4.718268e-02, -5.978143e-02, -5.704346e-02, 8.136155e-02, 1.713846e-02, 9.449343e-03, -1.840832e-02, -7.718297e-02, 7.249819e-02, -8.016436e-03, 1.509958e-02, 7.704308e-02, -6.438067e-02, -1.097777e-01, -6.005928e-02, 6.628387e-02, -7.301232e-03, -7.561734e-02, 1.578769e-02, -3.547079e-02, 1.038787e-01, -1.650153e-02, -4.749928e-02, -1.562558e-04, 2.951925e-02, 7.625939e-02, 2.129994e-03, -6.191187e-02, -2.260172e-02, -2.465712e-02, 8.839485e-02, -4.213621e-02, -4.733994e-02, -7.824098e-02, 3.942969e-02, -3.347193e-03, -3.066639e-02, 4.632806e-02, -7.652337e-02, -3.064681e-02, 3.154310e-02, 6.732681e-02, 5.144767e-02, -1.125431e-01, -6.692617e-02, -1.642615e-03, -9.297775e-02, -1.938641e-02, -1.854045e-03, 6.060130e-02, -4.247076e-02, -8.541512e-03, -7.315161e-02, -6.832743e-02, -4.196800e-02, 8.495723e-02, -2.991729e-02, -7.611120e-02, 3.452556e-02, 5.807441e-02, -2.834859e-02, 2.256940e-02, 4.592067e-02, 6.023846e-02, 3.552923e-02, -1.535066e-02, -1.188865e-02, 8.815300e-02, -6.649444e-02, 1.821766e-02, 6.908724e-02, -3.915846e-02, -7.880993e-02, -9.920194e-03, -2.827511e-02, 2.509842e-02, 2.594275e-02, -6.678469e-03, -2.637224e-02, 7.229752e-02, 6.622313e-02, -1.386400e-02, -5.872503e-02, 6.122319e-03, 5.540013e-02, -3.986514e-02, -3.087677e-02, 5.226105e-02, -5.990058e-02, 2.734074e-02, 7.383998e-02, -2.966592e-02, -5.158708e-02, 3.195413e-02, -4.829038e-02, 2.417746e-03, -2.092386e-02, 5.064858e-02, -6.555297e-02, 7.812413e-02},
{-5.176253e-02, 5.648290e-02, -1.150080e-01, -4.728933e-02, 3.580499e-02, -1.057740e-02, 3.306932e-02, 3.595225e-02, -2.420488e-03, -2.839114e-02, -9.052857e-02, 9.352610e-02, -7.899614e-02, -3.473092e-03, -7.932546e-02, 6.496012e-02, 3.942282e-02, -8.217996e-02, 4.820414e-03, -5.073104e-02, 7.519995e-02, 7.569136e-02, 3.579742e-02, -4.805207e-02, 5.037125e-02, -2.862207e-03, -6.928553e-02, -2.821063e-02, 2.664860e-02, 2.813861e-02, -7.276896e-02, -1.591693e-02, -4.675393e-02, 1.372370e-01, -6.926139e-02, -5.736429e-03, -1.338557e-01, -2.471707e-02, -1.260251e-02, 2.252083e-02, 7.022689e-02, -9.084117e-02, -2.992784e-02, 5.825742e-02, 2.213874e-02, -8.571411e-02, 8.170068e-02, 1.864246e-02, -1.087677e-01, -1.775473e-01, -1.141639e-01, 4.475222e-02, -7.519279e-02, 3.536435e-02, -2.486003e-02, 6.223585e-02, 4.063519e-02, -1.071718e-01, 5.231562e-02, -4.244690e-02, 4.471262e-02, -4.075776e-02, 1.098820e-02, -9.778478e-02, 8.167237e-03, -3.682803e-02, 4.320461e-03, -1.103373e-02, 9.645854e-02, 3.539085e-02, 2.661939e-02, -2.057312e-02, -4.092444e-02, 2.032284e-04, -5.971823e-02, -8.365143e-03, 1.873608e-01, 8.576779e-03, 6.565356e-02, -9.743215e-02, -3.154838e-03, -1.506041e-02, -7.218977e-02, 1.330843e-02, 3.339046e-02, 1.004368e-01, -9.872957e-02, 1.414145e-01, -8.951312e-02, -7.299095e-02, 1.811464e-02, 1.662962e-02, -2.083400e-02, -4.266776e-02, 1.061387e-01, -9.006202e-02, -8.070908e-02, 6.579286e-02, -8.902210e-02, 1.382046e-02, 3.882525e-02, -8.416530e-02, 4.772839e-02, -4.269297e-02, -2.689531e-02, -4.017735e-02, 7.828514e-02, 1.722108e-02, -1.610826e-02, -8.626786e-02, 1.412858e-01, -1.392022e-01, -8.702599e-02, -5.727061e-02, -8.653340e-03, -3.184813e-03, 7.590665e-03, -1.034335e-01, -2.772770e-02, -2.208076e-02, -3.903912e-03, 1.057336e-01, -1.024134e-01, -2.409560e-02, 3.123955e-02, -4.111465e-02, -1.417405e-01, -1.867615e-01, -2.246664e-02, -5.361840e-03, -8.854590e-02, -5.774874e-02, -5.526073e-02},
{2.763957e-02, 4.461091e-02, -3.389477e-02, 8.533867e-02, 5.307543e-02, 5.419260e-03, 1.406371e-04, 1.081751e-02, -3.180709e-02, -2.744755e-02, -5.842121e-03, 5.944704e-02, -5.717138e-02, -3.229592e-02, -5.064092e-02, 1.587865e-02, -6.572950e-02, -8.143950e-02, -1.296566e-03, -4.596454e-02, 9.689151e-02, -6.868748e-02, 1.986565e-03, -9.560467e-02, -8.050017e-02, -4.040154e-02, -3.247982e-02, 2.181710e-02, -8.303098e-02, 4.245105e-02, -6.987790e-02, 3.952094e-02, -4.262244e-02, 9.716784e-02, 8.269801e-02, 3.267194e-02, -6.794353e-02, 6.957565e-02, -8.219322e-03, -3.112674e-02, -1.584018e-02, 8.037578e-02, -4.866230e-03, -4.769842e-02, -3.743680e-02, -7.438035e-02, -8.864968e-02, -2.046395e-02, 1.892079e-02, -2.184870e-02, -1.229685e-01, -7.858693e-02, -6.127995e-02, -4.749249e-02, 3.272667e-02, -1.966382e-02, 5.995060e-02, 5.899030e-02, 2.387306e-02, 3.201853e-03, 4.029104e-03, -8.972257e-02, 9.254774e-02, -8.528876e-02, 2.129049e-02, -5.175705e-02, 1.944118e-02, -4.036317e-02, -3.887634e-02, 9.733481e-02, -5.133619e-02, -2.498829e-02, 3.501904e-02, -1.312335e-02, 7.230282e-02, -6.824488e-02, 1.035334e-01, -4.364210e-02, 1.061840e-03, 7.740276e-02, -4.887937e-02, 4.768455e-02, -7.298484e-02, -2.386640e-02, 5.979907e-02, -1.012732e-01, 6.718763e-02, -2.438196e-02, 5.341007e-02, 6.817544e-02, 1.365140e-02, -1.523819e-01, 4.483426e-02, -1.109873e-02, -7.308069e-02, 6.424800e-02, 4.650277e-03, 1.505291e-02, -4.270620e-02, -6.234012e-02, -6.472091e-02, 8.195089e-02, -5.322204e-02, 1.781697e-02, 6.111499e-02, 2.492036e-02, 1.415512e-02, -2.811084e-02, -1.565533e-02, 3.523993e-02, -4.046714e-02, 2.569732e-02, -1.159730e-01, 3.660371e-02, 5.381497e-02, -7.624283e-02, 4.499582e-03, 5.557347e-02, -1.031991e-02, 2.939123e-02, 8.726658e-02, -9.508467e-03, 6.822031e-02, -1.143624e-02, 7.719812e-02, -5.478814e-02, 6.199487e-02, -6.972892e-02, -5.162604e-02, 3.560493e-02, 1.733808e-02, -2.370307e-02, -2.873326e-02},
{1.036357e-01, -4.635676e-02, 3.751653e-02, -5.795269e-02, -7.439855e-02, -7.885575e-02, 6.072690e-02, 7.999778e-02, -6.755881e-02, 2.975805e-02, 5.860519e-02, -5.358941e-02, -9.056428e-02, -2.371009e-02, 1.919120e-02, 6.105584e-03, 4.183332e-02, -8.917313e-02, -5.193370e-02, -5.510048e-02, 2.331382e-02, -4.223249e-02, 6.347108e-02, -2.851358e-02, 5.863738e-02, 1.393222e-02, -4.164017e-02, -4.419885e-02, 5.622172e-02, 4.865792e-02, -3.678405e-02, 9.340679e-02, -6.542315e-02, -3.261312e-02, 2.752848e-02, -8.580545e-02, -3.889873e-02, -3.240592e-02, 1.150932e-01, 7.589211e-02, 4.848108e-02, -2.583833e-02, 4.839424e-02, -2.813165e-02, 7.232627e-02, -8.156744e-02, 1.607429e-02, 8.103211e-02, 1.724187e-02, 5.886005e-02, -9.492603e-02, 6.706797e-02, 7.046333e-02, 6.516449e-03, 2.825665e-02, 1.617142e-02, 4.226809e-02, -4.207845e-02, -1.911508e-02, -4.842287e-02, 7.286515e-02, -6.244653e-02, -4.557706e-02, 7.594285e-02, -4.754543e-02, 7.161369e-02, 2.217201e-02, -2.066446e-02, 1.759502e-02, 1.708181e-02, -2.994036e-02, -2.087940e-02, 1.104314e-01, -2.399970e-02, -1.520741e-02, 6.189390e-02, -1.176192e-01, -8.251298e-02, -1.180189e-01, -3.504128e-02, -1.462572e-02, 4.841165e-02, 5.798454e-02, -5.621202e-02, -1.371717e-03, -1.312311e-02, 5.244521e-02, 8.196261e-02, -7.076106e-02, 5.739843e-02, 2.014275e-02, -1.492093e-01, 8.864546e-03, 1.035506e-01, -6.920926e-02, -3.718751e-02, -4.781529e-03, -1.548512e-01, 1.716490e-02, -5.227766e-02, 5.428908e-02, 5.647287e-02, -7.406977e-02, -7.833211e-02, 6.988990e-02, 5.926964e-02, -7.536925e-02, 3.999983e-02, 3.959380e-02, 4.887967e-02, 8.311475e-02, 9.466399e-02, 4.509372e-02, -4.965467e-02, 1.669237e-02, 6.128881e-02, -4.593641e-03, 5.550919e-02, -2.121838e-02, 1.418979e-02, -5.983466e-02, 6.078777e-02, 4.150140e-02, 3.365573e-02, -2.898431e-02, 7.762075e-02, -3.917500e-02, 6.385032e-02, 1.095085e-02, 1.224419e-02, -5.456567e-02, -8.685400e-02, -5.755201e-02},
{-6.326902e-02, -1.557669e-01, -9.557996e-02, 1.089087e-01, -1.248785e-01, 9.755211e-02, 2.723145e-02, -2.583132e-02, 4.100947e-02, 7.156803e-02, 1.126201e-01, -1.604127e-02, -9.641474e-02, 3.795840e-02, 6.864017e-03, -2.103901e-02, -5.879388e-02, 1.298009e-02, -7.490033e-02, -4.166338e-02, 1.188040e-01, 7.551520e-02, 9.531540e-02, 1.704668e-02, -3.571956e-02, 7.937508e-02, -2.930745e-02, 6.918357e-02, 5.721815e-02, -1.878579e-02, -4.680276e-03, 5.133204e-02, 3.837905e-02, 6.927831e-02, 1.155301e-02, -4.909426e-02, -1.182802e-01, -1.038246e-01, -1.271427e-02, 9.036259e-02, 2.699957e-02, -5.081826e-02, -6.754930e-03, 9.766887e-02, 4.004189e-02, -6.015348e-02, -3.565666e-02, -2.650777e-02, 4.792201e-02, 1.020310e-01, -9.983872e-02, 3.842076e-02, 9.544858e-02, -1.472529e-02, -7.577217e-03, 1.030980e-01, -2.432309e-02, 4.226812e-02, 6.731601e-02, 1.408551e-01, -6.323266e-02, -1.572648e-02, 1.616345e-02, 3.463265e-02, 6.710924e-02, -4.411184e-03, -4.896822e-02, -8.013260e-02, 7.677140e-02, 7.861637e-02, -6.565509e-02, -7.297843e-02, 8.062863e-02, 1.963723e-02, 4.011906e-02, -3.240444e-02, -8.896632e-02, 8.186528e-03, -6.466560e-02, -5.289424e-02, -6.154689e-02, -7.987128e-02, -5.854899e-02, 4.098460e-02, 6.134957e-03, -2.382195e-02, 7.407824e-02, 1.480276e-02, -5.098961e-02, -1.035698e-01, 3.638063e-02, -2.287499e-02, 5.517756e-02, 1.231584e-01, -6.284035e-02, 3.341958e-02, -7.886531e-03, -7.919452e-02, 1.686688e-02, 3.269863e-02, -2.617717e-02, 7.356648e-02, 6.955285e-02, 2.079328e-02, 1.285409e-02, -4.877727e-03, 1.361875e-02, 1.464823e-02, -1.391337e-01, -1.680481e-02, 7.690249e-02, 1.634389e-02, -4.706004e-02, -8.249193e-02, 1.959966e-02, 1.716582e-02, -7.869909e-02, -3.743671e-02, -6.121897e-03, -8.967140e-02, -2.386345e-03, -4.557972e-02, 3.192208e-02, -1.121113e-01, -3.103345e-02, 4.740463e-02, 3.203674e-02, 1.442146e-01, 3.846051e-02, -6.777759e-02, 7.199014e-02, -9.449086e-02, 5.095043e-02},
{-1.650891e-02, -6.878278e-02, 8.948924e-02, -3.215468e-02, -1.204176e-01, -1.126326e-01, -8.178754e-03, 2.805236e-02, 1.426727e-01, -7.303219e-02, 9.060232e-02, -1.787668e-01, -1.894160e-01, 8.381674e-02, -2.733254e-02, -7.817873e-02, 8.359553e-02, -5.439179e-02, 5.710865e-02, -6.746118e-02, 1.570066e-01, 4.566044e-02, -3.207272e-02, -1.633911e-01, 9.366632e-02, 8.809354e-02, -2.930480e-01, 8.400435e-02, -3.174335e-02, -5.468473e-02, -2.281185e-01, -1.526389e-01, -2.787225e-02, 7.501505e-02, 2.472799e-01, -5.707482e-02, 3.298212e-02, 7.878507e-02, 1.211708e-01, -1.459264e-01, 1.827088e-01, 6.321900e-02, -5.263406e-01, -3.953111e-01, 3.215091e-02, -2.095254e-02, -1.718519e-02, 5.456626e-02, 2.906041e-01, 1.121350e-01, -6.660235e-02, -8.576383e-02, 1.250492e-01, -8.498462e-02, -7.267598e-02, 3.620099e-02, 4.587787e-02, 1.539159e-01, -3.289474e-02, -2.888092e-01, -4.772862e-02, 2.643270e-02, 1.319073e-01, 8.373535e-02, -4.696782e-02, -5.045984e-03, 9.745708e-02, -6.470387e-02, -5.035433e-02, -9.965735e-02, 6.539099e-02, 9.097396e-02, 2.563547e-01, -1.140514e-01, -1.326969e-03, 2.347676e-02, 5.801156e-02, 7.959104e-03, -7.716800e-02, -7.329354e-02, -2.887585e-01, -1.126471e-01, 4.169992e-02, 7.032472e-02, 1.063783e-01, 1.142026e-01, -8.055039e-02, -7.833736e-02, -8.753853e-02, 8.801357e-02, 4.150454e-02, -1.964737e-02, 1.578819e-01, -1.211124e-01, 1.234814e-01, -2.014267e-03, -8.063375e-02, -2.733184e-01, 6.838219e-04, 1.567742e-01, 3.015671e-02, -2.353403e-01, 1.399530e-01, -1.259626e-01, -2.091082e-01, -9.709091e-02, 8.031165e-02, -2.239445e-02, -6.599765e-02, -4.745866e-02, 3.417778e-01, -1.654320e-01, -3.499194e-02, 7.618060e-02, -2.664893e-02, -2.861864e-02, 5.380527e-02, -7.753102e-02, -1.167627e-02, -5.309424e-02, 3.073004e-02, 7.908436e-03, -2.676319e-01, -1.089944e-01, 1.673406e-02, 1.055628e-01, -1.075775e-01, 1.888366e-02, 1.960868e-02, -2.806908e-01, -9.493288e-02, -1.333693e-01, -1.021267e-01},
{-6.190508e-02, 5.653925e-02, -1.327011e-02, 4.388747e-02, 4.731011e-02, 5.311875e-02, -7.207958e-02, -2.520294e-02, -1.379101e-02, -5.432321e-02, 1.000113e-01, 3.067789e-02, 3.740601e-02, 8.368980e-02, -1.044828e-02, 3.891124e-02, 1.426632e-02, 1.294293e-04, -6.908132e-02, -4.177807e-02, 2.601571e-03, 5.334246e-02, -7.301598e-03, -4.173460e-02, 1.434508e-02, 1.528239e-03, -7.794054e-02, -6.043418e-02, -8.421800e-02, 5.234451e-03, -4.361752e-02, 6.857865e-02, -5.815840e-02, 6.269195e-02, 9.438272e-03, -6.388603e-02, -9.438999e-02, 1.022707e-01, 1.600528e-02, -2.437283e-02, -8.386886e-04, 3.608912e-02, -1.772227e-01, -4.873271e-02, -8.120921e-02, 2.681062e-02, -7.547467e-02, 2.046419e-02, 7.705083e-02, -1.498772e-01, 5.868126e-02, -7.168054e-02, -1.427191e-02, -1.855480e-02, 2.950638e-02, 6.480133e-02, 8.892433e-02, 3.194551e-02, -5.152337e-02, -1.130785e-01, -3.628823e-02, -6.347816e-02, 9.542344e-02, 7.145605e-02, 5.711090e-03, -6.355678e-02, 6.933247e-03, 8.703528e-02, 3.614080e-02, 1.152820e-01, 1.170975e-03, 6.366018e-02, 1.254038e-02, -1.007219e-01, -1.060440e-02, -3.233672e-02, -5.485063e-02, 6.737200e-02, -9.561345e-02, -7.231166e-02, -8.385172e-02, -2.253269e-02, 6.892231e-02, 5.398709e-02, 6.198033e-02, -4.517141e-02, 7.013769e-02, -5.007226e-02, 3.819820e-02, -1.401411e-02, 2.584091e-02, 7.875939e-02, 1.476833e-01, 1.683603e-01, -1.839024e-02, -9.250938e-02, 1.716939e-02, 1.758577e-01, -1.009072e-01, 1.040817e-01, 3.819239e-02, -7.673325e-02, 8.792497e-02, 7.590739e-02, -2.474914e-02, -7.243635e-02, 9.224459e-02, 3.794052e-02, -3.060920e-02, 1.187682e-02, 1.161271e-01, -1.041970e-01, 7.626654e-02, -5.072558e-02, 9.990011e-03, -1.621017e-02, -3.762322e-02, -8.778367e-02, -8.180127e-03, 2.529383e-02, 3.769529e-03, -5.213729e-02, -9.367270e-02, 9.627260e-02, 8.669249e-02, -4.529869e-02, 6.332249e-02, -7.911258e-02, 7.068216e-02, 1.088966e-02, 1.446323e-02, 2.634071e-02, 1.885320e-02},
{-7.978942e-02, -6.397302e-02, -7.589039e-02, -3.664733e-02, -1.919734e-01, 2.692288e-02, 2.514373e-02, 3.301752e-02, -8.253568e-02, 6.946425e-02, 3.002506e-02, 6.824432e-02, -4.201244e-02, -8.861635e-03, 4.027127e-02, -4.328410e-02, 1.402890e-02, 6.788047e-02, 6.483040e-02, -6.705707e-02, -6.403600e-02, 7.965589e-02, -3.034665e-02, -5.163994e-02, 8.170703e-03, 3.275919e-02, -6.168877e-02, 8.839960e-02, 1.461387e-02, 4.967967e-03, -1.004686e-01, 3.893938e-02, -7.047153e-02, -1.245869e-02, -3.244937e-02, 4.389747e-02, -3.901098e-02, -5.817581e-02, 1.676926e-01, 6.973508e-02, 1.235015e-01, 1.838568e-02, 6.294024e-02, -7.073414e-02, -6.340349e-02, -4.319789e-02, 5.207523e-02, 9.227051e-03, 7.878076e-02, -1.698088e-01, -3.637711e-02, 7.985847e-02, 6.216241e-02, -6.418730e-02, -1.744132e-03, -1.284689e-01, 6.495277e-03, -5.398771e-02, -7.820480e-02, 3.660109e-02, 1.847271e-02, -2.410869e-02, -5.087444e-02, -3.722136e-02, 7.386605e-02, -3.279601e-02, -4.074357e-02, 5.892752e-02, 2.784065e-03, -4.338218e-02, -2.498202e-02, -3.925941e-02, 8.531246e-02, 5.157084e-02, 6.882122e-02, -9.687661e-02, -1.622346e-02, 2.316022e-02, 6.817232e-02, -9.901479e-02, -9.200956e-02, 6.512380e-02, 5.053470e-02, -9.700127e-02, 2.013402e-02, -1.394038e-02, 6.055430e-02, 1.134876e-01, -5.201022e-02, 4.024240e-02, 6.173667e-02, -4.359668e-03, 4.377007e-02, -4.106420e-02, -6.646598e-03, 1.037192e-01, 4.589179e-02, -1.439275e-01, 9.225364e-02, 6.963293e-02, -3.662974e-02, 5.719132e-02, -3.743497e-02, -5.838183e-02, 6.445679e-02, -1.432445e-02, -1.662066e-02, -8.307366e-03, 8.992713e-04, -6.380348e-02, 7.223735e-02, -3.239989e-02, -4.060377e-02, 2.973003e-02, -4.627093e-02, 1.193167e-02, 1.872204e-02, 5.260517e-02, 2.786062e-02, -2.288442e-02, -3.698957e-02, 9.479157e-02, -5.498198e-02, 9.568515e-02, -1.454280e-02, -1.420433e-02, 5.016209e-02, -1.144592e-01, -8.854827e-03, 8.461951e-02, -5.795117e-03, -1.356973e-02, -2.405246e-02},
{1.659326e-01, -1.205417e-02, -1.335015e-01, -6.796064e-02, -1.096103e-02, 7.299171e-03, 2.512833e-02, -4.946797e-02, 2.157865e-02, 4.082905e-02, 3.366542e-03, 2.705653e-02, -8.057250e-02, -1.821400e-02, 1.469003e-02, 6.337151e-02, 1.947483e-02, 7.191874e-03, -7.547241e-02, -5.768467e-02, 2.593027e-02, -6.163005e-02, -4.340620e-02, -2.342165e-02, 2.315118e-02, 1.184556e-01, -1.438457e-02, 9.675297e-03, -7.399476e-02, 5.853469e-02, -5.529755e-03, 4.137259e-02, 5.458998e-02, 6.198240e-03, 2.227102e-01, -9.036551e-02, -3.483980e-02, -2.981537e-02, 9.051793e-02, 2.876156e-02, 8.286884e-02, 8.835133e-02, 7.515432e-02, -1.215582e-01, -8.236912e-02, -6.586433e-02, -8.513729e-02, -5.805927e-02, 9.939583e-02, 6.788689e-02, -8.100004e-02, 2.423237e-02, -5.751289e-02, 2.774064e-02, 8.404955e-03, -1.234267e-01, -7.659488e-03, 6.665774e-02, -3.095330e-02, -1.053198e-01, 3.903418e-02, -4.981428e-02, 6.847225e-02, -1.091811e-02, 6.286541e-02, -2.570278e-02, 7.236155e-02, 2.374021e-02, -4.732814e-02, 4.109331e-02, -3.814608e-02, 2.725221e-02, 4.807488e-02, -1.106117e-02, 1.751524e-03, -6.818179e-02, -2.547557e-02, 2.028132e-02, -5.850757e-03, 5.589645e-02, -1.666336e-01, -8.635194e-02, -1.019161e-01, -9.399053e-02, -2.810232e-02, 4.916269e-02, 3.179291e-02, 1.002591e-01, 6.271457e-02, -5.664122e-03, 1.401149e-02, -5.609668e-02, 9.353248e-02, -1.000299e-01, -1.215785e-01, -2.085425e-02, -1.016187e-01, -1.425022e-01, -2.403862e-02, 3.185979e-02, -3.485075e-02, -2.091241e-02, -6.928987e-02, -6.131973e-02, -2.018292e-02, -6.122737e-02, -4.338444e-02, -9.819173e-04, 2.419848e-02, -5.785977e-02, 3.160492e-02, 8.159144e-02, -1.273117e-01, 8.792933e-02, -2.997333e-02, -2.142783e-02, -5.372480e-02, 5.145301e-02, -3.650191e-02, 4.941524e-02, -7.593884e-02, 1.799610e-02, -1.058563e-01, -5.621098e-02, 8.971646e-02, -2.167404e-02, -4.404348e-02, 9.908411e-02, -4.537441e-03, 5.641602e-02, -2.945890e-02, 1.816063e-02, -3.894894e-03},
{1.621784e-01, -1.382674e-01, 2.087231e-02, 1.178701e-02, 7.035125e-04, -1.670607e-01, -1.346137e-01, 1.144970e-01, -1.053982e-01, 1.114904e-01, 8.723932e-02, -1.470977e-01, -2.260284e-02, 5.814143e-02, 4.870791e-02, -1.127929e-01, 1.175335e-03, -2.063455e-02, 1.367617e-01, 3.587978e-02, -3.671491e-02, -6.272318e-02, -4.625235e-02, 1.004032e-01, 3.304464e-02, 5.596169e-02, -7.455168e-03, -7.378580e-02, -1.652484e-01, -7.129580e-02, -6.853386e-03, 9.723610e-02, 2.280754e-02, -2.550502e-02, 3.158239e-03, -8.726008e-02, 4.177794e-02, 7.974093e-02, 4.156756e-02, -4.613797e-02, -5.423816e-02, 2.091188e-01, 2.917506e-02, -4.679622e-02, 1.136402e-01, -9.108447e-03, -2.076532e-01, -6.315353e-02, -8.216371e-02, -5.040549e-02, -3.475733e-02, -2.660441e-02, 3.372943e-02, 9.437813e-02, 2.402751e-02, -5.700978e-02, 2.024576e-02, 8.217531e-02, 1.393720e-01, 3.248874e-02, 1.969817e-02, -8.532298e-02, -7.503978e-02, 5.836178e-02, -8.286296e-02, 2.069369e-01, 3.789310e-02, -4.911348e-02, -6.804918e-02, -1.862526e-02, -3.586102e-02, 6.474037e-02, 1.119885e-01, -2.568529e-02, 8.737703e-02, 6.408919e-02, -5.626895e-02, 5.464992e-02, -2.220379e-01, 1.275798e-01, -7.742946e-02, 1.267860e-02, -7.184169e-02, 7.694436e-02, -6.491794e-02, -1.442580e-01, 1.312263e-02, -1.421186e-01, 8.730333e-02, 8.188982e-02, 1.369578e-02, -1.061665e-01, -3.466470e-02, 1.228128e-02, 2.848208e-03, 9.040050e-02, -2.885714e-02, -3.201812e-01, 1.125115e-01, -1.149542e-01, 8.847918e-02, -1.023789e-01, -9.383674e-02, -5.061659e-02, -4.380684e-02, -1.018220e-01, 3.343201e-02, -1.577910e-01, -2.288562e-02, 5.060909e-02, 5.007519e-02, 1.714597e-01, 7.370757e-02, -2.266761e-02, 2.935327e-02, 7.633884e-02, -1.885420e-02, 2.262412e-02, -1.247918e-01, -5.650969e-02, 4.104842e-02, -7.673354e-04, 3.440471e-02, -9.044467e-03, 1.186537e-01, -7.603642e-02, 1.553114e-01, 8.149376e-03, 1.619589e-01, -7.996977e-03, 1.263914e-01, 6.747966e-02, 1.548771e-01},
{-9.950695e-02, -1.110430e-01, -4.039342e-01, -3.157700e-01, -4.007093e-01, 8.070126e-02, 5.231477e-02, -9.060872e-02, -3.642593e-02, -1.751893e-01, -5.291958e-02, -7.822742e-02, 1.220870e-01, 3.375743e-02, 5.103503e-02, -2.837704e-02, 1.367444e-01, -7.508841e-02, -6.720481e-02, -9.096295e-02, -2.820288e-01, -8.228888e-02, -2.970966e-01, 7.441425e-02, -5.181278e-02, -3.533196e-02, 4.740740e-03, -1.503517e-01, 1.130456e-02, -1.928025e-01, -5.772699e-03, 1.648739e-01, 3.829524e-01, -1.775699e-01, -1.995352e-01, -1.328989e-01, -5.501033e-01, -1.630622e-01, 8.748246e-03, 1.536387e-03, 3.210952e-01, 1.435564e-02, 3.912320e-01, 2.620497e-01, -3.380984e-02, 7.585467e-02, -5.665641e-02, 2.811844e-02, 9.136084e-02, 9.635092e-02, 1.790559e-01, 1.815339e-02, 1.094648e-01, 6.911691e-02, 1.762284e-01, -2.761798e-01, 1.980710e-02, -3.709969e-03, 7.183247e-02, 7.359520e-01, 4.659982e-02, 3.402243e-05, -1.370090e-01, 8.913320e-02, 1.103302e-01, 1.008062e-01, -9.787317e-02, 3.212823e-02, 2.291112e-01, 2.862017e-01, -1.736974e-01, -2.418840e-01, -3.266300e-01, -2.741162e-01, -1.479293e-01, 2.878010e-02, 1.661132e-01, 8.432058e-03, -4.076972e-02, -2.520288e-02, 2.150711e-01, 3.405019e-01, 7.430353e-02, -5.882043e-02, 8.331975e-02, -5.993654e-02, 4.719291e-02, 2.015293e-01, 1.880097e-01, -6.855825e-02, 8.599477e-02, 1.202060e-01, 4.072055e-01, -1.240133e-01, 1.468417e-01, 1.785580e-01, -1.836750e-01, -8.769864e-01, -9.096351e-02, -1.048011e-01, 2.008111e-01, -1.386234e-01, 1.817023e-01, 1.904673e-01, -1.309837e-01, -1.247600e-01, 7.769124e-02, 1.909007e-01, -8.163028e-02, 7.842945e-02, -5.706182e-01, 1.051185e-01, -1.309921e-01, 8.375851e-03, -1.563294e-02, -8.432715e-02, 1.442031e-01, -6.078264e-02, 1.762145e-02, -8.825976e-02, -9.476607e-02, -7.965080e-02, 2.338425e-01, 1.267855e-01, 2.014113e-01, 2.357488e-01, 2.225992e-01, 4.169442e-02, -6.480749e-02, 1.495038e-01, 3.481450e-03, 2.791059e-01, -1.005789e-01},
{1.879752e-01, 4.347993e-02, 2.852749e-02, 8.854610e-02, 4.494253e-02, -1.086424e-01, -7.972923e-02, 4.865765e-02, -6.141371e-02, -5.052402e-02, 6.323469e-02, -5.262460e-02, 7.253159e-02, -3.266377e-02, 5.376595e-02, -4.677507e-02, -5.667534e-02, -2.079503e-02, 8.007406e-02, 1.412698e-01, -5.942683e-02, -1.199038e-02, 4.160955e-02, -3.718048e-02, -1.123115e-01, 1.020663e-03, -7.292096e-02, 1.997579e-02, -1.360871e-01, 1.763397e-02, -5.747136e-02, -1.606465e-02, 1.001444e-01, 4.968047e-02, 1.615528e-01, -1.421059e-01, 4.571554e-02, 7.908733e-03, 7.792993e-02, 2.755502e-02, 4.813623e-02, 9.010614e-02, -5.996604e-02, -1.116434e-01, 1.246801e-01, 1.461533e-02, -8.245552e-02, -6.823090e-02, 6.217774e-02, 8.488193e-02, -8.413593e-02, -1.066846e-01, 3.333523e-02, 1.745022e-01, -7.540144e-02, -1.580670e-01, 1.231544e-03, 5.504411e-02, 1.053792e-01, -9.358783e-02, 3.895780e-02, -1.004085e-01, 2.868992e-02, 2.864155e-02, 2.429989e-03, 2.984943e-02, 2.691120e-02, -4.250690e-02, -1.105410e-01, -6.412366e-02, 2.257921e-02, 6.247148e-03, 7.941753e-02, -6.605925e-02, -4.040304e-02, 1.207137e-02, -8.668985e-02, 6.816196e-02, -1.476925e-01, 2.380489e-02, -2.768414e-02, -3.126599e-02, -3.040125e-02, -3.644820e-02, 2.640091e-03, -1.669531e-01, 1.935246e-03, -8.771184e-02, 1.047449e-01, 1.195636e-01, -4.272763e-02, -7.895102e-02, -8.313967e-02, -4.470910e-02, -3.553059e-02, 1.118203e-01, -1.249203e-01, -2.057450e-01, 9.926707e-02, -2.910965e-02, 9.874186e-03, -2.698331e-02, -4.910716e-02, -2.823553e-02, 4.635724e-02, 2.353009e-02, 1.885460e-02, -2.547912e-02, -8.872341e-02, 1.261847e-01, -6.123315e-02, 1.235587e-01, 1.216560e-01, -1.780703e-02, 1.226711e-03, 1.142804e-01, 3.390458e-03, 9.201558e-02, -2.451894e-02, 1.952605e-02, -2.713903e-02, -2.791335e-02, -4.848283e-02, 5.046076e-02, 5.465875e-02, -7.390513e-02, 4.796180e-03, -2.595222e-02, 1.535896e-02, 1.482828e-02, 1.143336e-01, 4.218940e-02, 9.058187e-02},
{2.111013e-02, -3.975954e-02, 5.763847e-03, 9.596594e-02, -2.719957e-01, 8.531477e-02, -8.696031e-02, 5.055102e-02, 1.730801e-02, 6.593587e-02, -1.799772e-02, 1.459091e-03, -6.082723e-02, 1.139688e-02, 7.557295e-03, -5.023726e-02, 7.791618e-02, -7.412983e-02, -4.607240e-02, -5.815839e-02, -8.859050e-02, 7.301275e-02, -7.183321e-03, -3.104346e-02, -2.682225e-02, 9.142453e-02, -6.100698e-02, -2.234584e-02, 1.086956e-01, 5.307031e-02, -5.898863e-02, 5.069949e-02, -1.187554e-01, -2.207696e-02, 9.840613e-02, -3.526065e-02, 5.887645e-02, 2.917638e-03, -1.052695e-02, 2.864428e-02, 1.774088e-01, 5.380213e-02, -4.925351e-01, -7.954089e-02, 2.138244e-02, 5.060683e-02, -5.843876e-02, -5.922443e-02, 2.089838e-01, 5.808658e-03, 7.510393e-02, -2.543515e-02, -3.704118e-03, 3.299740e-03, -8.803002e-02, -8.543084e-02, 9.327559e-02, 7.078886e-02, 1.287376e-03, -8.824514e-02, 5.756883e-02, -6.021967e-02, 1.835572e-01, 5.302406e-02, 4.134687e-02, 4.306834e-02, 1.262968e-02, 7.036704e-02, 8.260657e-02, -3.656188e-02, -2.288625e-02, 7.617731e-02, 9.757379e-02, 4.524522e-02, -3.452507e-02, 3.560524e-03, 3.533773e-01, -6.822863e-02, -9.797724e-02, -5.096282e-02, -2.051714e-01, -1.846093e-01, 8.043389e-03, -4.676600e-02, 3.617123e-02, 1.397071e-01, -7.554595e-02, -6.285474e-02, -7.874504e-02, -8.813129e-02, 2.213233e-02, 4.086494e-02, 1.578808e-01, 2.068855e-01, -2.537996e-02, -1.007786e-01, 8.607047e-02, 1.203046e-01, 7.642233e-02, 4.756564e-02, 1.192151e-01, -5.927038e-02, -6.600147e-02, 5.281204e-02, -4.852986e-02, -7.828007e-03, 1.494494e-01, -5.752824e-02, -1.187197e-01, 1.028218e-01, 9.923703e-02, -3.205065e-01, -1.535422e-01, 7.720130e-02, -2.600634e-02, 7.098507e-02, -5.390989e-02, 2.670317e-02, -7.719697e-02, -8.022361e-02, -7.420273e-03, -3.563677e-02, -1.067837e-01, 3.032054e-02, -5.322162e-02, 1.390819e-01, 3.236281e-02, 1.123416e-02, -3.610378e-02, -4.897610e-02, 5.048751e-02, -9.716869e-02, 3.376950e-02},
{6.259791e-02, -1.017188e-01, -5.418376e-03, 2.445017e-02, 6.303234e-02, 5.005625e-02, 8.292004e-03, 7.098233e-02, 3.069909e-02, -8.088604e-02, 7.011216e-02, -3.361673e-02, -2.826662e-02, 3.754346e-02, -4.115552e-02, 2.604209e-02, 1.963066e-02, 7.596780e-02, -8.974297e-02, -3.716443e-02, 1.356569e-02, -4.781880e-02, 8.681429e-04, -4.391111e-02, -3.141182e-02, -3.743764e-02, 7.924004e-02, -5.201462e-02, 9.008918e-03, 2.918502e-02, -3.466666e-03, -2.273729e-02, 5.261018e-02, 1.027181e-01, 4.701023e-02, -3.177038e-02, 7.818268e-02, -4.448966e-02, 8.549075e-02, 4.256456e-02, 3.757912e-02, 8.872022e-03, 9.433292e-02, -7.625347e-02, -4.461883e-02, -8.390546e-02, -5.624157e-02, 6.324342e-02, -1.913608e-02, -1.098378e-01, -5.521657e-02, -2.259555e-02, -7.623215e-02, -3.989885e-02, -5.290794e-02, -1.280097e-01, -8.025131e-02, -8.447431e-02, 7.516848e-02, 9.632403e-02, 5.290741e-02, 3.201641e-05, -1.464619e-02, 7.675186e-02, 7.722790e-02, -4.089659e-02, 6.072091e-02, 3.808339e-02, -8.243018e-02, -6.687722e-02, -8.637873e-03, -1.333629e-02, 8.671208e-02, 4.658206e-02, 2.593734e-02, 6.186482e-02, -6.863996e-02, -2.740102e-02, -6.858759e-02, -4.649429e-02, 4.696251e-02, -4.115735e-02, -3.146861e-02, -9.256788e-02, -5.266027e-03, 4.152454e-02, -5.020905e-02, 6.340799e-02, -3.962756e-02, 6.147842e-02, 2.031846e-02, 1.100704e-02, -9.211740e-02, -2.768967e-02, -2.228340e-02, -1.532088e-02, 2.764704e-02, 1.246214e-01, -4.450469e-02, -6.006288e-02, 3.000825e-02, 5.910236e-02, -1.634965e-02, -1.001220e-02, 2.784274e-02, -3.335402e-02, -7.470307e-02, 3.493254e-02, 3.398884e-03, -7.914279e-02, 7.870796e-02, 6.156565e-02, -7.176191e-02, -5.678765e-02, 5.112505e-02, 6.699242e-02, -1.114589e-02, 3.001062e-02, -9.933006e-02, -5.834486e-02, 4.741436e-02, -5.394220e-02, -2.237124e-02, -4.457239e-02, -6.200006e-02, -3.557036e-02, -9.283510e-02, -1.868550e-02, 1.325713e-02, -1.040044e-02, 4.360867e-02, -7.741418e-02, -4.026658e-02},
{-4.064567e-02, -1.926865e-01, -1.192939e-01, 5.747575e-02, -9.195716e-03, -8.405310e-02, -1.045216e-01, -3.548000e-02, 7.662064e-03, -2.672695e-02, 3.104316e-02, -7.472076e-02, 2.070476e-02, 6.025661e-02, -1.874107e-02, -1.102225e-01, -2.231015e-02, -8.692572e-02, 2.812265e-02, -8.250380e-02, -7.202964e-02, -1.205468e-02, -2.403922e-02, -8.104242e-02, -2.907481e-02, 6.793004e-02, -9.622046e-02, 1.024676e-02, 3.818992e-02, -1.157309e-02, -3.526393e-02, -1.461379e-02, 2.045308e-02, 8.311686e-02, 2.734988e-01, 7.545716e-02, 1.006590e-01, 7.623997e-02, 2.757911e-02, -2.434107e-02, 1.159768e-01, -4.033235e-02, -2.044592e-01, -1.243293e-01, 7.265381e-03, 3.417181e-02, -1.089567e-02, -2.077981e-02, 1.479989e-01, 2.031515e-01, -7.104509e-03, -4.614831e-02, -9.771998e-03, 8.596633e-02, 7.194713e-03, 8.573709e-02, 2.067837e-02, -7.216125e-02, 9.329131e-02, -1.310379e-02, 2.598544e-02, -6.437141e-02, 1.172624e-01, -4.348334e-02, -9.646723e-02, 8.442587e-02, 1.767948e-02, -5.960556e-02, -7.436259e-02, -6.107701e-02, 7.944809e-02, 1.776079e-02, -4.042232e-02, -4.331968e-02, 9.779369e-03, 9.270103e-02, 1.965829e-01, -7.005969e-02, -4.278701e-02, -3.092777e-02, -2.063982e-01, -6.109375e-02, -7.473253e-02, 3.895337e-02, 3.571951e-02, -7.590789e-03, 6.509398e-02, -6.985527e-03, 5.485327e-02, 8.012860e-02, 2.014215e-02, -9.001740e-03, 7.958925e-02, 1.879702e-01, 4.683653e-02, 3.526860e-02, -6.832719e-03, -2.690147e-01, 8.529509e-02, 2.328504e-04, -1.375628e-02, -2.089729e-01, -6.139181e-02, -6.004357e-02, -8.602273e-02, 5.807585e-02, 6.095194e-02, -2.412706e-02, -6.785051e-02, 2.630217e-02, 1.588861e-01, -3.768383e-02, -1.538586e-01, 6.518675e-02, 2.115194e-02, -4.131980e-02, 3.047568e-02, -2.655258e-02, 5.133070e-02, 1.893845e-03, 6.523103e-02, -2.506583e-02, -7.361851e-02, 4.659396e-02, 8.909637e-02, 7.452013e-04, -7.644559e-02, 9.940619e-03, 4.800369e-02, -9.057194e-02, 2.731622e-02, 4.538569e-02, 5.858539e-02},
{1.415074e-01, 5.065794e-02, -1.999668e-02, -1.004351e-01, -1.107715e-02, -6.623470e-02, 2.975550e-02, -5.017897e-02, -8.868562e-02, 9.094231e-03, -2.494660e-02, 4.036333e-02, 7.596030e-02, -7.549241e-02, 5.827651e-02, 1.063850e-02, -6.119819e-02, -7.474265e-02, 6.424160e-02, -2.895812e-02, -6.163955e-02, -6.580088e-03, 5.918316e-02, -6.866134e-02, 7.363596e-02, 9.991397e-02, -5.353402e-02, 5.756757e-02, 4.783776e-02, 1.180635e-01, 2.918424e-03, -8.282147e-02, 1.217136e-01, 1.235234e-01, 7.470474e-02, 7.972021e-02, 1.612062e-02, -1.129670e-01, 6.004095e-02, 3.009073e-02, -8.600716e-03, 9.389025e-03, 1.453654e-01, -6.728828e-02, -2.914631e-02, -1.870955e-02, 7.451596e-02, 1.014043e-01, -1.090586e-01, -4.727614e-02, -1.135617e-01, 3.449939e-03, -9.738525e-04, -3.984737e-02, 8.937104e-02, -6.250975e-02, 1.088906e-02, -3.805008e-02, -6.825263e-02, 4.550920e-02, 2.186707e-02, -4.578453e-02, -2.384848e-02, -7.209725e-02, 7.263530e-02, 3.774390e-02, 1.929279e-02, 3.672577e-02, -4.741273e-02, -1.027446e-03, -5.988241e-03, 3.075574e-02, 9.745314e-03, -5.047160e-02, -4.976705e-02, 1.277821e-02, -7.974644e-02, -5.468234e-03, 9.117971e-02, 4.690494e-02, -2.738979e-02, -3.853060e-02, 8.295863e-02, -9.068294e-02, 2.159602e-02, 6.879345e-02, -4.642233e-02, 9.091301e-02, 6.968440e-03, -3.782698e-02, -1.523005e-02, 5.141132e-03, 4.054807e-02, 1.677055e-02, 1.013767e-01, -4.110429e-02, 2.831541e-03, 4.321251e-02, 5.102362e-02, -1.044036e-03, -4.466017e-02, 1.402601e-01, -3.872407e-03, -9.155729e-02, 7.669992e-02, -7.281177e-02, -6.972440e-02, 2.424551e-02, 4.745242e-02, -7.328105e-02, -3.541383e-03, -6.920888e-02, 1.142418e-02, -3.084945e-02, 5.916891e-02, 1.042453e-02, 1.295357e-02, 3.521024e-02, 4.820475e-03, 3.625579e-02, 7.589895e-02, 1.712437e-02, 7.906044e-02, -4.386328e-02, -1.375593e-02, 6.256291e-02, -3.852285e-02, -3.304911e-02, -7.894027e-02, -7.219451e-02, 9.976099e-03, -5.521800e-02, -2.605702e-02}

};
float Bias0_f[128] =
{
    4.788452e-02, 1.154791e-01, -1.679411e-01, -7.894153e-02, -1.448060e-01, -3.584534e-02, -1.028528e-01, -1.626542e-01, 2.050383e-02, -4.595023e-02, 1.562864e-01, -2.338910e-02, -2.822087e-02, -2.560600e-03, -3.406034e-02, -1.579802e-01, -8.812642e-02, -1.118898e-01, -1.346088e-01, -1.576650e-01, -1.058677e-01, -4.815836e-02, 7.561488e-02, 9.093934e-02, -7.786268e-02, -3.121860e-02, -3.744056e-02, 7.283637e-02, 6.678411e-02, -1.162623e-01, -6.809123e-02, -1.111863e-01, -1.244916e-01, -3.582718e-01, -1.809928e-01, -2.145530e-01, 6.761475e-03, 1.141581e-01, 7.828494e-02, -7.986084e-02, 9.459172e-02, 9.077978e-02, -9.727256e-02, -2.117418e-01, -6.840476e-02, -1.043144e-01, 9.712084e-02, -1.399798e-01, 1.946731e-01, -1.922799e-01, -1.306149e-01, -3.453362e-02, -1.521870e-02, -5.718602e-02, 8.658106e-02, -3.095732e-02, -1.109265e-01, -6.815030e-02, -3.737534e-02, 8.137498e-03, -1.427503e-02, 7.320978e-03, -9.710730e-02, -1.147666e-01, -5.115381e-02, -3.234203e-02, 7.206751e-02, 1.317953e-01, -1.679687e-01, -1.177673e-01, -8.228077e-02, 3.185596e-01, -1.148634e-01, -5.012542e-03, -1.151841e-01, 4.866937e-02, -5.396879e-02, 9.077144e-02, -9.772717e-02, -1.128916e-01, 9.505638e-02, -4.203293e-02, -2.333072e-01, 1.835751e-02, 4.014650e-02, -1.540516e-02, 5.991706e-02, -1.663700e-01, 1.569396e-01, -7.733688e-02, -3.423386e-02, -5.490619e-02, 6.323549e-03, -7.775873e-03, 3.389296e-02, -2.229226e-02, -1.623089e-01, 1.962765e-02, -1.872489e-01, -2.004944e-01, -1.471910e-01, -1.111400e-01, 1.592754e-01, 4.871843e-03, 8.396810e-02, 1.012327e-01, 9.723363e-02, -1.147227e-01, -6.265921e-02, -1.601553e-01, -9.466410e-02, 1.213753e-01, -1.216899e-01, 3.317250e-02, 2.503882e-02, 7.474912e-02, -9.649649e-02, 4.321735e-03, 1.532678e-01, -5.394133e-02, -1.038819e-01, 6.146036e-02, -1.796754e-01, 6.660252e-02, -4.892846e-02, -3.525326e-02, -3.297618e-02, 1.783527e-02
};
float Weight0_i[128][5 + 128] =
{
    {1.494884e-01, -8.251023e-03, 7.095737e-02, -1.026764e-01, 5.691042e-02, -6.334250e-02, -3.255967e-02, -6.694175e-02, -1.256114e-02, 7.873257e-02, 5.337867e-02, 1.231396e-02, 3.900393e-02, -6.084603e-02, 8.441569e-02, 3.263471e-02, 4.239153e-02, 1.157861e-03, -5.343210e-03, 6.529304e-02, 9.311466e-02, 1.257550e-02, -1.869632e-02, 6.652173e-02, -9.586224e-02, 8.454370e-02, 5.985755e-02, 3.494044e-02, -4.354837e-02, 4.150139e-02, 5.943257e-02, 6.970309e-02, 1.372566e-02, -7.694954e-04, 5.573659e-02, 4.609332e-02, 1.020992e-01, 6.941993e-04, -1.160328e-02, 1.571818e-02, 4.036727e-02, -1.688296e-02, -2.643971e-01, -2.866971e-01, -4.216250e-02, -2.211128e-02, -5.839436e-02, -4.371125e-02, -4.773336e-02, -1.015137e-01, 7.788140e-02, -7.581332e-02, 8.744383e-02, 8.025719e-02, -1.034359e-01, 1.177167e-01, 1.090819e-01, -2.260857e-02, 8.439177e-02, -4.924562e-02, -6.872346e-02, -5.549614e-02, -1.333585e-02, 4.574729e-02, -5.089174e-03, 2.172672e-02, -2.848663e-02, -5.852081e-02, 1.841360e-02, -2.655914e-02, 9.839228e-02, 5.840111e-02, 5.073621e-02, 7.836848e-02, 8.656318e-02, 1.237948e-01, -9.202428e-02, -8.210018e-02, -1.239180e-01, 8.792663e-02, 1.962602e-02, -5.495628e-02, -5.694525e-02, 7.013153e-02, 4.790833e-02, 5.363092e-02, 4.083176e-02, 6.176025e-03, -5.641662e-02, -3.618789e-02, -6.912734e-03, 5.787356e-02, 9.513913e-02, -4.667796e-02, 5.734729e-02, 2.460218e-02, -2.341264e-02, -3.921967e-02, 5.283861e-02, -9.422792e-02, -4.841404e-02, -9.662011e-02, -3.095657e-02, 1.789740e-02, 2.998325e-02, 6.491263e-02, -7.111140e-02, -9.774143e-02, -7.963155e-02, -1.596950e-02, 1.135925e-02, 8.171264e-02, 1.373087e-01, -1.478208e-02, 6.678031e-02, -6.433166e-02, -8.879304e-04, 3.250824e-02, -2.902089e-02, 3.018541e-02, 2.996254e-02, -1.302354e-02, -5.112628e-02, -3.894828e-02, 6.347564e-02, -8.927736e-02, -6.019525e-02, -1.301087e-01, -2.676417e-02, -6.257708e-02, 8.871931e-02, -2.402874e-02, 1.010503e-02},
{1.814869e-01, -5.103584e-02, 2.332711e-02, 6.663015e-02, -1.921945e-02, -8.786565e-02, -3.489885e-02, -5.228419e-02, -1.105576e-02, -7.251275e-02, 1.781331e-02, 5.449501e-02, 8.177358e-03, 8.206338e-02, 1.718193e-03, -7.335503e-02, -2.752313e-03, -4.996318e-02, 6.866100e-02, 8.887287e-02, -6.184476e-02, 3.540414e-02, -3.552332e-02, 3.641853e-02, -9.636164e-03, -6.977887e-03, -5.472823e-02, -3.209428e-02, 6.939343e-02, -6.506041e-02, -3.769475e-02, 4.573404e-02, 4.043191e-02, 1.375338e-01, -2.817547e-02, 5.531603e-02, 7.703607e-02, 1.067798e-01, -1.818214e-02, 1.725392e-02, -2.933703e-02, 2.105850e-02, 2.582637e-02, 5.501483e-02, -6.055934e-02, -2.411594e-02, 1.708014e-03, -9.659196e-03, -1.192657e-01, -1.130593e-01, -7.569767e-02, 5.174145e-02, 7.792888e-03, 7.383411e-03, 5.115182e-02, -1.670289e-01, -4.513769e-02, -2.345360e-02, 8.327292e-02, -2.671542e-02, -6.007536e-02, 2.067861e-02, 2.920242e-02, 1.118822e-02, 2.284848e-02, 4.664024e-02, -1.032930e-01, -3.911458e-02, -7.106837e-02, -7.390776e-02, 5.436897e-02, -5.282001e-02, 7.052153e-03, -4.912882e-02, -3.899578e-02, 7.215475e-02, -1.000255e-01, 1.239654e-02, 5.131542e-02, 2.710987e-04, -3.792605e-02, -4.460428e-02, -1.561998e-02, -1.375596e-02, -3.683658e-02, -5.173660e-02, 7.942674e-02, 8.521011e-02, 7.579654e-02, 4.996173e-02, 3.573553e-02, -1.165388e-01, -4.269386e-02, -3.242104e-02, 6.462907e-02, -7.160389e-02, 3.233211e-02, -3.157528e-02, -3.358264e-02, -7.983257e-02, 1.532283e-02, -4.085957e-02, -8.455662e-02, -6.814557e-02, -4.321225e-02, -1.373979e-02, 3.808148e-02, -1.495076e-02, -3.722345e-02, -1.115432e-02, 3.140012e-03, 2.051298e-03, -2.686672e-02, -7.704344e-02, -2.193613e-02, -5.588173e-02, 2.916435e-02, 7.527138e-02, 4.272225e-02, -6.375040e-02, 6.436260e-02, 2.812071e-02, -3.471106e-03, 6.414773e-02, 8.580633e-02, 2.739175e-02, 4.204815e-02, -1.224460e-01, -1.638784e-02, 1.601095e-02, 7.037717e-02, -7.645254e-03, 6.568618e-02},
{3.953103e-02, 1.517750e-01, 4.745985e-02, 1.157988e-02, 3.368604e-02, -7.221109e-02, -3.297828e-03, 6.598727e-02, -7.869190e-02, 8.919622e-02, -7.200665e-02, 2.454095e-02, 2.704855e-02, 5.191414e-02, 9.441194e-02, 4.543540e-02, 3.350753e-02, -2.263583e-02, 3.188589e-02, -5.017387e-02, -1.488190e-01, 7.049201e-02, 2.988431e-03, -4.996035e-02, -1.249976e-01, -1.511351e-01, -8.257223e-03, -3.022847e-02, -2.726809e-02, -3.240608e-02, 9.169761e-02, 7.605870e-02, 1.557443e-01, -1.127796e-01, 9.488597e-03, -6.429324e-02, 6.736742e-02, -3.074333e-02, 8.344048e-02, -5.124339e-02, 1.074204e-01, 6.952200e-02, 5.575653e-01, 1.169081e-01, 8.862659e-02, 2.202218e-02, 7.829770e-02, 6.194053e-02, 4.841124e-02, -1.824775e-01, 3.302356e-02, -6.955161e-02, 6.460278e-02, -6.588889e-02, -4.753579e-02, -2.359744e-01, -4.711017e-02, -1.400301e-01, 5.790724e-02, -1.800089e-02, -6.756610e-02, 4.064468e-02, -8.096882e-03, -3.096227e-03, -5.688815e-02, -7.857095e-02, 1.614430e-02, -3.895394e-02, -5.031459e-03, -3.632224e-01, -1.097799e-01, -2.145845e-03, -2.112965e-01, 4.169137e-02, 5.497832e-02, -2.173356e-02, -3.108487e-02, -7.447696e-02, 4.959260e-02, -5.288210e-03, 5.734395e-02, -4.937053e-02, -8.181592e-03, -3.813488e-02, -2.475087e-02, 3.200016e-02, 6.452532e-02, -2.123596e-02, 6.552088e-02, -3.756407e-02, -3.461767e-02, 3.119118e-02, -1.084693e-02, -2.773340e-02, -2.915410e-02, -6.369500e-02, -5.807678e-02, -1.103027e-01, -6.657706e-02, 3.663586e-02, -9.237466e-02, 1.908527e-01, 5.356022e-02, -3.329610e-02, 1.230660e-01, 1.067408e-01, -3.119236e-02, -2.691023e-02, -3.376168e-02, 9.457636e-02, 7.050695e-02, 1.142737e-01, 1.174790e-01, -4.465018e-02, 2.611071e-02, 2.063703e-03, -8.704254e-02, 4.199511e-02, -5.910144e-02, 8.960197e-02, -2.597955e-02, -9.240372e-02, 9.463840e-02, 1.496249e-01, -3.750683e-02, -2.478428e-02, 3.113077e-02, -1.381609e-01, 8.824565e-02, 8.513837e-02, 1.267392e-01, 3.670599e-02, 4.381434e-02},
{9.628659e-02, 5.016040e-02, 1.447754e-02, 1.103475e-02, 7.003734e-03, 1.062943e-02, -1.070384e-01, 1.713885e-02, -1.700091e-02, -7.419468e-02, 1.428914e-01, -6.114744e-02, 2.858179e-02, 3.105906e-02, 3.700852e-02, 9.875424e-03, 4.073205e-02, 8.860108e-02, -2.753339e-02, 4.337985e-02, -9.487700e-02, 2.557680e-02, -8.899602e-02, -1.034698e-01, -7.001042e-02, -7.050750e-02, -1.206002e-02, -8.748392e-02, -5.148564e-03, -1.332879e-02, -6.865637e-02, 6.041332e-02, -1.784944e-02, -8.006532e-02, 1.310032e-03, -5.734419e-04, 5.795751e-02, 7.714581e-02, 1.217922e-01, 2.349545e-02, 1.145543e-01, 9.519333e-02, -3.021940e-02, -2.581438e-01, 6.454545e-02, -9.967139e-03, -1.468622e-03, 2.784180e-02, 3.819699e-02, 2.931960e-02, -1.513362e-03, 6.541545e-02, -3.728526e-02, 7.354072e-02, 4.204160e-02, -2.167114e-01, -1.273578e-01, -2.675052e-03, -3.991541e-02, -1.251424e-01, 7.683924e-03, 3.927633e-02, 1.969352e-02, -5.739022e-02, -9.970276e-02, 6.821769e-02, 8.057340e-02, -5.075076e-02, -3.055367e-02, -1.209417e-01, -6.921136e-02, 6.539079e-03, 1.092724e-01, 3.815041e-02, 2.345802e-02, 1.336292e-02, -1.834317e-02, -1.333821e-01, 5.989820e-02, -6.231826e-03, -1.008604e-01, -1.031490e-01, -6.846457e-02, 6.843898e-02, -5.152038e-03, -5.080390e-02, -5.153234e-03, -3.139353e-02, 3.926998e-02, 4.787926e-02, -9.327067e-02, -1.058233e-01, -2.228323e-02, -1.279869e-01, 5.900419e-02, 3.716272e-02, -4.229277e-02, -1.289108e-02, 1.004752e-01, -8.759299e-03, 8.819215e-02, 2.882947e-02, 1.592673e-02, 1.579395e-02, 7.641757e-02, -4.024731e-03, -6.174255e-02, 6.271443e-02, 3.865568e-02, 5.294775e-02, -1.805264e-02, 2.588617e-02, 1.654479e-02, 9.143915e-03, 9.900311e-02, -2.924609e-02, 6.267586e-02, 1.916423e-02, -1.175216e-01, 3.893545e-02, 8.586868e-02, 1.204166e-02, 4.541975e-02, -5.816234e-02, 9.643623e-03, -2.604170e-03, -3.615619e-03, 2.174702e-02, -2.148322e-02, 3.315525e-02, 1.101872e-01, -7.503189e-03, -3.453373e-02},
{1.097701e-02, 5.246917e-03, -8.146442e-02, -4.979449e-02, 3.945809e-03, 4.401815e-02, -3.718041e-02, 2.835947e-03, -4.531462e-02, 3.966785e-02, -3.384030e-02, -6.356604e-02, 3.284891e-02, -2.780076e-03, -9.813177e-02, -1.226399e-02, -6.897065e-02, -6.092638e-02, -6.596706e-02, -7.586025e-02, -4.997076e-02, 8.905149e-02, -7.074772e-02, 1.395476e-03, 4.957982e-02, 9.007142e-02, 8.910266e-02, -6.033047e-02, -1.504947e-02, 7.488590e-02, -2.147563e-02, -2.276316e-05, 6.929176e-02, -3.375440e-02, 1.004839e-01, 2.795823e-02, -5.598485e-02, 2.746693e-02, 1.759103e-02, -6.048773e-03, 5.439234e-02, -2.514899e-02, 2.057798e-01, -3.310283e-02, 3.302055e-02, -5.744842e-02, 2.042670e-02, -1.014493e-02, -3.255650e-02, -1.047303e-01, -3.114511e-02, 7.891911e-02, -3.268343e-02, 7.265193e-02, 8.439210e-02, 2.180801e-02, -8.650398e-02, -8.018371e-02, 7.853495e-02, -2.346027e-02, 3.354691e-02, -4.654601e-02, -5.742899e-02, -2.499348e-02, -6.916640e-02, -9.737875e-02, -2.353727e-02, 5.567973e-02, 9.495960e-02, -9.390415e-02, -3.332047e-02, 6.239337e-02, 1.454070e-02, 2.960196e-02, 1.835744e-02, -9.929269e-03, 6.877679e-02, 4.516276e-02, 1.734225e-02, -6.763507e-02, 3.057999e-02, 5.406243e-02, 6.531949e-02, -6.661733e-04, -5.553125e-02, 8.209698e-02, -4.675878e-03, 1.185586e-01, -5.525753e-02, 7.946312e-02, 1.597204e-02, -4.148024e-02, -4.168113e-02, -8.951432e-02, 3.307883e-02, -6.063853e-03, 5.506454e-02, -4.530106e-02, 4.670846e-02, -7.980917e-02, -6.292103e-02, 9.711383e-02, -4.915276e-02, 2.772614e-02, -4.082136e-02, -4.220224e-02, -1.445535e-02, 7.864755e-02, 1.544910e-02, -6.198021e-02, 2.722140e-02, 3.734158e-02, -4.777715e-02, -3.741474e-03, -6.918105e-02, -1.235405e-02, -2.855270e-02, 2.068431e-02, -6.549319e-02, -3.269793e-02, -8.336813e-02, 5.947596e-02, 2.899410e-02, -6.495071e-03, -7.219072e-02, -5.751539e-02, -3.471282e-02, -8.098227e-02, -3.127550e-02, 6.196886e-02, 5.538090e-02, -7.508134e-02, 5.645261e-02},
{-1.030526e-01, -5.878235e-02, 1.190402e-01, -7.716519e-02, 1.034465e-01, 8.401809e-02, 2.632934e-02, 2.002639e-02, -7.057075e-04, -2.987062e-02, 2.656789e-02, 1.135396e-01, -7.184052e-02, 6.528191e-02, -3.451881e-03, 2.910864e-02, -6.315470e-02, 7.683557e-02, 3.537469e-02, 2.022875e-02, 2.367682e-02, 1.020208e-02, 3.760128e-02, -4.658390e-02, 5.449985e-02, 2.277866e-02, -3.460683e-02, -1.196298e-02, 1.089737e-02, -2.118717e-02, 6.380154e-02, 6.365038e-02, 8.822556e-04, 1.973488e-02, -9.073939e-02, -2.056166e-02, -6.791487e-02, 4.887617e-02, -1.313481e-01, 1.978091e-02, 7.002230e-04, -5.780000e-02, 5.193894e-02, -3.494767e-02, -6.840220e-02, -3.967287e-02, 3.254671e-02, 3.423524e-03, -7.085013e-02, -8.012287e-02, -3.528202e-02, -8.299100e-02, 5.586432e-02, -1.309157e-01, 3.487916e-02, 2.778255e-02, 1.827558e-02, -1.759477e-01, -7.603388e-02, 3.250404e-02, -5.495211e-02, -3.995198e-02, -3.484622e-03, -4.410596e-02, 4.445751e-02, 4.605003e-02, -3.138248e-02, 7.667049e-02, 9.453369e-02, -2.107322e-02, -2.881068e-03, 9.946810e-02, -1.159009e-01, 1.003705e-01, -7.195814e-02, 1.511291e-02, -3.639904e-02, 1.612246e-02, 8.335704e-02, -6.582921e-02, 1.338486e-01, -4.706731e-02, -2.842194e-02, 9.465936e-03, 1.063758e-02, -5.898278e-03, 8.015194e-02, 1.034580e-01, 2.819863e-03, -9.096333e-02, 5.227275e-02, 2.964620e-02, -4.687457e-02, -4.786320e-02, -8.281785e-02, 4.530193e-02, -3.525827e-02, 6.913196e-02, 4.604740e-02, 6.162223e-02, -3.430440e-02, -4.830109e-02, -1.295197e-01, -6.077226e-03, 6.017469e-02, -3.332492e-02, -6.673580e-02, -7.411036e-02, -6.049127e-02, -4.013622e-02, -3.188285e-02, 2.963729e-03, -9.730784e-02, 8.902697e-02, 3.510138e-02, 2.383759e-02, -4.130119e-02, -8.743536e-02, 3.079692e-02, -6.550311e-02, -8.895531e-02, -9.119694e-03, 1.073129e-01, -7.564875e-03, -6.524692e-02, -2.830224e-02, -3.905720e-02, -1.234353e-01, -1.321277e-01, 1.591889e-01, -4.764203e-02, 9.293317e-02, -5.753651e-02},
{1.787394e-02, 4.497727e-02, 7.143454e-02, -5.169695e-02, -3.699344e-03, -3.043127e-02, -1.629321e-02, 1.382233e-02, -6.963936e-02, 1.559843e-02, 4.355154e-03, -4.896668e-02, -2.250267e-02, 1.108177e-01, -9.230640e-03, -3.368889e-02, 4.098744e-02, -3.671734e-02, 1.084544e-01, 9.266027e-02, -9.327729e-02, -8.018547e-02, -5.714459e-02, 4.133951e-02, -2.392104e-02, 2.750240e-02, 8.305268e-03, 2.093190e-02, -1.080396e-01, -1.152629e-01, -1.205675e-01, 8.576033e-02, -5.270784e-02, -5.154401e-02, -1.278257e-02, -1.168310e-01, -2.527037e-02, -1.016053e-02, 1.168352e-02, -8.365804e-02, -4.939419e-02, 9.733958e-02, 2.173112e-03, -4.655438e-02, 4.609128e-02, 6.293622e-02, -4.336985e-02, -6.663461e-02, -2.302946e-03, -1.222893e-01, -1.701979e-02, 5.205641e-02, 1.987558e-02, 1.037909e-01, -4.520390e-02, -1.371660e-01, 7.849003e-02, -4.574047e-02, -1.092465e-02, -1.306570e-01, 5.296215e-02, -1.040122e-01, -7.822859e-02, 1.154997e-01, -1.948353e-02, 2.566927e-02, 8.035972e-02, -7.517328e-02, -5.605126e-02, -1.780954e-01, 8.435378e-02, 4.844492e-03, 8.567240e-02, 3.398576e-02, 1.244057e-01, 1.002365e-02, -7.967450e-02, -2.477169e-02, -1.060205e-01, 1.074117e-01, -3.130165e-02, -9.295893e-02, 5.597740e-02, -2.921689e-02, 2.520073e-02, 3.246387e-02, 3.728129e-02, -4.649891e-02, -2.721147e-02, 6.245283e-02, 3.712307e-03, 9.783097e-02, 3.598219e-02, -2.983177e-02, -1.623810e-02, 1.174873e-02, -5.954606e-02, -5.241166e-02, 5.866559e-02, 4.915957e-03, 2.718245e-02, -1.893557e-02, -5.043701e-02, -3.105892e-02, -3.071783e-02, -6.099337e-02, 5.183563e-02, 4.720718e-02, -7.584427e-02, 8.475897e-02, 3.680962e-02, 8.958845e-02, 4.597219e-02, -3.758595e-02, -3.124015e-02, 9.854271e-02, -1.222278e-01, 3.038763e-02, 4.615402e-03, 1.657514e-02, 9.803753e-02, -1.147550e-01, -8.277415e-02, 4.416334e-02, 8.807524e-03, -1.130015e-01, 1.063970e-01, -1.092249e-01, -7.266125e-04, -8.019453e-02, 4.244425e-02, -5.922353e-03, 9.558030e-02},
{4.639593e-02, 4.338105e-02, 8.096964e-02, -4.766409e-02, -5.127515e-02, 1.458475e-01, -9.175200e-03, -1.286933e-01, 1.461658e-01, 4.211088e-02, -9.164427e-02, -1.903916e-02, -9.241716e-02, -3.748811e-02, -1.004039e-01, 7.334419e-02, 1.282292e-01, -1.866779e-03, 1.535589e-02, -4.818198e-02, -6.690646e-05, -6.828713e-02, 2.303047e-01, -1.221214e-01, 6.602804e-02, -9.228763e-02, -2.255659e-02, 1.149853e-02, -6.249902e-02, 1.029142e-01, -5.520903e-02, -3.451028e-02, 2.208695e-01, 2.656236e-02, -2.402284e-01, 2.071412e-02, -1.489481e-01, 2.338959e-02, -1.287768e-01, -1.648619e-02, 5.161671e-02, -5.891217e-02, 9.149492e-02, 1.881116e-01, -7.972490e-02, -1.026530e-01, 1.602423e-01, 4.620174e-02, -2.310771e-01, -3.053195e-01, 1.128519e-01, 1.121946e-01, -2.967928e-02, -8.564681e-02, 1.287124e-01, -1.399207e-02, -2.221932e-02, -2.065308e-01, 5.895415e-02, 6.881058e-02, -4.314294e-03, 5.178179e-02, -6.536814e-02, 6.623298e-03, 8.938458e-02, -6.530665e-02, -5.474432e-02, 1.139291e-01, 1.031903e-01, -4.159433e-02, 1.080587e-01, 2.651079e-02, -1.398833e-01, -7.278956e-02, 2.437945e-02, -5.627501e-02, 6.235795e-02, 8.840152e-02, 9.511002e-02, -7.126906e-02, 7.548623e-02, 1.640563e-02, 8.738024e-02, -5.727644e-02, 5.723691e-02, 9.373616e-02, -1.089176e-01, 1.055039e-01, -3.814630e-02, 2.509743e-02, 2.876896e-02, 1.732103e-01, -4.082019e-02, 1.002694e-01, 1.884785e-01, -8.053578e-02, 1.155595e-01, -2.278566e-01, -2.072309e-02, 5.563355e-02, 3.444846e-02, 8.855318e-02, 1.467973e-01, 6.484538e-02, -6.010941e-02, -3.884248e-02, 1.092553e-01, 1.510676e-01, 9.307683e-02, -1.611116e-01, 1.927196e-01, -1.701248e-02, -5.264805e-02, 7.938307e-02, 6.575593e-03, -1.437848e-01, 2.953663e-02, -1.361799e-01, -1.749459e-02, 5.439862e-02, 2.329910e-02, -1.822232e-02, -1.734574e-01, 5.919374e-02, -4.106681e-02, -4.035578e-03, -1.276099e-01, -1.943862e-01, -6.017774e-02, 9.279016e-02, -1.171609e-01, 1.672862e-01, -1.534494e-04},
{-2.327733e-03, -8.896428e-02, -6.889246e-02, -1.278008e-01, -6.834449e-02, 5.956791e-02, 6.077500e-02, 4.914225e-02, -4.970679e-02, 2.969726e-02, 7.438386e-02, -3.333300e-02, 5.494086e-02, 4.475171e-02, -2.834172e-02, 7.351220e-02, 1.459532e-02, 2.015717e-02, -7.342323e-02, -3.666668e-02, -1.723244e-01, -5.074489e-02, -1.955037e-02, -1.227353e-01, 9.073307e-03, 4.641202e-02, 4.137725e-02, 6.442626e-03, 2.643490e-02, 8.382729e-02, 8.040482e-02, 6.351037e-02, 6.461231e-02, 1.052835e-03, 6.522670e-02, -2.785907e-02, -5.712749e-02, -6.241181e-02, 1.735252e-01, 7.588286e-02, 4.346699e-02, 3.244429e-02, 3.484012e-01, 1.407237e-02, 4.630952e-02, -1.072297e-01, 5.513323e-03, 1.199411e-03, 9.370390e-02, -4.365563e-02, -2.570936e-02, -6.261091e-02, 7.080808e-02, -8.189511e-04, -8.659033e-02, -2.358008e-01, -4.360045e-02, -2.986605e-02, -7.831205e-02, 5.295545e-02, -7.392115e-02, -1.905626e-02, -5.759813e-02, 3.712482e-02, -4.707998e-02, -3.641006e-02, -8.389699e-02, 7.126267e-02, -2.466938e-02, -1.762433e-01, -7.007919e-02, 8.289938e-02, -5.819142e-02, 5.440176e-02, -3.147767e-02, -4.635701e-02, 7.643578e-02, -1.069036e-01, -1.995057e-02, -4.701849e-02, -6.251165e-02, -7.044189e-02, 5.744316e-02, -3.171626e-03, -7.462531e-04, 5.672775e-02, -1.334320e-02, 4.157927e-02, -8.952843e-02, 5.400558e-02, -6.792882e-02, 1.210306e-02, -1.496779e-01, -2.692236e-02, 5.699313e-02, -2.229258e-02, 4.052582e-02, -1.073334e-01, -7.800855e-02, -7.577208e-02, -5.596128e-02, 2.739815e-01, 5.729390e-02, -9.683660e-02, -1.834036e-02, -1.703370e-02, -1.084705e-02, -7.824834e-02, 6.814911e-02, -2.031865e-02, 2.870837e-02, 6.552820e-02, 7.341507e-03, 3.111644e-02, 4.770838e-02, -5.176636e-02, 1.300227e-02, -1.537987e-02, -1.056909e-01, -6.407028e-02, -3.677353e-02, -8.331442e-03, 1.323972e-01, 1.006970e-01, 6.670388e-02, -8.910828e-02, 7.326102e-02, -2.664424e-02, 3.655853e-02, 9.620418e-02, -6.238290e-02, 4.976445e-02, -5.224361e-02},
{7.689603e-02, 5.032540e-02, 2.163021e-02, -1.943195e-02, -1.084569e-01, -6.082308e-02, 1.031150e-01, 1.390625e-02, 5.884641e-02, -7.323301e-02, -4.443311e-02, -2.167645e-02, -2.232511e-02, -5.326773e-02, -8.167927e-02, 2.605871e-02, 1.820561e-02, -5.692878e-02, -8.197697e-02, -6.154518e-02, -1.230682e-01, 5.179983e-02, 7.679336e-02, -1.930974e-02, 2.327786e-02, -6.315457e-02, -7.908312e-02, -3.729544e-02, 2.564151e-02, 4.266970e-03, 8.025833e-03, -1.099110e-02, 7.098758e-02, 1.318669e-03, -1.021498e-01, 1.411123e-02, 3.529853e-02, -8.975805e-02, -6.273485e-02, 3.042284e-02, 7.070493e-02, -8.481807e-02, 3.867003e-02, 2.793741e-02, -4.531225e-02, 3.258603e-02, -3.845546e-02, 7.022043e-02, -2.115000e-02, -1.698494e-01, 3.057352e-02, 2.182689e-02, -2.147359e-03, 2.151838e-02, 6.463806e-02, -2.076223e-01, -6.543864e-02, -1.171370e-01, -5.743152e-02, -1.004087e-01, -7.873286e-02, 3.369009e-02, -4.643816e-02, 6.462322e-02, -1.185571e-02, 1.262673e-02, -9.865012e-02, 9.887918e-02, 1.856315e-02, -1.991656e-01, 6.500043e-02, 1.482709e-02, 6.682398e-02, -8.265985e-02, 6.953458e-02, 6.751852e-02, 9.080894e-03, 8.282955e-02, 5.929347e-02, -7.501978e-02, 2.183782e-02, 1.373305e-02, -5.579418e-02, -1.089247e-01, -2.426986e-02, 1.393384e-02, -9.172421e-02, 9.723926e-03, -4.954555e-03, 1.111923e-02, -3.557514e-02, -1.747415e-02, -2.978754e-02, 2.398016e-03, 2.282228e-02, -1.635779e-02, 4.824514e-02, -2.049312e-02, -2.240186e-02, -3.524896e-02, -8.208640e-03, 8.542959e-02, 6.286818e-02, -2.146822e-03, 3.194810e-02, -1.393009e-03, 1.759303e-02, 1.736842e-03, 8.468661e-02, -1.224448e-02, 5.749015e-02, 6.266794e-02, -6.139359e-03, -4.152732e-02, 4.885662e-02, -5.951579e-02, -1.728957e-02, -5.071817e-02, -3.141810e-02, -6.991894e-02, -4.795086e-02, 7.046928e-02, 7.361645e-02, 9.927752e-02, 6.173444e-02, -6.578544e-02, -5.647151e-02, -2.493024e-01, 2.045609e-02, 4.191988e-02, 1.015972e-02, -7.515322e-02, 6.310926e-02},
{5.426129e-02, 2.908361e-02, 1.566633e-02, 3.629067e-02, -3.043742e-02, -5.381616e-02, 3.067722e-02, 6.727342e-02, 7.080137e-03, -2.809939e-02, 8.167673e-02, 7.255704e-03, -2.729447e-02, 8.034437e-02, 4.946539e-02, -3.957140e-02, -6.001641e-02, -5.187997e-02, -6.080760e-02, -2.628195e-02, -3.416948e-02, 8.194119e-02, -3.080045e-02, -6.413875e-02, 4.830871e-02, -4.168411e-04, 1.003686e-02, 7.896936e-02, 3.468478e-02, -8.019938e-02, 5.402561e-02, -6.317794e-03, -3.556593e-02, -4.548663e-02, 6.465870e-02, -8.552082e-02, 6.338123e-02, -4.318874e-02, 1.070082e-01, 1.728295e-02, -2.842444e-02, 6.089452e-02, -6.641070e-02, -1.230337e-01, -3.323827e-02, 7.946296e-03, -9.731916e-02, 6.118980e-02, 8.722330e-02, -5.309545e-02, -2.900052e-02, 8.337226e-02, 4.310314e-02, 2.254632e-02, 4.909939e-03, -5.366860e-02, -7.609414e-02, -6.121165e-02, -1.095155e-03, 2.031890e-02, -3.993467e-02, 7.766450e-03, 1.587365e-04, 9.331018e-02, 6.388593e-03, 9.340097e-02, 5.695936e-03, -2.115222e-02, 1.505916e-02, -1.242936e-01, -2.532749e-03, 8.380226e-02, 7.500690e-02, -4.717176e-02, 5.078613e-02, 6.025350e-03, -8.063928e-02, -7.018222e-04, -6.871177e-02, -9.990101e-03, -9.308183e-02, -2.834710e-02, 5.992542e-02, -3.567184e-02, -3.552153e-03, 5.345822e-02, -3.213890e-02, -4.247802e-02, 4.668079e-02, 6.906190e-02, 3.283023e-02, -7.518770e-02, 5.798861e-02, 6.671050e-03, 4.655930e-02, 4.992891e-02, -7.007954e-02, -8.242978e-02, -2.451001e-02, 7.684817e-02, -6.906487e-02, 1.448907e-01, -4.970956e-02, -4.642371e-02, 4.612129e-02, -4.691087e-03, 8.809412e-02, 3.289720e-02, -4.752982e-02, 8.986401e-02, -1.032531e-02, -3.656781e-02, 2.205026e-02, -7.337881e-03, -4.597735e-02, 7.271611e-03, 1.222642e-02, 8.375134e-03, 4.980509e-02, 8.427453e-02, 3.311701e-02, 6.256793e-03, -6.805051e-02, 7.793047e-03, 3.367838e-02, -4.055005e-02, -5.339098e-02, -3.833092e-02, 5.905958e-02, -1.920824e-02, 4.087310e-02, -3.924860e-02, -4.331626e-02},
{9.657714e-02, -7.025300e-02, 7.677981e-02, 5.135249e-02, 9.900868e-03, 7.448661e-02, -6.173898e-02, -6.935165e-02, -1.579691e-02, 1.309465e-02, -2.412494e-02, -1.754274e-02, 1.151916e-02, 1.193593e-01, 6.249382e-02, 4.453147e-02, 2.612705e-02, -8.104975e-03, 4.710907e-02, 4.932693e-02, -1.030674e-01, -3.168658e-02, 6.132627e-02, -8.808582e-02, -3.482673e-02, -1.652371e-02, -2.222482e-02, -7.798475e-02, -1.646898e-02, 1.115241e-01, 1.617822e-02, -4.713184e-02, 1.533157e-01, -8.472122e-02, -2.818810e-01, 1.400944e-02, 6.807443e-02, 4.409990e-03, -6.979764e-02, 4.654555e-02, 4.075995e-02, 7.017642e-02, 2.855300e-01, 1.429822e-01, -2.269546e-02, 8.078294e-02, -3.166862e-02, 3.941226e-02, -1.960748e-01, -3.224483e-01, 1.171104e-01, -3.265504e-02, -5.494347e-02, 1.001155e-01, -7.029660e-02, -1.866879e-01, -1.033350e-02, -1.513885e-01, 4.889769e-03, 7.144834e-02, -5.498369e-03, -6.895257e-02, -1.089570e-01, 6.449120e-02, 3.888490e-02, 2.534413e-02, -7.353474e-02, -9.132701e-02, -3.011419e-02, -3.351793e-01, -4.523770e-02, 9.211644e-02, -1.085279e-01, -2.735533e-02, 1.941062e-02, 1.110012e-02, 8.794495e-02, -8.303191e-02, -8.564974e-02, -4.862761e-03, 1.067153e-01, -3.753132e-02, 4.498941e-02, -6.096011e-02, -2.531520e-02, -4.703837e-02, 8.561154e-02, -4.318897e-02, 8.371534e-03, -1.671799e-02, -3.815183e-02, 7.529984e-02, -9.740042e-02, 9.639964e-02, -3.009759e-02, -3.189212e-03, -1.112912e-01, 6.439076e-02, 5.699847e-03, -7.981486e-02, 8.512006e-02, 2.051644e-01, -1.029805e-01, -6.468437e-02, 8.471371e-03, -3.429547e-02, 4.599861e-02, 9.881372e-03, 1.818948e-02, -6.876940e-02, -4.162522e-02, 3.938739e-02, 1.946120e-01, 1.582484e-02, -4.021304e-02, -6.675301e-02, 3.343803e-02, -2.119083e-02, 1.734234e-02, 6.898102e-02, 7.741632e-02, -1.147218e-01, 5.869525e-02, 1.370653e-01, 2.301791e-02, -4.915515e-02, -2.706606e-02, -1.404292e-01, 1.202152e-02, 1.343283e-01, 5.117024e-02, 9.466560e-02, 8.702232e-02},
{7.001834e-02, -1.228126e-01, -1.110108e-01, -1.020020e-01, 3.982458e-02, 7.976483e-02, 1.424550e-02, 5.665822e-02, -3.938243e-02, -5.556044e-02, 9.303900e-03, 5.222663e-02, 1.083138e-02, -6.074681e-03, -2.611463e-02, 8.357870e-02, -4.959821e-02, -2.332548e-02, 1.961234e-02, -4.670884e-02, -9.828611e-02, -5.892590e-03, 6.880870e-02, -1.158024e-01, -4.955039e-02, 1.022449e-01, 2.344233e-02, 5.791984e-02, -3.604406e-02, 9.179816e-02, -3.627692e-02, -3.023143e-02, 9.257135e-02, 2.208230e-02, -9.774766e-02, -8.921443e-02, 7.580552e-02, 1.286232e-02, 6.554424e-02, 1.243127e-03, -4.624150e-02, 4.878546e-02, 5.172032e-02, 6.266233e-02, -5.434479e-02, -9.098580e-02, 6.879844e-02, 1.963878e-02, -1.203350e-02, -1.626322e-01, -3.913788e-02, 7.916473e-02, -8.468311e-02, 2.491869e-02, 1.444418e-02, 4.360837e-03, 5.391360e-02, -8.510904e-02, 4.587808e-02, 4.654671e-02, 2.406246e-02, -6.761353e-03, 2.582685e-02, 2.259363e-03, 7.072292e-02, -5.150639e-02, 5.144166e-02, 7.243937e-02, 3.347946e-03, 7.724199e-03, -9.125623e-02, -2.002223e-02, -6.428170e-02, 5.859518e-02, -6.884492e-02, -4.710607e-02, -4.898019e-02, -6.701248e-02, -3.923747e-02, 1.269889e-03, 5.440943e-02, 5.129708e-02, 6.749089e-02, -2.648558e-02, 1.186826e-02, 7.433649e-02, -5.618649e-02, 1.089823e-01, -5.186465e-02, 1.496212e-02, -3.133419e-02, 3.091968e-02, 1.131899e-02, -2.286461e-02, 2.193038e-02, -8.926967e-02, -8.869124e-02, 7.734565e-02, 7.584983e-02, -3.216360e-03, -6.818351e-02, -1.658599e-03, -3.651299e-02, 6.832559e-03, -6.181505e-02, 3.453494e-02, -5.149916e-02, 3.160896e-02, 1.065851e-02, -4.790036e-02, -7.450423e-02, 6.642795e-02, -8.289514e-02, 3.607253e-02, 1.408234e-02, -5.549952e-02, 1.549817e-02, 2.805134e-02, 6.303545e-02, 1.496742e-02, -2.200210e-02, -5.968243e-02, -5.798312e-02, 2.886424e-02, -7.262024e-02, 6.975304e-02, -2.481483e-02, -2.504280e-02, 2.556784e-02, 4.559887e-02, 8.592781e-02, -7.310825e-03, 1.562780e-04},
{-1.509547e-02, -5.554546e-02, -9.096760e-02, 5.197195e-02, -8.654496e-02, 4.540560e-02, -8.233583e-02, 5.246912e-02, -9.598177e-03, 9.862794e-02, 6.329346e-02, -4.553822e-02, 6.917141e-02, 7.188324e-02, 6.535930e-02, -6.146284e-02, 6.676716e-02, 6.542922e-02, -2.853701e-02, -2.087014e-02, -1.296974e-02, 6.414913e-02, 5.158832e-02, 2.179772e-02, 2.454654e-02, 3.019502e-03, -4.034006e-02, -1.065854e-01, 1.464153e-02, -5.824254e-02, 6.284374e-02, -8.394836e-04, -3.483860e-02, 2.026291e-02, 6.632697e-02, -1.765707e-02, 1.094397e-01, -1.003010e-01, 7.355098e-02, 1.678312e-02, -7.006273e-02, 1.270077e-01, -1.787889e-02, 3.624203e-02, 4.381553e-02, -9.133996e-03, -3.240877e-02, -2.734801e-03, 4.993093e-02, 7.211787e-02, 2.302239e-02, 4.224708e-02, -3.410710e-02, 1.377428e-01, 7.044973e-02, 2.556904e-03, -7.486586e-02, 3.223475e-02, -1.921218e-02, -8.700133e-02, 1.379593e-02, -3.064228e-02, -7.426915e-02, 6.551643e-02, -5.627857e-02, 8.023912e-02, -2.522022e-02, -3.419579e-02, 4.602100e-02, -3.971367e-02, 4.927829e-02, 6.354196e-02, 8.578856e-02, -9.963656e-03, -4.523298e-02, 5.377714e-02, -8.654126e-02, 1.212180e-02, 2.188768e-02, 5.208169e-02, 1.830731e-02, 3.956951e-02, 9.641358e-03, 8.856375e-02, 2.132096e-02, -4.874315e-02, 6.665668e-02, 9.081717e-03, 5.350349e-02, -5.632972e-02, 6.144811e-04, -7.144073e-02, -5.937019e-02, 1.006014e-03, 4.805085e-03, 4.380245e-02, -8.882913e-02, -1.004100e-01, 6.643879e-02, -8.529475e-02, 3.123857e-02, 8.464414e-02, -5.684457e-02, -8.166228e-02, 5.343366e-02, 9.054959e-02, 6.669188e-02, -4.631425e-02, -4.132722e-02, 5.541788e-02, 5.898641e-02, 1.383027e-01, -2.444141e-03, -3.540480e-03, -8.380995e-03, 5.813679e-02, 1.734091e-02, 2.066991e-02, 7.379930e-02, 4.354448e-02, 1.621059e-02, 1.577659e-02, 7.515347e-02, 5.783253e-02, 5.372843e-02, -6.918465e-02, 1.125438e-01, -8.350372e-02, -9.334068e-03, 8.049507e-03, -1.491882e-03, 4.848007e-02, 5.325359e-02},
{1.156150e-01, 1.999072e-02, 1.666286e-02, -7.214087e-02, -9.070433e-05, 9.391929e-02, -1.995501e-02, -6.447142e-02, 1.976769e-02, -5.874633e-02, 7.330484e-02, -4.073023e-02, 5.247088e-02, -2.450298e-02, -6.376433e-02, -8.111098e-03, 1.880932e-02, -2.788321e-02, -5.477371e-02, -6.976783e-02, 1.457982e-02, -1.711619e-02, 3.958965e-02, -9.706400e-02, 8.384684e-02, 2.082356e-02, 6.540793e-02, 2.691609e-02, 6.667802e-02, -3.374754e-02, 8.636177e-02, -7.765947e-02, 7.468817e-02, -6.971438e-03, -1.322923e-01, -5.923644e-02, -2.449727e-02, 1.751128e-02, 6.614402e-02, -1.242686e-02, 8.200523e-02, -4.274694e-02, 7.460091e-02, -7.984165e-02, 2.461324e-02, -5.698158e-02, -3.783815e-02, -7.035624e-02, -4.606948e-02, -1.147997e-01, -5.658772e-02, -6.355851e-03, -2.635202e-02, 4.875575e-02, 6.145710e-02, -1.098663e-01, 2.914057e-02, -6.163690e-04, 1.546214e-03, 3.057720e-02, -4.211670e-02, -7.285574e-02, -8.368669e-02, -7.098349e-02, -7.939805e-03, -6.562516e-02, -9.372250e-03, 7.764728e-02, 1.171560e-02, 1.917245e-04, 6.424505e-02, 9.153742e-02, 4.397056e-02, 8.227094e-02, 5.595472e-02, 7.563792e-02, -1.673037e-01, -9.526259e-03, 1.987982e-02, 2.407849e-02, 7.702066e-02, 3.286392e-04, -9.830750e-03, -3.209956e-02, 7.877215e-02, 4.146487e-02, -8.534486e-03, 4.593094e-02, -5.964554e-02, 1.798194e-02, -3.599049e-02, -7.710359e-02, -8.746795e-02, -1.168727e-01, 5.409824e-02, -6.521892e-02, -9.217828e-03, 9.382492e-02, -6.282638e-02, 7.720662e-02, 3.275731e-03, 9.680529e-02, -5.283477e-02, -9.602848e-03, 9.503109e-02, 6.076821e-02, 4.536716e-02, -3.401444e-02, -9.482875e-02, 6.839571e-02, 8.864274e-03, 1.240280e-02, 7.452048e-02, -2.782743e-03, -2.281784e-02, 4.714672e-02, 8.346748e-02, -1.111681e-02, -7.335978e-02, -6.211615e-02, -4.608641e-02, -6.927310e-03, 1.763629e-02, 1.529424e-02, -7.587539e-02, -6.091292e-02, 3.934728e-02, -6.267054e-02, 3.217515e-02, 8.730020e-02, -1.861493e-03, 7.194060e-02, 8.280928e-02},
{-2.611272e-01, 5.236740e-02, -5.799326e-02, 3.128782e-03, -1.155305e-01, 1.334008e-01, 1.625074e-01, -7.803279e-02, 1.472760e-01, -8.764380e-02, 4.976184e-02, 6.098863e-02, -1.984184e-01, -3.200587e-02, -2.411649e-02, 6.738157e-02, 1.911765e-01, -2.446664e-02, -8.040891e-02, -9.681460e-03, -5.983059e-03, 1.221998e-01, 6.314464e-02, -5.263455e-02, 2.240577e-02, 1.229208e-01, -1.681855e-01, 7.493515e-02, 2.052384e-01, -5.780162e-02, 3.582443e-02, 5.098599e-02, -8.769488e-02, -8.004118e-02, 3.315698e-01, 2.180911e-01, -1.408931e-01, 4.486540e-02, 1.959725e-01, 3.865659e-02, 2.396873e-01, -1.756306e-01, -3.971762e-01, -9.982991e-02, -4.611846e-02, 1.162927e-02, 1.548777e-01, -1.488577e-03, 4.310136e-01, 1.439210e-01, -1.554229e-01, 1.656096e-01, 9.006383e-02, -5.672470e-02, 1.089176e-01, 2.100861e-01, -8.896281e-02, -1.081361e-01, -6.736085e-02, -2.006854e-01, -2.918283e-02, 1.759473e-01, 2.751945e-01, -8.595686e-02, 1.825651e-02, -1.874303e-01, 9.395219e-02, 9.398065e-02, -2.815225e-02, 9.198091e-02, 8.562697e-02, 2.361341e-02, 1.710805e-01, -2.172655e-02, -1.389551e-01, 1.968559e-02, 4.264097e-01, 6.492538e-02, 2.164225e-01, -3.984040e-02, -2.506033e-01, 1.099804e-01, -1.160903e-01, 5.899647e-02, 6.017295e-02, 2.628802e-01, -8.863892e-02, 1.644441e-01, -2.900334e-01, 9.406371e-02, 4.109878e-02, 1.021584e-01, 2.471976e-01, -6.820260e-02, 8.013395e-02, -2.418311e-01, -1.069074e-01, -9.491080e-02, 1.887154e-02, 1.678278e-01, 1.738316e-02, -2.547517e-01, 1.143048e-01, -4.139763e-02, 2.289876e-01, 2.771730e-02, 4.677409e-02, 5.050307e-02, 5.622402e-02, -8.062185e-02, 2.475321e-01, -3.708061e-01, -4.753720e-01, 7.524245e-04, -1.245715e-01, -6.188595e-03, 1.166057e-01, -9.101225e-02, 1.150500e-01, -1.237595e-01, -5.317526e-02, 1.356592e-01, -2.748380e-01, -1.219235e-01, -4.623260e-02, 3.788304e-02, -2.409286e-01, -1.311383e-02, -1.764800e-01, 6.823812e-02, -1.987085e-01, -1.247741e-02, -2.321797e-01},
{2.763063e-02, 6.227944e-02, 9.307819e-02, 1.036947e-01, -3.892240e-01, 5.339456e-02, 3.662234e-02, -8.566697e-02, 4.091068e-02, -3.424619e-02, -4.420114e-02, -6.742049e-02, -3.991175e-02, 4.510348e-02, -7.284433e-02, -6.364825e-02, -1.059021e-01, -8.525323e-02, -4.413559e-02, -8.329821e-02, -1.239395e-01, 6.644977e-02, 1.486308e-02, 5.885358e-02, -2.988690e-02, -5.857479e-03, -2.262023e-02, -4.528794e-03, 2.052928e-02, 4.959399e-02, -3.814101e-02, 6.725279e-02, -3.103301e-02, 3.880828e-02, 6.663208e-04, 5.935016e-02, -2.407298e-02, -3.395747e-02, -1.154219e-02, -4.462297e-02, -3.725320e-02, -3.776650e-02, -7.717901e-02, -4.624011e-02, -1.219894e-02, -4.081984e-02, 5.722513e-02, 2.975104e-02, -5.667658e-03, 2.971843e-02, 5.840524e-02, -2.612784e-02, 2.594393e-02, -3.296251e-02, 1.794934e-03, -6.240489e-02, -3.752257e-02, -6.748578e-02, -2.119106e-02, 4.175621e-03, -7.630797e-02, -5.758918e-02, 3.528803e-02, 5.988966e-02, 3.891350e-03, -8.489391e-02, -1.149887e-02, 6.031846e-02, 2.164067e-02, -7.697435e-02, 4.365637e-02, -7.926000e-02, -3.217359e-02, -4.666347e-02, -5.622981e-02, -6.515867e-02, -1.057825e-01, 7.691354e-02, -6.197820e-02, -3.208927e-02, 1.051012e-01, 5.084685e-02, 2.967742e-02, 5.810989e-02, 9.426226e-02, -7.054689e-02, -2.521669e-02, 4.323997e-02, 1.289134e-02, 3.769950e-03, 3.367281e-02, -1.480424e-02, -2.921723e-02, 1.357846e-01, -1.671669e-02, -7.255719e-02, -5.382548e-02, -4.087501e-02, 7.116698e-02, -4.314645e-02, 7.618215e-02, 7.007816e-02, 8.312634e-03, -3.955141e-02, 1.991534e-02, 3.387846e-02, -1.535383e-02, 9.087730e-02, 5.065146e-02, 8.252051e-02, -1.879458e-02, 3.949645e-02, -1.029007e-01, -1.390959e-02, -4.454890e-02, -5.776564e-02, -9.035306e-03, 3.200532e-02, -1.755600e-03, -8.325362e-03, -7.633881e-03, 2.282052e-02, 1.023291e-02, 1.166043e-01, 4.521408e-03, 3.931010e-02, 6.967446e-02, -4.635248e-02, 5.851676e-02, -4.335540e-02, 9.174225e-02, -3.154195e-02, -3.103766e-02},
{2.237692e-02, -1.517307e-01, -1.824660e-01, -1.546741e-01, -4.526889e-02, 1.686267e-02, -3.340764e-02, -3.969650e-02, -3.121993e-02, -9.509788e-02, -7.259866e-02, 6.596976e-02, 8.573812e-02, 5.196813e-02, 2.637085e-02, -1.303628e-03, 1.879263e-01, -2.279639e-02, 5.040341e-03, 3.982657e-02, 6.424378e-02, -9.550173e-02, -1.386541e-01, -5.216040e-02, 7.754610e-02, 6.597947e-02, -1.146529e-01, -1.981972e-03, -5.562834e-02, -7.173430e-02, -8.508728e-02, -2.435724e-02, 1.991134e-01, -5.265481e-02, 3.632281e-02, -3.385597e-02, -2.382352e-01, 6.379910e-03, 8.724453e-02, -1.654310e-02, 2.160580e-01, 1.220262e-02, 1.660135e-01, 8.087049e-02, -2.171503e-02, -7.344965e-02, -1.210943e-02, 1.299856e-01, 1.485116e-01, -2.952093e-02, -1.583772e-02, 5.577503e-02, -2.207293e-02, 8.700690e-02, 9.054518e-02, 3.004147e-03, 3.731608e-02, -2.903399e-01, -8.119532e-02, 1.991969e-01, -5.477423e-02, 9.337934e-02, -5.135639e-02, -3.568204e-02, 7.504031e-02, 1.335867e-02, 5.824058e-02, -1.997101e-02, 2.786997e-03, -1.552246e-01, 4.208422e-02, -1.784325e-02, -2.314816e-01, -9.158857e-02, -5.679503e-02, 4.572894e-03, 2.304851e-01, -1.059734e-03, 5.931230e-02, -6.194721e-04, -3.359156e-02, 1.360234e-02, 6.526378e-03, -1.758134e-02, -5.852348e-02, -4.311112e-02, 8.871645e-02, 6.711071e-02, 4.740441e-02, 6.125746e-02, 5.482791e-02, 2.093515e-01, 1.595349e-01, -1.169724e-01, 1.661127e-01, 5.384939e-03, -7.847106e-02, -5.678369e-01, 9.518445e-02, -2.587620e-03, 1.385883e-01, -1.608052e-01, 1.012439e-01, 2.512515e-02, 1.389623e-01, -5.906653e-02, -2.798265e-02, 8.773044e-02, 2.052163e-02, -6.114083e-04, 5.614819e-02, 1.510677e-02, -5.287037e-02, -4.302661e-03, -1.325388e-01, -3.496385e-02, -2.778796e-03, -9.241658e-02, -4.373991e-02, 2.502266e-02, -9.659442e-02, -2.695108e-02, -7.195262e-02, 2.148404e-01, 1.268332e-01, -5.644980e-02, -3.007300e-03, 7.463752e-02, -1.968857e-02, 1.408490e-01, -8.882292e-02, 1.193930e-01, 5.356781e-02},
{-5.852616e-02, -5.414463e-03, -2.948356e-02, 3.545044e-02, 4.581060e-02, -5.528542e-02, -2.472815e-02, -5.948898e-02, -1.452023e-01, 1.880998e-02, -3.852522e-02, 1.267920e-02, 8.779003e-02, 1.832546e-02, 1.632937e-02, -1.811888e-02, -9.955907e-02, 2.460847e-02, -1.032010e-01, -4.281891e-02, 6.488954e-02, 4.595837e-02, -5.789416e-02, 7.194182e-02, 1.646269e-03, -1.308358e-01, 2.348865e-02, -1.998054e-02, -5.754212e-02, -8.465681e-02, -1.524102e-02, -4.488258e-02, -1.040934e-01, 8.531306e-02, 2.171394e-02, 4.586041e-02, -7.379548e-02, -4.065040e-02, 2.373549e-02, 1.187234e-01, -4.989413e-02, 7.131534e-02, -5.273764e-02, -2.138412e-02, 1.983787e-02, 7.829218e-02, -3.968738e-02, -5.992163e-02, -3.936747e-02, -4.240278e-02, 2.735818e-02, 7.641374e-02, -1.416733e-01, 1.379055e-01, -6.844502e-02, -1.700755e-01, 1.273025e-01, -1.135909e-02, -8.003131e-02, 1.035193e-01, -1.903437e-02, 2.100790e-02, -1.225197e-01, -4.958498e-02, 7.514804e-03, 9.801521e-02, -6.712354e-03, 1.301292e-01, -1.026435e-01, 2.379405e-01, -3.703288e-02, -1.191376e-01, 7.014143e-02, -9.256271e-02, -1.013478e-01, 5.242700e-02, -3.051675e-02, 9.663427e-03, 5.701531e-05, 1.146359e-01, 8.197488e-02, 1.107818e-01, 7.859452e-03, 3.643733e-02, 7.058927e-03, -8.093159e-02, 4.443800e-02, 4.801585e-02, 8.360560e-02, -4.533722e-02, 7.415593e-02, -1.454126e-01, 1.569814e-01, 5.199288e-02, -5.006730e-02, -3.099867e-02, 2.049625e-02, -8.146261e-02, 6.743190e-02, -1.982936e-02, 8.472945e-02, 1.240748e-02, -8.089711e-02, -7.658470e-02, 1.005044e-01, -1.025332e-01, -5.596914e-02, -4.529354e-02, -8.147876e-04, 9.044608e-02, -1.328748e-01, 1.264950e-01, 8.686345e-02, -9.113935e-02, 1.048013e-01, 3.097436e-02, 4.969145e-02, 7.781014e-02, -1.826400e-01, 1.197735e-02, 9.138817e-03, 5.725864e-02, 1.875567e-01, 1.098680e-01, -5.634881e-02, 1.628977e-02, 8.072369e-02, -7.102098e-03, -4.433576e-03, 7.753865e-03, -1.137331e-02, -9.476852e-02, 8.039813e-02},
{1.115670e-01, 5.888229e-02, -5.430512e-02, 5.169067e-02, -3.935815e-02, -5.335737e-03, 7.438737e-02, -1.893794e-02, -7.928350e-02, -3.032829e-02, -1.365865e-03, 3.635935e-02, 9.085398e-02, -7.580964e-02, 2.708595e-02, 6.852612e-02, 3.389305e-02, 5.704769e-02, -2.243193e-02, 3.555147e-02, -1.438437e-01, 5.352609e-02, 1.883215e-02, -6.367446e-02, 9.865047e-04, 8.078489e-02, 5.577554e-02, 7.040073e-02, 3.854293e-02, 1.291656e-02, 2.408817e-02, 1.707445e-03, 9.082997e-03, 4.896518e-02, -2.217812e-02, -1.692268e-02, 4.647370e-02, 5.232223e-02, -5.973332e-02, -6.980068e-03, 8.856640e-02, -3.050673e-02, 1.947955e-01, 7.865575e-02, 3.141945e-02, 6.980278e-02, -4.995592e-02, -6.012248e-02, -3.739200e-02, -1.924784e-01, -3.377548e-02, 6.533843e-03, -6.946951e-02, 1.726455e-02, -7.752310e-02, -1.501448e-01, -5.876469e-03, -2.198296e-01, 3.820403e-02, -6.521634e-02, -4.493771e-02, 6.561663e-02, 8.645935e-03, 5.442548e-02, -3.431597e-02, 5.429414e-02, 5.815933e-02, -5.820305e-02, -3.894403e-02, -9.674234e-02, -2.413346e-02, 2.548071e-02, -1.666000e-03, -2.793957e-02, 2.512750e-02, 1.578643e-02, 3.716937e-02, -4.518186e-02, -2.433953e-02, -7.168109e-02, 4.589960e-02, -4.285208e-02, 3.377834e-02, -8.169284e-02, 4.392992e-02, -8.069182e-02, 2.432344e-02, 1.220133e-02, -1.234426e-02, 6.378286e-02, -6.695131e-02, -8.968125e-02, -1.120170e-01, -1.164620e-01, 1.519699e-02, -7.007563e-02, -2.402029e-02, -7.317776e-02, 7.625304e-02, -1.167202e-01, 6.640111e-02, 2.943663e-02, 5.863760e-02, 5.938482e-02, 6.639551e-02, -2.308631e-02, 3.371153e-02, 7.903986e-02, 9.155828e-02, -4.288037e-02, 9.798381e-02, 7.151331e-02, -4.805943e-02, -2.797652e-02, 5.751421e-02, 6.565080e-02, 2.411277e-02, 9.014357e-02, 3.028054e-02, 6.177551e-02, -4.426994e-02, 8.415450e-03, 5.274119e-02, 7.435540e-03, -3.965525e-02, 2.958165e-02, 5.520372e-03, -9.796433e-02, 4.351088e-02, 3.044239e-02, 3.095846e-02, 9.586971e-02, 1.415924e-02},
{-1.728212e-01, -1.475067e-01, -6.029249e-02, 5.422730e-03, 1.317115e-02, -1.198405e-02, 4.512529e-02, 3.935888e-02, 1.214834e-01, 6.656934e-02, 5.040208e-02, -5.191323e-02, 1.962163e-02, 3.607062e-02, 3.373839e-02, -6.776202e-04, 7.325225e-02, -2.892205e-02, -8.740813e-02, 1.243046e-02, 1.327927e-01, 3.261233e-02, 1.218850e-03, 2.739064e-02, -1.015876e-02, -2.467147e-02, -2.553928e-03, 1.052133e-01, 4.982099e-02, -1.259667e-03, -6.521144e-02, -8.509813e-02, 1.563044e-02, -3.255840e-02, 6.895284e-02, -3.728595e-02, -1.035338e-01, -5.351271e-02, -6.468596e-02, 2.760791e-02, 5.047490e-02, -8.913934e-02, -5.650022e-02, -8.796696e-02, -7.195537e-03, 1.620667e-02, 6.816313e-02, -2.790943e-02, 1.128101e-01, 6.040503e-02, -2.855823e-02, -7.871763e-03, 4.398463e-02, 1.728737e-03, 7.416365e-02, -1.493167e-02, 2.583402e-02, 4.633440e-03, 6.691972e-02, 9.684540e-02, 1.814989e-02, 6.249229e-02, 4.674951e-02, 6.368818e-02, 8.283206e-03, 3.484931e-02, -2.779781e-02, 6.537817e-02, -5.338156e-02, 1.605180e-01, 2.015880e-02, -1.410870e-02, 6.302800e-02, 6.319115e-02, -2.677286e-03, 4.644223e-02, 1.768295e-02, -5.749255e-03, 1.027512e-01, 3.230925e-02, 2.348554e-02, -9.534709e-02, 5.781356e-02, 6.831861e-02, 9.341654e-03, 5.295071e-02, -9.148576e-03, -5.894069e-03, -5.521204e-02, -7.821572e-02, 1.110792e-01, 4.663612e-02, -5.056225e-02, 9.703856e-02, 7.634274e-03, 3.026029e-02, 6.513141e-03, 5.849974e-03, 7.853717e-02, 2.794055e-02, -6.849617e-02, -1.863196e-02, 4.923076e-02, 5.491505e-02, 6.201860e-02, -5.576508e-02, -4.490020e-02, -4.709380e-02, -4.521013e-02, -8.527557e-03, 1.333460e-03, -3.136115e-02, -1.412563e-01, 2.696148e-02, -3.471155e-02, 4.677976e-02, -1.886988e-02, 4.380219e-02, 6.738764e-02, -2.025541e-02, -6.836268e-02, 1.192716e-02, 1.065357e-02, 4.081676e-02, 6.624367e-02, 3.354537e-02, -2.050482e-02, 1.065579e-01, -8.197533e-02, -7.999281e-03, 1.140615e-03, 6.801970e-02, -9.519198e-03},
{1.447905e-01, -3.997305e-02, 3.297215e-02, 1.210882e-01, 5.297839e-02, -5.581556e-03, -1.971285e-02, -1.004138e-03, -8.249395e-02, 1.049353e-01, 1.052429e-01, -6.809729e-02, -8.511324e-02, 8.462310e-02, 3.532979e-02, 4.371435e-02, 1.641998e-02, 3.596211e-02, -1.423541e-02, 6.913974e-03, 6.680367e-02, -1.630295e-02, -2.506270e-02, -1.427629e-01, -2.068431e-02, 1.035704e-01, -1.517546e-01, 7.866035e-02, 5.296647e-02, -1.137220e-01, 6.303226e-02, -8.116047e-02, -1.315134e-01, 3.377036e-02, 2.520647e-01, 4.738275e-02, 1.187066e-01, 4.324872e-02, 1.512919e-01, -1.429435e-01, -6.154937e-02, 1.035096e-01, -4.338529e-01, -3.177093e-01, -3.092367e-02, 8.410417e-02, 9.914180e-02, 1.371262e-02, 1.795178e-01, 2.816700e-01, 1.398079e-02, 1.800585e-03, -3.088177e-02, 1.026779e-02, -9.373740e-02, 2.116553e-01, -3.017136e-02, 1.038195e-01, -6.549276e-02, -3.216583e-01, -4.886865e-02, 7.665608e-02, 1.771287e-01, 8.588523e-02, -9.995122e-02, -6.405809e-02, -5.285680e-02, -3.596889e-02, -3.327834e-02, -1.177673e-01, 1.019524e-01, 9.099637e-02, 1.674993e-01, -3.246084e-02, 1.035492e-02, -7.223762e-02, 2.112856e-01, -2.212922e-02, 2.526430e-02, 8.925804e-02, -2.709537e-01, -3.393416e-02, 4.810600e-02, -3.788502e-02, 6.335481e-02, 1.189771e-02, -8.941732e-02, -1.797112e-01, -2.715261e-02, 5.137661e-02, 3.972808e-02, -6.208728e-02, -8.601198e-02, 9.817393e-03, -2.377620e-02, 7.453618e-02, 6.396552e-02, 4.994284e-02, -4.928613e-05, -1.368892e-01, 1.126469e-02, -1.961801e-01, -8.355060e-02, 8.514550e-02, -7.903197e-02, 1.121697e-01, 1.846886e-02, 3.900005e-02, -4.379832e-02, 1.101501e-01, 2.098274e-01, -8.702832e-02, -1.388121e-01, 3.056293e-02, -1.191050e-01, 4.688777e-02, -1.077406e-01, -7.200152e-02, 7.188415e-02, 1.325161e-02, -6.035957e-03, -2.334473e-03, -1.526723e-01, -1.502968e-01, -4.487083e-02, -6.260756e-02, 3.563038e-02, 1.197337e-01, 4.009112e-02, -2.258545e-02, -8.876134e-02, -6.435403e-02, -3.730110e-02},
{3.092526e-02, 3.786622e-02, -9.310716e-02, 4.410042e-02, -7.608084e-02, -4.738254e-03, 6.897262e-02, 6.074708e-02, -6.172891e-02, -1.940040e-02, 4.761471e-02, -5.420084e-03, 6.530534e-03, 7.149274e-03, -3.155771e-02, 7.216371e-02, -5.961224e-02, -1.489040e-03, 2.334233e-02, -4.031294e-02, -1.239830e-01, 1.241108e-04, 1.335792e-01, 2.194291e-02, -3.105453e-02, -7.896908e-02, 2.020096e-02, -1.960151e-02, 6.172784e-02, -4.199586e-02, 6.373727e-02, 3.336972e-02, 5.728423e-02, 1.231175e-02, -1.244669e-01, -1.687399e-02, -3.552968e-03, -5.599453e-02, 2.728448e-02, -3.850464e-03, -4.072306e-02, 8.538323e-02, 2.459759e-01, 1.776909e-01, 9.779472e-02, -1.473030e-02, -8.823696e-03, -5.172434e-02, -1.324506e-01, -1.619564e-01, -1.224709e-02, -7.726545e-02, -2.770289e-02, 9.744278e-02, -6.978475e-02, -5.797962e-02, 3.642197e-03, -6.369493e-02, 4.926077e-02, -2.143282e-02, 2.765711e-02, 3.946433e-03, -1.863181e-02, 4.379079e-02, 6.451084e-02, 3.926346e-02, 3.353691e-02, 9.039481e-02, 6.403872e-02, -3.775059e-02, 3.663111e-03, -6.683198e-02, 2.785210e-02, 4.667560e-02, -6.105440e-02, 8.845834e-02, -5.620809e-02, -9.042433e-02, -4.026817e-02, 4.272359e-03, 1.232531e-01, 3.488887e-02, -6.452141e-02, 1.779114e-02, -4.421125e-02, -6.551470e-02, 1.718158e-02, -3.176149e-02, 6.691028e-02, 6.249182e-03, -3.654911e-02, -3.646895e-02, 6.650150e-03, 1.162228e-01, 1.023422e-01, 5.729700e-02, 1.161218e-02, 5.876582e-02, -6.765751e-02, 4.734347e-03, 6.769631e-02, 5.356114e-02, -5.351014e-02, -7.074028e-02, -3.082742e-02, -4.823980e-02, -7.649887e-02, -5.903768e-02, 4.736377e-02, -1.165021e-02, 1.021116e-01, 3.088258e-02, 2.817800e-02, -1.805409e-02, 8.895502e-02, -3.981841e-02, 7.070513e-02, 6.685591e-02, 3.182946e-02, 8.617646e-02, 7.267044e-02, 5.368910e-02, 6.747257e-02, 5.564495e-02, -4.091028e-02, -4.320759e-02, -2.848908e-02, -1.001572e-01, -2.460441e-02, 1.875431e-02, 3.543286e-02, -1.417352e-02, 5.948208e-02},
{3.455235e-03, -8.827226e-04, 2.331883e-03, 8.085184e-03, -1.009997e-01, 1.917174e-02, -6.922100e-02, -4.898680e-02, -1.389059e-02, -6.048601e-02, -8.485368e-03, -5.823878e-02, 1.774137e-02, 3.982191e-02, 4.184439e-02, 5.239275e-02, 2.544893e-02, -3.015116e-02, 3.295871e-03, 8.319166e-02, -8.737954e-02, 6.522018e-02, -6.936429e-02, -4.179195e-02, -2.199283e-02, 2.580650e-02, 5.092743e-02, 2.452475e-02, 3.359710e-02, 4.247787e-02, 7.309667e-02, -4.569930e-02, 2.619541e-02, 7.799468e-02, -7.692857e-02, -2.421773e-02, 1.955746e-02, -9.300111e-02, 5.929594e-02, 8.194964e-02, 4.888622e-02, 3.885838e-02, 2.465338e-01, -3.405503e-02, 3.147474e-02, -3.504199e-02, -6.471338e-02, -4.392830e-02, -1.232532e-01, -1.410847e-01, 5.472433e-02, 7.553717e-02, 6.601455e-02, 3.290905e-02, -5.849862e-02, -1.158875e-01, -8.744621e-03, -8.592040e-02, 1.087827e-02, 5.020472e-02, -2.449933e-03, -7.510785e-02, -5.244532e-02, 4.007492e-03, 5.752842e-02, -8.133114e-02, -7.708097e-02, -8.240972e-02, -4.459265e-02, -1.784322e-01, -4.473013e-02, 5.792382e-03, -1.148375e-01, 8.219852e-02, 1.690169e-02, -5.964804e-02, -1.080375e-01, 3.248747e-02, 1.945869e-02, 3.690325e-02, 4.046471e-02, 7.828140e-02, 4.914831e-02, 7.368655e-03, -5.944711e-02, 7.821722e-02, 7.817700e-03, 4.770532e-02, 3.273433e-02, 2.773632e-02, -6.464970e-02, -7.224942e-02, -9.671901e-02, -1.016474e-01, 4.279247e-02, -1.814123e-02, -3.727538e-03, 4.692964e-02, -7.047445e-02, 4.911248e-02, -4.758663e-02, 3.234982e-02, 2.865128e-02, 1.125625e-02, 7.480752e-02, 9.830398e-03, -4.219767e-03, 3.212670e-02, 5.030999e-02, 6.328207e-02, 4.350580e-02, 9.062877e-02, 1.195508e-01, -7.084349e-02, -3.223436e-03, 6.361445e-03, -6.809030e-02, 5.796152e-02, -1.090992e-01, 9.555977e-02, -1.389073e-02, -8.014717e-02, 5.153155e-02, -4.459175e-02, -8.333977e-02, 5.481244e-02, 2.349857e-02, -7.399116e-02, -6.776775e-02, -6.475818e-02, 2.119005e-02, 1.618323e-02, 9.395904e-02},
{3.780740e-03, 6.352415e-02, 2.731652e-02, -7.277591e-02, -2.052579e-01, -3.917034e-02, -5.280868e-02, -5.922679e-02, 7.512780e-02, -8.856759e-02, 5.406550e-03, -9.757600e-02, -4.570466e-03, -7.630915e-02, 9.661514e-02, -5.831068e-02, -7.184859e-02, -3.594069e-02, 3.348953e-02, -5.214208e-02, 1.352740e-01, -2.192332e-02, 1.392421e-01, 5.540947e-02, 4.458080e-03, 3.094761e-02, 2.279562e-02, 5.172307e-03, 7.892531e-02, 1.437602e-02, -2.236494e-02, 7.811611e-02, -1.164661e-01, 5.416140e-02, 2.650016e-02, 4.780033e-02, 8.180993e-02, -4.023300e-02, 9.689124e-02, -3.824528e-02, -5.578667e-02, 3.047186e-02, -2.623672e-01, -1.565446e-01, 3.329779e-02, 7.716870e-02, -2.127523e-03, -4.342683e-02, 7.515839e-02, -1.353997e-01, -1.673059e-02, 5.141861e-02, -5.226082e-02, 1.120057e-01, -4.974002e-02, 1.481847e-01, 1.265633e-01, 9.221951e-02, 1.052065e-01, -6.736903e-03, -1.801985e-02, -5.871165e-02, -1.312895e-03, -7.367990e-02, -7.048203e-02, 7.662293e-02, 7.643399e-02, -5.643600e-02, 4.334257e-02, 6.360365e-04, -2.501568e-02, -1.246954e-02, 9.117363e-02, 5.211516e-02, 5.190664e-02, -4.221562e-02, 1.349063e-02, 1.423379e-01, -1.820548e-02, 5.571628e-02, -1.395379e-01, -3.342367e-02, -6.071732e-02, 3.808317e-02, -6.146170e-02, 5.469111e-02, 2.764664e-02, 3.915000e-02, -7.364026e-02, -1.024434e-01, 8.261200e-02, -1.893683e-02, 1.594530e-01, 2.472825e-01, -5.168809e-02, -3.796470e-02, 4.222135e-02, 1.043665e-01, 3.119782e-02, 7.356664e-02, -4.422672e-02, -1.521361e-01, 5.574741e-02, 1.765268e-02, -5.838791e-03, -1.925534e-02, 9.554676e-02, 6.039442e-02, -9.162920e-02, 1.277879e-02, 1.404209e-01, -9.969939e-02, 6.100596e-02, -4.839333e-02, -2.953377e-02, 3.112882e-02, -9.419740e-03, 6.687246e-02, -3.569596e-02, -4.064680e-02, -3.253524e-02, 2.213463e-02, -1.798610e-01, -9.890398e-02, -4.439477e-02, 7.514903e-02, -3.769436e-02, -1.398795e-01, 1.617726e-02, -9.114464e-02, 6.790815e-02, 5.889596e-02, -6.023885e-03},
{5.564277e-02, 8.035067e-02, -8.633526e-02, -9.642828e-02, -5.388033e-03, -9.993902e-02, -6.788597e-02, 7.145057e-02, 7.052705e-02, -5.005296e-02, 3.013854e-02, -6.717134e-02, 9.643814e-03, -5.066169e-02, 9.056428e-03, 2.713671e-02, 6.259958e-02, -4.413795e-02, -1.159048e-02, 5.639414e-02, 1.482143e-01, 7.968241e-02, 2.096232e-02, -2.756502e-02, -4.763265e-02, 3.628096e-02, -5.174153e-02, 5.649742e-02, 6.237870e-02, 5.270853e-02, 2.922677e-02, -1.971302e-02, -1.348881e-02, 9.737960e-02, 2.188630e-01, -3.644443e-02, 1.559174e-02, -4.518751e-02, 2.397325e-01, 8.399735e-03, -1.727359e-02, -7.046335e-03, -5.068625e-01, -1.881312e-01, -1.423476e-03, -5.079515e-02, -4.934032e-02, -3.971890e-02, 1.584091e-01, 1.204909e-02, -6.340431e-02, 7.693226e-02, 2.244841e-02, 4.492762e-02, -5.631682e-02, 1.558637e-01, 7.366233e-02, 9.570650e-02, 5.557140e-02, -1.044131e-01, -7.736444e-02, -3.209706e-02, 1.077883e-01, -4.826159e-02, 5.187583e-02, 5.398241e-02, -8.681052e-02, 1.752117e-02, 6.818184e-02, 1.041909e-01, 2.678547e-02, 3.400232e-02, 4.627638e-02, -1.072039e-01, -4.500069e-03, -2.396708e-02, 7.546242e-02, 5.692333e-02, -1.700390e-02, 9.759220e-02, -6.476299e-02, 1.003027e-02, -8.144941e-03, 5.375758e-02, -6.906357e-02, 6.669696e-02, -4.561174e-02, 1.232550e-02, -8.852687e-02, -7.164591e-02, -6.667302e-03, -9.895378e-02, 1.042161e-01, 7.193564e-02, 3.972148e-02, -4.740193e-02, 1.620936e-02, -1.433563e-01, 1.894293e-02, -2.612773e-02, 7.731906e-02, -1.374506e-01, 8.512632e-02, -3.536990e-02, -8.272697e-02, -8.101726e-02, 5.012382e-02, -3.339639e-02, -1.637199e-02, 3.248687e-02, 1.585313e-01, -3.308200e-02, -9.883258e-02, 1.937459e-02, -5.217298e-02, 9.982581e-02, 3.014929e-02, 7.882842e-02, -5.105573e-03, -1.010812e-02, -7.804362e-02, 1.031562e-01, -1.169827e-01, -1.051285e-02, 4.119698e-02, 4.737958e-02, -6.577547e-02, -7.565137e-02, -1.249252e-02, -1.369315e-01, -7.519670e-02, -3.053051e-02, 5.702752e-02},
{-3.292938e-02, -3.546640e-02, -6.968208e-02, -8.816300e-02, -6.518923e-02, -1.782330e-02, 1.570585e-02, -6.599849e-02, -2.080997e-02, -2.985159e-02, -6.867016e-02, -9.374162e-02, 6.393714e-02, 2.441069e-02, 3.801621e-02, 1.595876e-02, 2.252854e-02, -1.557591e-02, -2.470599e-02, -7.249641e-02, -2.992445e-02, 1.289528e-02, 9.091663e-02, 2.839724e-02, -2.200648e-02, -3.572544e-02, 5.907340e-03, -5.341535e-02, -4.676247e-02, -1.094974e-01, -1.461034e-02, -5.105237e-02, 6.940486e-02, 3.024192e-02, 3.647028e-02, -8.053271e-02, -8.816832e-02, 1.741481e-02, -2.978759e-02, -1.244827e-02, 7.872789e-02, 7.890193e-02, -1.427819e-01, 1.814224e-02, -3.628777e-02, -6.962614e-02, -7.117502e-02, -4.900335e-02, 9.257779e-02, -3.453319e-02, -2.470294e-02, 7.958174e-02, 2.162836e-02, 8.479240e-02, 3.717024e-02, -5.844659e-02, 4.403470e-02, 2.068396e-02, 3.422821e-03, 1.180453e-02, -3.983944e-02, -1.740742e-02, -3.835875e-02, -6.269624e-02, -4.417349e-02, 1.974769e-02, -6.502312e-02, 1.304146e-02, 5.895229e-02, 9.851975e-02, 1.141710e-01, 1.857184e-02, 9.776914e-02, 8.004044e-02, 9.435862e-02, 7.968613e-02, -1.648677e-02, 5.599611e-03, 7.982469e-03, 4.032952e-02, -1.239072e-01, -4.598811e-02, 3.936304e-02, 8.813856e-02, 2.285994e-02, 7.803603e-02, -4.227896e-02, 2.039655e-02, -5.625742e-02, 4.170402e-02, 5.486508e-03, 3.998309e-02, 1.788379e-02, 5.994275e-03, 2.174350e-02, 2.807254e-02, -8.132803e-02, -1.600380e-01, 9.244517e-02, -1.178612e-02, -4.518172e-06, 5.883066e-02, 4.285092e-02, 6.758139e-02, -4.241312e-02, -1.073195e-01, -3.227725e-02, -9.140594e-02, -7.634374e-02, 1.005197e-01, 8.149537e-03, -1.024939e-02, -8.549350e-02, -6.948115e-02, 8.861601e-02, 5.639995e-02, 1.174054e-03, 5.681543e-02, -4.873451e-02, -3.272394e-02, 9.523965e-03, 8.352826e-02, -1.261331e-01, -5.399071e-02, 1.231064e-02, 6.617559e-02, 1.026960e-01, -6.588065e-02, -4.480948e-02, -4.798364e-02, 7.896973e-02, 3.567372e-03, -3.780499e-02},
{4.598634e-02, -4.190220e-02, -4.651301e-02, 7.191421e-03, -5.101709e-02, 3.292539e-02, -1.465840e-01, 1.220136e-01, -3.076586e-01, 2.155452e-02, -4.602176e-02, -4.148353e-02, 1.256127e-01, 1.050652e-01, 2.823992e-02, 1.684514e-02, -1.213990e-01, 6.371549e-02, 1.801306e-01, 3.895295e-02, -4.740578e-02, -1.310571e-01, -1.583712e-02, -3.455205e-02, -1.347792e-01, -4.349666e-02, 9.731836e-02, -1.049563e-01, -2.840199e-02, 4.557432e-03, 2.468809e-02, 1.748436e-01, -3.451657e-02, -1.647363e-01, 4.236880e-02, -1.317119e-01, 1.320269e-01, -1.504798e-01, 2.591708e-02, 8.151075e-02, 1.234090e-01, 2.790918e-01, 7.946600e-02, -7.608862e-02, 1.717131e-01, 1.747547e-02, -1.443212e-01, -3.042001e-02, 6.421702e-02, 2.297967e-02, -1.392159e-01, -7.083672e-02, -6.131748e-02, 3.040671e-01, -8.628117e-02, -1.213359e-01, -9.849916e-02, -1.378754e-01, 6.293795e-02, -8.209858e-04, -1.638298e-02, -9.535820e-02, -1.794222e-01, -1.613785e-02, -1.131872e-01, 1.047796e-01, 6.385157e-02, -7.670823e-02, -3.004793e-02, -4.444863e-01, -1.610890e-01, -8.712436e-02, -2.901157e-02, -2.127865e-02, 1.288396e-01, 8.603416e-02, 7.995642e-02, -3.555240e-02, -1.471449e-01, 1.395290e-01, -3.937999e-02, 9.913158e-03, 2.199086e-02, 5.232909e-02, -1.026479e-01, -1.478550e-01, 1.494813e-01, -2.040650e-01, 2.708761e-01, -7.312445e-02, -8.618215e-02, -1.385504e-01, -8.945915e-02, 3.972001e-02, -3.955422e-02, 1.474226e-02, -6.533584e-02, -3.687750e-01, 2.145320e-01, -2.765840e-01, 4.637215e-02, 5.575014e-02, -1.260905e-01, -2.846976e-02, 7.814752e-02, 4.905687e-02, -6.971261e-02, -3.841670e-03, -6.815735e-02, 4.120128e-02, -5.970265e-03, 1.729869e-01, -3.977488e-02, -1.134829e-01, 8.564388e-02, 1.194606e-01, -5.097193e-02, 1.355019e-01, -1.747741e-02, -1.199115e-01, 8.740533e-02, 5.989586e-03, 1.735676e-01, 7.621861e-02, 9.069984e-02, -1.004483e-01, 2.434401e-01, 1.271279e-01, 1.767989e-01, 1.211682e-01, 1.603865e-01, 8.503121e-02, 2.402023e-01},
{1.349403e-01, -1.647657e-01, -6.484851e-02, -3.702003e-02, 1.357124e-01, -3.284647e-02, -3.628405e-02, 3.680827e-02, -1.156568e-01, -7.979101e-02, 1.094854e-02, -9.801959e-02, -2.648364e-03, -1.590282e-02, 1.120640e-01, -1.273008e-01, -5.276156e-02, -2.721341e-02, 2.470300e-02, 1.005460e-01, 1.629546e-01, -1.167837e-01, -6.641378e-02, -1.325967e-02, 4.597686e-02, -2.516938e-02, -6.274712e-02, 3.953920e-03, -9.802634e-02, -5.717660e-02, 3.450651e-02, -2.016904e-02, -4.270386e-02, 2.528233e-02, -5.045016e-02, -1.215807e-01, 2.156689e-02, 4.052819e-02, 5.520792e-02, 2.631544e-02, 4.903454e-02, 1.766454e-01, -2.962013e-01, 8.069336e-02, 9.595512e-02, 1.519600e-02, -1.391435e-01, -1.069142e-01, 1.285950e-01, -6.692326e-02, 1.417878e-03, 2.053450e-02, 5.593600e-02, 1.667482e-01, 6.876743e-02, 8.097652e-02, 9.512693e-02, 9.777698e-02, 1.021921e-01, 3.877627e-02, -7.241502e-02, 5.890891e-02, -5.436061e-02, 3.355985e-02, -3.023442e-02, 1.807454e-01, 6.734509e-02, 3.585062e-02, 4.575099e-02, 2.805913e-02, 9.852386e-02, -6.718121e-02, -3.027241e-02, -1.222192e-01, -9.647046e-04, -7.927670e-02, 1.827482e-01, 8.237762e-02, -1.523989e-01, 1.846287e-01, -1.125595e-01, 2.713684e-02, -6.081706e-02, 5.194607e-02, -7.989376e-02, -1.785781e-01, 8.111847e-02, -7.647412e-02, 3.467463e-02, 9.934375e-02, 6.740238e-03, 1.377222e-03, 8.173983e-02, 6.040662e-02, 1.059389e-01, 1.469296e-02, -1.353051e-02, -4.569350e-01, 1.147282e-01, -3.155923e-02, 3.912437e-02, -1.052748e-01, 1.017567e-02, -3.560946e-02, 2.280300e-02, 2.371414e-02, 2.539907e-02, -1.776948e-02, -6.072995e-02, -3.294866e-02, 1.699703e-01, 1.861591e-01, -8.504587e-02, 9.354733e-03, -2.577931e-02, 1.723953e-03, -8.917991e-02, 3.843622e-02, -9.356675e-02, -1.122737e-01, -3.838569e-02, -1.108323e-02, -1.299607e-01, 2.937708e-02, 1.142194e-03, 4.154305e-02, 5.622396e-02, 2.844216e-03, 1.125647e-01, -7.645787e-02, 6.538078e-02, -5.665735e-03, 1.078452e-01},
{-6.617186e-02, -2.707793e-01, -1.333312e-01, 9.617145e-02, -1.353906e-01, 9.323923e-02, 5.213431e-02, -6.953952e-02, -8.525028e-02, -3.606722e-02, -8.217689e-02, -3.978093e-02, 4.228394e-02, 6.048827e-02, 2.340076e-02, 8.476111e-02, 2.783613e-01, -7.111280e-03, 3.597612e-02, -1.093518e-01, -5.943522e-02, -2.991465e-02, -8.723339e-02, -4.261035e-02, 4.067446e-02, -8.484276e-02, 1.183374e-01, -3.018621e-02, 7.414575e-02, 3.513453e-02, -5.638964e-02, 3.554788e-02, 2.229297e-01, -1.723665e-01, 8.155014e-02, -5.221236e-02, -3.561668e-01, -1.302363e-01, 8.560932e-02, 1.556503e-01, 3.578103e-01, 6.029468e-02, 2.701329e-01, -1.608100e-01, -1.755257e-01, -6.492293e-02, 7.634537e-02, 7.343119e-02, 3.740606e-01, 1.032679e-01, -3.573492e-03, 1.535629e-02, 1.008855e-02, 5.022902e-03, 3.360188e-02, -1.565537e-01, 5.456129e-02, -2.921747e-01, -3.254537e-02, 3.435989e-01, 9.746621e-02, 4.756898e-02, -1.630118e-01, -1.450094e-02, 4.190138e-02, 1.450343e-02, -6.244785e-02, 5.215346e-02, 1.569849e-01, 4.016052e-02, -4.056440e-02, 5.601166e-02, -1.167404e-01, -4.716508e-02, -9.690191e-02, 5.381571e-03, 1.895759e-01, 1.651554e-01, 2.926731e-02, -7.567254e-02, -1.011124e-01, -5.899505e-02, 6.150720e-02, 5.496198e-02, -1.955072e-02, 6.868765e-02, 1.280746e-01, -9.692139e-03, 2.529440e-03, -1.362203e-01, 8.817969e-02, 1.091251e-01, 8.712310e-02, -3.763235e-02, -1.301826e-01, 4.301327e-02, -9.222962e-02, -4.793731e-01, 1.534468e-01, -9.720641e-03, 8.790545e-02, -1.204176e-02, 4.863435e-02, 1.654539e-01, -6.463778e-02, -5.999582e-02, 4.721508e-02, 6.679589e-02, -6.360325e-02, -5.258127e-03, -1.295552e-01, 3.177892e-02, -1.367141e-01, 1.031919e-01, -8.506492e-03, -5.710967e-03, 1.043973e-01, -1.219389e-01, -1.108138e-01, -1.362313e-01, -1.028754e-01, 1.659040e-01, 1.348488e-01, 2.861368e-01, 9.500001e-02, -5.053392e-02, -4.714403e-02, 1.474872e-01, -3.409243e-02, 1.499345e-01, -1.362899e-01, 1.655777e-01, -3.169336e-02},
{8.917458e-02, -1.078302e-01, 1.171641e-02, -9.864345e-04, -2.009987e-01, -2.434318e-02, 4.144158e-04, -6.288926e-02, -3.530702e-02, -5.515532e-02, 4.338561e-02, -6.011693e-02, -1.464995e-03, -3.590279e-02, -7.460446e-02, 2.023230e-02, -4.751018e-02, 4.384151e-02, 4.732701e-02, 8.350050e-02, -4.774671e-02, 3.956972e-02, 9.004163e-02, 6.556805e-02, -6.583672e-02, 3.827619e-02, 9.848595e-02, 5.950036e-03, 4.678775e-03, 3.999687e-02, -5.709825e-02, 8.567386e-02, 1.117051e-01, 7.868052e-02, 6.035916e-03, 6.850590e-02, -3.220667e-02, -1.269241e-01, 4.990882e-02, 1.812056e-02, 4.437959e-02, -1.235499e-02, 9.851705e-02, 2.380514e-02, -7.616023e-02, -9.962180e-02, 8.478544e-05, 3.240511e-02, -7.569327e-02, -1.159066e-01, -1.315032e-01, 3.236442e-03, 6.852116e-03, 4.513078e-02, 3.291115e-03, -8.753575e-02, -5.178437e-02, -6.726889e-02, -4.380780e-02, -4.041848e-02, -5.765726e-02, -9.993667e-02, -1.612064e-02, 3.852645e-02, 5.316649e-02, -3.783236e-02, 1.527732e-02, -3.605764e-02, -3.363770e-02, 2.082989e-02, -7.043567e-02, -2.208336e-02, -5.438973e-02, -1.188959e-01, 2.417877e-02, 1.966328e-02, -1.464229e-01, -6.429060e-02, -8.713089e-03, -4.300464e-02, -5.247329e-02, -7.912456e-03, -8.563112e-03, 4.173444e-02, 6.366955e-02, -9.691370e-02, -2.102508e-02, 6.084605e-02, -3.694721e-02, 3.425087e-02, -2.036850e-02, 6.533185e-02, -9.802199e-02, 1.613845e-01, -3.889449e-02, -5.764193e-02, 1.525692e-02, -2.610425e-01, -1.275939e-02, -5.287851e-02, -1.573389e-02, 1.281011e-01, -8.302872e-02, -2.093130e-02, 2.880638e-02, -1.277931e-02, 6.592183e-02, -5.426735e-02, -8.687305e-02, 3.694844e-02, -7.202544e-02, 8.348358e-02, 8.136389e-02, -6.811424e-02, 1.189304e-02, -7.506330e-02, 6.229378e-02, 4.944892e-02, -1.268109e-01, -3.751763e-02, -6.065870e-02, -5.801299e-02, 4.158982e-02, 6.513269e-02, 4.022081e-02, 4.234389e-02, -4.080895e-02, -4.592595e-02, 6.403217e-02, -4.760675e-02, 1.039736e-01, -5.851554e-02, 3.139535e-02},
{2.088691e-01, 3.614043e-01, 3.684305e-02, 8.141657e-02, 1.434613e-01, -4.751489e-02, -1.698723e-01, 9.163964e-02, -2.904868e-01, 1.028309e-01, -2.136477e-01, -6.934956e-02, 2.971832e-01, 1.957052e-01, 2.848349e-01, -3.857794e-02, -1.257726e-01, 1.381279e-01, 2.710884e-01, 2.185353e-01, -3.108739e-01, -1.532737e-01, -1.806213e-01, 1.709671e-02, -1.663847e-01, -3.672339e-01, -1.757459e-02, -2.797000e-01, -1.831552e-01, 7.332190e-02, -5.165958e-02, 1.846002e-02, 1.704587e-01, -2.188653e-01, -1.485404e-01, -2.212336e-01, 1.782313e-01, -2.293464e-01, 3.178451e-01, 4.102086e-02, -1.796004e-01, 2.252187e-01, 3.492222e-01, -8.310200e-02, 2.033330e-01, 1.519957e-01, -1.742547e-01, -1.258222e-01, -3.585437e-02, -3.563694e-01, 6.876814e-02, -7.098243e-02, -6.906240e-02, 2.001724e-01, -2.374696e-01, -4.286499e-01, -1.876255e-01, -2.519153e-01, 7.040974e-02, -4.879599e-02, -1.444464e-01, -9.054852e-02, -3.347368e-01, 7.503744e-02, -1.503713e-01, 1.297686e-01, 1.011898e-01, -2.527491e-01, -1.532041e-01, -7.050375e-01, -1.847065e-01, -2.058904e-02, -4.976712e-01, 1.556435e-01, 2.689496e-01, 5.140169e-02, 2.188155e-01, -1.212451e-02, -3.412665e-02, 2.583196e-01, 2.083078e-01, -1.506639e-01, -2.629249e-02, 1.449607e-01, -1.184275e-01, -2.312393e-01, 1.884267e-01, -2.300112e-01, 3.095941e-01, 1.302111e-01, -1.841903e-01, -9.147456e-02, -1.050037e-01, -6.667818e-03, -8.126783e-02, 1.306499e-01, -1.089225e-01, -5.097973e-01, 1.976810e-01, -3.329357e-01, -4.872924e-02, 2.738800e-01, -1.801226e-01, -1.571581e-01, 1.189407e-01, 9.742054e-02, -1.415219e-01, -4.638834e-02, -3.722240e-02, 1.457340e-01, 4.589728e-02, 2.436130e-01, 2.236765e-01, -1.043231e-01, 7.578860e-02, 8.060317e-02, -2.676312e-01, 1.417991e-01, -1.066646e-02, 8.875730e-02, 1.658177e-01, -1.201242e-01, 2.337092e-01, 7.468412e-02, 1.357148e-01, -1.646402e-01, 3.291935e-01, -1.485297e-01, 2.181686e-01, 8.687127e-02, 1.795458e-01, 1.166234e-01, 2.463935e-01},
{-2.482299e-02, -1.049519e-01, -1.544627e-01, 8.163856e-02, 9.014086e-04, 6.370580e-02, 6.805061e-02, -1.459725e-02, 3.907770e-02, 6.133475e-02, -9.320753e-02, -5.310715e-02, -4.636939e-02, -6.366282e-02, 2.908554e-02, -6.692208e-02, 1.520052e-01, 4.908479e-02, -2.368549e-02, -1.212892e-02, 1.035327e-01, -8.990284e-02, -9.182043e-02, 6.103337e-02, 5.307093e-02, 3.338659e-02, -1.512835e-01, -1.394237e-01, -7.148856e-02, -1.061498e-02, 2.060494e-02, -6.830528e-02, 1.623682e-01, -2.061997e-02, -4.225298e-02, 7.791744e-03, -9.530421e-02, 7.866668e-03, 8.875255e-02, -1.420451e-01, 2.147444e-01, 8.351376e-03, -4.188938e-01, -2.275511e-01, -3.465046e-04, 8.315218e-02, -4.484277e-02, 3.732948e-02, 3.195410e-01, 2.018342e-01, 7.525168e-02, -2.187664e-02, 2.351400e-03, 1.228779e-02, 4.888882e-02, 2.124680e-01, -9.190925e-02, -1.497841e-01, 1.282066e-01, 5.933265e-02, -6.302169e-03, -4.775395e-03, 7.497329e-02, 8.265295e-02, -3.279357e-02, 1.509922e-02, -2.306068e-02, -3.327968e-02, -2.031895e-02, -4.781824e-03, 9.148397e-02, -6.392991e-03, -1.320519e-01, 3.000654e-02, 5.727861e-02, 1.234218e-02, 3.432634e-01, 3.821905e-02, -3.452644e-02, 4.459757e-02, -2.368155e-01, 1.917201e-01, -3.315047e-03, 7.162564e-02, -5.244109e-02, 1.603515e-02, -2.569963e-02, 1.046997e-01, 1.026747e-02, 1.215372e-01, -1.207944e-03, 1.181763e-01, 2.813303e-01, 8.895233e-02, 8.000572e-02, 2.745669e-02, -7.483290e-02, -4.526463e-01, -3.807056e-02, 6.389542e-04, 4.322914e-02, -4.064068e-01, 5.079230e-02, 1.601320e-01, 1.050987e-01, -7.171246e-02, 7.871062e-02, -8.413465e-02, 8.600334e-02, 5.634444e-02, 1.282329e-01, 1.487796e-02, -2.197194e-01, 8.289872e-04, -8.040886e-02, 3.848235e-02, 1.440651e-02, 5.124292e-02, 1.012807e-02, -5.044107e-02, 5.509390e-02, 6.043341e-02, -1.764634e-01, 1.871628e-02, 1.488424e-01, 1.100424e-02, -1.710857e-02, 1.142814e-02, 1.033925e-01, -7.600826e-02, -2.013093e-02, 1.655113e-01, 3.791188e-02},
{1.518563e-02, -2.350614e-02, -8.461984e-02, -2.318761e-01, -1.991145e-01, 2.236440e-01, 6.901179e-03, 1.983039e-02, -1.235496e-01, 8.214605e-03, -3.102283e-02, 2.873382e-01, 9.776499e-02, -7.173784e-02, -1.122398e-01, 9.408554e-02, 2.109142e-01, -4.596291e-02, -4.751078e-02, -9.328160e-02, -1.751182e-01, -2.307174e-02, -2.002992e-01, 1.204479e-01, 5.307736e-02, -2.690885e-03, 8.531176e-02, -4.179875e-02, 6.412119e-02, 1.434507e-01, 1.656465e-01, 1.347581e-01, 1.272702e-01, -2.025511e-02, 1.121823e-01, 1.814223e-01, -2.910213e-01, -3.410718e-01, 3.396571e-01, 2.187916e-02, 1.595614e-01, -1.349632e-01, 3.063561e-01, 1.491813e-01, -1.384759e-01, 9.642328e-04, 2.163008e-01, 9.993550e-02, -1.402188e-01, -6.263193e-02, 5.928152e-02, 2.025718e-01, 8.068723e-02, -3.576931e-03, 1.901795e-01, -1.444170e-01, 1.338604e-04, -6.711235e-02, -1.131961e-01, 2.802254e-01, 2.402958e-03, 2.226770e-02, 2.153947e-02, -1.826150e-01, 8.626386e-02, -1.561426e-01, -1.410216e-02, -5.160876e-02, 8.053882e-02, 2.213506e-01, -1.061295e-01, -1.036515e-03, -1.108977e-02, 8.503827e-02, -3.932072e-02, -8.220813e-02, 3.462602e-01, -2.914814e-02, 1.630734e-01, -3.455587e-02, 1.054481e-01, 2.840598e-01, 1.204699e-01, 4.041095e-02, -8.199425e-02, -4.770136e-02, 5.319861e-02, 2.386235e-01, -3.076166e-02, -1.759004e-01, 2.275602e-02, -7.119065e-02, 2.328175e-01, -3.850671e-01, 1.505899e-01, -5.419813e-02, -5.270914e-02, -6.682818e-01, 2.179883e-02, 4.153318e-02, -1.115271e-02, 3.425359e-02, 9.005444e-02, -4.713684e-02, 1.996106e-01, 4.170772e-02, -7.635629e-04, 1.263547e-01, 1.877509e-01, -1.369455e-02, -2.191397e-01, 1.661785e-02, -6.394064e-02, -1.002429e-01, -1.334731e-01, 6.157637e-03, -4.822476e-03, -1.172019e-01, 4.659525e-02, 3.062964e-02, -2.040044e-01, 1.187559e-01, 1.516303e-01, 5.123202e-02, 4.102842e-03, 3.325059e-02, -9.979323e-02, 1.507491e-01, 2.885043e-02, 1.565999e-01, -6.337051e-02, 1.828198e-01, -4.672735e-02},
{7.683066e-02, 6.865152e-02, 2.889004e-03, 7.612213e-02, 1.261382e-02, 7.394723e-03, -1.001911e-03, -6.815727e-02, 3.762075e-02, 1.075691e-02, 5.831234e-02, 6.023267e-02, -9.641454e-02, -8.200202e-03, 8.771044e-02, -3.225356e-02, -6.432971e-02, -2.089110e-02, 2.421309e-02, 2.957937e-02, 1.250952e-01, -4.102231e-02, 4.307699e-02, -4.021087e-02, -3.135682e-02, -3.839841e-02, 2.914340e-02, -8.563891e-02, -4.452948e-02, -6.226472e-02, 6.078283e-02, -8.880391e-02, 6.742351e-02, 1.225877e-02, 1.534373e-03, -1.753567e-02, -1.435608e-03, -1.147194e-01, -1.058473e-01, 1.269210e-02, -3.554239e-02, -7.365466e-03, -2.816763e-01, -1.467810e-01, -5.857180e-02, 7.267282e-02, -3.551215e-02, -1.351155e-02, -1.601045e-02, -1.879618e-02, -2.240590e-02, -3.977460e-03, 3.708379e-02, 9.046432e-02, -7.434299e-02, 1.347960e-01, -3.546469e-02, 6.911480e-02, 5.300189e-02, -7.262785e-02, -3.973390e-03, -6.545788e-02, -7.897329e-02, -7.259176e-02, -2.643145e-02, 5.998119e-02, 7.163846e-02, 7.467914e-02, 6.621277e-02, 8.456760e-02, -9.424339e-02, 3.592824e-02, 1.277179e-01, 1.475222e-02, -4.725985e-02, -2.414404e-02, 6.320462e-04, 2.339326e-02, -7.482959e-02, 8.405455e-02, -3.845226e-03, -5.638849e-02, -7.200483e-02, -3.196202e-02, 2.428303e-02, -1.029833e-01, 8.708417e-02, 1.046329e-01, -5.324049e-02, -9.916503e-02, 4.539859e-02, -9.010705e-02, 1.500328e-02, 3.885500e-02, -3.963537e-02, -3.612175e-02, 9.445627e-02, -7.699936e-02, -7.190601e-02, -5.464185e-02, 2.590502e-02, -4.905182e-02, 1.036576e-01, 3.416983e-02, -5.844022e-02, 8.479911e-02, 6.633010e-03, 2.239658e-02, 4.731817e-03, -4.878984e-02, 3.152915e-02, 8.436672e-02, 3.065513e-03, 4.647502e-02, 1.519900e-02, 4.951143e-02, -4.070003e-02, 3.783894e-02, 4.458898e-02, 9.600688e-02, -2.572890e-02, 1.350466e-02, 7.299455e-02, -1.063676e-02, -4.694738e-02, -1.951038e-02, 6.098389e-02, 4.072426e-02, 6.834916e-02, 3.134497e-03, -5.733376e-02, -6.965140e-02, -2.516581e-02},
{1.702661e-01, 1.975138e-01, 7.960393e-02, -1.566565e-01, -3.062560e-01, -1.705849e-01, -5.510846e-02, -1.444182e-01, -1.238480e-01, 6.159740e-03, -2.253039e-01, -1.131436e-01, 2.018193e-01, 6.480330e-03, 7.954620e-02, -1.923574e-01, -6.419338e-02, -1.270551e-02, 7.399026e-02, 1.658871e-01, -1.599725e-02, -1.119874e-01, -1.693202e-01, 1.152715e-01, -1.172413e-01, -2.521480e-01, -2.313826e-01, -3.903764e-02, 1.337511e-04, -1.532680e-01, -1.106811e-01, 1.642823e-01, 2.089870e-04, -1.626352e-01, 2.127172e-01, -9.001169e-02, 3.628913e-02, 6.804089e-02, 2.900684e-01, -1.573454e-01, 9.134772e-02, 1.445911e-01, -2.525232e-01, -3.311046e-01, 1.723296e-01, 8.998501e-02, 9.923162e-02, -6.578626e-02, 3.064294e-01, 4.064759e-01, 2.465588e-01, 2.610685e-02, -4.453164e-02, 1.647953e-01, -9.521627e-02, 6.926762e-02, -8.935829e-02, -6.641912e-02, 1.207377e-01, -2.302723e-01, -7.604615e-02, -7.416512e-02, -2.133783e-01, 1.113869e-01, -1.002998e-01, 2.447773e-02, 1.083101e-01, -1.023158e-02, -1.083045e-01, -1.409386e-01, 1.240025e-02, -4.984424e-02, 1.525604e-01, 8.040784e-02, 5.086637e-02, -3.085524e-02, 3.025771e-01, 1.263361e-01, -5.283604e-02, 1.736655e-01, -2.529864e-01, 5.353950e-03, 1.839289e-01, 1.450217e-01, -1.334029e-01, -2.177549e-01, 9.720212e-02, -1.024869e-01, 1.962382e-01, 2.810211e-01, -1.075957e-01, 5.616188e-02, 2.155278e-03, 3.484293e-02, 1.399704e-01, 3.733130e-02, -4.594699e-02, -5.201708e-01, 2.070364e-01, -5.397714e-02, -8.586648e-02, -3.178149e-01, -7.346492e-02, -2.201494e-03, 8.651986e-02, 1.827861e-01, -1.342219e-01, -1.220407e-01, 8.417717e-02, 4.920730e-02, 3.533176e-02, 1.928492e-01, 2.251112e-02, -9.024818e-02, 1.015328e-01, 1.588119e-01, -1.906957e-01, 1.716637e-01, 2.759708e-02, 1.710877e-01, 1.425838e-01, -2.970019e-01, -6.640352e-02, 4.202151e-02, 1.412226e-01, -1.212215e-01, 1.988023e-01, 2.608902e-01, 1.996599e-01, -2.612090e-01, 7.889138e-02, -7.726631e-02, 9.436358e-02},
{1.308762e-01, -8.972520e-02, -1.787505e-02, 4.700116e-02, 1.002330e-01, -5.778137e-02, -1.037701e-01, 5.386809e-02, -8.691047e-02, -4.977250e-02, -4.072746e-02, -9.548072e-02, 1.292272e-01, -2.440477e-02, 7.202221e-02, 5.359244e-02, -1.106692e-01, -4.298511e-03, 7.129899e-02, 1.404703e-01, -9.989876e-02, -7.084691e-03, -7.072510e-02, 5.165196e-02, -1.137993e-01, 4.704456e-03, -2.113957e-02, -1.673573e-02, -5.669212e-02, -4.930064e-02, 7.037117e-02, 7.465735e-03, 1.326534e-01, 3.527829e-02, -1.194940e-01, 4.311934e-03, 1.859140e-02, -1.147993e-01, 9.497292e-02, -4.668238e-02, -1.134397e-01, 1.207539e-01, 3.308502e-01, 1.341130e-01, 3.790287e-03, 1.032483e-01, 1.129409e-02, -1.090943e-01, -9.545514e-02, -8.557253e-02, -3.968962e-03, -2.845144e-02, -2.553867e-03, 6.808469e-02, -1.247188e-01, -2.351111e-01, 1.764740e-02, -7.054489e-02, 5.837001e-02, -3.056058e-02, -8.324913e-02, 3.452173e-03, -1.788420e-02, 8.630496e-02, -1.128396e-01, 3.823314e-03, 3.873768e-02, 2.396158e-02, -2.488627e-02, -6.318863e-02, 8.423115e-03, 7.390738e-02, -6.586100e-02, -3.638715e-02, 1.226137e-01, -5.881634e-02, -1.767269e-01, 1.370481e-03, -1.173176e-01, 7.287258e-02, 1.128352e-01, 5.154002e-03, 8.154248e-02, 2.709850e-03, 4.006275e-03, -3.403028e-03, 9.178425e-02, -5.430593e-02, 1.527034e-01, -5.666504e-02, -1.356946e-02, 1.104329e-02, -1.807416e-02, 3.946919e-02, 7.933303e-03, 8.003706e-02, -7.752513e-03, -9.940270e-02, -1.867659e-02, -8.108071e-02, 2.925037e-02, 1.179559e-01, -6.389453e-02, 5.595001e-02, -3.131660e-02, -4.363024e-03, -9.654040e-03, -1.015840e-01, -3.768221e-02, -5.184103e-02, -7.489190e-03, 1.356369e-01, 2.941302e-02, -2.610642e-02, 1.158811e-01, 6.283404e-02, -7.661271e-03, 1.292641e-01, -1.152871e-01, -5.540176e-02, 1.159276e-01, -9.702336e-02, -7.324440e-03, 1.938876e-02, -7.001997e-03, -4.466076e-02, 2.160403e-03, -1.062176e-01, -8.226795e-03, 2.230027e-03, 9.920412e-02, 1.658077e-02, 1.358126e-01},
{-3.176822e-01, -3.695709e-02, 9.456198e-02, 2.171836e-02, -6.263198e-01, -7.449060e-04, -4.080497e-02, -1.585228e-01, 1.993151e-01, -3.534331e-02, 2.813641e-01, -1.723469e-01, -3.525655e-01, 3.849930e-02, -2.955019e-02, -7.164045e-02, 2.128947e-01, 1.257287e-01, 1.770329e-02, -1.270071e-01, 8.880898e-02, 1.523353e-01, -3.695760e-02, 1.533798e-01, 9.046046e-02, 2.687904e-01, -5.562667e-01, 2.568827e-02, 1.518222e-01, -1.605013e-01, -2.294821e-01, 8.641618e-02, -3.842900e-01, -2.167346e-02, 2.512935e-01, 6.907732e-02, 1.646812e-01, 7.665589e-02, 3.325691e-01, -2.467318e-01, 3.389269e-01, 4.091703e-02, -6.624578e-01, -5.579334e-01, -2.102563e-02, 1.530337e-01, -4.760166e-02, 4.663326e-04, 4.418176e-01, 4.017410e-01, -2.364661e-01, -3.331067e-02, 1.309373e-01, -5.054101e-02, -1.238318e-01, 7.185801e-02, -1.980013e-01, 2.477010e-01, -5.232720e-02, -7.097515e-01, -3.283281e-01, 2.301957e-01, 3.340971e-01, 1.969870e-01, -1.069113e-01, 9.183744e-02, 1.644837e-02, 3.668691e-02, -2.625968e-01, 8.587003e-02, 8.366532e-02, -9.263740e-02, 5.693445e-01, -2.524254e-01, -8.324232e-02, -1.970779e-01, 3.662330e-01, -3.741226e-02, -7.844558e-02, 1.225092e-01, -5.752596e-01, -2.837804e-01, -2.840540e-01, -1.273943e-01, -2.942205e-02, 7.839005e-02, -2.052526e-01, 1.710248e-01, -1.767887e-01, 1.695013e-01, 6.614523e-02, -1.550677e-01, 2.988892e-01, 7.097844e-03, 1.959743e-01, -1.421409e-01, 9.429300e-02, 4.973131e-02, -1.663490e-02, 1.211035e-01, -5.920873e-02, -3.512760e-01, 1.081127e-02, 3.516122e-02, -1.280565e-01, 1.744189e-02, 2.879833e-02, -1.701177e-01, 1.439997e-01, 1.180264e-02, 6.789824e-01, -3.556589e-01, -3.524363e-01, -1.209476e-01, -1.820101e-01, 1.365123e-01, 1.842394e-02, -1.646160e-01, 2.215575e-01, -1.734847e-01, -5.274033e-02, 2.419123e-01, -6.367156e-01, -2.979075e-01, -7.253168e-02, 3.369824e-01, -7.633290e-02, 2.361268e-01, -1.429158e-01, -4.989744e-01, -1.725962e-01, -1.898542e-01, -1.755951e-01},
{-5.990566e-02, -3.861132e-01, -2.183339e-01, 1.853395e-01, -4.088977e-01, 5.133298e-02, 3.921673e-02, -9.745068e-02, 6.951636e-02, -4.104538e-02, -6.842776e-02, -7.419293e-03, -3.714585e-02, 1.117094e-02, -5.411366e-03, 1.039793e-01, 2.094534e-01, 8.164139e-02, -2.065031e-02, -1.424712e-01, -3.807788e-01, 1.028138e-01, 5.665695e-02, -3.666428e-02, -1.099840e-02, 4.807569e-02, 1.755630e-02, -3.474454e-02, 1.740445e-01, -4.908352e-02, 1.079382e-01, 1.670911e-01, 1.665133e-02, -4.105577e-02, 3.339999e-01, 7.693167e-03, -1.196855e-01, -3.634524e-02, 6.424524e-02, -3.853399e-02, 3.648378e-01, 4.005780e-02, -3.478300e-02, 5.372217e-03, -8.407482e-02, 6.046071e-02, 1.121364e-02, 1.151174e-01, 4.000523e-01, 1.876900e-01, 9.203459e-02, 2.364046e-02, -2.241459e-02, -4.362812e-02, 2.088089e-03, -6.952754e-02, -1.381871e-01, -1.495896e-01, -1.174217e-01, 1.584223e-01, -2.115410e-02, 1.306692e-01, 3.849343e-02, 1.489705e-02, 1.138119e-01, 2.243737e-02, -1.820407e-02, 7.489984e-02, 2.514953e-02, 3.848619e-02, -1.192008e-01, -8.538307e-03, -4.118602e-02, -1.060241e-01, 1.037010e-01, -3.486797e-03, 5.243038e-01, 5.736956e-02, -1.021514e-03, -5.397333e-02, -2.612892e-01, -1.098167e-01, -8.957179e-02, -6.132260e-02, 8.293053e-02, 1.591411e-01, -3.971148e-02, 6.226333e-02, 5.955343e-02, 7.988674e-02, -9.474960e-03, 1.113788e-01, 1.941757e-01, 9.564653e-02, -3.966355e-02, -3.193308e-01, 6.480546e-02, -3.677283e-01, -3.870116e-02, -1.142735e-02, -2.891623e-02, -2.105390e-01, 1.359214e-01, 2.128340e-01, -1.449824e-02, -6.903201e-02, 8.508754e-02, 7.004799e-02, -7.609441e-02, -5.874993e-02, 1.276672e-02, -5.604223e-02, -1.810040e-01, 3.681412e-02, -2.102591e-01, 6.045437e-02, 6.289527e-02, -9.210278e-02, 2.280813e-02, -7.364235e-02, -4.157991e-02, -1.553712e-02, -1.763654e-01, 8.737949e-02, -5.776332e-02, 9.068215e-02, 2.078239e-02, 2.736749e-01, -1.475711e-01, 1.208832e-01, -1.341940e-01, 2.485137e-01, -8.914361e-02},
{3.130486e-02, 5.336430e-02, -7.831729e-02, 3.143404e-02, -6.111890e-02, 6.689198e-02, 4.012308e-02, -5.481519e-02, -5.042595e-02, -5.857158e-02, 2.111335e-02, 4.542424e-02, 1.147387e-01, 7.288040e-02, -7.761154e-02, 2.531634e-03, -2.035689e-03, -3.066726e-04, 1.447923e-02, 2.278411e-02, -1.727934e-01, -1.271723e-02, -2.605639e-02, -1.257298e-01, -8.377503e-02, -6.465980e-02, 8.378550e-02, -1.024076e-01, 4.866981e-02, 8.260087e-02, 4.905906e-02, 5.752781e-02, 4.090014e-02, -3.767170e-02, -7.894365e-02, -9.888898e-03, -1.595594e-02, -7.729241e-02, -4.514506e-02, 2.568604e-02, -4.517401e-04, -1.128538e-03, 2.568539e-01, 1.053411e-01, -5.768772e-02, -4.320198e-02, -2.607384e-02, -9.090635e-03, -9.169499e-03, -9.607298e-02, -8.583103e-02, -8.047438e-02, -2.239503e-02, 5.426242e-02, -4.925003e-03, -6.268763e-02, -9.458405e-02, -3.601173e-02, 1.152989e-02, 2.535943e-02, -2.185501e-02, -9.782778e-02, -1.128925e-01, 8.544513e-02, 3.933786e-02, -4.095998e-02, 6.978538e-02, 9.034209e-04, 2.315521e-02, -1.065554e-01, -6.967185e-02, -1.168197e-02, -2.854634e-02, 5.256395e-02, 7.318517e-02, 3.802259e-02, -7.296303e-02, -1.006562e-01, -4.597310e-02, -9.399261e-03, -1.755604e-03, -6.719654e-02, -2.635935e-02, 9.323296e-04, 7.230958e-02, -6.898753e-02, 1.262190e-03, 2.492018e-02, 7.481816e-02, 4.113686e-02, 3.066801e-02, -2.939511e-02, -9.790342e-02, -4.611966e-02, 3.746570e-02, 6.047556e-02, -9.506440e-02, -2.960789e-03, -3.336813e-03, -5.236573e-02, -3.371910e-02, 2.003068e-01, -6.118043e-02, -4.380404e-02, -3.412794e-02, 3.923229e-02, -5.850092e-02, -3.186093e-02, -4.332406e-03, 4.415234e-02, -6.317051e-02, 3.952299e-02, 1.350222e-01, -7.584640e-02, 9.496495e-03, -8.748396e-02, 2.595635e-02, 2.835425e-04, 1.016621e-03, 5.189361e-02, 9.200864e-02, -1.070892e-01, -2.682176e-02, 7.436217e-02, -6.237769e-02, -5.685069e-02, -5.096714e-02, -4.823168e-02, 6.884456e-02, -3.636267e-02, 1.025395e-01, 1.120906e-01, 5.726170e-02},
{7.233986e-02, 4.020049e-02, -1.949461e-02, 9.430384e-03, -1.353459e-01, 7.061104e-02, -1.308963e-02, -2.360049e-02, -5.885996e-02, 6.546623e-02, -5.834492e-02, 4.390993e-02, -5.321908e-03, -9.514219e-03, -9.315131e-02, 6.368531e-03, 7.328102e-02, -4.263977e-02, -6.602584e-02, -2.828638e-02, -3.945372e-02, -8.338037e-04, 9.621422e-02, 7.737687e-02, 2.400894e-02, 4.371224e-03, 3.144655e-02, 2.885284e-02, 6.737178e-02, 3.664593e-02, -3.707818e-02, -4.120697e-02, 2.230426e-02, -4.051775e-02, -2.684078e-02, 2.818954e-02, 3.032426e-02, 1.272632e-02, 7.346542e-02, -5.980236e-03, -1.419182e-03, 3.108704e-02, 1.384803e-01, 4.332741e-02, -6.694654e-02, 3.989600e-02, -6.172228e-02, 9.840864e-02, -4.390297e-02, -1.483315e-01, -9.292006e-02, 5.507300e-03, -6.807280e-02, -6.363185e-02, -5.907758e-02, -5.153774e-02, 8.569390e-02, -1.376536e-01, -8.271151e-02, 1.046898e-01, -7.008755e-02, -2.333397e-02, -3.438181e-02, -7.842864e-02, 7.696360e-02, -6.916946e-02, 5.159634e-02, -7.405257e-02, 4.205494e-02, -1.802210e-02, 3.134697e-02, -4.832298e-03, -1.186094e-01, 6.243420e-02, -9.774787e-03, -9.789930e-02, 1.290326e-02, -2.064075e-02, 7.089186e-02, 7.964659e-03, 3.333801e-02, 8.465333e-02, -1.382073e-02, -6.133707e-02, -6.317589e-02, -5.293014e-02, 2.313668e-02, -3.886857e-02, -5.526789e-02, 4.887524e-02, 2.991575e-03, -3.345838e-02, -5.736127e-02, 3.713518e-02, 6.281144e-02, -7.526331e-02, 4.561417e-03, -1.218605e-01, 5.618134e-02, -8.955827e-02, 6.667229e-02, -1.683596e-02, -1.491989e-02, 1.026073e-01, 9.781639e-02, -1.697802e-02, -1.393704e-02, -2.824474e-04, -4.907168e-02, -6.372897e-02, 6.921428e-02, 1.564279e-01, -7.257425e-02, -7.033148e-02, -6.903705e-02, 3.771466e-02, 7.931559e-02, 4.878002e-02, 5.622097e-03, 3.810657e-02, 6.029660e-02, 1.001424e-01, -2.352408e-02, 2.942838e-02, -2.518804e-02, 6.833769e-02, 9.000768e-03, -9.049567e-02, -7.416783e-02, 2.931440e-02, 6.615290e-02, 7.974613e-03, 6.639379e-02},
{7.527385e-02, 2.379700e-02, -6.608985e-02, -6.884273e-02, 6.107168e-02, -1.305103e-01, -7.500365e-02, -5.722058e-02, 3.200369e-02, -5.931402e-02, 4.379657e-02, -6.106628e-02, 1.694846e-02, 6.932547e-02, -8.657360e-03, -2.783948e-02, -1.207883e-01, 4.883020e-02, 6.790282e-02, 1.225383e-01, -7.547126e-02, 3.617105e-02, 4.869321e-03, 1.016144e-01, -4.708271e-02, -8.304156e-02, -6.762250e-02, -1.892910e-02, -9.472069e-03, -1.180849e-02, -9.337054e-02, 6.760398e-02, -2.294930e-03, 9.631529e-02, -6.635390e-02, 1.823813e-02, 1.066075e-01, 1.865248e-02, 1.153696e-01, 7.760610e-02, -3.822638e-02, -4.625380e-03, 1.436620e-01, 6.316428e-02, 3.140539e-02, -7.713754e-02, -7.161340e-02, -1.056750e-01, -1.295266e-03, -2.107054e-01, -5.810200e-02, 4.370386e-02, 3.111823e-02, 1.039915e-01, 1.569069e-03, -2.451732e-01, -3.529904e-02, 1.722931e-02, -1.189951e-02, -5.723064e-02, 2.931024e-02, -1.286760e-02, 4.296955e-02, -2.824356e-02, -6.326343e-02, 3.590303e-02, 4.334940e-02, -5.065016e-02, -1.083643e-01, -1.565613e-01, 8.694720e-02, -6.875074e-02, 2.989814e-02, -5.313120e-02, 1.068997e-01, 1.752303e-02, -1.241609e-01, -9.650184e-02, 3.692969e-02, 5.029320e-02, -4.425967e-03, -9.532315e-02, 1.892066e-02, 1.610294e-02, -8.490461e-02, -1.882469e-02, -1.046673e-02, 2.647043e-02, -5.313224e-02, 9.156230e-02, -6.589336e-02, -8.493315e-02, -3.894148e-02, -7.867772e-02, 5.307540e-02, -7.002455e-02, -9.169740e-02, -4.206237e-02, -4.526236e-02, 7.099770e-02, 1.468408e-02, 4.907125e-02, 5.693357e-02, -4.537425e-02, 6.566494e-02, 1.167269e-02, 3.881347e-02, 5.287202e-02, 2.983533e-02, -7.675763e-02, 1.561792e-02, 1.333129e-01, 1.792677e-01, -7.133669e-02, 9.760554e-05, -3.193912e-02, 2.957964e-02, 9.407984e-02, -8.562033e-02, -6.017919e-02, -4.050391e-02, -9.425815e-02, -5.419758e-02, 4.466203e-02, 3.078777e-02, 7.161266e-02, -1.314416e-02, -6.804970e-02, 1.115879e-01, -9.855223e-02, -1.270173e-02, -2.170065e-02, 6.965665e-02},
{1.748480e-01, 5.412599e-02, -9.314056e-02, 8.743989e-03, 6.767210e-02, 7.666694e-03, -1.807499e-02, 3.829234e-02, -4.891098e-02, 3.994631e-02, -1.183199e-02, 7.926567e-02, 5.770067e-02, -3.976764e-02, -8.451657e-03, 7.030538e-03, -4.857197e-02, -3.296865e-02, 2.383189e-02, 7.333408e-02, -1.959724e-02, 1.250857e-02, 2.342352e-02, 1.686136e-02, 6.192107e-02, 5.225683e-02, 6.864373e-02, -6.673588e-02, 1.540811e-02, 1.915180e-02, 2.649920e-02, 3.304197e-02, 4.456264e-03, -2.945723e-02, -3.586047e-02, -7.174116e-02, 6.630858e-02, -3.292019e-02, -2.969164e-02, 8.352871e-02, 6.738612e-02, 5.804589e-02, -1.532485e-02, -4.700719e-02, 7.586517e-02, 5.243740e-02, -6.968837e-02, -4.769082e-02, -9.365690e-02, -1.177389e-01, -5.002297e-02, 1.040861e-02, -5.449724e-02, 1.089028e-01, 1.024665e-03, -5.458463e-02, 4.095458e-02, -1.094452e-01, 7.979579e-02, -4.001843e-03, -2.293885e-02, 2.400935e-02, 6.388336e-02, 5.483280e-02, 9.038240e-02, -3.382611e-02, -2.186414e-02, 2.791749e-02, -2.622048e-02, 5.332590e-02, -7.117377e-02, -8.423906e-03, 7.444449e-03, -2.526958e-02, -5.729249e-03, -7.719269e-02, 2.290492e-02, 3.682228e-02, -1.155672e-02, -4.231878e-02, 6.031609e-02, 1.151898e-01, -1.008813e-03, -9.557515e-02, 6.803578e-02, 4.157805e-02, 2.019240e-02, 1.176506e-01, 5.457901e-02, -2.130498e-02, -7.275572e-02, -7.624751e-02, -7.873176e-02, -1.175144e-02, 1.173582e-01, 2.423948e-02, -5.497171e-02, -2.398500e-02, -1.925671e-02, -5.223983e-02, -7.704371e-02, 9.030021e-02, 4.842483e-02, 1.114949e-02, 2.090495e-02, -7.244419e-02, -2.412371e-02, 7.787909e-02, 9.191466e-02, -8.690781e-02, -3.609286e-02, 6.137228e-02, 3.243434e-03, 6.285770e-02, 6.615851e-02, 7.029177e-02, -8.666308e-02, 5.105435e-04, 3.973010e-02, -4.754149e-02, 6.348110e-02, 3.113629e-02, -5.539689e-03, -4.732482e-02, 6.859569e-02, 1.073826e-01, -1.720337e-03, -1.107449e-01, -9.436311e-03, 3.301409e-02, 1.205975e-02, 3.758219e-02, -4.062395e-02},
{-9.021284e-02, -1.246561e-01, -1.331374e-01, -1.120835e-01, -1.178212e-01, 1.314841e-02, 5.551853e-03, -5.342115e-02, 1.042185e-02, 6.712522e-02, 1.147426e-02, -2.806327e-02, -9.150343e-02, 5.411345e-02, -6.421573e-02, 8.905310e-02, 7.430043e-02, 3.655727e-02, -1.078168e-01, 7.847979e-02, -2.284677e-01, 1.060421e-01, -2.210229e-01, -1.534427e-03, 7.288747e-03, 6.519395e-02, 8.883008e-02, 7.372782e-02, 1.355284e-02, 8.068004e-02, 1.357364e-01, 1.229385e-01, -7.943638e-02, -3.699747e-02, 5.223605e-01, 9.160604e-02, -1.489860e-01, -7.281356e-02, 3.546000e-01, 8.718143e-02, 2.964258e-01, -2.321989e-02, 9.324986e-02, -2.528905e-01, 3.564972e-02, 7.139910e-02, 6.867313e-03, 6.429182e-02, 1.472949e-01, 3.610185e-01, -1.503395e-01, 1.178850e-02, 4.555890e-02, 7.932633e-02, -3.296810e-02, -4.546899e-02, 5.475865e-02, -5.006265e-02, -6.923565e-02, -2.794147e-02, -4.961187e-02, -4.514845e-02, -1.075981e-02, 8.428366e-02, 6.657107e-04, 1.078550e-01, -5.758450e-02, 6.026581e-02, -9.498763e-03, 8.562419e-02, -1.153012e-01, 2.920925e-02, 2.083789e-01, 5.220373e-02, 3.227324e-02, -9.884144e-02, 2.451346e-01, -7.237126e-02, 9.809301e-02, 7.246370e-02, -2.239203e-01, -2.103351e-02, -2.379800e-02, 5.248248e-02, -2.496056e-02, 6.319211e-02, 5.985563e-02, 1.039665e-01, 6.534924e-02, -4.671193e-02, -2.425149e-02, -3.026769e-02, 1.067627e-01, -2.414347e-01, 4.406378e-02, -1.198265e-01, -3.159633e-02, -5.672334e-01, -5.565570e-02, -9.862117e-02, -6.333791e-02, -1.224647e-01, 5.786770e-02, 8.559119e-02, 1.585057e-02, -1.206917e-02, 4.506966e-02, 4.497566e-02, -5.813329e-02, 5.011799e-02, -5.683208e-02, -5.226825e-02, -2.291806e-01, 8.060470e-02, 1.139758e-03, 1.590706e-02, -7.501172e-02, 8.801167e-02, 2.597652e-02, -3.780689e-03, -2.694629e-02, 1.164837e-01, 1.454363e-01, 4.290394e-02, -9.863403e-02, 2.147805e-02, -6.497700e-02, 2.225308e-01, 3.276002e-02, -1.320652e-01, -1.350814e-01, -1.061174e-01, 1.602735e-02},
{2.841166e-01, -1.779346e-02, 6.214863e-02, 2.183584e-01, 8.494896e-01, -6.965742e-02, -1.428328e-01, 4.960715e-02, -2.147635e-01, 1.647581e-01, -3.973429e-01, -1.614762e-01, 2.494798e-01, 2.966043e-01, 2.364219e-01, -1.952604e-01, 1.517742e-01, 3.206876e-01, 3.118668e-01, 8.050294e-02, -1.924454e-01, -2.666575e-01, 8.798161e-02, -2.312734e-01, -2.581442e-01, -1.990346e-01, 5.402329e-04, -3.153980e-01, -2.712559e-01, -2.019059e-01, -1.089687e-01, 3.272129e-01, 4.167630e-01, -3.825701e-01, 3.646843e-02, -2.731738e-01, -1.489571e-01, 1.343986e-01, 2.185549e-03, -1.745238e-01, 2.126790e-01, 3.071992e-01, 2.668031e-01, 1.719786e-01, 1.281516e-01, 1.256960e-01, -1.237339e-01, -2.686550e-01, 9.362498e-02, -2.283513e-02, 3.595625e-01, -2.837911e-01, 1.001619e-01, 3.521850e-01, -9.541911e-02, -1.316707e-01, -3.343758e-01, -4.857759e-01, 3.190344e-01, 9.013762e-02, -3.499764e-03, -1.561704e-01, -3.737791e-01, 2.555997e-01, -1.576256e-01, 6.052628e-02, 2.087814e-01, -2.296057e-01, -3.190121e-02, -2.217260e-01, 2.291428e-01, 1.010430e-01, -4.732316e-01, 2.611963e-01, 2.671285e-01, 9.661657e-02, 1.128778e-01, 4.321511e-02, -1.925438e-01, 1.357062e-01, 5.816228e-02, -1.917972e-01, 2.139668e-01, 1.079914e-01, -2.005942e-01, -8.735057e-02, 4.385459e-01, -2.608025e-01, 3.733699e-01, 1.002795e-01, -2.975103e-01, 3.168993e-01, -2.253307e-02, 1.315161e-01, 1.840513e-01, 3.081129e-02, -4.181120e-01, -5.455275e-01, 1.542862e-01, -3.950594e-01, -7.024233e-03, 2.795033e-02, -1.647859e-01, 7.794927e-02, -1.773348e-02, 1.407668e-01, -2.524942e-01, -1.263524e-01, -7.804756e-02, 2.079156e-01, -3.693570e-02, 2.001515e-01, 6.059333e-02, -1.375868e-01, 7.375502e-02, 2.596934e-01, -5.547329e-02, 2.157278e-01, 7.179636e-02, 9.490879e-02, 2.188739e-01, -1.871171e-01, 1.907444e-01, 1.579492e-01, 2.947088e-01, -1.445781e-01, 2.334901e-01, 9.194200e-02, 1.263574e-01, 4.059285e-01, 2.792712e-01, 5.770598e-01, 1.649471e-01},
{-1.624687e-01, -2.816911e-01, -3.113702e-02, 1.653289e-01, -1.136124e-01, -4.117659e-02, -4.925754e-02, -7.245197e-02, 1.060029e-01, -8.252890e-02, -8.745530e-02, -3.134222e-02, 3.219605e-03, -7.712472e-02, 3.827199e-02, -1.991267e-02, -1.952252e-03, 3.771329e-02, 6.950020e-02, -8.899742e-02, -1.325740e-02, -6.343334e-02, 1.609231e-02, 5.388862e-02, 1.029935e-01, 4.473711e-02, -1.252350e-01, 4.027478e-03, 2.986679e-02, 2.918947e-02, 3.274912e-03, -5.340858e-03, 1.072037e-02, -6.837961e-02, 1.115131e-02, -6.434405e-03, 3.626641e-02, -6.186910e-02, 5.446320e-02, 4.046775e-02, 1.332055e-01, -1.716089e-02, -3.105470e-01, -8.074308e-02, -9.444144e-02, 9.311986e-02, -1.062222e-02, 5.531425e-02, 1.366777e-01, 1.149501e-01, 6.653283e-02, -2.026309e-02, 2.267500e-02, -1.712730e-02, -6.286967e-02, -5.559888e-04, -6.179990e-02, 6.421821e-02, -5.005834e-02, -2.784794e-02, 2.021670e-03, -3.341741e-02, 7.724078e-02, 1.660812e-02, -6.846527e-02, 7.236916e-02, -3.006994e-03, 4.761454e-02, 9.549394e-02, -1.386843e-02, 1.157286e-01, 3.785894e-03, 7.684130e-03, -4.477924e-02, -2.608637e-02, 7.807065e-02, 1.437350e-01, 1.098317e-01, -1.625849e-02, 6.104565e-02, -6.675001e-02, 7.153390e-02, -6.339795e-02, 6.986952e-02, -4.378204e-02, 1.081646e-01, 5.042738e-02, 8.913074e-02, -2.833508e-02, 4.509914e-02, -6.414149e-02, -1.604607e-02, 8.033665e-02, 2.911976e-01, 1.024884e-01, -5.286671e-02, 5.082460e-02, -1.987477e-01, -1.339355e-02, -7.440176e-04, 4.075801e-02, -7.083020e-02, 3.599656e-02, -1.694713e-02, -6.524716e-02, 2.051206e-02, -1.872019e-02, -7.537320e-02, 3.541252e-02, 2.242279e-02, 8.170109e-02, 5.389559e-04, -1.072529e-01, 3.815598e-02, -8.290597e-02, -5.873357e-02, 5.205086e-02, -2.287113e-02, -5.891334e-02, -6.813881e-02, 5.506297e-02, -5.721984e-02, -1.203761e-01, 3.504793e-02, -9.136456e-03, 9.738477e-02, -4.374432e-02, -4.605884e-02, 3.294904e-02, 4.838409e-02, 4.679716e-02, 4.901662e-03, 1.987249e-02},
{5.616074e-02, -9.034559e-02, -8.459433e-02, 4.838254e-02, -2.348581e-02, 1.290065e-03, 2.055427e-02, -8.367295e-02, -8.156794e-02, 3.475093e-02, 6.096806e-02, -2.449961e-02, 8.204050e-02, 1.459805e-02, -3.277210e-02, 2.595022e-03, -6.941535e-02, 7.669023e-02, 7.292802e-02, 3.887627e-02, -1.780580e-01, 4.596979e-02, -8.384041e-02, -3.153833e-02, -2.452337e-02, -7.801464e-02, 1.003283e-01, 9.441491e-02, 2.175098e-02, -4.850572e-02, 5.018163e-03, 5.463337e-02, 1.059655e-01, -9.754238e-03, -9.771398e-02, 7.298831e-02, -8.407136e-02, -7.578403e-02, 7.269565e-02, 2.412101e-02, 9.574574e-02, 5.647541e-02, 9.331766e-02, 9.597912e-02, -6.935519e-02, -8.747662e-02, -8.766963e-02, 1.048655e-03, -1.131429e-02, -5.767051e-03, -1.557148e-02, 5.002135e-02, -6.411823e-02, -4.347531e-02, 2.799311e-02, -1.285320e-01, -9.269499e-03, -1.963140e-02, 6.285936e-02, 4.809257e-02, -5.015043e-02, -9.054612e-02, 9.514263e-03, 1.323647e-02, -1.556311e-02, -8.179790e-02, -5.802681e-02, 3.900395e-02, 2.758508e-02, 9.212935e-02, -3.134442e-02, 7.792494e-02, 3.091244e-02, -4.581579e-02, 6.920166e-02, 3.455451e-02, -2.400912e-02, 4.814264e-02, 8.636986e-02, -6.569659e-02, 6.683485e-02, 2.799121e-02, -8.027972e-02, 7.287203e-02, 6.749056e-02, 3.383525e-02, -4.385940e-02, 1.750396e-02, -8.616250e-02, -1.345367e-02, 7.471100e-02, -7.266112e-03, 1.296230e-02, 4.735634e-02, -3.755189e-02, -1.129629e-01, 4.093628e-02, -5.247122e-02, -9.167845e-02, 2.243780e-02, 8.145814e-02, 1.263472e-01, 1.745168e-02, 7.503076e-02, -5.684817e-02, -8.070704e-02, -1.968897e-02, -6.801567e-02, 8.981938e-02, 5.281843e-02, -3.206097e-02, 4.068771e-02, 4.705144e-02, -4.200218e-02, -7.863687e-02, 2.415439e-02, -5.671732e-02, -2.633836e-02, 6.458499e-02, -5.823644e-02, 3.731543e-03, 3.399541e-04, -1.799668e-02, 6.540813e-02, -6.626291e-02, 1.450889e-02, -8.757765e-02, -8.838187e-02, -4.292013e-02, -8.341728e-03, 1.613393e-02, 3.102176e-02, -8.107292e-02},
{8.708080e-02, -4.244854e-02, 3.655452e-02, -1.152011e-01, -4.351928e-02, -5.970763e-02, 4.193301e-02, 6.559457e-02, -2.094863e-02, -1.162442e-02, -5.311241e-02, 3.945365e-02, 5.982904e-02, 5.282630e-02, -2.091592e-02, -7.963946e-02, 4.461809e-02, 6.286316e-02, 7.580068e-02, -9.534606e-03, 8.146530e-02, 9.256060e-02, -7.038663e-02, 5.573775e-02, -1.909362e-03, 2.093054e-02, 4.190702e-02, -5.194326e-02, -5.164618e-02, -5.304227e-02, 4.894735e-02, -1.904945e-02, 6.023037e-02, -3.891591e-02, 1.030294e-01, -6.968928e-02, 8.395415e-03, 4.185782e-02, 1.268497e-02, 3.480474e-02, -3.966475e-02, 7.492264e-02, 7.833951e-02, 3.398032e-02, 6.524719e-03, 5.190951e-02, 7.039258e-02, 3.032253e-02, 9.713804e-02, -7.505084e-02, -1.141642e-01, -6.065689e-02, -4.635572e-02, 2.274333e-02, -3.055649e-02, -1.746953e-02, 3.075277e-02, -1.381590e-01, 3.018209e-02, -1.067376e-02, -7.349554e-02, 6.013028e-02, 1.397758e-03, -7.478070e-02, -6.278235e-02, 8.152578e-03, -6.493327e-02, -7.529730e-02, 4.374753e-04, 1.108145e-01, -1.363837e-02, 2.353698e-02, 1.388186e-02, -4.088743e-02, 2.938824e-02, 2.390772e-02, -7.528259e-02, -1.225069e-02, -6.466200e-02, 1.242291e-02, -5.095252e-02, -2.701527e-02, -1.656589e-02, -3.929998e-03, 8.000302e-02, 3.550443e-02, 3.430472e-02, 9.936948e-02, -3.314084e-02, -4.979052e-02, -1.196788e-03, -8.206275e-02, 7.910424e-02, 2.405050e-02, 8.010673e-02, 4.530230e-02, 3.119859e-02, -5.424476e-02, -3.347440e-02, -7.208544e-02, -2.480340e-02, -5.528952e-02, 6.655107e-02, 1.943355e-02, -2.748903e-02, 4.069739e-03, -7.258356e-02, -5.346848e-02, -3.108720e-02, -1.214984e-02, 8.077555e-02, 6.907784e-02, -1.229287e-01, 7.173242e-02, 8.731332e-03, -1.573388e-02, 3.458710e-02, 6.776126e-02, -1.494419e-02, -3.435417e-02, -7.789960e-02, -4.045313e-02, 3.763559e-02, -1.557002e-02, 6.162284e-02, 6.704081e-02, 8.207884e-02, 6.989449e-02, -3.503643e-02, -7.766519e-02, 6.617301e-02, 3.657309e-03, -4.498716e-02},
{1.385868e-01, -7.126716e-02, 3.776544e-02, 1.172385e-02, 3.065209e-02, -1.399619e-02, -5.798707e-03, 2.598781e-02, -6.324077e-02, -6.008245e-02, -3.162150e-02, -7.029714e-02, 1.018124e-02, 2.758287e-02, -5.616351e-03, -1.022270e-01, -7.021435e-02, 1.221554e-02, 7.169558e-02, -2.907077e-03, -8.558460e-02, -9.123075e-02, 3.842393e-02, 8.831260e-02, -4.888818e-02, -1.068435e-02, 2.988060e-03, -2.502371e-02, -6.093647e-02, -7.614375e-02, -4.439551e-03, 2.390496e-02, 1.360400e-01, -1.483034e-02, -1.185140e-01, -1.394508e-01, 1.176717e-01, -9.410363e-02, 6.085728e-02, 1.512884e-02, 2.442878e-03, 7.947101e-02, 2.974793e-01, 8.093935e-02, 4.061372e-02, 4.914984e-02, -1.661517e-01, -2.727849e-03, -2.251689e-01, -2.451601e-01, 5.917135e-02, 3.208221e-02, -6.891405e-02, 5.784110e-02, -1.352233e-01, -1.927856e-01, -4.592551e-02, -1.200000e-02, 1.318461e-01, 3.376338e-02, 3.200800e-02, -6.137250e-03, -4.685012e-03, 6.019327e-02, -8.953532e-02, 7.486361e-02, 6.840669e-02, -7.494865e-02, -2.645903e-02, -2.468430e-01, -8.367996e-02, -5.562870e-02, -3.512178e-02, 1.241637e-02, 7.615755e-02, -2.131560e-02, -1.508361e-01, -1.096570e-01, -1.404792e-01, 6.406083e-02, 2.552651e-02, -1.013173e-01, -6.794049e-02, 5.074731e-02, -8.289366e-02, -2.185821e-02, 2.303578e-02, -3.716213e-02, -6.711976e-03, 1.088009e-01, 2.975537e-02, -3.928648e-02, -1.726788e-02, -3.229178e-02, 7.188030e-02, 4.761847e-03, -1.487147e-02, -9.940045e-02, -4.823231e-02, -1.364915e-01, 4.820806e-02, 7.604849e-02, -1.264370e-01, -1.368878e-02, -8.691256e-03, 3.272818e-03, 2.077908e-02, -1.019511e-01, -1.110770e-01, -2.935693e-02, 2.784060e-02, 1.375428e-01, 1.302078e-01, -3.688026e-02, 7.050301e-02, 3.631081e-02, 1.800434e-02, -1.796803e-02, -1.037514e-01, -2.799488e-02, 7.550124e-03, 7.671125e-03, 4.676898e-02, 5.827940e-02, -4.726282e-02, -3.621862e-02, 1.532852e-01, -8.172296e-02, 8.836107e-02, -2.404648e-02, 5.996890e-02, 2.229353e-02, 1.371772e-01},
{1.201782e-01, 6.043725e-02, -1.907929e-02, -7.337473e-03, -6.629641e-03, -7.840379e-02, 8.003374e-02, 5.143306e-02, 6.294788e-02, -1.559772e-02, -3.824876e-03, 8.267947e-02, 2.334035e-02, -5.473946e-02, -9.270426e-02, 1.655781e-02, -1.774997e-02, 4.189076e-02, 5.929701e-02, 1.869483e-02, -4.852313e-02, -5.739992e-02, 2.930444e-02, -3.827010e-02, 5.395120e-02, -4.445205e-03, -1.106250e-02, 1.150012e-02, -1.728516e-02, 1.134357e-01, 1.095799e-01, -4.801262e-02, 3.872500e-02, 8.805559e-02, 1.369413e-02, -8.203795e-02, 3.543216e-02, -7.312845e-02, 1.021240e-01, 4.713459e-02, -4.096179e-02, 1.454465e-03, 1.395245e-01, -5.332127e-02, -4.052148e-02, 7.049643e-02, 8.864029e-03, -2.914696e-02, 2.970676e-02, -4.602787e-02, -4.169024e-02, -7.215136e-02, -2.683129e-02, 2.863770e-02, -5.563821e-02, -7.069480e-02, -8.701397e-02, -6.205928e-03, 1.308690e-02, 7.077553e-02, -3.582950e-02, -3.216213e-02, -3.758238e-02, 7.682879e-02, 8.452316e-02, 5.290897e-02, 1.670631e-02, 3.262273e-02, -3.458577e-02, 2.700851e-02, -7.394419e-02, 1.537443e-02, -3.058054e-02, 7.264408e-02, -3.669747e-02, -5.175965e-02, 9.156208e-02, -1.199759e-01, -2.464701e-02, 5.690172e-02, 6.900349e-02, 7.511451e-02, 1.612453e-02, 7.752109e-02, 7.037725e-02, -5.224449e-02, -6.805261e-02, -1.643537e-02, 4.455843e-03, 2.186261e-02, -5.798344e-02, -7.015536e-02, 2.816476e-02, 2.771973e-02, 5.361862e-02, -3.296305e-02, -5.255094e-02, -4.420859e-02, -8.451501e-02, 4.706100e-02, 8.940994e-02, 9.668764e-02, -1.307362e-02, 9.282439e-03, -2.437869e-02, -1.098232e-01, 3.259684e-02, -1.517709e-02, -8.705039e-02, -1.901485e-02, 7.539202e-03, -7.047167e-02, 8.985139e-02, 4.754880e-02, -6.041288e-02, -4.684346e-02, -2.481305e-02, 6.005690e-02, -1.270615e-03, 6.770375e-02, 6.571832e-02, 6.665394e-02, 8.030768e-02, 8.751136e-02, -6.423688e-02, 3.030402e-02, -1.541251e-02, -7.630531e-02, 4.142871e-02, 9.800573e-02, 9.670645e-03, -2.718375e-02, -4.486029e-02},
{-2.469540e-01, 1.148630e-01, 1.172692e-01, -1.440675e-01, -2.105044e-01, 5.329395e-02, 1.148588e-01, 2.808327e-02, 1.294387e-01, -6.051308e-02, 2.294781e-01, 1.239281e-01, -1.064642e-01, -1.536194e-01, 2.421414e-03, 1.603397e-01, 3.807759e-02, -7.665510e-03, -1.776529e-01, -7.812198e-02, -1.572981e-02, -1.274654e-02, -1.009912e-02, 2.021381e-01, 5.932378e-02, 2.406304e-02, 1.419858e-01, 8.486478e-02, -2.037244e-02, 1.402654e-01, 1.311291e-01, -4.224807e-02, -5.870043e-02, 1.605768e-02, -2.843417e-02, 1.904515e-01, 1.761566e-02, -1.277545e-01, -1.038143e-01, -5.779415e-02, -4.608510e-02, -1.592064e-01, -2.662904e-01, -9.764056e-02, -1.563137e-01, -8.229605e-02, 9.546571e-02, -2.941918e-02, -1.232451e-01, -6.216812e-03, -1.356503e-01, 6.033258e-02, -4.721591e-02, -1.443813e-01, 9.217126e-02, 2.171377e-01, 1.397713e-01, 1.958991e-01, -4.728008e-02, -6.091019e-02, -4.477643e-02, 6.660052e-02, 9.115899e-02, -1.422012e-01, 3.216511e-02, -1.816577e-01, -6.358907e-02, 5.408846e-03, 1.560411e-02, 1.445097e-01, 3.701960e-02, 1.002805e-01, -9.626227e-02, -1.423679e-01, -1.876084e-01, -1.311409e-01, 3.590968e-01, -5.367256e-02, 1.555309e-01, -7.043920e-03, 5.189692e-02, 2.563408e-01, 1.603811e-02, 3.756310e-03, 6.551915e-02, 6.939300e-02, -1.621687e-01, 2.809189e-01, -1.576726e-01, 5.673648e-02, 9.980066e-02, -5.909550e-02, 1.052092e-01, 7.101422e-02, 1.155271e-01, -7.925113e-02, 1.763380e-01, 3.400492e-02, -1.289486e-01, 2.203834e-01, 4.157256e-02, -9.708641e-02, -5.844288e-03, 3.753698e-02, -1.366845e-03, -3.932993e-03, -4.584989e-02, 1.223130e-02, 3.892432e-02, -6.359322e-02, -2.286224e-02, -1.315808e-01, -2.173376e-01, 9.190996e-02, -1.182092e-01, 2.887527e-03, 4.391829e-02, -2.590352e-02, 2.042210e-02, 2.715062e-02, -6.735376e-02, 9.569922e-02, 2.595318e-02, -5.483935e-02, -1.211962e-01, 1.732594e-01, -1.092639e-01, -7.382141e-03, -3.521571e-02, -3.662058e-02, -1.755737e-01, -9.948014e-02, -1.213794e-01},
{1.132451e-01, 4.351572e-02, -3.052782e-02, 3.768914e-03, -5.098434e-02, 2.490426e-02, 6.197358e-02, 2.517627e-02, 4.904088e-02, 9.710354e-03, 9.868145e-02, -7.214201e-02, -5.252930e-02, 3.431789e-02, -1.303055e-02, -7.678384e-02, 4.639361e-02, 4.118765e-02, 8.977083e-02, 6.128551e-02, -1.581501e-02, 1.110016e-03, 3.292761e-02, 2.418089e-02, 2.938399e-02, 1.123642e-01, 5.178340e-02, -6.213231e-02, -3.813929e-02, 2.948973e-02, -4.695790e-02, -4.831922e-02, -1.236556e-01, -5.552382e-02, 9.778845e-03, 2.268714e-02, -6.069367e-02, 5.512101e-03, 1.441959e-02, -5.327698e-02, -3.335826e-02, -2.329431e-02, -9.324816e-02, -8.756147e-02, 8.061932e-02, 4.374455e-02, 3.988580e-02, 7.412214e-02, 5.750608e-02, 4.227438e-02, -4.291895e-02, -3.040721e-02, 1.633758e-02, -2.110321e-03, -2.460585e-03, 4.560937e-02, 1.398291e-03, 9.980308e-03, 5.565482e-02, 4.206301e-03, -6.134841e-02, -1.004861e-02, -2.809947e-02, -6.575038e-02, 1.990066e-02, 3.509488e-03, -5.573900e-02, 3.649378e-02, -1.823290e-03, -5.351489e-02, -7.372136e-02, 7.331984e-02, 8.373334e-02, -3.547713e-02, 5.986376e-02, 2.709006e-02, 7.103318e-04, 1.080103e-03, 3.011056e-02, 6.908306e-02, -2.141521e-02, 2.263163e-02, -7.365403e-02, 1.744265e-03, -4.492532e-02, -3.220859e-02, 8.605589e-02, -2.664195e-02, 6.368504e-02, 3.539887e-02, -4.754487e-03, -5.253236e-02, -3.439169e-02, -8.924772e-02, 4.569428e-02, 3.714953e-02, -3.264392e-02, -2.157123e-01, -6.101086e-02, 5.543624e-02, 6.163369e-03, -2.632039e-02, 2.428567e-02, 4.843270e-02, 1.747966e-02, -5.811407e-02, -5.809913e-02, -7.891868e-02, 1.858347e-02, -9.620205e-03, -2.218078e-02, 1.572022e-02, -4.507546e-02, -2.569778e-02, 2.124534e-02, -3.753338e-02, -5.820036e-02, -5.755112e-02, -6.956142e-02, 5.380076e-02, 5.496051e-02, 3.693780e-02, -3.730003e-02, 2.222826e-02, 8.529990e-02, 2.624312e-02, 7.247417e-02, -5.722588e-02, -5.099022e-02, -3.465353e-02, -5.415161e-02, 6.337639e-02, 5.470005e-02},
{4.513229e-02, 1.237378e-01, 1.718971e-01, -2.111849e-02, 5.756629e-02, -3.964672e-02, 3.715740e-03, -5.945963e-02, 1.408074e-02, 9.066422e-02, -1.189897e-01, -1.115612e-02, 1.235094e-01, 8.985522e-02, 6.072653e-02, -4.011108e-02, -4.068562e-02, 6.959329e-02, 1.553302e-01, -3.086572e-02, -3.973446e-02, -6.467066e-02, -2.854245e-02, -8.251915e-02, 2.766921e-03, -3.769859e-02, -4.127304e-02, -1.403845e-01, -7.469174e-02, -7.924648e-02, -1.615201e-01, -1.049879e-01, -5.989490e-02, -6.088196e-02, -2.676457e-01, -9.093536e-02, 1.954659e-01, 1.091110e-01, -1.990713e-01, -1.181144e-01, -7.889873e-02, 6.600797e-02, -1.022652e-01, -1.370494e-02, 7.880345e-02, 1.126171e-01, -3.556263e-02, -3.987364e-02, -1.869277e-02, -2.518480e-01, 1.610588e-01, -3.318814e-02, 9.832457e-02, 9.198666e-03, -3.955322e-02, 3.683321e-02, -9.982865e-02, -1.266850e-01, 1.509051e-01, -2.159746e-01, 9.029178e-02, -9.622290e-02, -3.157140e-02, 1.521561e-01, -1.247185e-01, 1.057628e-02, -1.734692e-02, -3.897192e-02, -1.130037e-01, -3.266392e-01, 1.507009e-02, -4.892590e-04, -2.117426e-01, 2.288370e-02, 2.856426e-02, 1.388060e-01, -1.077258e-01, 8.982190e-02, -5.130478e-02, 1.160119e-01, 9.581757e-02, -1.323156e-01, -6.322007e-02, 1.215574e-01, -6.362681e-02, -1.078380e-01, 1.280555e-01, -2.017332e-01, 2.000916e-02, -2.313782e-02, -1.190653e-01, 2.112339e-02, -9.518484e-02, 2.019787e-01, 1.959817e-02, 9.143573e-02, -8.682007e-02, 1.712258e-01, -1.207145e-02, -1.483237e-01, -3.617316e-02, -1.217493e-01, -4.352915e-02, 2.790821e-02, -1.120025e-01, 3.269638e-02, 7.119862e-02, 2.037691e-02, -7.114246e-02, -2.012871e-03, 1.659618e-01, 5.775794e-02, 1.733520e-01, -3.024174e-02, 7.571996e-02, 8.249491e-02, 2.085761e-02, 5.481655e-02, 8.288515e-02, 5.926658e-02, 8.325791e-02, -1.472912e-01, -1.553124e-01, -5.225145e-02, -4.415608e-02, -1.519334e-01, 5.880911e-02, -1.614257e-01, 7.272266e-02, -6.728559e-02, 7.307201e-02, 1.141131e-01, 1.118153e-01},
{5.221858e-02, 3.178359e-03, 1.698489e-02, -2.432981e-02, -7.280105e-02, -8.952674e-02, -1.971841e-02, -2.042951e-02, 3.514728e-02, 6.199770e-02, -5.460977e-02, 9.307492e-02, 8.687146e-02, -4.340145e-02, 4.559111e-02, -2.163474e-02, 1.086968e-02, 5.417192e-02, 2.642430e-02, 3.881369e-02, -1.056773e-01, 5.825535e-02, 5.360685e-03, -7.457417e-02, 8.570898e-02, -9.033377e-02, 1.149639e-01, -3.571587e-02, -2.131137e-02, 1.023332e-02, 4.683118e-02, 4.020818e-02, 3.446544e-02, 1.403083e-03, -4.921306e-02, 6.233491e-02, 2.092501e-02, 1.365073e-02, 1.023162e-01, 1.042126e-01, 9.172292e-02, 7.554287e-02, 1.917244e-01, 1.877474e-02, 2.955814e-02, -9.860435e-02, 6.523266e-02, 1.477763e-02, 1.137415e-02, -1.131653e-01, -9.519254e-02, 8.426505e-02, -1.329932e-03, -9.209243e-02, -7.622311e-02, -4.928387e-02, -5.643151e-02, -1.308631e-01, -1.820944e-02, -1.889956e-04, -2.613182e-02, -2.193145e-02, -5.690973e-02, -4.016268e-02, 1.218381e-02, -6.920007e-02, -5.978842e-02, -6.769610e-02, 2.414055e-03, -7.487664e-02, 1.404689e-02, 7.903650e-02, 6.302273e-02, -1.158835e-02, -5.907327e-02, 4.882286e-02, -3.874413e-02, -1.058855e-01, -4.267694e-02, -1.045566e-01, -1.318922e-02, -6.451824e-02, -7.911986e-03, -3.157914e-02, -9.198073e-02, 7.043499e-02, 2.307194e-02, -5.850523e-03, 2.243576e-03, 6.509872e-03, -6.332058e-02, -3.270519e-02, 4.435857e-02, -4.035230e-02, -7.430453e-02, -4.035303e-02, -7.681450e-02, 4.809356e-04, 7.154572e-02, -4.245282e-02, -8.002665e-02, 1.664277e-01, 9.122292e-03, 5.610611e-02, 7.749435e-02, -2.789972e-02, -6.199992e-02, -5.569184e-02, 6.634057e-02, 7.751282e-02, 1.769713e-02, 7.949268e-03, 5.193832e-02, -3.771261e-02, 8.499243e-02, -2.243110e-02, 4.298899e-02, -2.091447e-02, 1.565486e-02, -8.191055e-02, -5.840379e-02, 8.024893e-02, -1.628286e-02, 2.150741e-02, 6.663883e-02, 3.951291e-02, -6.672425e-02, -2.071364e-01, 1.745152e-02, -3.862541e-02, 7.282801e-03, 4.565762e-02, -1.622848e-02},
{2.745062e-01, 2.970801e-02, -2.160958e-02, 1.338480e-01, -4.287759e-02, -1.161331e-01, -1.310726e-01, 3.682436e-02, -1.754587e-01, 1.158968e-01, -1.795267e-02, -2.412185e-01, 1.674340e-01, 1.154539e-01, 1.943108e-01, -2.660393e-01, -7.860418e-02, 1.606862e-01, 2.810438e-01, 1.066617e-01, -1.229073e-02, -2.452351e-01, -1.832169e-01, -2.312675e-02, -2.632776e-01, -1.125360e-02, -1.580799e-01, -2.335461e-01, -1.171986e-01, -7.234008e-02, -9.297268e-02, 8.834457e-02, -1.852066e-01, -1.400542e-01, 2.350324e-01, -2.228597e-01, 2.504814e-01, -8.264501e-02, 2.410264e-01, -2.536457e-02, 9.195850e-02, 4.952590e-01, -2.375254e-01, -2.687699e-01, 2.928858e-01, 1.083426e-01, -1.972324e-01, -1.139999e-01, 2.014800e-01, 1.437377e-01, 1.029388e-01, -1.196806e-01, 5.830330e-02, 3.756857e-01, -1.257452e-01, -1.327232e-01, -1.564303e-01, 1.284710e-01, 1.376194e-01, -2.108329e-01, -1.948848e-01, -1.123398e-01, -2.158740e-01, 7.718576e-02, -1.638175e-01, 3.261645e-01, 1.724833e-01, -2.450832e-01, -8.210461e-02, -4.181969e-01, -9.568848e-02, -4.974366e-02, 7.152918e-02, 4.551591e-02, 2.535203e-01, 9.593976e-02, 2.639532e-01, -1.174859e-01, -3.853684e-01, 2.991551e-01, -2.244393e-01, -5.037092e-02, -9.161280e-02, 1.777656e-01, -1.376662e-01, -3.393492e-01, 2.071556e-01, -4.005527e-01, 2.519829e-01, 1.058705e-01, -2.361286e-01, -1.715595e-01, -2.911366e-02, -7.393707e-02, -1.206704e-01, 2.013940e-01, -2.864571e-01, -3.751259e-01, 3.113544e-01, -3.237813e-01, -4.686761e-02, -1.612375e-02, -1.265405e-01, 1.775092e-02, 7.300504e-02, 6.059874e-02, -1.743748e-01, -1.877933e-01, -3.632426e-02, 1.645512e-01, 2.616910e-01, 6.895758e-02, -2.049950e-02, -3.927686e-02, 1.757242e-01, 2.810757e-01, -1.620733e-01, 2.631043e-01, -1.716096e-02, 9.807977e-02, 2.510012e-01, -2.227635e-01, -1.794041e-02, 2.813421e-02, 7.901619e-02, -1.853538e-01, 3.977649e-01, 5.832821e-02, 4.008747e-01, -8.645423e-02, 1.678275e-01, -1.819287e-02, 3.408740e-01},
{5.916117e-02, -1.896183e-01, -1.370073e-01, 4.761172e-02, -5.014951e-02, 4.108094e-02, 5.041066e-02, 4.678328e-03, 8.517881e-02, 7.179018e-03, -2.351237e-02, 9.107269e-03, -9.882909e-02, 4.934644e-02, -5.097247e-02, 9.654606e-02, 3.758526e-02, 1.741858e-02, -8.136064e-02, -9.449333e-02, 1.095523e-02, 4.389561e-03, 6.976202e-02, -7.960227e-02, 1.090222e-02, -2.796389e-02, 1.014614e-01, -4.293769e-02, 5.576488e-02, -3.764726e-02, 3.125513e-02, -3.288905e-02, 1.040231e-01, 7.276616e-02, -1.699503e-02, 2.494210e-02, -8.491148e-03, 7.391527e-03, 8.650032e-02, 6.129412e-03, 5.208095e-02, -3.185051e-03, -6.700367e-02, 8.182644e-02, -9.772187e-02, 5.632345e-02, 3.979451e-02, 1.027517e-01, 1.907437e-03, -7.213770e-02, -3.071931e-02, 3.783600e-02, 1.452735e-02, -7.501365e-03, 4.679374e-02, -3.095345e-02, 3.974708e-02, -3.757538e-02, -6.685388e-03, 9.012762e-02, 7.800770e-02, -6.821302e-03, 1.519913e-02, 2.120342e-02, 7.485535e-02, 1.209738e-02, 1.644794e-02, 3.949538e-02, -6.912156e-02, -9.837657e-02, -3.452836e-02, 1.920664e-02, -5.487746e-02, -9.413017e-02, -3.086705e-02, -3.063102e-02, -3.771871e-02, 3.498874e-02, -6.051766e-02, -8.539304e-02, 5.933950e-02, 3.252145e-02, 4.077351e-02, -3.716305e-02, 3.803640e-02, 1.435121e-03, 4.799376e-02, 8.419054e-02, -8.262087e-03, 5.899016e-02, -8.344843e-03, 3.117364e-02, -8.846420e-02, 1.138706e-01, -1.117374e-02, -4.705315e-02, -1.293649e-02, -1.094069e-01, -7.986166e-02, 2.061617e-02, -5.806825e-02, -2.369823e-02, -5.580106e-02, -2.564852e-03, -7.780024e-03, -9.854708e-02, -3.160853e-03, 2.548884e-02, -6.785733e-02, -7.074557e-02, -9.235130e-02, 9.682070e-02, -2.920832e-02, -1.478257e-02, -1.187046e-02, -9.421802e-02, 1.410244e-02, -5.281227e-02, 2.078477e-02, -7.719599e-02, 6.405286e-03, 1.129224e-01, -1.684924e-02, 5.596954e-03, -7.617339e-02, -2.461799e-02, -7.500970e-02, -2.349121e-02, -9.445707e-02, -4.813902e-02, -2.190369e-02, -7.016028e-03, -4.147064e-02},
{-3.641888e-02, -3.551669e-02, -5.678027e-02, 2.133585e-02, -3.197515e-02, 1.566935e-02, 9.017628e-02, 3.142224e-02, 3.957407e-02, -7.801782e-02, 7.897019e-02, 3.949627e-02, 9.058531e-02, 4.952738e-03, 8.301279e-02, -6.828925e-02, 1.695691e-02, -3.204983e-02, 9.746703e-03, -6.898385e-02, 8.116154e-03, -5.029142e-02, -7.154831e-02, -6.592710e-02, 4.414534e-03, -8.189082e-02, -5.008331e-02, -5.770187e-02, -5.319199e-02, -2.626621e-02, 7.785072e-02, 1.174838e-02, 1.127714e-01, 2.757848e-03, -3.648477e-02, -3.463474e-02, -6.704317e-02, -8.086200e-02, -9.932209e-03, 8.605435e-02, 7.135948e-02, -4.245112e-02, 8.327970e-02, 8.012328e-02, -5.014102e-02, -9.581480e-03, 1.914668e-03, 3.301772e-03, -1.314614e-01, -1.493721e-01, 3.917614e-02, 8.238064e-02, 5.454595e-02, 6.482089e-02, -7.777463e-02, -1.322839e-01, 6.558553e-02, -4.463023e-02, -8.477119e-02, 7.134512e-02, -2.461570e-02, 5.786044e-02, -5.932826e-03, -5.554494e-02, -1.365793e-02, 2.641798e-02, -4.666262e-02, 3.482240e-02, 5.668768e-02, -1.022934e-01, 5.758448e-02, 1.166673e-02, 1.969039e-02, 3.020894e-02, 8.368402e-02, 1.061775e-02, -1.217144e-01, 2.661607e-02, 3.485851e-02, -3.551783e-02, 5.952429e-02, -3.886499e-02, 4.863523e-02, -8.760145e-02, 7.866920e-02, 4.664869e-02, 8.462243e-02, 6.675839e-02, 7.721549e-02, -5.838327e-02, -8.445004e-02, -1.953783e-02, 4.363538e-02, 1.367189e-02, -2.451728e-02, -7.362593e-02, -6.664973e-02, -7.098341e-02, -1.695383e-02, 4.924815e-02, 5.035263e-02, 5.130966e-02, -9.050824e-02, 7.884593e-02, -7.486229e-02, 2.192857e-02, -8.433801e-02, 3.598570e-02, 1.885697e-02, -2.755607e-02, -1.288658e-02, 8.994314e-02, -8.885779e-02, -6.602473e-02, -6.165588e-02, -8.226793e-02, 7.315978e-02, -6.670275e-02, -3.128774e-02, 2.818094e-02, -8.662533e-02, -8.619072e-03, 5.357572e-02, 3.082375e-02, 8.040651e-02, 5.865229e-02, 6.405517e-02, -1.034487e-01, -3.675742e-02, -6.618679e-02, 4.410902e-02, 4.035709e-03, -4.375076e-02},
{8.710390e-02, -2.520899e-01, 2.358661e-02, 8.071838e-02, -1.714901e-02, 2.305998e-02, 8.555929e-02, -9.933931e-02, 1.713191e-01, 4.764128e-02, -4.926959e-02, -1.340624e-01, -7.196660e-02, 7.961411e-02, -9.053920e-02, 8.357183e-03, 1.537124e-01, -2.594954e-02, 1.044214e-02, -7.433805e-02, 1.334337e-01, -5.014636e-02, 1.429468e-01, -1.519212e-01, 1.229385e-01, 4.252239e-02, -2.042526e-01, 3.596428e-02, -3.401768e-02, -1.311136e-01, -6.290990e-02, -5.867783e-02, 2.844484e-02, -2.909893e-02, -1.435272e-02, 9.602620e-03, -7.356686e-02, -5.573490e-02, 2.171520e-02, 1.455368e-02, 9.350844e-02, 3.952061e-02, -3.365355e-01, -1.839939e-01, -1.109587e-01, -5.749853e-02, -5.485980e-02, 3.639018e-02, 2.041622e-01, 1.101643e-03, 2.125510e-03, 8.736803e-02, 1.148650e-01, -4.586726e-02, 2.198065e-02, -8.222316e-02, -5.702101e-02, 4.913734e-02, 4.068211e-02, -7.957502e-02, -4.707451e-02, -1.012288e-01, 1.054054e-01, 1.759899e-02, 8.686297e-02, 4.457860e-02, -4.591767e-02, 8.397602e-02, 2.769707e-02, 1.784818e-01, 1.908044e-01, 7.791578e-02, 2.710910e-02, -1.319153e-01, -8.856104e-02, -4.826984e-02, 5.190785e-02, 1.197974e-01, -1.361730e-02, -7.802232e-02, -1.181579e-01, -7.445063e-02, 2.068042e-02, 3.105398e-02, 1.264481e-01, 5.660910e-02, -5.671383e-02, 9.211230e-02, 2.236222e-02, -4.457497e-02, 1.030765e-01, 8.570495e-02, 3.171400e-02, 3.058457e-01, 1.184959e-01, -6.308249e-02, 1.529628e-01, 1.731854e-02, -7.269359e-02, 9.359573e-02, 8.232366e-02, -8.332095e-02, 1.250688e-01, 6.415275e-02, -1.798276e-01, -6.431153e-02, 5.904659e-02, -2.009152e-02, 3.698613e-02, -6.698275e-02, 1.623022e-01, -3.504825e-02, -1.010281e-01, -1.757562e-02, -3.958430e-02, 4.581990e-02, -4.723304e-02, -8.557546e-02, -5.186718e-02, 6.898209e-02, 9.255212e-02, 1.794153e-02, -2.145703e-01, -1.378202e-02, 1.478149e-02, 1.431401e-01, -2.078625e-02, -7.986771e-02, 4.346395e-02, -5.446183e-02, 6.060972e-02, -1.066542e-01, 4.279427e-02},
{-2.343363e-02, -1.428526e-02, -2.675003e-02, 2.339248e-02, 5.060252e-02, 1.412244e-02, -4.534775e-02, 7.816096e-02, 1.058833e-02, -7.679115e-02, -2.987164e-02, -7.749389e-02, -7.923685e-04, 3.087438e-02, 1.156633e-02, -5.884367e-02, 1.957840e-02, 8.169551e-02, 2.369891e-02, 2.594366e-02, -7.069158e-02, -4.457999e-02, -6.291733e-03, 5.432413e-02, 5.755982e-02, 5.505963e-02, -1.171711e-02, 3.053118e-02, 2.393096e-03, 4.672717e-02, 4.819335e-02, 2.027202e-02, 3.520396e-02, 4.495129e-02, -1.063137e-01, -9.916451e-02, 4.698696e-02, 4.329809e-02, -2.578155e-02, 3.264464e-02, -4.955636e-02, 6.320319e-02, 9.885237e-02, 7.407121e-02, 8.927544e-03, -7.298043e-03, -6.438692e-03, -6.738277e-02, 3.467292e-02, 8.117030e-02, 1.653061e-02, 3.319060e-02, -8.078326e-03, 5.373836e-02, -9.656034e-02, -1.054493e-01, 1.662317e-02, 1.788893e-02, -4.180085e-02, -4.557900e-02, 7.374220e-02, 9.358071e-03, -2.545318e-02, 1.022154e-03, -5.197220e-03, 4.271709e-02, 6.936541e-02, -4.220767e-02, -2.729192e-02, 4.302524e-02, -4.645268e-02, 7.153656e-03, 2.925674e-02, 8.639896e-02, 6.598999e-02, 3.934576e-02, -9.818820e-03, -4.945895e-02, -7.726005e-02, 6.837373e-02, 9.188102e-03, 6.134249e-02, -7.363597e-02, 1.915046e-02, -7.578754e-02, 2.022173e-02, 8.768807e-02, -3.248484e-02, 1.680810e-02, 3.757049e-02, -1.864003e-03, -4.474321e-02, 6.128949e-04, -1.915377e-02, -6.120691e-02, -2.854354e-03, 8.170863e-03, 2.581246e-02, 5.614259e-02, 3.246719e-02, 7.218246e-02, 1.195224e-01, 2.357491e-02, -3.361212e-02, 3.993656e-02, -2.991870e-02, -8.092752e-02, -8.812652e-02, -7.851551e-03, 5.204429e-02, -1.536226e-03, 7.151771e-02, 2.624149e-02, -9.324919e-02, -5.082163e-02, -6.796384e-02, -1.952562e-02, 6.234289e-02, 8.074286e-02, -7.025257e-02, 9.933484e-02, -2.722631e-02, 4.732492e-02, -6.079555e-02, -8.805848e-02, 4.874931e-02, 1.090404e-01, 6.177208e-02, -2.331894e-02, 2.369410e-02, 6.861556e-02, -5.518199e-02, 9.293018e-02},
{5.191376e-02, 6.470313e-02, -8.448495e-02, 4.928597e-02, 4.831769e-02, 2.715339e-02, -8.855455e-02, 7.450701e-02, 2.742823e-02, -1.765010e-02, 5.807235e-02, 1.337517e-03, 1.147454e-03, 7.156417e-02, -5.687739e-02, 2.093677e-02, -6.745373e-02, 2.465743e-02, 9.127507e-02, 2.786745e-02, -5.182254e-02, -3.956870e-02, -4.829758e-02, -3.433155e-02, 6.737739e-04, 9.367992e-03, -4.480976e-02, 2.005199e-02, 2.028582e-02, 1.428969e-02, 4.350048e-02, -6.401379e-02, 7.699195e-02, 9.620053e-02, -3.915976e-02, 3.809363e-02, 5.805719e-02, 8.283453e-02, 4.898058e-02, 3.318433e-02, -3.980283e-02, 6.592849e-02, -6.030744e-02, 8.800852e-02, 8.370033e-02, -5.842022e-02, 6.950213e-03, 4.249833e-02, -1.328641e-01, -1.935707e-01, -3.628454e-02, 6.806030e-02, 6.066623e-02, 6.553332e-02, 5.617758e-03, -1.064508e-01, -3.341479e-02, -7.073945e-02, 5.769271e-03, 6.205849e-02, -1.454491e-02, -8.805384e-02, 1.338204e-02, 8.465081e-02, 6.349919e-02, -1.118910e-02, -4.564539e-02, 5.517661e-03, 8.995912e-04, -1.885690e-02, 9.033118e-03, 8.866092e-02, 5.270610e-03, 1.591850e-03, -4.491706e-04, -7.129423e-02, -1.845401e-02, -9.830289e-02, -9.168845e-02, -6.625554e-02, 3.101382e-02, -7.758861e-03, 6.584962e-02, -7.840086e-03, -6.761266e-02, -3.937538e-02, 1.172941e-01, 5.951597e-02, 5.466607e-02, 3.024978e-02, -4.687326e-02, -9.303821e-02, 2.611146e-02, 7.078727e-02, -5.154818e-02, 2.120187e-02, -1.391774e-02, 4.025126e-02, 7.110973e-02, -1.104195e-01, -4.389378e-02, 9.113446e-02, -5.140605e-03, -7.339203e-02, 3.549344e-02, 7.192324e-03, -5.633488e-02, -9.239951e-02, -2.527848e-02, -5.620830e-02, 1.890088e-02, 7.070377e-02, 1.160594e-01, -6.232822e-02, 7.608300e-02, -7.630929e-02, -2.786610e-02, 1.737331e-02, 3.534868e-03, -1.702896e-02, -8.513494e-03, -2.555660e-02, -4.282771e-02, 8.084331e-02, 5.719714e-02, 5.159924e-02, -2.065447e-02, -2.273902e-01, -4.359816e-02, 4.504333e-02, -1.092137e-03, 2.666247e-02, 9.837738e-02},
{2.918233e-02, -1.143582e-02, 9.801985e-03, -6.287488e-02, -1.491271e-03, -7.591067e-02, 2.181424e-02, -3.359825e-02, -8.341435e-02, 8.745684e-02, 1.407764e-02, -1.195994e-01, 4.558654e-02, 8.805066e-02, 3.153158e-02, -9.136583e-02, -5.393206e-02, 2.893985e-02, 1.048847e-01, 6.683387e-02, -1.029759e-01, 5.742810e-02, -4.873067e-02, -3.702783e-02, -6.797218e-02, -3.377299e-02, -7.100889e-02, -1.096233e-02, -6.125947e-02, -1.393844e-02, 3.387417e-02, 5.353035e-02, 9.823702e-02, -9.674345e-03, -4.926820e-02, 2.522202e-03, -1.892806e-02, -6.081055e-02, 4.806119e-02, -3.395268e-02, -1.524395e-02, 9.282969e-02, 1.917903e-01, 4.045874e-03, 1.122487e-01, 2.356076e-02, -4.974788e-02, -9.929843e-02, -9.485659e-02, -2.079848e-01, -7.041948e-02, -4.381812e-02, 6.206255e-03, 1.072983e-01, -7.985874e-02, -1.984172e-01, -3.240963e-02, 3.422770e-02, -1.429456e-02, -1.356050e-01, -8.119763e-02, 1.150449e-02, -5.402407e-02, 5.372711e-02, -6.948892e-02, 4.163140e-02, 3.800698e-02, -6.620941e-02, 2.633625e-04, -2.679420e-01, 6.984220e-02, -3.122756e-02, 3.093635e-02, 9.019826e-02, 2.976715e-02, 9.563560e-02, -5.437958e-02, -6.843729e-02, -1.293823e-01, 5.139837e-02, 1.952084e-02, -7.645739e-02, 1.061017e-02, 4.231890e-02, 2.824486e-02, -6.166854e-02, -2.902481e-03, -8.379017e-02, -4.223002e-02, -1.236889e-02, 5.816659e-02, -6.916994e-02, -6.170897e-02, -4.878442e-02, -2.855973e-02, -4.865458e-02, 2.543455e-02, -3.008842e-02, -8.050445e-03, 1.771360e-02, 1.193615e-02, 4.728568e-02, -5.770636e-02, -3.601401e-02, -3.875539e-02, -4.210362e-02, -3.611241e-02, -2.578756e-02, -2.266275e-02, 7.024421e-02, 4.309193e-02, 4.109555e-02, 1.929585e-01, -3.552658e-02, 1.319571e-01, 5.997450e-02, -5.687943e-02, 3.456612e-04, -3.413099e-02, -4.399407e-02, 3.556802e-02, 8.481399e-03, -7.352000e-02, 7.504007e-02, -6.366213e-02, 5.226317e-02, 9.584331e-02, -6.773943e-02, 1.289812e-01, -7.650248e-02, 1.165710e-01, -3.982703e-02, 1.150182e-01},
{-7.209355e-02, -3.473192e-02, 2.206349e-02, 5.271441e-02, 1.432799e-02, -6.464512e-02, 4.760586e-02, 2.919269e-02, 2.113978e-02, 4.861034e-02, -5.871813e-02, -2.995308e-02, 9.014585e-03, -4.891530e-02, -3.034296e-02, 7.497739e-02, -3.498561e-02, 2.965491e-02, -6.314266e-02, 7.277919e-02, -1.123620e-02, -3.135708e-02, 4.159317e-02, -5.387546e-02, -9.922349e-03, -7.224600e-02, 9.460154e-02, -8.262930e-02, 4.329710e-02, 2.242681e-02, 9.741941e-02, -1.949725e-02, -2.437029e-02, -5.270747e-02, 3.079473e-02, 3.148928e-02, 1.185054e-02, -7.925919e-02, -2.873348e-02, -3.599689e-02, 9.727666e-03, 2.930200e-02, 1.467659e-01, 4.997083e-03, -2.253352e-04, -2.611186e-02, -1.863009e-02, -8.236533e-03, -8.044119e-03, 6.708589e-02, 2.154254e-02, -4.585171e-05, -6.457007e-02, 9.024147e-02, -7.194619e-02, 3.377305e-02, 7.107325e-02, -1.360003e-02, 5.439492e-02, 3.077491e-02, -7.143854e-02, -8.106147e-02, 6.944125e-03, -1.197054e-02, 2.414571e-02, -6.262836e-02, -5.194790e-02, -5.211373e-02, 2.741957e-02, -1.343591e-02, -4.237592e-03, -4.442322e-02, 5.337860e-02, -2.083709e-02, 8.523517e-02, 7.730586e-02, -6.422801e-02, -3.951366e-02, 7.370126e-02, -9.775980e-02, 8.145027e-02, -2.854424e-02, 8.880586e-02, 6.177225e-02, 1.962730e-02, -6.026158e-03, 6.622511e-02, -9.657917e-03, -1.934063e-02, 2.688932e-02, -5.046160e-02, -9.273905e-02, 4.769116e-02, -4.394275e-02, 8.653847e-02, -4.260786e-02, 1.798768e-03, -1.518652e-01, 3.589003e-02, 2.228440e-02, 2.752374e-03, 2.997714e-02, -9.488057e-02, 2.401869e-02, -6.479590e-02, -1.142528e-03, 7.220025e-02, -2.993269e-02, 4.420124e-02, -6.371427e-02, -7.709234e-02, -9.232079e-03, -4.584011e-02, -2.642406e-04, -4.300364e-02, -5.283590e-02, -8.372052e-03, 5.131527e-02, 7.850271e-02, -5.889500e-02, -4.444874e-02, 1.926697e-03, 4.130236e-02, -5.781590e-02, -1.946046e-02, 7.139038e-02, -5.435885e-02, -2.356088e-03, 4.578570e-02, 4.460150e-02, -7.562395e-03, -5.580953e-02, 8.848451e-02},
{2.042327e-03, 7.728166e-03, -7.629242e-02, -1.882556e-02, -1.579985e-02, -3.441733e-02, -3.889359e-02, 1.570268e-04, 5.546258e-02, 6.369200e-03, 4.680029e-02, -1.600975e-02, -7.636966e-02, 8.793515e-02, -6.717370e-02, 8.207970e-02, 9.094746e-03, 1.869660e-02, 3.198079e-02, 5.568012e-02, -8.269984e-02, -4.471703e-03, 4.807530e-02, 2.296358e-02, 4.596343e-03, 4.076431e-02, 9.627040e-02, 4.088860e-02, 2.385687e-02, 3.214546e-02, -3.796487e-02, 7.508155e-02, 3.305647e-02, 1.483796e-02, 1.795820e-02, 2.547191e-02, 4.714438e-02, -1.088319e-01, 1.039058e-01, -6.502021e-03, 7.478953e-02, -7.676262e-02, 3.722043e-01, -1.844374e-02, -1.621903e-02, -1.974261e-03, -4.350211e-02, 1.053688e-03, -7.448857e-02, -1.633686e-02, -4.244864e-02, 4.677662e-02, 5.953055e-02, -9.600285e-02, 7.903033e-02, 6.800257e-03, 4.598438e-02, -1.230475e-01, -4.529499e-02, 1.255687e-02, -4.300700e-02, 2.072678e-02, 5.523818e-02, 6.402033e-02, -5.453020e-02, 4.775666e-02, -5.581566e-02, -6.803948e-02, 4.163465e-02, -2.460146e-02, -1.258460e-03, -4.366533e-02, -2.248100e-02, 6.557630e-03, -7.050941e-02, 3.856976e-02, 7.442122e-02, 4.882220e-02, -2.637409e-02, -1.025378e-01, 5.740578e-02, -6.641839e-02, 2.786817e-02, 5.997226e-02, -7.325183e-02, -6.040139e-02, -9.403015e-03, 1.350626e-02, 4.421551e-03, -5.171699e-04, -5.985616e-02, 2.190496e-02, -8.132258e-02, -5.544256e-02, 1.093873e-02, 3.638017e-03, 3.832299e-02, -1.541459e-01, -6.444291e-02, 2.352091e-02, 8.437084e-03, -5.672988e-03, 1.014052e-02, 1.680833e-02, 5.510301e-02, 3.549820e-02, 3.033383e-02, -1.587574e-02, -3.375178e-02, -4.914055e-02, 7.509687e-02, 3.712303e-02, 1.457682e-02, 6.317488e-02, -3.311229e-02, -7.439827e-03, 2.366735e-02, -6.398639e-02, 2.309780e-02, 5.433839e-02, 2.359037e-02, 4.500513e-02, 7.557458e-02, 7.099912e-02, 2.565499e-02, 1.685485e-03, -5.319840e-02, -2.752506e-03, 2.886657e-02, 8.897559e-02, 1.574137e-02, -3.011706e-02, 4.328889e-02},
{3.724841e-02, -1.174014e-01, 3.676073e-04, 2.931922e-02, 3.967125e-02, 1.565097e-02, -4.752302e-02, -4.793021e-02, -9.260932e-02, -1.056847e-02, 2.051697e-02, -1.038063e-02, -4.063780e-02, -5.320562e-02, 6.195356e-02, -1.776955e-03, -6.296171e-02, 7.986957e-02, 2.739506e-02, 2.350563e-02, -4.613740e-02, 2.317054e-02, -4.066725e-02, -8.691790e-03, 8.567093e-04, -1.651284e-02, 3.204403e-02, -5.426030e-02, -9.066034e-02, 6.440515e-03, 8.742664e-02, 5.089690e-03, -5.252227e-02, -4.943273e-02, 1.571882e-02, 3.708448e-02, 8.446348e-03, -7.819755e-03, 2.315449e-02, 1.334347e-02, -2.640260e-02, 6.366686e-02, -9.642132e-02, 4.130993e-02, 2.110590e-02, -9.017979e-02, 4.188374e-02, 8.361877e-02, -8.530633e-02, -4.664680e-02, -7.610504e-02, 9.091043e-02, 5.188368e-02, 8.935085e-02, 7.879724e-02, 1.870989e-02, -5.468487e-02, -3.464267e-02, -4.271209e-02, -2.424630e-02, 2.302809e-02, -1.009298e-02, 2.930262e-02, -1.493389e-02, -4.907694e-03, 3.844833e-03, 2.218023e-02, -7.483716e-02, 7.043055e-02, -8.996794e-02, -3.098468e-02, 9.411869e-02, 5.137238e-02, -4.979447e-02, -8.114805e-02, -2.934465e-02, -6.646865e-04, 8.726562e-02, -5.715600e-02, -5.370848e-02, 2.296128e-02, 1.540611e-02, 1.739289e-02, 1.405597e-02, -1.349545e-02, 3.039976e-02, -5.859477e-02, 9.071773e-02, -4.983437e-02, 5.797935e-02, 7.746301e-02, 2.999446e-02, 3.920554e-02, 5.901375e-03, -8.654628e-02, -1.714881e-02, -6.564791e-02, -2.794951e-02, -6.365433e-02, -5.720898e-02, -5.903454e-02, 4.431269e-02, -6.829256e-02, -5.588117e-02, -6.318039e-02, -6.739255e-03, 5.843092e-02, 7.707153e-02, -4.261630e-02, 6.405555e-02, -4.129855e-02, 6.208023e-02, 9.602482e-02, -1.659079e-02, -1.926387e-02, -6.562757e-02, 4.355115e-02, -4.937062e-02, 3.572790e-02, -3.248479e-02, -1.079335e-02, 1.536555e-02, 3.097276e-02, -1.783384e-02, -4.364383e-03, -8.183661e-02, 2.725237e-02, -1.873859e-01, -4.733178e-02, 6.749312e-02, 2.656989e-02, 8.085154e-02, -5.659088e-02},
{6.923074e-02, -1.092653e-01, 1.079457e-01, 1.603283e-01, 4.921925e-01, -3.465160e-02, -1.203205e-01, 1.246375e-01, -2.042563e-01, 1.193107e-01, -2.399390e-01, -2.016946e-01, 2.891217e-02, 1.986884e-02, 1.520996e-01, -2.170483e-01, 1.165391e-01, 1.637663e-01, 1.247578e-01, 1.540259e-01, 1.440899e-01, -1.111440e-01, 9.524414e-03, -2.310767e-01, -1.626766e-01, -3.699104e-03, -1.389934e-01, -3.269325e-01, -1.686197e-01, -2.584505e-01, -2.023357e-01, -4.717069e-02, -1.386965e-01, -5.546441e-02, 2.518405e-02, -2.633036e-01, -7.742323e-03, 1.267555e-01, 3.667899e-02, -9.090348e-02, 3.676254e-02, 3.231888e-01, -1.658640e-01, -1.132401e-02, 1.001158e-01, 1.117478e-01, -3.129014e-01, -1.405581e-01, 1.620948e-01, -1.395699e-01, 1.432740e-01, -1.968502e-01, 2.107555e-01, 3.633108e-01, -5.899653e-02, -1.730535e-02, -4.075932e-02, -4.684248e-02, 2.218183e-01, -8.365268e-02, -1.561088e-01, -1.553478e-01, 1.080427e-02, 2.243737e-01, -2.137373e-01, 2.363643e-01, 2.854254e-02, -1.135317e-01, 1.027232e-02, -2.284101e-01, 5.968706e-02, 3.626580e-02, -4.859287e-02, -1.099354e-02, 9.095671e-02, 2.268692e-01, 1.585000e-01, 1.209189e-02, -3.689632e-01, 1.185924e-01, -1.065217e-01, -5.376063e-02, -4.419640e-02, 9.647673e-02, -4.794738e-03, -2.716784e-02, 1.725776e-01, -2.358538e-01, 3.029335e-01, 2.326578e-02, -5.226541e-02, 1.364095e-01, 3.012802e-01, 1.698372e-01, -1.529955e-01, 7.247777e-02, -2.659091e-01, -1.294952e-01, 1.560725e-01, -2.569915e-01, -3.298604e-02, -1.805094e-01, -1.811333e-02, 8.505378e-02, -2.039331e-01, 1.292485e-02, 5.462109e-02, -1.713206e-01, 2.092917e-02, 2.259421e-01, 4.462575e-01, 1.805618e-01, -6.390909e-02, -3.136878e-02, -1.034628e-02, 2.107586e-01, -2.367363e-02, 1.372915e-01, 2.062999e-01, -3.190530e-02, 1.479847e-01, -1.473382e-01, -2.231262e-01, -6.016295e-02, 1.793930e-01, -1.568561e-01, 3.250433e-01, -3.873244e-01, 2.084836e-01, -8.402178e-02, 9.129009e-02, 1.765395e-01, 5.218165e-02},
{-2.382494e-02, -1.510545e-02, -1.207955e-01, -8.575438e-03, -1.175321e-01, 9.444683e-04, -5.310314e-02, 1.913142e-03, 1.688108e-02, -4.584689e-02, -1.256373e-02, 7.348190e-03, -5.669362e-02, -1.579023e-02, 6.105449e-02, 7.643482e-03, 5.587769e-02, -5.686038e-02, -9.874065e-03, -2.466173e-02, 1.663782e-01, -7.930181e-02, -3.305452e-03, 8.109240e-03, -4.150876e-02, 1.339443e-01, -4.745379e-02, -3.737775e-02, 1.028706e-01, -7.291266e-02, 9.223800e-03, -1.259897e-01, -3.831681e-02, -6.635161e-02, 1.548819e-01, 8.514433e-02, -9.053524e-02, 1.543033e-02, 1.911364e-01, -4.215071e-02, 1.580276e-01, -9.251315e-02, -7.377163e-01, -3.040046e-01, 4.427959e-02, 1.025023e-01, 9.676325e-02, -5.887310e-02, 3.739255e-01, 2.919374e-01, 8.076212e-04, -1.404611e-02, 1.247088e-01, 4.630624e-02, -5.045974e-02, 1.568580e-01, 3.105091e-02, 1.348430e-01, -3.849200e-02, -9.483461e-02, -1.020119e-01, -2.105828e-02, 2.209030e-01, 7.973706e-02, -2.309003e-02, 1.710150e-02, 6.461621e-02, -5.581290e-02, 6.721325e-02, 2.573918e-01, 1.258060e-01, -1.633912e-02, 2.003424e-01, -7.185815e-02, -9.173341e-02, -4.946255e-02, 2.866969e-01, -2.332835e-02, -7.344361e-02, -2.658789e-02, -1.767455e-01, -4.318416e-02, -3.463080e-02, -6.560270e-02, -9.782412e-03, 3.095532e-02, -9.198479e-04, 1.057977e-01, -4.306449e-02, -1.397295e-02, 7.175180e-02, -1.572022e-02, 1.226133e-01, -3.485676e-02, 1.597262e-02, -6.925201e-02, 7.341385e-02, -1.146633e-01, 5.312067e-02, -5.066068e-02, -1.839270e-02, -3.069971e-01, 8.334141e-02, 1.892582e-02, -1.749552e-02, 1.405490e-02, 1.597409e-01, 2.723297e-02, 1.102253e-01, 9.883867e-03, 1.799377e-01, -2.301032e-01, -2.331391e-01, -2.644140e-02, 3.445200e-02, 1.518906e-01, 6.916708e-02, -5.296828e-02, 1.374426e-01, 7.149918e-02, -3.440141e-02, -1.894125e-02, -2.525609e-01, -4.547599e-02, 1.194006e-01, -1.579302e-02, -8.405026e-02, 1.927771e-01, 6.684897e-02, -8.234806e-02, -7.988489e-02, -1.008549e-01, -1.216388e-02},
{-2.850691e-02, 3.564394e-02, -3.116967e-02, -9.706417e-02, -6.395018e-02, 8.436060e-02, 4.028625e-02, -1.241301e-02, -1.479813e-02, 2.641169e-02, 9.873020e-03, -5.131086e-02, -3.969335e-02, 6.943265e-02, 3.537278e-02, 7.677907e-02, -2.908188e-02, -2.465658e-02, 9.510774e-03, -6.443935e-02, -5.022547e-02, 9.351099e-03, 8.721835e-03, 4.395954e-03, 1.244128e-02, -4.156348e-03, -1.799318e-02, -1.168238e-02, -7.494280e-02, -6.085899e-02, -1.355437e-03, 6.054167e-02, -4.420058e-03, -3.775920e-02, -5.151132e-02, -8.989824e-07, 1.829830e-02, -5.229395e-02, 8.511636e-03, -7.337806e-02, -4.102855e-02, -1.887424e-02, -1.316828e-01, -8.166866e-02, -5.626000e-03, 8.463953e-02, 7.099697e-02, 1.667938e-02, 5.214455e-03, -1.228819e-01, -3.648898e-02, 5.397900e-02, 4.122022e-03, -7.110687e-02, -6.593412e-02, -2.599382e-02, -4.189438e-02, 9.183142e-02, 2.247904e-02, -3.733577e-02, 1.266893e-02, 8.283804e-02, -3.290922e-02, 1.013127e-03, -2.954598e-02, -5.777433e-02, -2.547310e-02, 2.894383e-02, 2.322705e-02, 6.208087e-02, 5.735328e-02, 1.954147e-02, 5.220763e-02, 6.515624e-02, -5.020037e-02, -1.639389e-02, 3.350408e-02, 7.039445e-04, 2.083448e-02, 2.427631e-02, -1.009520e-01, 6.484297e-03, -4.435437e-02, -8.737306e-03, -2.492377e-02, 1.880606e-02, -4.938056e-02, 7.707514e-02, -8.953590e-02, -7.662285e-02, 7.606408e-02, 3.125772e-02, 5.553102e-02, 1.081303e-01, 7.428790e-02, 1.125367e-03, 2.625187e-02, 2.844363e-02, -4.144510e-03, 9.455752e-02, 3.440651e-02, -1.329304e-02, 2.804428e-02, 2.940855e-02, 1.386981e-02, 6.744354e-03, 6.105059e-02, -9.257471e-03, 3.349266e-02, 6.692792e-02, 1.432515e-02, -8.069590e-02, 3.031311e-02, 6.052641e-03, -7.238116e-03, 1.800242e-02, 2.430850e-02, -6.430437e-02, -6.917415e-03, 7.212126e-02, -4.724843e-02, 7.830032e-02, 6.563006e-02, 7.068548e-02, 9.152744e-02, 6.534490e-02, -9.275629e-02, -4.524100e-02, -3.224341e-02, -4.398179e-02, -2.973043e-02, 4.328771e-02, 4.355479e-02},
{-7.062964e-03, -2.594467e-01, -6.271957e-02, 8.582454e-02, -1.861744e-02, -1.004311e-01, -1.135576e-01, -5.757148e-02, -1.312201e-02, -4.325996e-02, -7.153266e-02, -9.411895e-02, 3.395545e-02, -3.890759e-02, 5.730835e-02, -2.856304e-02, 1.308862e-03, 7.264642e-02, 4.838816e-02, -2.359170e-03, 1.528336e-01, 4.378248e-02, 1.070307e-02, -4.129225e-02, -4.929107e-02, -1.354066e-02, -1.064578e-01, -1.412875e-01, -5.497497e-02, -1.004419e-01, -1.404740e-01, -3.148441e-02, -7.792040e-02, 6.686908e-02, 8.944237e-02, -2.061944e-02, 1.100021e-01, 1.655142e-02, 9.214256e-03, -8.289072e-02, 9.714425e-02, 4.628743e-02, -2.307422e-01, -1.928659e-01, 9.317949e-02, -9.437752e-03, -1.228941e-01, -8.088786e-02, 2.860243e-01, 1.383144e-01, 1.538512e-02, 2.339241e-02, 8.839101e-02, 5.386180e-02, -1.470446e-02, 4.372500e-02, -1.816599e-02, 1.235301e-02, 2.170285e-02, -1.097576e-01, -6.887484e-02, -2.179840e-02, -3.627554e-02, 1.407108e-01, 5.613461e-02, 8.039171e-02, -8.441777e-03, 2.564842e-02, 3.985621e-02, 9.041943e-03, 8.402946e-02, -6.457431e-02, -3.823757e-02, 3.029153e-02, 1.094706e-01, 4.403783e-02, 1.172823e-01, 2.503411e-02, -5.701313e-02, 9.470583e-02, -1.781952e-01, -1.998942e-01, -4.891557e-02, 8.293326e-02, 7.306229e-02, 2.865233e-02, 5.064302e-02, -1.157546e-01, 9.933502e-02, 6.508280e-02, 2.050618e-02, -4.882539e-02, 1.857084e-02, 1.416713e-01, -1.651899e-01, -2.420204e-02, 1.202667e-02, -2.510666e-01, 1.418563e-01, -1.354272e-01, -3.086156e-02, -1.597673e-01, 5.396165e-02, 2.161891e-02, -5.882102e-02, 2.893363e-02, 9.311477e-02, 4.270633e-02, -1.443634e-01, -1.058643e-02, 2.781081e-01, -3.881918e-02, -5.618910e-02, 8.290610e-02, -1.900410e-02, 7.459803e-02, -1.053685e-01, -1.728495e-02, 2.710915e-02, -4.610962e-02, 6.426873e-02, 2.652286e-02, -1.686490e-01, 6.800117e-03, 1.164362e-01, 3.353063e-02, -2.605471e-02, 6.866038e-03, -1.912877e-04, -3.730992e-02, 9.908805e-02, -3.270648e-02, 1.055391e-01},
{-7.359640e-03, -1.835131e-01, 3.818546e-02, -1.172863e-01, -1.091223e-02, 2.991667e-02, -5.001920e-02, 3.036609e-02, -6.143514e-02, -6.704820e-02, 1.010995e-01, 3.262916e-02, -8.362681e-02, 2.258984e-02, 6.186506e-02, -2.015370e-02, 1.035610e-01, 7.411915e-02, 4.666876e-02, 2.912769e-02, -6.547235e-02, 5.572483e-03, 1.095721e-02, -2.303226e-02, -4.344708e-02, 3.626930e-02, -7.327483e-02, -5.670298e-02, 7.686988e-02, -5.234896e-02, -7.421089e-02, 1.399707e-02, -9.428030e-02, 2.336175e-02, 1.794223e-02, -8.057529e-02, 7.985582e-03, 2.628557e-02, 1.088120e-01, -3.294733e-02, 5.784573e-02, 4.489506e-02, -1.235329e-01, 1.153278e-02, -3.698722e-02, 1.980061e-02, -2.528179e-02, -4.953832e-02, 7.718313e-02, -7.695334e-02, -1.909695e-02, -5.671939e-02, -6.604401e-03, 2.522743e-02, -4.557552e-04, -5.796591e-02, 6.412047e-02, 1.821375e-02, 6.261699e-02, -4.154041e-02, 1.640768e-02, 3.798201e-02, 4.353556e-02, -1.677526e-02, -6.526728e-02, 8.779255e-02, -8.695839e-02, -7.750800e-03, -6.005540e-02, 3.240644e-02, 4.216065e-03, -1.938527e-03, 1.246086e-01, -2.053765e-02, 1.677958e-04, -7.233325e-02, -3.603066e-02, -3.774386e-02, -5.725206e-02, 5.626087e-02, -8.568557e-02, -9.914109e-02, 4.138796e-02, -4.061493e-02, 8.306601e-02, -3.736736e-02, 2.489984e-02, 1.943387e-02, 5.024115e-02, 2.005361e-02, 6.700312e-02, -7.129408e-03, 2.519814e-02, 1.361251e-01, -1.613330e-02, -1.101374e-01, -4.067716e-02, -5.124108e-02, -3.662642e-02, 8.820888e-02, 9.395444e-02, 6.368727e-02, -9.450591e-02, 6.856871e-02, -4.397908e-02, 5.690899e-02, -5.284816e-02, -2.440819e-02, -1.042537e-01, -6.085463e-03, 1.208136e-01, 8.571705e-02, -2.237914e-03, 8.314285e-03, 3.743986e-02, -7.138748e-03, 5.330361e-02, -8.170515e-02, 5.580818e-02, 7.083220e-02, 7.422514e-02, -2.715271e-02, -6.889240e-02, -2.872627e-02, 9.271135e-03, 2.382330e-02, -4.468161e-02, -1.002587e-01, 7.375672e-03, 5.421375e-02, 1.609427e-03, 3.263009e-02, -7.327856e-04},
{5.788972e-02, -1.265333e-02, -4.875554e-02, -7.845905e-02, -1.033233e-01, 9.440938e-02, 7.637431e-02, -2.901720e-02, 5.307665e-02, -4.553934e-02, -8.342020e-02, 5.463769e-02, -5.222610e-02, 2.360776e-02, -1.366238e-02, 1.347417e-02, 2.332932e-02, -4.974607e-02, -3.653126e-02, 3.189066e-02, -1.638308e-01, 4.628869e-02, -6.174489e-02, -7.919045e-03, -5.174987e-02, -1.730821e-02, -2.248885e-02, 3.736977e-02, -6.162755e-02, 7.855653e-02, 2.013488e-02, 9.969276e-02, 9.635706e-02, -1.174575e-03, -9.318992e-02, 5.540019e-02, 7.128204e-02, -1.094998e-01, 1.319853e-01, 1.271360e-01, -6.619412e-02, -5.321199e-02, 2.495209e-01, 3.207167e-02, 2.345948e-02, -8.376434e-02, 5.244767e-02, 8.958131e-02, -1.345449e-01, -2.136702e-01, 4.008531e-02, -2.487074e-02, -4.927371e-02, -4.244913e-02, 1.922358e-02, -1.372598e-01, 3.530746e-02, -1.044587e-01, -5.490935e-03, -4.120373e-02, -4.532223e-02, 1.448525e-02, 2.782600e-03, 6.530086e-02, 7.121969e-02, -1.672374e-02, -4.821543e-02, 2.257591e-02, 1.868522e-02, -2.084956e-01, -2.032284e-02, 5.872414e-02, -7.733475e-02, 6.681457e-02, 6.916694e-02, 2.190081e-02, -1.088753e-01, -3.694535e-02, -5.865018e-02, 4.482471e-02, 6.130952e-02, -7.200424e-02, -6.775308e-02, 7.070864e-02, 3.735757e-03, 5.677190e-02, 3.726641e-02, 1.850809e-02, 5.857337e-02, 5.758512e-02, 4.310409e-02, 3.342565e-02, -1.422536e-02, -5.315839e-02, 6.314648e-02, -1.093446e-01, -2.370114e-02, 3.567958e-02, -2.933572e-02, 7.656223e-02, 3.732834e-02, 7.420988e-02, -7.909080e-02, -3.811306e-02, 1.925446e-02, 3.513628e-02, -7.499871e-02, -4.429908e-02, -1.673449e-02, 7.558234e-02, 2.027378e-02, 4.230620e-02, -3.580701e-02, 5.114865e-02, -4.574430e-02, -1.502959e-02, -1.603589e-02, -3.195966e-02, -1.052031e-01, -2.445840e-02, 8.118813e-02, -3.164127e-02, 6.317221e-02, 2.621571e-02, 5.835294e-02, -2.882817e-02, -5.952890e-02, -1.632064e-01, 7.609612e-02, -5.674493e-02, 7.004260e-02, -5.943676e-04, 6.555128e-03},
{-8.629140e-02, 3.953829e-02, 1.992529e-02, -7.680182e-02, -1.235062e-01, 2.283044e-02, 6.865952e-02, -5.866406e-02, -4.396786e-02, 8.239302e-02, -2.603512e-02, 2.705334e-02, 1.583418e-02, 8.461117e-02, 2.527550e-02, 2.369501e-02, 6.528162e-03, 1.785066e-03, 6.700975e-02, 4.794949e-02, -6.061250e-02, 8.358292e-02, 7.538935e-02, 3.984234e-02, -2.233839e-02, 5.838076e-02, 5.923468e-02, -7.505376e-02, -6.004538e-02, -6.436322e-02, -5.826419e-03, 4.986417e-02, 1.273982e-01, 1.030883e-01, -4.747309e-02, 4.581796e-02, -8.111946e-02, -1.659262e-02, 8.548561e-02, 7.895752e-03, 1.355864e-01, -6.916852e-02, 8.545720e-02, 1.332716e-01, 5.916922e-02, -2.285067e-02, 2.635453e-02, -4.137965e-02, -5.965324e-02, -1.735691e-01, -7.226874e-02, 2.923460e-02, 4.275848e-02, 2.510926e-02, -7.348561e-02, -1.405132e-01, 5.079265e-02, 3.422826e-04, 2.894095e-02, 2.448343e-02, -4.029427e-02, -4.262641e-02, 1.942037e-02, -1.430514e-02, -4.158429e-02, 5.058556e-02, 8.530183e-02, -6.586451e-02, 5.677424e-02, 8.816547e-03, -6.634465e-02, 8.311386e-03, 2.763113e-02, 5.883342e-03, 1.224685e-02, -3.849976e-02, -3.655517e-02, -6.445982e-02, 1.204621e-02, -5.701391e-02, -3.497612e-02, 1.486885e-02, -9.432700e-03, -1.904737e-02, 5.580556e-02, -1.889772e-02, 7.594554e-02, 1.080545e-01, -1.049054e-02, 2.131458e-02, 6.785857e-02, 1.041074e-01, 8.422881e-02, 1.259100e-01, 9.111791e-02, -8.604983e-02, -2.913567e-02, -3.928599e-02, 5.000047e-02, -4.631634e-02, 8.298446e-03, -2.710288e-02, -4.437688e-02, 5.208608e-02, -5.279209e-02, 6.872000e-02, 5.895148e-02, 5.539974e-02, -3.597301e-02, -1.750544e-02, -4.107689e-03, -2.750260e-02, -4.047289e-02, -6.721538e-02, 9.795716e-02, -6.901084e-02, 1.775017e-02, -2.138279e-03, -3.915121e-02, -1.762952e-02, -7.818174e-02, 8.077303e-02, 9.157222e-02, -6.111704e-02, -3.967614e-02, 2.359514e-02, -4.012772e-02, -5.772511e-02, -3.147993e-02, 6.455285e-02, -5.096829e-02, 7.390025e-02, 7.602801e-04},
{4.092567e-01, 3.660982e-01, 3.211024e-01, 3.349540e-01, 6.729051e-01, -6.001065e-01, -4.251529e-01, 1.104370e-01, 6.764077e-02, 3.683465e-01, -4.186608e-01, -4.678461e-01, 2.276350e-01, 1.546365e-01, 4.560038e-01, -4.899388e-01, -8.402862e-02, 3.924690e-01, 3.706452e-01, 3.741629e-01, -2.318783e-01, -3.249977e-01, 4.655548e-01, -2.674119e-02, -4.370032e-01, -2.675174e-01, -4.335384e-01, -4.251098e-01, -2.448020e-01, -2.150253e-01, -8.975272e-02, 1.534293e-01, -3.860430e-02, -3.033293e-01, 8.393079e-02, -2.920426e-01, 4.672313e-02, 3.058380e-01, 3.046235e-01, -5.531265e-01, 5.325756e-02, 2.138101e-01, -1.296484e+00, 2.001139e-01, 5.105181e-01, 3.899105e-01, -1.156418e-01, -5.782625e-01, 2.905611e-01, 1.246256e-01, 5.258257e-01, -3.151343e-01, 3.092237e-01, 2.151659e-01, -4.802244e-01, 7.725058e-01, -2.534620e-01, -1.756131e-01, 4.635591e-01, -8.515968e-01, -2.293968e-01, -2.337210e-01, -3.809480e-01, 5.505977e-01, -4.939689e-01, 2.282699e-01, 4.602096e-01, -2.516229e-01, -2.358513e-01, -4.618749e-01, 6.576648e-01, 5.426795e-01, -2.551261e-01, 3.419556e-01, 4.363161e-01, 5.161812e-01, 2.786315e-01, -5.054120e-02, -4.252262e-01, 4.888815e-01, 1.689576e-01, -3.381577e-01, 1.784601e-01, 4.241475e-01, -3.500306e-01, -1.291817e-01, 1.485122e-01, -4.922423e-01, 2.439022e-01, 5.042176e-01, -3.439189e-01, 4.183249e-01, 6.619408e-02, 2.554745e-01, 4.387378e-01, -4.581590e-01, -2.247614e-01, -2.249124e-02, 2.850531e-01, -4.244632e-01, -5.149397e-01, -5.106887e-01, 4.172727e-02, -1.217799e-01, 1.368305e-01, 3.587540e-01, -4.073068e-01, -3.421169e-01, 2.890876e-01, 4.758141e-01, 7.902423e-01, -8.110555e-02, 3.171107e-01, -2.990176e-01, 3.825955e-01, 4.981374e-01, -4.622592e-01, 2.916299e-01, 4.906468e-01, 3.505407e-01, 5.172189e-01, -4.119981e-01, -1.020481e+00, -3.683313e-01, 3.721980e-02, -2.603016e-01, 3.903570e-01, 7.513280e-02, 4.314042e-01, -1.791488e-01, 3.215266e-01, 1.983671e-01, 2.768643e-01},
{-1.477642e-01, -5.996267e-02, -6.721046e-02, -4.844994e-02, -5.113848e-02, 9.918119e-02, 1.239377e-01, -7.541323e-02, 1.188512e-01, -6.115938e-02, 2.561150e-02, -1.160374e-02, -8.568251e-02, 5.056120e-03, 2.535841e-02, 2.188945e-02, 5.336669e-02, 4.860066e-02, -4.773111e-02, -4.832206e-02, -2.556449e-02, 6.569385e-03, -2.905423e-02, 6.996827e-02, -1.860454e-02, 9.040812e-02, -6.490765e-02, 9.930167e-02, 6.986168e-02, -1.315894e-02, 3.113251e-02, -8.637714e-02, 9.364399e-02, 3.862559e-03, 4.616096e-02, 3.646182e-02, -1.215337e-01, 2.057538e-02, 2.242477e-01, -1.669559e-03, 1.572452e-01, -1.481085e-01, -4.904060e-02, -8.272019e-02, -1.328496e-01, 2.796780e-02, 4.483216e-02, 1.176613e-01, 8.553262e-02, 1.309576e-01, -1.015385e-01, 6.784177e-02, 1.026701e-01, -6.301013e-02, 7.176708e-02, 7.011626e-02, -2.952597e-02, -1.219503e-01, -8.232853e-02, 9.056558e-02, 2.872690e-02, 1.100792e-01, 7.241105e-03, -1.700837e-02, 3.264108e-02, -2.799143e-03, -1.570080e-02, -5.272133e-02, 5.986569e-02, -2.287076e-02, 5.904770e-03, -3.150864e-02, -5.920932e-03, -7.674685e-02, -1.287375e-01, 1.092259e-02, 2.992868e-01, -3.309357e-02, 9.226879e-03, -1.860984e-01, -1.447304e-01, 6.913507e-02, -1.116496e-01, 2.606031e-02, 7.830478e-02, 1.464229e-01, -4.240896e-02, 1.038144e-01, -1.746513e-01, -7.493579e-02, 9.114406e-02, -4.631047e-02, 1.827929e-01, -2.058489e-02, 4.224863e-02, 3.069990e-02, 9.190501e-02, -1.874738e-01, -7.271379e-03, 1.126588e-02, 7.368056e-02, -1.113083e-02, 1.077667e-01, -6.270871e-02, 6.498706e-02, 2.324419e-02, 6.326886e-02, -5.534299e-02, 1.448449e-01, -6.189039e-02, 2.328961e-02, -4.877972e-02, -2.144202e-01, -2.851699e-02, -4.345234e-03, -1.017457e-02, 5.674209e-02, -1.732095e-01, -1.906121e-02, -3.143553e-02, -1.007053e-01, 1.831145e-01, -3.310853e-02, 6.708206e-02, 7.245118e-04, 9.359186e-02, -1.656302e-02, 9.362063e-03, -1.015461e-01, -7.752890e-02, -1.109253e-01, 8.649770e-02, -1.404192e-01},
{1.032843e-01, 5.157738e-05, -3.838692e-02, -4.378715e-02, -7.294843e-02, -1.237095e-01, 2.481243e-02, 1.055467e-01, -4.645940e-02, 1.231249e-01, -1.207538e-01, -1.301789e-01, 1.017481e-01, 1.246302e-02, 4.036632e-02, -7.970935e-02, -1.125893e-01, 6.583613e-02, -1.337628e-02, 9.680537e-02, -8.053496e-02, 2.624319e-02, 3.958318e-02, 1.007046e-01, -8.430833e-02, -1.058824e-01, 4.177577e-02, -5.475595e-02, -1.301850e-01, -1.014721e-01, -1.050786e-01, -2.293099e-02, -5.417127e-03, 6.718154e-02, 9.573438e-03, -4.107337e-02, 3.463220e-02, -8.389951e-02, -2.929651e-02, 5.871592e-02, 5.540503e-03, 1.014343e-01, 7.834720e-02, 8.099807e-03, 1.350531e-01, 6.653650e-02, -4.886209e-02, -1.230108e-01, -8.214180e-02, -1.796432e-01, 6.997579e-03, 1.209342e-02, 6.598914e-02, 8.658186e-02, -7.020348e-02, -9.214427e-02, 5.243386e-02, -8.830452e-02, 4.498591e-02, -4.202285e-02, -4.703247e-02, -4.112910e-02, -6.878964e-02, -1.423055e-02, 1.083739e-02, 4.254130e-02, -1.786845e-02, -5.274061e-02, -1.500609e-02, -1.125118e-01, -1.958414e-02, 5.789378e-02, 5.031383e-02, 8.327778e-02, -2.432056e-02, 7.216726e-02, -1.080969e-01, -3.084262e-02, -1.043370e-01, 1.185922e-01, 3.121298e-03, -1.528360e-01, 4.089118e-03, 1.067875e-02, 1.164583e-02, 3.103722e-03, 6.410039e-02, -6.992632e-02, 3.740668e-02, 9.421100e-02, -6.873040e-02, -5.109499e-02, 5.552380e-02, 1.895134e-01, -1.836025e-02, 7.798741e-02, -1.131543e-01, 1.431427e-01, -4.056549e-02, -4.912148e-02, 2.693275e-02, 1.789073e-01, -2.674842e-02, -2.568809e-02, -7.507423e-02, 5.707009e-02, 3.827296e-02, 5.960788e-03, -1.680525e-02, 1.093554e-01, 1.370573e-01, 6.054987e-02, 1.186042e-01, -2.078098e-02, 1.072059e-01, 2.241843e-02, -3.091935e-02, 9.613949e-02, 9.047053e-03, 5.231806e-02, 9.733841e-02, -6.680348e-02, -3.369088e-02, -1.729271e-03, 7.618858e-02, 8.931839e-03, 1.004198e-01, -1.858000e-01, 9.295537e-02, -7.024579e-02, 4.692625e-02, 2.297663e-02, 2.935182e-02},
{8.253488e-02, 2.690847e-02, 6.300648e-02, 7.429095e-02, -3.200680e-01, -5.430629e-02, -1.013938e-01, 6.144878e-02, -7.871900e-02, 1.071292e-01, -1.547364e-01, 5.083916e-03, 6.847031e-02, 4.238360e-02, 2.588494e-02, 1.728425e-02, -8.648907e-02, 7.917286e-02, 3.850753e-02, 8.449053e-03, -1.569201e-01, -5.575245e-02, 2.320610e-02, -9.930049e-02, -8.618666e-02, -3.752133e-02, -6.387684e-02, -1.063733e-01, -1.210306e-01, 9.468604e-03, -3.695952e-02, 1.038635e-01, 7.773180e-02, -2.198501e-01, -1.560199e-01, -1.343346e-01, -2.196868e-02, 3.738246e-02, -6.874569e-02, -3.354245e-02, -8.124790e-02, 1.383873e-01, 9.999480e-02, 1.017121e-01, 6.363446e-02, 3.457097e-02, -8.703729e-03, -1.521517e-01, -1.639500e-01, -2.503328e-01, 4.333146e-02, -1.269612e-01, -2.218103e-02, 1.089661e-01, -6.078508e-02, -2.388526e-02, -8.338297e-02, -3.281000e-01, 7.753882e-03, 3.106173e-02, 5.110349e-03, -7.792751e-02, -2.329244e-01, 1.583766e-01, -3.827209e-02, 1.232090e-01, -6.757823e-02, -5.170998e-02, -1.129854e-02, -2.959379e-01, 1.156152e-02, 6.964173e-02, -3.672936e-01, 1.358422e-02, 6.055801e-02, -3.046361e-02, 1.468181e-01, 2.894588e-02, 1.856255e-02, 3.679568e-02, 2.784822e-01, -9.438428e-02, 7.813788e-02, 6.796841e-02, -3.825457e-02, -1.662311e-02, 1.223637e-01, -1.296854e-01, 3.502163e-02, -3.493611e-03, -9.902854e-02, 2.470962e-01, -1.613980e-01, 9.682370e-02, 1.057609e-01, 9.470564e-03, 6.967746e-03, -2.331239e-02, 6.008049e-02, -1.943951e-01, 8.044463e-02, 1.152224e-01, -9.808444e-02, 1.339064e-01, 3.082406e-02, 2.574187e-02, 4.861722e-04, -1.426591e-02, 5.524760e-03, 1.174258e-02, 2.333427e-02, 1.476111e-01, 5.321522e-02, 6.569242e-02, 1.046199e-01, 1.415200e-01, -1.008735e-02, 5.781450e-02, 6.687196e-02, -2.607151e-02, -1.698015e-02, -4.046569e-02, 2.788298e-02, 1.513246e-01, -1.006764e-02, -1.641914e-01, 6.291389e-02, -3.075169e-01, 5.740795e-02, 8.957007e-02, 1.900554e-01, 2.464489e-01, 1.168130e-01},
{-1.183369e-01, -7.883344e-02, -3.362347e-02, 4.285651e-02, -9.183831e-02, 6.659797e-02, 1.229455e-01, -1.988981e-01, 5.318907e-02, -4.530253e-02, -8.096966e-03, 5.541013e-02, -1.717218e-01, -9.691089e-02, -1.096669e-01, 2.497052e-02, 5.151515e-02, 2.517173e-02, -5.530663e-02, -4.936638e-02, -1.473062e-01, 1.433498e-01, -8.091529e-02, 8.199627e-02, 2.267954e-02, 4.922297e-03, -6.249521e-02, 3.679819e-02, 4.252416e-02, 8.298213e-02, 1.144518e-01, -2.414674e-02, -2.688737e-01, -8.664672e-02, 3.492141e-01, 1.451951e-01, -1.319870e-01, -7.968396e-02, 2.855965e-01, 9.906397e-02, 3.969169e-01, -8.411120e-02, -2.388429e-01, -1.745692e-01, -5.130203e-02, -1.235552e-01, 1.343425e-01, 5.608023e-02, 2.227500e-01, 2.698371e-01, -1.882796e-01, 5.367219e-02, 7.099641e-02, -3.383618e-02, -4.883033e-02, 1.336334e-01, -3.506893e-02, -5.300514e-02, -1.375685e-01, -6.960478e-02, -9.770542e-02, 8.912262e-03, 1.363824e-01, 4.360744e-02, 4.653183e-02, 4.166182e-02, 2.098737e-02, 7.800640e-02, -1.676135e-02, -1.158566e-03, -2.810289e-02, 5.380037e-02, 9.650000e-02, 5.695575e-02, 2.533684e-03, -9.760983e-02, 1.400298e-01, -1.629466e-02, 1.230638e-01, 3.246021e-02, -6.975954e-02, 4.673455e-02, 1.341875e-02, -1.231133e-01, -9.864918e-03, 7.497601e-02, -1.261985e-01, 2.666223e-01, -7.256729e-02, 5.282227e-02, 3.403461e-02, 5.349491e-02, 1.210164e-01, -1.725413e-01, -3.502118e-03, -2.166526e-01, 3.903330e-02, -6.107866e-01, -1.258754e-01, 1.250137e-01, 5.422869e-02, -1.400741e-01, 1.332195e-02, 2.249006e-02, -4.994790e-03, 1.344489e-02, 2.248452e-02, 7.174800e-02, 8.361667e-04, -1.134058e-01, 1.873638e-02, -2.111009e-01, -2.350746e-01, 8.721088e-02, -1.944496e-02, -8.877690e-02, 1.228405e-01, -1.034093e-01, 3.277592e-02, -1.003541e-01, -1.299758e-01, 2.601163e-02, -6.692189e-02, -9.161748e-02, -5.492829e-02, 4.496143e-02, -1.292968e-01, 2.316161e-01, -5.320571e-02, -7.119584e-02, -1.638030e-01, -1.562040e-01, -1.575649e-01},
{4.121192e-02, 2.172301e-01, -5.105063e-02, -3.995010e-02, 2.335337e-01, -9.538836e-02, -1.153248e-01, 1.053044e-01, -1.993024e-01, 7.214776e-02, -6.471509e-02, -1.326620e-01, 7.092798e-02, 1.038395e-01, 1.678858e-01, -6.207487e-02, -2.344528e-02, 8.883206e-02, 1.462276e-01, 4.688599e-02, -1.428951e-01, -9.276077e-02, -2.638280e-01, -9.250657e-02, -1.613468e-01, 3.583890e-02, -1.113262e-02, 9.742363e-03, -3.571166e-02, 4.904751e-02, -8.592082e-03, -5.810348e-02, -1.732534e-01, -1.065255e-01, 3.597931e-01, 2.247330e-02, 1.214239e-01, -3.916834e-02, 3.779710e-01, 3.995403e-02, 5.926780e-02, 7.588290e-02, -5.150993e-02, -2.440496e-01, 6.439389e-02, 1.790673e-02, 2.233124e-02, -1.357208e-02, 1.723099e-01, 7.242645e-02, 7.851481e-04, -3.432792e-02, 1.742519e-02, 1.216840e-01, -2.006486e-02, -2.122585e-01, -7.767837e-02, 5.992904e-02, 9.357168e-02, -1.554131e-01, -1.306038e-01, -1.414505e-01, -3.016303e-02, 3.999260e-02, -8.641980e-02, 4.691628e-02, 6.136918e-02, -7.027173e-02, -3.688501e-02, -2.462968e-01, -1.279252e-01, 1.121097e-01, 4.588544e-02, 7.638068e-02, 1.988544e-02, 9.732079e-02, 3.757287e-01, -1.926464e-01, -4.024231e-02, 7.224979e-02, -3.410502e-01, -5.948509e-02, -2.833639e-02, 7.358855e-02, -2.261789e-02, -9.065721e-02, 1.988413e-02, -3.224876e-02, 6.224049e-03, -1.204187e-03, -5.908034e-02, -1.770955e-01, -1.074406e-01, -2.938175e-01, 2.010572e-02, 5.047365e-02, -1.878623e-01, -3.651775e-01, 1.292975e-01, -1.410704e-01, -2.878950e-02, 1.114199e-01, 1.921498e-02, -1.384736e-01, 1.456914e-03, -2.437645e-02, -1.979835e-02, -1.298366e-01, 8.118510e-02, 4.781336e-02, 1.787403e-01, 5.962624e-02, 4.195520e-02, -9.041649e-02, 8.276881e-02, 1.341276e-02, -1.726198e-01, 8.665989e-02, 2.227032e-02, -7.129408e-02, 6.941761e-03, -5.985023e-02, 2.086257e-02, -1.848469e-02, 9.233483e-02, -1.507515e-01, 1.602485e-01, 8.507240e-02, 7.479234e-02, -1.450651e-01, 8.932766e-02, -1.474850e-02, 9.418289e-02},
{-7.237997e-02, -3.829892e-02, -9.794452e-03, 6.158096e-02, 4.351671e-02, -2.485433e-02, -2.574831e-02, -5.500554e-02, 3.807367e-02, 8.461997e-02, 1.998460e-04, -1.585994e-02, 1.870278e-02, -5.576704e-02, 4.505157e-02, 6.411655e-03, -1.812973e-02, -2.145894e-02, 7.071707e-02, 3.229170e-02, -6.262269e-02, 4.700530e-02, 7.217022e-02, -9.231137e-02, -8.310264e-02, 3.446253e-02, 6.079278e-02, -2.551650e-02, 7.784948e-02, 5.873793e-02, 3.173132e-02, -2.363916e-02, -5.602468e-02, -2.165619e-02, 1.407000e-01, 3.445821e-02, 2.804928e-02, -3.608495e-02, -1.714809e-02, 2.168698e-02, 1.078696e-02, -4.471160e-02, -1.787062e-01, -1.029017e-02, -4.391747e-02, -1.762985e-02, -7.973130e-02, 6.878960e-02, -1.226079e-02, 4.086542e-02, -7.471924e-02, -6.892128e-02, 5.961609e-02, 3.672587e-02, 5.505097e-02, 5.726110e-02, 5.726752e-02, 6.143733e-02, 9.076127e-02, 9.085011e-03, -2.103411e-02, 8.253258e-02, -1.226124e-02, -3.050303e-02, -5.836207e-02, -4.081682e-02, 7.025637e-02, -4.400575e-02, 5.461558e-02, -6.102328e-02, -1.436245e-02, -4.835125e-02, -3.023893e-02, 7.863779e-02, -8.507647e-03, -3.952822e-02, 1.096644e-01, -1.412582e-02, -2.083157e-02, 1.489265e-02, -5.790606e-03, 2.329774e-02, -7.991254e-02, -4.596072e-02, -6.793273e-02, -2.241311e-02, 7.576083e-03, 1.083279e-01, -1.036144e-03, -8.057823e-02, 3.792407e-02, -3.825173e-02, 9.959430e-02, -8.039722e-02, 7.513525e-02, -8.449896e-02, -7.804041e-02, -8.384675e-02, 2.100605e-02, 5.101022e-02, 1.068323e-02, 6.517144e-02, -6.127458e-02, 5.183612e-02, 8.236124e-02, 1.028551e-02, 1.760644e-02, -8.054007e-03, -5.307413e-03, 3.988391e-02, -5.808132e-04, 3.345188e-02, -1.208551e-01, 5.600380e-02, 8.675604e-02, 3.113572e-02, 1.232912e-02, 2.845660e-02, 3.527401e-02, -5.213240e-02, 3.415667e-02, 7.611791e-02, -1.919688e-04, -5.842381e-02, 3.889386e-02, 9.400035e-02, -5.660647e-03, 3.552206e-02, 1.624909e-02, 1.820665e-02, -7.186710e-03, 2.377260e-02, -7.527148e-02},
{5.923485e-02, 5.439818e-02, 1.406254e-03, -2.605823e-02, -8.257666e-03, -3.231461e-02, -6.118388e-02, -2.545935e-02, -6.295542e-02, 1.629735e-02, 6.773464e-02, 6.936448e-02, -7.299326e-02, 1.654391e-04, -8.517943e-02, -3.898567e-02, 5.563157e-02, 4.846948e-02, -4.780375e-02, 3.400290e-02, -7.105981e-02, -9.062864e-04, -2.581352e-02, -3.845908e-02, -1.760128e-02, -6.637936e-03, 1.201171e-02, 3.055425e-02, -8.656377e-02, 1.059047e-01, -5.685719e-02, -1.171306e-02, 9.425996e-02, 8.111577e-02, -9.656220e-03, -8.196359e-02, 4.554343e-02, 2.822193e-03, -3.707820e-02, 1.158319e-02, -4.423401e-02, 8.395997e-02, 1.963549e-01, 7.966529e-02, -8.076522e-03, -7.459226e-02, 8.289620e-02, -6.111434e-02, -4.636243e-02, -1.519507e-03, 6.127575e-03, -4.502683e-02, 4.855851e-02, -7.059943e-02, 6.793968e-03, 3.065922e-02, 4.660622e-02, -6.496302e-02, -3.400054e-02, 3.574313e-02, -7.159723e-02, -8.502128e-02, 2.359173e-02, 1.237953e-02, 3.077312e-02, -5.813851e-02, -8.173265e-02, -6.247361e-02, 7.157604e-02, 1.477600e-02, -4.653647e-02, 2.895634e-02, -3.878386e-02, -2.670754e-02, -2.637317e-02, 2.696757e-02, 4.345699e-02, 7.932946e-03, 4.741081e-02, -3.583288e-02, 9.180961e-02, -5.387087e-02, -5.322700e-03, 6.376487e-02, -7.184114e-02, -1.583318e-02, 8.064787e-02, 8.446795e-02, 4.523921e-02, -4.147438e-02, 6.374133e-02, 4.414752e-02, 4.929613e-02, -6.532899e-02, -6.810430e-02, 2.394034e-02, -6.714508e-03, -1.782133e-02, 8.261734e-02, -5.627940e-03, -2.204532e-02, 4.478749e-02, 2.429641e-02, -8.394492e-02, 7.061734e-02, 9.937000e-03, -4.488158e-02, -3.728849e-02, 3.125453e-02, 4.781485e-02, -3.299023e-03, 8.414067e-02, 4.967171e-02, -1.394075e-02, -6.205000e-02, -6.609534e-02, 5.325870e-02, 3.584016e-02, -1.531498e-02, 4.250874e-03, 4.235864e-02, 6.193292e-02, 3.146424e-02, -4.542967e-02, 7.450518e-02, 7.772911e-02, 5.404197e-02, -3.136503e-04, 6.535355e-02, 2.489634e-03, 6.422971e-02, -5.455891e-02, 1.759069e-02},
{1.834149e-02, 1.637839e-02, -4.191538e-02, -7.604124e-02, -1.035267e-01, -6.009956e-02, 1.117074e-03, -7.362200e-02, 1.008806e-02, -8.982682e-02, -4.829475e-02, 8.145637e-02, -1.218081e-02, 7.796729e-02, 1.862619e-02, -6.701235e-02, 3.543211e-02, -2.274801e-02, 5.411874e-02, 1.473052e-02, 2.863972e-02, 1.181789e-02, 8.913544e-03, -1.209028e-01, -8.170295e-02, 9.289050e-02, 5.969626e-02, 6.369928e-02, -5.326995e-02, -3.308981e-02, 8.262104e-02, -4.732011e-02, 1.111870e-01, 6.490953e-02, -3.488719e-02, -8.880619e-02, -1.259179e-01, 7.171956e-02, -7.103899e-02, 7.872234e-02, 8.334082e-02, 1.191212e-02, -4.198828e-02, 9.765797e-02, -1.031942e-02, 7.471188e-02, 5.472563e-02, -2.353146e-02, 3.015827e-02, -1.631843e-01, 4.455393e-02, -3.481589e-03, 7.919424e-03, 5.506445e-03, 8.896350e-02, -2.158470e-02, -3.216872e-02, -7.778522e-02, 1.490389e-02, 1.239700e-01, 6.412216e-02, 1.677348e-02, 9.700057e-02, -4.678630e-02, 6.792020e-02, -2.621064e-02, -7.552184e-02, 6.900878e-02, -6.148307e-02, -5.899415e-02, -2.538061e-02, -1.107914e-02, -3.518865e-02, 2.175525e-02, 7.532781e-02, 8.766433e-02, 2.804124e-02, 3.914445e-02, -6.630748e-02, -3.997851e-02, -7.832756e-02, 7.192474e-02, 1.130485e-02, 2.595481e-02, 7.011745e-02, -5.552241e-02, -4.010631e-02, 2.963521e-02, -4.070488e-02, 7.404301e-02, 5.179010e-02, -4.657561e-02, -4.453419e-02, 5.158126e-02, -3.278046e-02, 4.479047e-03, -1.944553e-02, -3.766011e-02, 2.670104e-02, -3.707212e-03, 9.362082e-03, 6.064864e-02, -6.033628e-02, -5.291318e-02, -5.220693e-02, -4.622561e-02, -5.500007e-02, 2.634712e-02, 5.167319e-02, -3.297692e-02, -3.340774e-02, -3.240569e-02, -1.131275e-01, -7.230515e-02, -5.549839e-02, -5.031176e-02, -2.761524e-02, -4.110977e-02, -3.251478e-02, 2.771636e-02, 5.990798e-03, 2.187738e-02, 3.718343e-02, -3.589083e-02, 1.027622e-02, -1.699261e-02, -5.838265e-02, -6.244069e-02, -9.761160e-02, 7.462333e-02, -9.916839e-04, 1.005602e-01, -1.219482e-02},
{4.671008e-02, -4.915902e-02, 6.325364e-02, 5.519153e-02, 4.025821e-02, -6.735037e-02, -9.306345e-02, 8.965949e-02, -9.932345e-02, -3.883588e-02, -8.525565e-02, 1.244448e-02, 1.707433e-01, 1.247107e-01, -9.912756e-03, 2.070757e-02, -1.357613e-01, 9.395096e-04, 4.682767e-02, 4.545837e-02, 2.272833e-03, -4.949402e-02, 2.237006e-02, 3.102833e-02, -2.999323e-02, -1.441630e-02, 1.068325e-01, -1.458211e-02, -1.205937e-01, -4.561953e-02, -8.017696e-03, 6.318594e-02, 2.576448e-01, 2.906184e-02, -2.334975e-01, -1.342024e-01, 8.241292e-02, 1.930693e-02, -3.684334e-02, -3.021176e-02, -4.257146e-02, 1.240082e-01, 2.056173e-01, 4.201949e-02, 2.626661e-02, -2.788988e-02, 1.845873e-02, -7.763110e-02, -2.223344e-01, -1.956451e-01, -4.060159e-02, -3.544210e-03, 3.029278e-02, -1.085896e-02, -1.042910e-01, -2.136882e-01, -2.854829e-02, -5.379529e-02, 1.077120e-01, -5.130949e-02, 7.216747e-02, 4.085138e-02, -1.600670e-01, 7.869561e-02, 4.356492e-02, 7.715226e-02, -7.339929e-02, -7.636932e-02, 6.137664e-02, -3.005846e-01, -4.424395e-02, -2.060278e-02, -1.074680e-01, -2.330250e-02, 3.876869e-02, 2.028047e-02, -5.049980e-02, -9.548139e-02, 2.592342e-02, 6.898518e-02, 1.154864e-01, -1.153133e-01, -8.019903e-02, -4.565557e-03, 4.530086e-02, 2.789336e-03, 9.077102e-02, 1.347343e-02, 1.392389e-01, -6.267454e-02, -3.725940e-02, 9.461633e-02, -4.721888e-02, 9.703709e-02, 8.420507e-02, 1.131339e-01, 2.372164e-02, 1.276905e-02, -5.399359e-02, 2.640841e-03, 1.221760e-01, 2.278380e-01, 2.794531e-02, 3.699663e-02, 2.673109e-02, 2.018232e-02, 1.910012e-02, 7.302392e-02, -5.432473e-02, 5.829287e-02, -1.195334e-01, 7.301727e-02, 5.681150e-02, -4.227130e-02, 1.183597e-01, 7.580494e-02, -4.983359e-02, 3.026682e-02, -5.226197e-02, 2.973584e-02, 8.963077e-02, -1.055742e-01, 1.489488e-01, 1.977033e-01, 6.483842e-02, -9.489932e-02, 9.993450e-02, -1.628327e-01, 7.049059e-03, 2.622359e-03, 7.697140e-02, 1.468884e-01, 9.697185e-02},
{-1.482381e-04, -1.507699e-01, 8.806150e-03, 6.335387e-02, -7.483767e-02, -8.237956e-02, -1.676502e-02, 4.276580e-02, 8.684024e-03, -8.827676e-03, -3.290227e-02, 3.788433e-02, 3.653361e-02, 2.737824e-02, 4.714432e-02, -9.628723e-02, -1.615321e-02, -2.778213e-02, 3.429455e-02, 6.555525e-02, -1.360419e-01, -8.850866e-03, 1.510566e-01, 2.833764e-02, 7.771070e-02, 1.224141e-02, -8.426587e-02, -5.291926e-02, -9.809352e-02, -7.313935e-02, -8.027213e-02, -7.635132e-02, -1.274702e-02, 2.490155e-02, -8.493957e-03, -3.844170e-02, -5.404170e-04, -1.021615e-01, 3.148452e-02, -5.629409e-02, 7.057948e-02, -1.556653e-02, 2.130245e-01, 1.447758e-01, 9.781882e-02, -8.320721e-02, -7.651766e-03, -7.513358e-02, 4.135410e-02, -1.506255e-01, -1.462619e-03, -2.594587e-02, 5.556665e-02, -2.797702e-02, -5.389877e-03, -2.086204e-01, 3.247883e-02, -3.610628e-02, -7.787364e-03, 1.611664e-02, -9.286547e-02, -4.325692e-02, 4.911053e-02, 4.544007e-02, 1.227142e-02, 3.127054e-02, 4.400193e-02, 2.277726e-02, 1.522151e-02, -1.134947e-01, 6.060293e-02, 4.924902e-02, -4.618781e-02, 7.150196e-02, 9.734406e-02, 6.107572e-02, -1.543253e-01, -1.599619e-02, -1.274828e-01, -7.477132e-02, 4.880986e-02, -1.835901e-02, 4.212878e-03, -5.761994e-02, 5.267155e-02, -2.354285e-02, 6.825299e-03, -3.754869e-02, 1.013737e-01, 9.743777e-02, 2.726809e-02, 1.431909e-02, 8.460638e-04, 1.489574e-01, 1.757646e-02, 2.436477e-04, 1.329337e-04, -1.050615e-01, 8.540218e-02, 9.513811e-03, 6.589027e-02, 6.670860e-03, 7.370679e-02, -5.711093e-02, -7.681441e-02, 4.026201e-03, -6.622563e-02, -4.501195e-02, 2.873061e-02, 8.622815e-02, -1.182213e-02, -1.700651e-02, 1.536726e-01, 4.860458e-02, -5.030215e-02, -2.400831e-02, 5.372405e-02, 1.985311e-02, -8.157557e-02, 5.770243e-02, 1.060160e-01, -4.218572e-03, 2.984670e-02, 7.305672e-02, 6.722075e-02, 1.319560e-02, 9.280401e-02, -1.336836e-01, -1.178586e-02, 5.095574e-02, 3.234043e-02, -1.145226e-01, -1.348403e-02},
{2.339641e-01, 1.701466e-01, 1.231884e-01, -1.184490e-01, 9.198978e-03, -9.590838e-02, -1.022209e-01, 3.098647e-02, -2.434327e-01, 9.163897e-02, -2.957893e-02, -1.760481e-01, 1.551320e-01, 2.328649e-02, 1.924657e-01, -1.575390e-01, -2.184433e-01, 6.519578e-02, 1.664175e-01, 1.514845e-01, -6.738979e-02, -1.844390e-01, -2.589598e-02, -1.144574e-01, -1.997812e-01, -1.120976e-01, -9.118286e-02, -2.107671e-01, -9.947621e-02, -1.257350e-01, -2.119093e-01, 7.538038e-02, -6.529797e-02, -1.999411e-01, 5.317033e-02, -1.944214e-01, 1.753902e-01, -1.577423e-01, 4.921281e-01, 7.380611e-02, -1.062144e-02, 2.706736e-01, 4.698136e-02, -1.764515e-01, 2.322265e-01, 1.700329e-01, -1.005252e-01, -3.135481e-02, 1.062170e-01, -1.789967e-01, 7.135212e-02, -6.776971e-02, 1.570090e-01, 1.446311e-01, -1.674398e-01, -2.628155e-01, -1.798814e-01, -3.282460e-01, 1.831864e-01, -2.403594e-01, -2.110865e-01, -1.801952e-01, -2.765056e-01, 2.064377e-01, -5.806971e-02, 1.192816e-01, 1.076548e-01, -1.387157e-01, -7.346720e-02, -5.358251e-01, 6.255121e-02, 4.726865e-02, -1.420415e-01, 1.246709e-01, 1.902003e-01, 2.046932e-02, 7.028268e-02, 4.004833e-02, -1.385023e-01, 1.926364e-01, 7.017751e-02, -1.748406e-01, -2.613897e-02, 1.332724e-01, -1.283227e-01, -2.103549e-01, 1.689461e-01, -9.814893e-02, 1.300879e-01, 5.192913e-02, -2.119852e-01, -1.410939e-02, -1.896244e-01, 1.153686e-01, 1.187878e-01, 6.970575e-02, -1.910947e-01, -2.477473e-01, 1.697145e-01, -1.216514e-01, 3.768874e-02, 2.660519e-01, -1.488210e-01, -2.841291e-02, 9.093621e-02, -2.969160e-02, -1.112132e-01, -1.392934e-01, 8.163725e-02, 1.632918e-01, 1.790568e-01, 2.490699e-01, 1.251359e-01, -5.345623e-02, 3.229451e-02, 7.768076e-02, -1.692777e-01, 1.955612e-01, -1.554686e-01, -5.507701e-04, 9.503412e-02, -1.976557e-01, -2.208384e-02, 2.181040e-01, 1.345347e-01, -9.146192e-02, 1.694582e-01, -4.047139e-01, 1.540845e-01, -1.218394e-02, 1.012144e-01, -1.123328e-01, 1.060006e-01},
{1.741565e-01, -1.279805e-01, -1.592639e-01, 1.531232e-01, -2.232301e-01, 5.871596e-03, -5.750256e-02, 1.058057e-01, -4.102895e-02, 1.827841e-02, 1.025972e-01, -7.346342e-02, 2.294087e-02, 5.114307e-02, -7.460806e-02, -8.210903e-02, -6.646056e-02, -1.197702e-02, 2.400655e-02, -3.313376e-02, -5.033966e-02, 2.522636e-02, 8.733006e-02, 3.675773e-02, 8.747632e-02, 1.737983e-02, -8.484703e-03, 1.220984e-02, -1.223566e-02, -9.158177e-03, -6.031200e-02, 8.663410e-02, 2.841384e-02, 1.222997e-01, -4.475242e-02, 7.842912e-03, 1.366506e-01, -6.872209e-02, 3.337829e-02, 3.483149e-02, 1.499123e-01, 1.465071e-01, 9.199641e-02, 6.558373e-02, 1.025702e-01, 5.706158e-02, -4.686723e-02, -8.882479e-02, 2.220373e-02, -8.121315e-02, -4.210029e-02, -4.883184e-02, 3.553335e-03, 1.614626e-01, -1.132173e-01, -1.762670e-01, 9.493456e-02, 1.214844e-02, -6.342739e-02, 1.844193e-02, -5.151824e-02, 4.349714e-02, -6.848218e-02, 8.553373e-02, -4.287938e-02, 1.401966e-01, -4.841617e-02, -2.674372e-02, -1.115050e-01, -7.201962e-02, -9.577999e-02, -4.756868e-02, -9.817268e-03, -6.597314e-02, 4.598791e-02, 7.698568e-02, 6.827210e-02, 2.613265e-02, -1.752297e-01, 6.506870e-02, -7.180545e-02, -1.160094e-01, -7.938740e-02, -9.688362e-02, -3.806251e-02, -1.277702e-02, -2.341622e-02, -5.001974e-02, 4.756402e-02, -9.332950e-02, 4.691625e-02, -1.646410e-01, 1.120673e-02, 2.046082e-01, 6.843799e-03, -5.247476e-02, 1.990058e-02, -2.365092e-01, 9.733552e-02, -1.553165e-01, 9.370486e-02, -4.506453e-04, 3.856203e-02, -6.230944e-02, -2.256300e-02, -1.118686e-02, 4.351222e-02, -9.309187e-02, -7.899105e-02, 6.163503e-03, 1.645983e-03, 1.858306e-01, -4.789773e-02, -3.711549e-02, 1.079826e-01, 8.669125e-02, -3.554982e-02, 8.406969e-02, -1.426431e-01, -6.161884e-02, 1.149307e-01, -5.077080e-02, -6.410347e-02, 9.933739e-02, 4.707605e-02, 9.449464e-02, 6.715265e-02, -6.213578e-02, 1.045553e-01, 1.677007e-02, 1.005899e-01, 1.936025e-02, 8.177672e-02},
{1.774827e-01, -3.445132e-02, -5.332841e-02, 8.130263e-02, 4.608471e-02, -3.589741e-02, -8.188264e-03, 3.092800e-02, 1.346750e-02, 5.619089e-02, 1.355585e-02, -1.117443e-01, 4.321641e-03, 6.159658e-02, -3.522066e-02, -1.136722e-01, -3.922981e-02, 7.428127e-02, 2.472253e-02, 6.424204e-02, -1.309100e-03, -1.225013e-01, 1.065911e-02, -2.907806e-02, -1.825644e-02, -2.527856e-02, -9.036110e-02, -1.016759e-01, -4.829568e-02, -1.269914e-02, 3.150323e-02, -5.829560e-02, -1.136664e-02, -5.144748e-02, 7.928052e-02, -7.064323e-02, 3.361050e-02, -1.019225e-02, -3.429687e-03, -8.259907e-02, -1.465421e-01, 1.872701e-01, -4.000060e-01, -2.724941e-01, 1.969129e-02, 5.891646e-02, -5.518157e-02, -1.274346e-01, 2.580856e-02, 1.886454e-01, -5.306540e-02, -8.119269e-02, 6.092459e-02, 6.283076e-02, 1.995076e-02, 9.190280e-02, 6.951725e-02, 1.543499e-01, 7.807841e-02, -8.681899e-02, 5.195362e-02, -1.366848e-02, -1.292084e-03, -3.295234e-02, -1.440246e-01, 5.877898e-02, 4.589565e-02, -1.009986e-02, -1.462309e-02, 2.386357e-02, 2.714492e-02, -7.984124e-02, 2.793515e-02, -5.206105e-02, 3.867912e-02, -4.192703e-02, 2.232711e-02, 5.711979e-02, -6.535267e-02, 1.721686e-01, -3.701026e-03, -7.394549e-02, -8.310726e-03, 6.208550e-02, 3.035804e-02, -1.459045e-01, 1.152423e-01, -1.026505e-01, 1.448727e-01, 6.823771e-02, -8.065763e-02, -7.794857e-02, -1.286627e-02, -5.269675e-02, -3.736737e-02, 1.574789e-01, -2.786569e-02, -8.469062e-02, 1.171099e-01, -1.723635e-01, 6.937574e-02, -1.485320e-01, 3.710870e-03, -8.686569e-02, -2.618678e-02, -4.088272e-02, -9.453572e-02, -2.404760e-02, -1.432648e-01, 6.204220e-02, 1.553379e-01, 4.515919e-02, -7.954685e-02, 8.116033e-02, 5.059569e-02, 5.737617e-02, -7.305492e-02, 1.231479e-01, 4.123566e-02, -5.666763e-02, -1.981094e-02, 2.574139e-02, 4.013996e-02, 3.928530e-03, 1.029088e-01, -3.928077e-02, 1.256908e-01, 1.754396e-01, 1.010105e-01, 5.750293e-03, -6.355860e-04, 1.306866e-02, 5.310236e-03},
{1.562081e-01, -1.092587e-01, -3.275091e-02, 6.731578e-03, 6.399455e-02, 2.735788e-04, -7.358444e-02, -4.771405e-02, -4.120135e-02, -2.133149e-02, 8.739840e-02, 5.763885e-02, 4.498462e-03, 8.278602e-02, -7.983837e-02, -7.913175e-02, -6.862038e-02, 2.432233e-02, -3.536751e-02, -8.769040e-02, 2.617816e-02, -7.867043e-02, 9.227100e-02, -9.711736e-02, -4.603163e-03, -5.124514e-02, -3.571601e-02, -3.634835e-02, -1.201013e-02, -6.276939e-03, -5.061738e-02, 4.233190e-02, 1.113497e-01, 1.275258e-01, 1.323576e-02, -1.049581e-01, -8.537138e-02, 9.876478e-02, -1.673704e-02, -5.454149e-02, -5.023299e-02, -1.004449e-02, 5.155455e-02, 3.337516e-02, -9.621996e-03, 5.824841e-02, -2.011524e-02, 9.548693e-02, -1.136136e-01, -6.928036e-02, -4.630803e-02, -2.936864e-02, -6.512790e-03, -4.846520e-02, 9.681162e-03, -1.101583e-01, -5.837779e-02, -9.274352e-02, -8.307141e-02, -9.160449e-03, 2.281854e-02, -6.429564e-02, 2.442256e-02, 7.146643e-02, -1.939509e-02, 8.735980e-02, -9.082392e-02, 1.804984e-02, -1.365237e-03, -1.172585e-01, -4.584347e-02, 2.494084e-02, -4.049391e-02, 4.055836e-02, 8.159942e-02, -8.388393e-02, 4.269490e-02, 2.398154e-02, -2.603357e-02, -4.002328e-03, -5.898309e-02, -2.776059e-02, -7.920244e-02, -1.634927e-02, 1.867973e-03, 2.503864e-02, -2.074937e-02, -5.442139e-02, -7.597605e-02, -3.055500e-02, 6.030099e-02, 3.778749e-02, -8.487203e-02, -5.297250e-02, 8.706194e-03, -1.055939e-01, 1.956619e-02, 3.217460e-02, 3.020845e-02, 1.140637e-02, -4.675769e-02, 4.781679e-02, 2.662023e-02, 5.270057e-02, 5.979574e-02, 5.988168e-02, 3.395864e-02, -5.657739e-02, -5.250305e-02, -5.037581e-02, 3.958381e-02, 4.679327e-02, -1.465960e-02, -8.199778e-02, -1.991772e-02, -3.322810e-02, 8.410964e-03, 1.189536e-02, -1.151966e-01, 7.354319e-02, -4.941255e-02, -7.455840e-02, -1.047485e-01, 1.145030e-01, 3.907003e-02, 8.758374e-02, -4.979904e-02, -1.481149e-01, -2.415440e-03, -9.458385e-02, 7.851860e-02, -1.347494e-02, 1.052096e-02},
{-3.348643e-02, -1.453679e-01, 1.590639e-01, 3.776246e-02, 1.120391e-01, -2.603981e-02, 8.669869e-02, -7.674922e-02, 8.065108e-02, 7.536523e-04, -1.439780e-01, 3.691528e-02, -3.150097e-03, -4.707797e-02, 7.000188e-03, 2.897117e-02, -2.104763e-02, 1.161112e-02, -6.122224e-02, -3.214764e-02, -5.979200e-02, -3.321932e-02, 1.216291e-01, -3.742588e-02, -1.235763e-02, -2.166627e-02, 9.562824e-02, -2.302707e-02, -5.836613e-02, -6.209239e-02, -1.222300e-01, -6.799206e-02, 5.603967e-02, -1.127559e-01, -1.018775e-01, -9.156341e-02, 3.546785e-02, 5.477661e-02, 9.858351e-03, -1.733278e-02, -7.169649e-02, 7.637882e-02, 1.319341e-01, 3.887219e-02, 3.172626e-02, -3.658171e-02, 2.260375e-02, -1.413523e-02, 1.153535e-02, -1.837393e-01, 1.781248e-03, 1.878235e-02, -3.549735e-02, 8.143936e-02, -6.953806e-02, -1.353694e-01, -3.198734e-02, -1.843925e-01, 7.763141e-03, 6.186594e-02, 8.270538e-02, -9.386600e-02, 1.216637e-03, -1.346080e-02, 1.034152e-01, -7.362527e-02, 7.989775e-03, 6.549229e-02, 2.196433e-02, -9.458489e-02, 9.782403e-02, -4.521586e-03, -5.367115e-02, 2.563921e-02, 4.029936e-02, 6.889558e-02, -1.827401e-01, 1.166847e-02, 6.769913e-02, -1.993729e-02, 2.702872e-02, -7.076929e-02, -7.395695e-02, -2.850307e-02, 1.605956e-03, -9.881319e-03, 1.307593e-02, -1.130263e-01, 6.474711e-02, -3.470487e-02, -3.670471e-03, 7.284155e-02, 1.208757e-02, 1.053996e-01, 7.718610e-02, 6.059837e-02, -8.594394e-02, 4.657431e-04, 4.424403e-02, 5.769406e-02, 5.130800e-02, 1.429159e-01, -3.402215e-04, 2.353560e-02, 1.417106e-02, 5.538131e-02, -7.953810e-02, -2.049931e-02, -9.225889e-02, -5.756440e-02, -7.167687e-02, 8.633423e-02, 5.113827e-02, 6.912646e-02, -3.651154e-02, 3.536630e-02, -7.552918e-02, 1.349260e-02, -1.224096e-01, 8.591826e-02, -6.423629e-02, -7.512990e-02, -1.153407e-01, 1.418977e-01, 6.664714e-02, 3.749982e-03, -5.305392e-02, 3.078795e-02, 7.647678e-02, 5.894949e-02, -3.649615e-02, 2.576575e-02, 6.386804e-02},
{-3.129574e-02, 9.071916e-02, -3.092105e-03, -1.316177e-01, -7.067147e-02, -1.109066e-01, -2.090659e-02, 4.771389e-02, -1.423230e-01, 1.087251e-01, -1.402561e-01, -1.307362e-01, 2.272669e-01, -2.923612e-02, 1.082151e-01, -3.660481e-03, -1.195099e-02, 8.402705e-02, 1.865030e-01, 6.570386e-02, -1.588190e-01, -1.097348e-01, -1.399498e-01, -1.645875e-02, -1.470356e-01, -1.557535e-01, -1.064147e-02, -1.534307e-01, -1.617246e-01, 9.373792e-02, -1.346773e-01, -3.078834e-02, 1.910488e-02, -5.155136e-02, -2.392520e-01, -3.330003e-02, 6.820799e-02, -1.109398e-01, 4.134021e-02, -2.460083e-02, -1.282296e-01, 5.741571e-02, 3.622822e-01, 3.155594e-02, 1.392013e-01, -3.566003e-02, -9.238774e-02, -8.553814e-02, -6.970593e-02, -3.907579e-01, 1.032012e-01, -1.957030e-02, -2.365271e-02, 1.086020e-01, -4.358626e-02, -3.314760e-01, -7.478998e-02, -9.953250e-02, 1.024571e-01, -9.941405e-02, 8.596888e-04, -3.182544e-02, -2.091090e-01, 1.476443e-01, -9.720664e-03, 7.588152e-02, 5.415304e-03, -1.197527e-01, -1.072227e-01, -5.245436e-01, -2.820641e-02, 1.132683e-01, -2.550208e-01, 1.781085e-01, 1.037110e-01, 4.166394e-02, 8.699058e-02, -4.658725e-02, -1.391190e-01, 7.187197e-02, 2.426840e-01, -2.828479e-02, 4.269531e-02, 9.410113e-02, -3.054256e-04, -5.902463e-02, 1.228211e-01, -1.400729e-01, 1.021333e-01, -1.037971e-02, -2.503306e-02, 2.464824e-02, -9.637193e-03, -1.443282e-01, -1.065160e-02, 1.235732e-01, -7.172690e-02, -4.469102e-01, 6.868847e-02, -1.861047e-01, 2.872759e-02, 1.098515e-01, -1.207318e-01, -2.504891e-02, -6.278691e-02, 4.925003e-02, -1.002492e-01, -1.810120e-02, -1.180761e-01, 9.916680e-02, -5.953413e-03, 2.983438e-01, 3.392110e-01, -2.016611e-02, 2.331094e-02, 7.098122e-02, -4.862371e-03, 1.301701e-01, -1.343904e-01, 1.244057e-02, 1.117316e-01, -1.464880e-01, 1.554034e-01, 5.777787e-02, 1.079985e-01, -1.684259e-01, 4.566940e-02, -1.087471e-01, 1.916900e-01, 1.372629e-02, 4.130748e-02, 1.031776e-01, 1.193829e-01},
{-1.926294e-01, 2.620598e-01, -2.780786e-02, 5.612587e-02, -5.697259e-02, -2.073583e-01, -1.745057e-01, 7.061535e-02, 2.565572e-02, 3.150696e-02, 3.390943e-01, -1.912436e-01, -1.550915e-01, -1.039243e-01, 1.609516e-01, -1.973149e-01, 9.576492e-02, -2.989162e-02, 1.039837e-01, 6.334469e-02, -1.550970e-02, 7.982992e-02, -1.397922e-01, 2.575640e-01, -2.312442e-02, 2.166509e-01, -4.104396e-01, -1.122622e-01, -9.811459e-02, -1.348905e-01, 1.262350e-01, -1.565755e-01, -2.701173e-01, -5.677198e-02, 3.352442e-01, 2.139622e-01, 8.515078e-02, -6.702407e-02, 4.724343e-01, -2.823354e-01, 1.731674e-01, 1.537609e-01, -9.345552e-01, -4.693526e-01, 1.703392e-01, 2.548739e-01, -8.151980e-02, -6.820744e-02, 4.494876e-01, 4.029244e-01, -6.946746e-02, -2.031256e-01, 3.149338e-01, 7.226279e-02, -1.669091e-01, 4.247020e-01, 2.838658e-02, 4.315588e-01, 2.043097e-01, -3.440570e-01, -2.421401e-01, -4.552943e-02, 3.355805e-01, 1.937965e-01, -1.866749e-01, 8.946544e-02, 1.271356e-01, -7.745773e-02, -1.489759e-01, 1.714518e-01, -4.377727e-02, 5.198424e-02, 2.299619e-01, -1.327679e-01, 6.852935e-02, 7.152680e-02, 3.535992e-01, 2.494607e-02, 6.278497e-02, 2.966472e-01, -5.667620e-01, 1.880012e-01, -2.638234e-01, 1.267317e-01, -1.210242e-01, -1.448089e-01, -2.173580e-01, 1.378206e-01, -5.103658e-02, 2.298736e-01, -7.122675e-02, -2.380186e-01, 4.293266e-01, -1.901453e-01, 3.448968e-01, 2.128225e-03, 2.420002e-01, -1.640614e-01, 1.213352e-01, -5.737681e-02, -2.092819e-01, -5.805558e-01, 6.162991e-02, -1.663138e-01, 1.555000e-01, 1.353597e-01, 7.143793e-02, -2.421079e-01, 3.642298e-01, 1.395604e-01, 8.562320e-01, -2.431884e-01, -3.447938e-01, 5.269572e-02, 3.455766e-02, 2.281957e-01, -2.196167e-01, 5.770595e-02, 2.919996e-01, 1.091613e-01, 9.559266e-02, 4.167872e-03, -6.590083e-01, -3.854073e-01, -5.188740e-02, 1.492238e-01, 1.254354e-01, 2.256009e-01, 1.440807e-01, -4.763415e-01, -1.559155e-01, -1.403836e-01, 6.775561e-02},
{-1.846024e-02, 1.367275e-01, 2.073775e-02, -4.314783e-02, -2.769096e-03, -1.387901e-01, 5.801266e-03, 9.449282e-02, -1.104887e-01, 9.316566e-02, -1.639734e-01, 2.238487e-03, 1.421673e-01, 1.263217e-01, 1.288736e-01, -2.421596e-02, -8.840712e-02, 1.803478e-02, 1.396516e-01, 2.685839e-02, -1.838948e-01, -6.176219e-02, -6.201210e-02, -2.096433e-01, -1.230001e-01, -1.284845e-01, -5.155693e-02, -5.302871e-02, -9.383709e-02, 6.223363e-02, -1.159086e-01, 1.505788e-01, 1.990098e-02, -6.604899e-02, 4.665633e-02, -3.297830e-02, 3.739858e-02, -2.407005e-01, 3.186582e-01, -1.319485e-02, -1.154338e-01, 5.639577e-02, 7.239441e-01, -4.125463e-02, 1.520718e-01, 4.576603e-02, -3.869990e-02, -3.967506e-03, -1.433268e-02, -2.636122e-01, 1.159352e-01, -2.612751e-02, 8.069716e-02, 4.846202e-02, -3.478904e-02, -4.129914e-01, -1.249745e-01, 1.398145e-02, 3.796373e-02, -1.730976e-01, -1.271536e-01, -1.224028e-01, -2.700849e-01, 9.457729e-02, -1.465588e-01, 1.221895e-01, 4.419778e-02, -3.729393e-02, 3.619193e-02, -5.678241e-01, -1.584037e-01, 1.109371e-01, -1.645069e-01, 1.798236e-01, 1.806297e-01, 6.417844e-02, -1.270990e-01, -1.307837e-01, -7.891259e-02, 4.387902e-02, 1.053430e-01, -2.204076e-01, 6.026709e-02, 1.187793e-01, -1.449400e-02, -9.268656e-02, 4.431967e-02, -1.711852e-01, 6.850365e-02, 4.112628e-02, -1.577695e-01, 7.163259e-02, -2.049392e-01, -4.617512e-01, -4.277063e-02, 1.939986e-03, -9.828529e-02, -5.318484e-01, 5.758145e-02, -1.896903e-01, 4.465124e-02, 4.801748e-01, -3.742276e-02, -4.149865e-02, 7.391763e-02, 5.181079e-02, -1.609066e-01, -2.411477e-02, 4.607762e-02, 2.180695e-02, 5.085677e-02, 1.949933e-01, 2.621504e-01, -2.882197e-02, 1.477924e-01, 1.063258e-02, -3.912528e-02, 6.026167e-02, -5.339031e-02, -9.936044e-03, 9.973451e-02, -1.929143e-01, 2.926458e-01, 6.328981e-02, 1.192333e-01, -8.572295e-02, 2.827887e-02, -7.355335e-02, 1.625585e-01, -9.901958e-03, 4.596455e-02, 1.487960e-02, 1.004584e-01},
{-3.060360e-02, 9.254630e-03, 1.229297e-02, -7.007980e-02, -8.929926e-02, 3.570924e-02, 6.676623e-02, 2.855743e-02, -7.131619e-02, -6.420127e-02, -1.428452e-02, 3.597067e-02, -1.363252e-02, -3.281938e-02, -9.750496e-02, 7.390091e-02, 6.352057e-02, -5.505558e-02, 2.760929e-03, -1.650588e-02, -2.212747e-01, 1.049482e-01, 1.118269e-01, -2.103478e-01, 3.517274e-02, -6.002618e-03, 7.483412e-02, -1.234965e-02, 4.730944e-02, 8.353046e-02, -3.818163e-02, 4.699948e-02, 2.032603e-01, 1.111645e-01, -8.537523e-02, -5.636118e-02, -1.373420e-01, -3.514992e-02, -3.595954e-02, 1.371825e-01, 1.519015e-02, -6.812743e-02, 5.628055e-01, 2.211996e-01, -9.347346e-03, -1.358474e-01, 1.835866e-02, 1.109670e-01, -2.062329e-01, -4.236680e-01, 3.434373e-02, 1.006602e-01, -1.013616e-02, 5.165346e-02, -1.373450e-02, -2.296169e-01, 7.855300e-02, -1.363553e-01, -1.026465e-01, 2.696024e-02, 6.271569e-02, 2.768365e-02, -8.806152e-02, 4.506128e-02, 1.268686e-01, -9.705576e-03, -7.255981e-03, -1.118550e-02, 9.241799e-02, -2.005933e-01, -6.692321e-02, 1.139919e-02, -2.381985e-01, -3.572375e-02, -3.265321e-02, -1.028315e-01, 1.675383e-01, -4.052708e-02, -1.858637e-02, -9.288015e-02, 2.237154e-01, -8.056448e-03, -5.730714e-02, -7.605071e-02, 1.175797e-01, 5.552911e-02, 3.745780e-02, -3.641982e-02, -3.728833e-02, -1.118881e-01, 4.632613e-02, 4.485226e-02, 2.326735e-02, 6.789616e-02, -3.434676e-03, -1.526614e-01, -6.055923e-02, -1.692644e-01, -9.908129e-02, -3.478450e-02, -3.750370e-02, 2.164327e-01, -1.311851e-02, 8.209434e-02, 5.066220e-02, -3.160380e-02, -3.246095e-02, 1.499589e-02, 9.055898e-02, -1.133579e-01, -5.967376e-02, 8.870591e-03, -9.030948e-04, 3.161850e-02, -2.405331e-02, -1.353516e-01, 1.060661e-01, -4.123104e-02, -6.537312e-02, -9.456701e-02, -2.988816e-02, -5.864274e-02, 1.276220e-01, 9.560734e-02, -2.721363e-02, -6.966859e-03, -2.483910e-02, -1.437293e-01, -7.147580e-02, 1.244210e-01, 6.738786e-02, 7.095708e-02, -1.024206e-01},
{8.095689e-02, 9.454674e-02, 1.083508e-01, -7.267738e-02, 2.601814e-02, 6.655414e-02, -5.405594e-02, 9.213094e-02, 3.735553e-02, 3.246297e-02, -3.181151e-02, -6.311012e-04, 2.077171e-02, 8.237785e-03, -7.708389e-03, 4.008018e-02, 2.870330e-03, 6.309354e-02, -5.759428e-02, -6.551252e-02, -1.911495e-01, 8.799873e-02, -1.639535e-02, -2.248397e-02, -6.839520e-02, -1.783549e-02, 1.171420e-01, -8.149000e-02, 3.942598e-02, 4.502547e-04, 6.258540e-02, -4.574256e-02, 1.417273e-01, 4.638352e-02, -6.344166e-02, 2.229796e-02, -4.703214e-02, -8.745976e-02, -2.333731e-02, 1.122889e-01, 2.575323e-02, -6.113898e-03, 3.213602e-01, 5.720367e-02, -3.329480e-02, -3.378494e-02, 4.880767e-02, 2.877104e-02, -7.564446e-02, -1.428538e-01, 4.227697e-02, -2.368069e-02, 3.410980e-02, -1.431713e-02, -1.918391e-02, -2.338112e-01, 3.765029e-02, -4.008631e-02, -7.564045e-02, 1.641878e-02, 8.336915e-02, -8.263793e-02, -6.685597e-02, 2.729562e-02, -8.084842e-02, 4.506047e-02, 4.001041e-02, -3.346136e-02, -3.286441e-02, -3.318996e-02, -1.184083e-01, -5.515468e-02, -1.307555e-01, -2.536025e-02, 8.975673e-02, 8.651704e-02, -8.988521e-02, -8.317612e-02, 6.153145e-02, 7.352791e-02, 1.181046e-01, 5.708966e-02, 1.804745e-03, 8.432982e-02, -9.993711e-03, -7.401035e-03, 5.847241e-02, 6.264210e-02, 7.272220e-02, -5.277244e-02, 2.131118e-02, 7.032630e-03, -3.362972e-02, -4.161118e-02, -6.589603e-02, -3.593011e-02, -5.916758e-02, -1.166053e-01, 9.700007e-03, -5.151311e-02, -5.556951e-03, 2.427088e-01, -8.660503e-02, -8.788124e-03, 5.853456e-02, 6.187703e-02, 4.235380e-02, -1.177050e-03, 1.347779e-03, 2.621554e-02, 4.764545e-02, 1.305545e-01, 6.948485e-02, 1.053066e-02, -1.793577e-02, 4.271882e-02, 6.192890e-02, -5.529585e-02, -9.916222e-02, -3.229142e-02, 1.224165e-02, 5.889216e-02, 1.441408e-01, -3.698513e-03, -5.793898e-02, -1.462972e-02, -6.893662e-02, 3.454588e-02, -5.183982e-02, 1.217305e-01, 1.147000e-01, 6.499813e-02, 4.833247e-02},
{1.497792e-01, 5.650485e-02, -3.629585e-01, -1.599753e-01, 2.813332e-01, -1.477569e-01, -1.361292e-01, 3.723629e-02, -1.713043e-01, 7.335187e-02, -2.497989e-01, -4.051341e-01, 4.659397e-01, 3.265413e-01, 2.006540e-01, -3.675204e-01, 2.065545e-01, 7.457902e-02, 9.837215e-02, 2.476933e-01, 2.806486e-01, -4.640165e-01, -2.332970e-01, 2.106344e-01, -8.529362e-02, -2.702794e-01, -4.812877e-01, -3.821644e-01, -8.707924e-02, -5.558180e-01, -3.153534e-01, 3.806643e-01, 4.236090e-01, -2.301105e-01, 1.144398e-01, -2.254214e-01, -2.703168e-01, 1.870208e-01, 2.636978e-01, -2.307382e-01, 2.386947e-01, 3.711944e-01, -3.819490e-01, -1.469708e-01, 2.316572e-01, 3.049495e-01, -2.374971e-01, -8.491188e-02, 7.986553e-01, 2.173887e-01, 4.131128e-01, -1.121237e-01, -1.091634e-01, 5.108014e-01, -3.178219e-02, -1.090308e-01, -1.697470e-01, -1.569850e-01, 1.263128e-01, 2.311666e-01, -9.036113e-03, 5.207423e-04, -3.604599e-01, 9.588589e-03, -1.314771e-01, 3.672713e-01, 2.120002e-01, -2.358303e-01, 4.739197e-02, 1.258960e-01, 2.397146e-01, -7.347769e-02, -6.292084e-02, 1.314477e-01, 2.488875e-01, 2.169958e-01, 2.185500e-01, 3.491668e-01, -3.830049e-01, 3.490569e-01, -5.061510e-01, -2.197104e-02, 2.442331e-01, 2.469287e-01, -1.156840e-01, -3.302345e-01, 4.846178e-01, -2.590748e-01, 3.761229e-01, 2.132264e-01, -2.160088e-01, 3.033595e-01, 5.277771e-01, 1.913305e-01, 3.160147e-01, 1.118576e-01, -4.485664e-01, -7.073843e-01, 4.838321e-01, -4.491989e-01, 8.648826e-02, -5.353484e-01, -2.110993e-01, 3.001240e-01, -6.718711e-02, 6.505425e-02, 1.904617e-02, -5.788262e-02, 2.707852e-01, 3.782549e-01, -5.592552e-02, 3.876619e-01, -9.806627e-02, -1.635170e-01, 2.171264e-02, 3.856710e-01, -1.214330e-01, 1.922647e-01, -6.812141e-02, 1.108128e-01, 1.853692e-01, -2.472905e-01, -3.677160e-01, 1.009015e-01, 5.277532e-01, -2.461011e-03, 4.493788e-01, 3.865300e-01, 2.382283e-01, 5.814901e-02, 1.322679e-01, 4.811260e-01, 3.070105e-01},
{2.042268e-02, 5.584871e-02, -1.217398e-01, -4.985942e-02, -3.197539e-02, 8.247949e-02, 5.727381e-02, -1.047033e-01, -5.353538e-02, 7.513385e-02, 4.062260e-02, -1.567071e-02, 7.989922e-02, 1.043162e-02, 7.242975e-02, -4.764648e-02, 8.758661e-02, -5.473442e-02, -5.098945e-02, -7.776430e-02, -5.156351e-02, -1.147924e-02, 4.585161e-02, -2.341287e-02, -3.339213e-02, 4.770944e-02, 7.114506e-02, -3.898069e-02, -1.482773e-02, 3.039080e-02, 8.070516e-02, -6.017251e-02, 4.627025e-02, -2.344234e-02, -2.201912e-02, -9.143844e-02, -7.487366e-03, -1.716624e-03, 1.658620e-01, 9.951865e-02, 2.635598e-02, 3.811232e-03, 3.058812e-01, -9.951939e-02, -9.352231e-02, -2.135001e-03, 4.714011e-02, 2.530437e-02, 7.995532e-02, -1.055800e-01, 1.570139e-02, 5.120627e-02, 6.769987e-02, 1.665469e-02, -4.102987e-02, -6.878900e-03, 1.006939e-02, -6.576746e-02, -7.767511e-02, 3.280713e-02, -8.486948e-02, 3.453641e-02, -3.260539e-02, -3.644218e-02, 4.791769e-02, 1.741026e-02, 5.748589e-02, 1.156140e-02, -6.884801e-03, -9.373760e-02, -3.294154e-02, 1.117972e-02, -4.907805e-02, 1.801295e-02, -6.914762e-02, -1.181180e-02, -1.208237e-02, -1.305691e-01, 9.556612e-02, -4.252388e-02, 1.090047e-01, 1.148409e-02, 6.504294e-02, 6.086597e-02, -5.499975e-02, -9.403213e-02, 4.585233e-02, 5.639976e-02, -3.761005e-02, 2.571607e-02, -6.347286e-02, -6.108895e-02, 2.774248e-02, -9.730983e-02, 1.021695e-01, -6.925732e-02, -6.965011e-02, -1.514344e-01, 4.468498e-02, 5.687733e-02, 5.274327e-02, 7.521083e-02, -3.317472e-02, -8.478783e-02, -6.392131e-02, 1.630752e-02, -8.293340e-02, 1.046370e-02, 1.145203e-01, -8.660316e-02, -8.734943e-02, -5.798528e-03, 8.876754e-04, -5.801751e-02, 8.096131e-02, -2.958767e-03, 2.998666e-02, 3.690999e-02, -3.160032e-03, -4.185725e-02, -8.512122e-02, 7.228805e-02, 1.359795e-01, 1.244586e-01, 9.640308e-03, 1.951086e-02, -6.879458e-02, -3.055574e-03, 7.196238e-02, 6.936532e-02, -7.825851e-02, 4.680548e-02, -4.620329e-02},
{1.497422e-01, -9.028967e-02, -9.052326e-03, 2.765654e-02, -2.597180e-02, 3.314567e-02, -8.680904e-02, -1.719474e-02, -1.240240e-01, 3.173601e-02, 9.860063e-02, -2.505446e-02, 9.653577e-03, 6.299888e-02, 7.309941e-02, 7.099765e-03, 2.858948e-02, 9.243880e-02, 1.105585e-01, -2.279871e-02, -7.607009e-02, -1.892037e-02, -4.345032e-03, 1.202630e-02, 4.617665e-02, 4.690527e-02, -9.081073e-02, 1.505858e-02, 3.859083e-02, -9.598580e-03, 5.518717e-02, 2.848048e-02, 7.072707e-02, -3.620561e-02, -3.466716e-02, -3.366033e-02, 5.568704e-02, 1.012143e-02, -1.209031e-02, 6.179667e-02, -2.467966e-03, 8.575629e-02, 2.196199e-01, -1.532868e-02, -2.655425e-02, 6.141954e-02, 2.134851e-03, 1.066343e-02, 2.907879e-03, -1.884603e-01, -3.146107e-02, 6.121398e-02, -4.480329e-02, 1.538070e-01, -6.051315e-02, -1.809456e-01, -6.473850e-02, -1.648418e-01, 1.368320e-02, -3.034003e-02, -6.141879e-02, 1.930468e-02, 5.237859e-02, -8.774534e-03, -3.981824e-02, 4.894461e-02, -7.536099e-02, -4.380060e-02, -5.555606e-02, 6.812764e-03, -1.263422e-03, -8.371317e-02, -3.547740e-03, 4.341210e-02, 1.075571e-01, 3.435349e-02, -8.480889e-02, -1.301107e-02, -1.418146e-01, 9.034794e-02, -9.777190e-02, 8.495013e-02, -3.417227e-02, 1.774029e-02, -9.347020e-02, -1.121643e-01, 6.847145e-02, -5.835527e-02, 2.882966e-02, -2.068340e-03, -3.045986e-02, -4.091762e-02, -5.776706e-02, -5.273769e-02, 7.298140e-02, 1.537140e-02, -6.981852e-02, -1.225151e-01, -1.983898e-02, -8.999853e-02, 7.843408e-02, 1.295752e-01, -3.157299e-02, 1.756214e-02, 1.675897e-02, -5.042723e-03, 4.703113e-02, -1.654892e-02, -7.739439e-03, 1.002993e-01, -2.753530e-03, 1.054579e-01, 9.176108e-02, -6.696901e-02, 1.004377e-01, -6.160451e-02, 8.116277e-04, 4.092598e-02, -9.482841e-03, 2.315004e-02, 9.482672e-02, -5.218039e-02, 1.061866e-01, 6.670658e-02, -4.227067e-02, 8.704636e-02, 1.457885e-01, -1.559981e-01, 3.186198e-02, -2.491756e-02, 8.587761e-02, 7.547901e-02, 7.586195e-02},
{3.780313e-02, -5.023205e-02, 9.491344e-03, -7.065409e-02, -2.318267e-03, 2.531509e-02, 2.902530e-02, -2.214446e-02, -1.888761e-02, -8.840648e-02, 3.251990e-03, 8.513872e-02, -2.855128e-02, 7.670409e-02, -5.681462e-02, -1.987379e-02, 3.703805e-02, -1.966970e-02, -3.520488e-02, -6.717210e-02, -8.409054e-02, 2.778642e-02, -3.036827e-02, -1.187002e-01, 8.598869e-02, 3.054734e-02, -5.705840e-02, 1.829117e-02, -5.828311e-02, 7.374781e-02, 2.809203e-02, -7.700216e-02, -4.446817e-02, 1.059550e-01, -1.724507e-02, 5.729844e-02, -5.267976e-03, -7.125955e-02, 1.343588e-01, -1.223208e-04, 7.994582e-03, -5.692120e-02, 7.675674e-02, -8.298811e-02, -9.308449e-02, 1.144380e-02, 2.936945e-03, 3.226547e-03, 4.060805e-02, -2.080604e-03, -5.975454e-02, 3.344099e-02, 7.594490e-02, -4.750688e-02, 2.152849e-02, -1.981885e-02, 3.037314e-02, -5.257661e-02, 1.161634e-02, 6.028856e-03, -6.453146e-03, 3.879196e-02, 8.383887e-02, -4.297498e-02, 2.549365e-02, -5.252000e-02, -3.705473e-02, -5.201958e-02, -1.799775e-02, 4.700095e-02, 3.824448e-03, -4.376389e-03, -6.546458e-03, -4.290179e-02, -2.635714e-02, 3.904450e-02, -7.876306e-03, -5.771225e-02, -3.387212e-02, -1.552911e-01, -1.127927e-02, -2.623224e-02, 1.594821e-03, -2.754079e-02, -6.608431e-02, 8.913805e-02, -4.482763e-02, 1.113729e-01, -8.980418e-02, 3.290801e-02, -9.271530e-03, 2.964548e-03, -6.422625e-02, -1.116229e-01, 6.940404e-02, 2.703540e-02, 7.179764e-02, -7.001626e-02, -3.122832e-02, -4.843571e-02, 1.213733e-02, 4.863377e-02, -3.110000e-02, 4.606590e-02, 5.942869e-02, -3.190329e-02, 9.157163e-02, 2.744107e-02, 7.339489e-02, -2.491848e-02, 1.125753e-02, -1.134874e-02, -4.352447e-02, 9.169728e-03, 6.923480e-02, 3.320611e-02, 8.047866e-02, -4.142721e-02, 1.195494e-03, 4.988772e-02, 2.208539e-02, 1.098058e-01, 3.260171e-02, 5.872460e-02, -5.482545e-02, -1.343042e-02, -1.460736e-01, -1.070438e-02, 4.127674e-02, 9.763161e-02, -1.196206e-02, -2.053818e-02, 2.223768e-02},
{-1.437507e-01, 5.700830e-02, -8.880646e-03, -1.098422e-01, -3.729266e-01, 3.323273e-02, -3.228125e-02, -1.879371e-02, 1.597095e-01, 2.435267e-02, 1.249862e-01, -8.231976e-02, -3.489462e-01, -1.318694e-01, -6.275482e-02, 4.417298e-02, 7.409505e-02, -6.991806e-02, -1.014901e-01, 2.142991e-02, -5.879548e-02, 1.671365e-01, 5.728752e-02, -9.975088e-02, 1.998148e-02, 2.194689e-01, -1.044150e-01, 4.099452e-02, 6.408742e-02, -9.729713e-03, 3.758166e-02, -1.045893e-01, -1.137686e-01, 7.428556e-02, 4.203741e-02, 5.795503e-02, 6.785052e-02, 3.643166e-02, -1.688261e-02, 1.102945e-03, 1.665985e-01, 2.132989e-02, -5.253587e-01, -3.387038e-01, 1.695882e-02, -4.238559e-02, -5.688098e-02, 3.821255e-02, 8.830858e-02, 7.123949e-02, -2.083802e-01, -6.154760e-02, 7.327088e-02, -1.282828e-01, -2.139667e-02, 1.636106e-01, 1.071761e-01, 2.055215e-01, -3.117571e-02, -8.482349e-02, 4.731973e-02, 9.525360e-02, 1.053651e-01, 4.697186e-02, -7.640553e-03, -6.240881e-02, -5.652894e-02, 6.952621e-03, -9.410515e-02, 5.842975e-03, -2.744403e-03, -3.939614e-02, 1.932822e-01, -5.341423e-02, -1.159242e-01, -7.095637e-02, 3.334144e-01, -2.772398e-02, -5.265288e-02, -1.204376e-01, -2.197628e-01, -3.410592e-02, -2.476665e-02, -5.993507e-02, 4.369712e-02, 1.581554e-01, -6.107966e-02, 2.150760e-01, -1.543929e-01, 9.238126e-02, 4.060559e-02, -1.183489e-01, 1.476317e-01, -5.366317e-02, 6.099178e-02, -1.281827e-01, 4.546917e-02, 3.551029e-01, -9.642474e-02, 1.727074e-01, -6.962337e-02, -1.576944e-01, 1.001819e-01, -2.621563e-02, -7.395416e-02, -4.138189e-02, 1.406900e-01, -4.547619e-02, 3.801442e-02, -4.967083e-02, 1.418272e-01, -3.703033e-01, -2.649289e-01, 5.456215e-02, -4.606827e-02, 1.291438e-01, -2.415399e-03, -5.707588e-02, 8.432882e-02, -5.364174e-04, 1.182351e-02, 6.900206e-02, -3.723374e-02, -4.439083e-02, -7.354476e-02, 1.510040e-01, -1.738965e-01, -1.537207e-01, -1.231021e-02, -1.533161e-01, -8.789156e-02, -6.569794e-02, -1.632211e-01},
{3.323032e-02, -6.064168e-02, -1.172390e-02, -1.114503e-01, -4.690427e-02, 7.256454e-02, -8.566563e-02, -2.505477e-02, 6.899321e-04, 9.287941e-02, -4.964717e-02, -9.036422e-02, 5.421274e-02, -2.673924e-02, -6.060177e-02, -1.572869e-02, 1.199450e-02, -8.348825e-03, -5.303999e-02, 9.687652e-02, -8.166451e-02, -2.831540e-02, 7.112058e-02, 1.014400e-02, 6.257167e-02, 1.099126e-02, 1.035781e-01, -1.456377e-02, -7.442968e-02, -4.657507e-02, -1.727370e-02, -2.379887e-03, -2.865257e-02, -9.319619e-02, -8.091119e-02, -5.344328e-02, -6.352230e-02, 4.455932e-02, 8.865687e-02, 3.669856e-02, 1.686352e-02, 5.948348e-02, 3.011685e-01, 6.417906e-02, -7.288205e-02, 4.392353e-02, 2.099145e-02, -4.383480e-02, -3.745060e-02, -2.510235e-01, 1.814803e-02, 5.821327e-02, -4.057235e-03, 1.115770e-01, -8.529350e-02, -1.437193e-01, -6.522529e-02, -3.947752e-02, -5.604289e-02, 1.390849e-01, 3.166071e-02, -1.146976e-01, -4.922815e-02, 9.714771e-02, 3.158280e-02, -5.817105e-02, -3.417502e-02, -2.137339e-02, 2.292356e-03, -2.695113e-01, 1.958087e-02, 1.224205e-02, 1.412627e-02, 1.250375e-02, -6.086770e-03, 8.213703e-02, -1.139477e-01, 5.948274e-03, -7.913267e-02, -6.261883e-02, 2.505569e-02, 1.660984e-02, 1.305647e-02, 4.947202e-02, -1.657775e-02, -3.369670e-02, 7.164659e-02, -8.228876e-02, 8.371647e-02, 2.493836e-02, 6.227416e-03, 9.380780e-02, 2.222985e-02, 8.940969e-02, -2.286160e-03, 6.261698e-03, -1.032359e-01, -1.219541e-01, 9.146690e-02, -7.004394e-02, 5.345482e-02, 1.846900e-01, 2.466885e-02, -1.208588e-02, 4.082598e-02, 1.069624e-02, 4.120338e-02, -7.489767e-02, -7.442151e-02, 5.690787e-03, -1.405303e-02, 6.763978e-03, 9.438673e-02, 8.070990e-02, 7.939018e-02, -8.309526e-03, 5.649223e-02, 9.894390e-02, -1.332329e-01, -7.247021e-02, -4.388597e-02, -3.997071e-02, 1.010132e-01, 3.817329e-02, 5.242029e-02, 4.840830e-04, 9.495981e-02, -1.250416e-01, -2.850469e-02, -1.080105e-02, -4.813062e-02, 8.615080e-02, -4.541957e-02},
{4.496694e-03, -3.663051e-02, -4.357612e-04, -6.531766e-02, -5.637396e-02, 8.529533e-02, -5.248325e-03, -7.386989e-03, -2.830004e-02, 4.294746e-02, -6.335106e-02, -3.538771e-02, 1.123895e-01, -7.561233e-02, -1.576417e-02, 5.626241e-02, -6.306063e-02, 1.568485e-02, -2.169387e-02, 6.421717e-02, 5.009802e-02, 1.469120e-02, 3.057898e-02, 1.029313e-02, 3.120468e-02, -5.781813e-02, -3.197086e-02, 2.804161e-02, -7.085179e-02, -5.366520e-02, -2.957451e-02, 7.990705e-02, 1.154291e-01, 2.607275e-02, 7.997834e-02, -4.720409e-02, 2.753904e-02, -1.325836e-01, 3.022037e-02, -4.019835e-02, 3.773771e-02, -1.350935e-02, 7.972430e-03, -1.047454e-01, 2.467062e-02, -5.317883e-02, 4.997250e-02, -3.054591e-02, -3.483590e-02, -6.840371e-02, -3.816551e-02, 2.833546e-02, 6.558527e-02, 1.074271e-01, -5.711822e-02, -1.275233e-01, 1.028146e-01, 5.215669e-02, -3.611894e-02, 2.948780e-02, 4.690049e-02, -5.089209e-02, 2.071368e-02, 2.020356e-02, -5.571093e-02, 5.543234e-02, -4.157085e-02, 1.797920e-03, 6.616694e-02, 1.142067e-03, -1.055998e-01, 7.649864e-02, 3.123741e-02, 3.199899e-03, -3.468222e-02, 5.730076e-02, -1.964563e-01, -1.148198e-01, -4.616986e-02, -3.758159e-03, -5.348186e-02, 9.333244e-04, 2.957790e-02, -4.658844e-02, -2.659549e-02, -8.259349e-02, -3.007393e-02, -4.388561e-02, 1.710248e-02, -2.045221e-03, -8.638062e-03, 1.111380e-04, -5.220158e-03, -1.380418e-01, -5.261734e-02, 7.950848e-02, -5.828878e-02, -1.713708e-01, -3.767267e-02, -6.091473e-02, 6.268884e-04, 6.858007e-02, -5.126099e-02, 1.037514e-02, 5.167245e-02, -8.825224e-03, 1.421789e-03, 8.211085e-02, -2.299252e-02, -5.812574e-02, 3.682714e-02, -2.416993e-03, 1.219549e-02, 6.994222e-05, 7.190245e-02, -4.434754e-02, -4.926011e-02, 4.183367e-02, -7.222202e-02, -4.527158e-02, -7.526709e-02, 3.511712e-02, 6.893461e-02, 7.255358e-02, 4.158295e-02, 1.254459e-02, 6.567041e-03, -6.765519e-03, 2.579752e-02, 2.225797e-02, 8.710469e-02, 4.973233e-02, 2.313473e-02},
{-7.565746e-02, -4.103104e-02, -8.022486e-02, -4.920090e-02, -1.265785e-01, -8.801533e-02, -9.671678e-02, 5.997412e-02, -1.240755e-01, -2.402954e-02, 4.206905e-02, -1.104812e-01, -1.964432e-03, -4.350373e-02, -5.476667e-02, 2.918404e-02, 9.922972e-02, -4.689648e-02, -2.033649e-02, -3.504001e-02, -3.407849e-02, -1.065064e-01, 6.824351e-02, -6.421322e-02, -7.419278e-02, 6.457608e-02, -1.218022e-01, 3.718732e-02, 4.088263e-02, 2.769473e-02, -8.230012e-02, -3.279685e-02, -1.261118e-02, -5.905908e-02, -1.010573e-01, -1.845138e-02, 2.895158e-02, 1.362696e-02, 1.097465e-01, -3.310477e-02, -1.421123e-01, 1.465390e-01, -8.525755e-02, 9.739584e-02, -3.507518e-02, -5.588143e-02, -1.279460e-01, 5.886867e-02, -1.064311e-01, -2.868356e-02, -9.686570e-03, -8.849721e-03, -3.155928e-02, 5.626922e-02, 3.772885e-02, -2.409956e-02, 5.171932e-02, 3.897233e-02, -1.888658e-03, -7.767785e-02, 4.803150e-02, -9.651651e-02, -1.924218e-02, 2.226450e-02, -5.394553e-02, -6.945414e-03, 8.355621e-02, -6.653884e-02, 4.270525e-02, -1.641964e-01, -2.643969e-02, 2.438651e-02, -2.020185e-02, -9.805837e-02, 3.502374e-02, -6.451465e-02, -1.520413e-01, -2.264607e-02, -8.863057e-02, -1.194462e-02, 5.420892e-03, -2.167622e-02, 7.305378e-03, 3.925946e-02, 3.792018e-02, -1.067734e-01, 1.037561e-02, -9.374131e-02, 3.259778e-02, 4.040422e-02, -7.188623e-02, -3.147175e-02, 1.290943e-01, 2.459141e-01, 5.079168e-02, -5.743957e-03, 4.438661e-02, -1.043874e-01, -4.806960e-02, -1.030428e-01, -7.201905e-02, -7.462303e-02, -6.614212e-02, -4.533177e-02, -1.100392e-01, -9.088579e-02, -1.093752e-02, 3.076820e-02, -7.426708e-03, -1.371722e-02, 1.824006e-01, 2.254155e-01, 1.183828e-01, 7.185332e-02, 6.394308e-02, -4.890697e-02, 5.603235e-02, 7.391530e-02, 1.078067e-02, -6.952064e-02, 6.754874e-02, -5.415357e-02, -1.344769e-01, 4.287691e-02, 2.327650e-02, 9.467196e-02, 1.344976e-02, -7.882321e-02, 3.302819e-02, -5.907688e-02, 1.239790e-03, -6.413331e-02, 5.342593e-02},
{4.903527e-02, 9.768963e-02, -8.595566e-02, -1.247761e-01, 6.203603e-02, 3.164590e-04, -1.036884e-01, 8.368582e-02, -5.221168e-02, -6.296739e-02, 5.911735e-02, -9.875043e-02, 4.023263e-02, -6.438251e-02, 1.063821e-01, 2.576750e-03, -9.909826e-02, 7.444568e-02, 1.144983e-03, 5.034930e-02, -5.367953e-02, -9.493421e-02, -8.593538e-02, 8.494369e-02, 3.593516e-02, 3.904390e-02, -2.642955e-02, 2.759602e-03, -9.046699e-02, 3.794898e-02, 1.746506e-02, 7.988011e-03, 4.154038e-03, 1.015462e-01, -2.286126e-01, 7.814869e-03, -3.423459e-02, -7.281760e-02, -1.253205e-01, 8.347043e-02, -2.745290e-02, 1.408504e-01, -7.180369e-02, 3.352741e-02, -2.071712e-02, 3.076769e-04, -7.654933e-02, -4.318249e-02, -1.897966e-01, -1.142231e-01, 7.450368e-02, 3.505467e-02, 4.205942e-02, 7.396656e-02, -5.309828e-02, -2.835420e-02, 2.030938e-03, 1.783621e-02, -6.644989e-02, -2.221261e-02, 4.450246e-02, 2.232237e-03, 2.777750e-02, 7.618158e-02, -1.131265e-02, 1.443363e-01, -8.757453e-02, 2.641374e-02, -1.108990e-01, -1.247312e-01, -6.569277e-02, -4.673207e-02, -1.017456e-01, -4.702504e-02, -7.003135e-02, -6.846498e-02, -4.672019e-02, -8.534217e-03, -1.136204e-01, 1.050150e-01, 2.123453e-01, 1.712110e-01, -8.376932e-04, -3.995715e-02, -2.616153e-02, -1.289474e-01, 1.109259e-01, -1.690293e-02, 2.359303e-02, 8.282498e-02, -7.721307e-02, -2.123422e-01, 1.403537e-02, 6.809217e-02, 4.142486e-03, -8.492575e-03, -1.254808e-01, -2.853731e-01, 3.316361e-02, -8.950040e-02, 4.685353e-02, 3.450170e-02, -7.164165e-02, -1.058432e-02, -3.889953e-02, 6.651434e-02, -1.171812e-01, -1.895572e-02, -4.104898e-02, 2.496775e-02, -2.918691e-02, 2.942841e-01, 1.137694e-01, -1.431208e-02, -7.625014e-02, 8.954125e-02, -2.535056e-02, -1.184758e-02, 4.010112e-03, 2.287458e-02, 1.049297e-01, -7.696290e-02, 1.661616e-03, -1.657975e-02, 4.110469e-02, 4.079510e-02, 1.965954e-01, -2.524282e-01, 1.649120e-01, -2.999310e-02, -2.267147e-03, 8.856486e-02, 5.350525e-02},
{1.811684e-01, 2.239743e-02, -3.742313e-02, 2.132749e-02, 1.116127e-01, -5.599519e-02, -1.203839e-02, 8.784810e-02, -1.462739e-01, 3.053826e-02, 4.826905e-02, -1.538697e-01, -1.339314e-01, 7.216702e-02, -5.374154e-02, 1.070617e-02, -1.408366e-01, -1.954129e-03, -4.585840e-02, -2.931261e-02, 4.649872e-02, -5.373797e-02, 8.771216e-02, 3.734748e-02, 6.611058e-02, -9.821807e-03, -1.619769e-02, -5.854098e-02, -1.036655e-01, -4.515629e-02, 4.558145e-02, 6.187295e-02, -2.128083e-02, -3.968050e-02, 1.338819e-03, -8.683960e-02, 1.268784e-01, 8.948743e-02, -7.761347e-02, 3.529402e-02, 6.635422e-02, 1.218138e-01, -2.827001e-01, -3.266415e-02, 4.893106e-02, 1.013541e-01, -1.196231e-02, -6.794389e-02, -7.642394e-02, 1.207634e-01, -6.010844e-02, -7.184222e-02, -3.811100e-02, 1.769662e-01, -4.573653e-02, 1.876906e-01, -2.662125e-02, -6.837333e-03, 9.586476e-02, -4.306268e-02, -2.198550e-02, -9.025135e-02, 1.359585e-01, -4.898494e-02, 2.672905e-03, 6.573825e-02, -2.436918e-02, 3.046612e-02, 2.265108e-02, 1.612353e-01, 1.028065e-01, 5.235432e-02, 1.243364e-01, -3.134429e-02, -5.693303e-02, 2.165211e-03, -1.033244e-01, 8.215669e-03, -9.379465e-02, 1.164184e-01, -1.153262e-01, 1.052983e-02, -5.992522e-02, 2.383044e-02, 5.205127e-03, -1.126762e-01, 1.291217e-01, -2.766391e-02, 9.915292e-02, -6.906794e-03, -1.201948e-01, -2.616279e-01, -1.055593e-01, -2.130005e-02, -3.050555e-02, 5.354913e-02, 8.655119e-03, -1.693768e-01, 1.546052e-02, -1.381644e-01, 8.810187e-02, -1.034570e-01, -1.149737e-01, -5.173697e-02, 5.359596e-03, -8.760715e-02, -1.940786e-04, -1.892320e-02, -1.875981e-01, 1.247059e-01, -6.883022e-02, 7.586348e-02, -7.813456e-02, -4.456125e-02, 7.470807e-02, 8.553758e-02, -5.861758e-02, 9.282177e-02, 1.790032e-02, -8.822208e-02, -1.242414e-02, 5.761227e-02, -6.195253e-02, -9.555878e-02, 1.128996e-01, 1.317265e-01, 1.041314e-01, 6.418928e-02, 7.154177e-02, -9.809782e-02, -7.171239e-03, -7.203577e-02, 7.544885e-02},
{4.176227e-02, -1.140000e-01, -8.741029e-02, -9.290285e-02, -1.365194e-02, -9.597303e-02, -3.072144e-03, -4.739929e-02, 7.169513e-02, 4.621306e-02, 1.581236e-03, 8.399612e-03, 9.413698e-02, 5.542684e-03, 5.173656e-02, 4.492794e-02, -1.983238e-03, -7.978255e-02, 4.209781e-02, -5.072165e-02, -1.081572e-01, 3.825676e-02, -4.291881e-03, -1.671885e-03, 7.645397e-03, 2.164067e-02, -5.034171e-02, -8.508099e-03, 7.332382e-02, 2.294303e-02, 7.069146e-02, -2.466864e-02, -4.550567e-02, 1.016175e-01, 6.706332e-02, -3.244205e-02, -2.820758e-02, -7.666959e-02, 6.090799e-02, -5.319293e-02, 1.431532e-02, 2.697471e-02, -1.047590e-01, -1.069890e-01, -3.493645e-02, 5.413697e-02, -1.126340e-01, -3.739568e-02, -4.998599e-02, -1.282685e-02, 5.515910e-02, 5.603832e-02, 8.541676e-02, 4.308663e-02, 6.076786e-02, -4.021347e-02, 3.353026e-03, 4.014716e-02, 6.671495e-02, -1.205388e-02, -5.378284e-02, -3.478123e-02, -5.596890e-02, 6.350528e-02, 8.867841e-02, -5.592613e-02, -3.986666e-02, 4.868465e-02, -3.182891e-02, 2.853019e-03, 4.648861e-03, -1.011251e-02, -4.997398e-02, 6.099146e-03, -6.466863e-02, 4.177322e-02, 4.524105e-02, -6.152066e-02, -1.061545e-01, 1.615993e-02, -2.506064e-02, 6.052760e-02, 3.407847e-02, 1.203367e-02, 5.225710e-02, -7.508905e-02, -7.409663e-02, 3.670052e-02, 2.989909e-02, -2.786130e-02, -7.430296e-02, -2.853189e-02, 5.203312e-02, 5.330469e-02, 1.102180e-01, 5.331951e-02, -6.778347e-02, -9.299853e-02, 5.492542e-02, 3.574781e-02, 7.819416e-02, 9.042024e-02, -2.426007e-02, 7.160167e-02, -8.799854e-02, 2.660875e-02, 1.099140e-02, 4.136637e-02, -1.032550e-01, -7.270754e-02, 1.973990e-02, -5.276419e-02, 3.046170e-02, -8.711258e-03, -7.633792e-02, 3.378481e-02, -5.012000e-02, 4.119055e-03, -1.662827e-02, 2.832500e-02, 1.131011e-02, 7.231444e-04, -8.428566e-02, 7.816738e-02, 3.835586e-02, 1.377129e-03, 1.656291e-02, 1.853517e-02, -8.089691e-02, 1.611284e-02, 2.066863e-02, 6.277321e-02, -1.098507e-02},
{1.692001e-02, 2.892190e-02, 4.620405e-02, -2.008674e-01, -1.340351e-01, 3.545309e-02, -2.675480e-02, -6.106205e-02, -5.358124e-03, 6.755824e-02, -1.279934e-01, 2.073012e-02, 1.482972e-02, 1.669710e-02, 3.459577e-02, -2.579234e-02, -1.122382e-01, 9.111403e-02, 2.662953e-02, 5.630659e-02, -9.107009e-02, -1.469089e-02, 1.796774e-01, -3.375381e-02, -6.098115e-02, -1.343279e-01, 5.821078e-02, 1.219078e-02, -7.975167e-03, -3.595519e-02, -4.513301e-02, -3.806150e-02, 3.132034e-02, -1.063585e-01, -8.523837e-02, 3.273004e-02, 4.425499e-02, -4.202804e-02, 1.440156e-01, 1.118810e-01, -7.537647e-02, 6.298469e-02, 2.468226e-01, 1.735594e-01, 2.184251e-03, 4.110024e-02, -4.836066e-02, -4.095940e-02, -2.078380e-01, -2.106487e-01, 5.856563e-02, 8.774433e-02, 6.983869e-02, -4.279965e-02, 3.170265e-02, -1.465752e-01, -1.329136e-01, -8.471788e-02, 2.798291e-02, 1.742531e-05, -1.128950e-01, -7.000930e-03, -9.415806e-02, 2.340471e-02, -6.856585e-02, -8.396486e-02, 1.841080e-02, -5.423865e-02, 2.091156e-02, -2.524262e-01, 3.710768e-02, 8.174001e-02, -2.443479e-01, 5.844723e-02, -3.648039e-02, 5.404221e-02, -2.316182e-02, -2.334052e-02, 8.773804e-02, -3.438927e-03, 2.762761e-01, 6.729387e-02, 5.512254e-02, 4.768990e-02, 4.898571e-02, -1.220188e-01, -1.191944e-03, -8.473354e-02, 4.456737e-02, 7.944626e-02, -2.535879e-02, -7.581705e-04, -1.201941e-01, -9.770173e-02, 6.869843e-02, -7.802399e-02, 1.067512e-02, -2.499558e-01, 4.154898e-02, -1.538072e-02, 3.577935e-02, 2.406608e-01, -8.052557e-02, -9.884483e-04, 3.163730e-02, 5.879781e-02, 4.721841e-02, -7.102645e-03, 3.474895e-02, -1.265509e-02, -9.685662e-02, 1.841175e-01, 2.664890e-01, -2.231698e-02, -3.231538e-02, -3.316755e-02, -3.716802e-03, 3.175928e-03, -1.060836e-01, -5.356263e-02, 1.615452e-02, -1.325514e-01, 1.753220e-01, 1.680021e-01, 1.022397e-01, 7.178931e-03, 1.015570e-01, -1.965380e-01, -6.090072e-02, -3.630897e-02, -4.634301e-02, 1.116544e-01, -3.121203e-02},
{1.071908e-03, -2.436002e-02, -9.468729e-02, -2.306134e-02, -1.300432e-02, -9.198388e-02, -1.007149e-01, 2.317447e-02, 1.050694e-02, -3.151402e-02, -7.005603e-02, -9.486676e-03, 1.901782e-02, -3.849350e-02, -3.603780e-02, -9.263808e-03, 3.098937e-02, 1.615616e-02, 8.056707e-02, 4.462134e-02, -1.018215e-01, -1.043885e-01, 6.813390e-02, -8.768848e-02, -2.432255e-02, -8.969659e-02, -6.562876e-03, -2.639234e-02, -3.950147e-02, -7.084482e-02, -3.513377e-02, -3.459797e-03, 7.843801e-02, 5.449459e-02, 1.863645e-02, 3.405784e-02, 3.442506e-02, 3.563022e-02, 4.754123e-02, -1.194824e-02, -5.047085e-02, -1.500822e-02, 2.941931e-01, 7.108966e-02, -1.625284e-02, -3.457701e-02, -5.701196e-02, -6.557966e-02, -4.919087e-02, -2.042694e-01, -4.140317e-03, -5.032095e-02, -5.988678e-03, 1.151091e-01, 8.159304e-02, -1.252870e-01, -8.164772e-02, -8.279799e-02, -5.918702e-02, 7.351728e-02, 4.458597e-02, 4.718287e-02, 1.433128e-02, 2.421608e-02, -3.476090e-02, -7.664971e-02, -2.486924e-02, 4.752945e-02, -7.414889e-02, -8.673690e-02, -1.530988e-02, 8.635775e-02, -3.639168e-02, 3.768977e-02, -1.075862e-02, 4.685147e-03, 4.463471e-02, -1.064443e-01, -5.522757e-02, -2.937136e-02, 1.063924e-02, 9.722082e-02, 9.743495e-02, -1.141293e-02, 6.820475e-02, -1.087148e-01, -1.970334e-02, -1.203666e-02, 2.787482e-02, -7.242212e-02, 3.885663e-02, 7.693876e-02, -7.962627e-03, -1.620554e-02, -5.472234e-03, -1.916463e-02, 7.287825e-02, -8.754253e-02, -8.481371e-02, -5.482981e-02, 6.328233e-02, 2.466226e-02, 8.212619e-03, 5.796895e-03, -8.178249e-02, -2.471345e-02, -9.095578e-03, -2.046626e-02, 2.390585e-02, -3.984717e-02, 7.741980e-02, 1.333024e-02, -4.427043e-02, 6.385891e-02, -6.693563e-02, 5.923107e-03, -3.418772e-02, -5.053283e-02, -8.501419e-02, -3.025353e-02, 3.782154e-02, -2.795662e-02, 5.193987e-02, 6.015256e-02, -6.898320e-02, 4.712510e-02, -3.804461e-02, -8.013409e-02, -3.916894e-02, -3.393112e-02, -4.796389e-02, -6.334307e-02, -1.842411e-02},
{2.028966e-01, -5.651149e-02, -4.308540e-02, 9.354129e-02, 4.128513e-02, -8.803460e-02, -6.421011e-02, 1.751755e-01, -1.703631e-01, 2.743231e-02, 3.263589e-02, -2.977672e-01, 8.180080e-02, 1.493228e-01, 9.182629e-02, -1.087703e-01, -1.311174e-02, 1.670287e-01, 1.281339e-01, 1.015697e-01, -1.207211e-01, -4.984444e-02, -1.299716e-01, 3.331555e-02, -8.885179e-02, 1.063959e-01, -1.444895e-02, -1.962974e-01, -4.847397e-02, -6.429224e-02, -9.364864e-04, -1.552178e-03, -1.298843e-01, -1.403667e-01, 2.919032e-01, -4.120348e-02, 2.193866e-01, -1.837026e-01, 2.171563e-01, -6.381144e-02, 4.586904e-02, 4.017349e-01, -2.481302e-01, -3.691001e-01, 1.225014e-01, 9.477513e-02, -9.685352e-02, -6.862623e-03, 2.676970e-01, 2.063438e-01, 3.183898e-02, -5.467530e-02, 8.665773e-02, 3.644505e-01, -1.284415e-01, -5.322966e-02, 2.373818e-04, 1.732538e-01, 2.062510e-01, -1.151346e-01, -4.591994e-02, -9.555227e-02, -7.304671e-03, 1.220198e-02, -1.115719e-01, 2.778307e-01, -2.233690e-02, -1.013974e-01, -5.127532e-02, -4.339204e-02, -1.601514e-01, 3.938045e-02, 1.731427e-01, 5.890995e-02, 2.116035e-02, 4.878699e-02, 1.915779e-01, -9.492316e-02, -2.391726e-01, 2.711433e-01, -2.460750e-01, -1.038380e-01, -1.203682e-01, 6.439441e-03, -3.294149e-02, -2.792037e-01, 1.336064e-01, -2.648060e-01, 1.561445e-01, 2.397135e-02, -1.878439e-01, -2.256641e-01, -6.124628e-02, -3.420976e-02, -1.824371e-01, 3.379717e-02, -1.929585e-01, -1.695511e-01, 1.019722e-01, -2.067762e-01, -2.068980e-02, -1.492280e-03, -9.883966e-02, 6.215425e-02, 2.905758e-02, -7.219834e-02, -4.515455e-02, -1.080969e-01, -8.720511e-02, 1.969945e-01, 3.011498e-01, 5.230913e-02, -2.115143e-02, -5.082392e-02, 7.758017e-02, 1.297018e-01, -1.993319e-01, 1.875496e-01, 1.845623e-03, -5.474889e-02, 7.929914e-02, -6.631030e-02, 2.309633e-02, -9.557380e-02, 1.714610e-01, -2.946703e-02, 2.569667e-01, 1.645620e-01, 1.751094e-01, -5.941707e-02, 1.927326e-02, -9.558810e-02, 8.187827e-02},
{2.006569e-01, -7.516488e-02, 2.107881e-01, 9.740271e-02, -5.514798e-01, -1.267156e-01, -3.356739e-02, 4.127157e-02, -9.549118e-02, 5.650235e-02, 9.362736e-02, -1.773517e-01, 2.749521e-02, 5.351821e-02, 2.067437e-02, 1.043242e-02, -2.459075e-01, 2.679278e-02, 1.408532e-01, -2.987249e-02, -9.540263e-02, 8.779273e-02, -4.864842e-02, 5.967446e-02, 7.736686e-02, -1.125803e-01, -1.314004e-01, -3.653870e-02, -1.247139e-02, 5.225042e-02, -1.943617e-02, 5.723097e-02, -6.055579e-02, -1.370296e-02, 1.541906e-01, -8.970364e-02, 6.131214e-02, -1.991633e-01, 3.426634e-01, 2.125165e-01, 1.826404e-01, 1.683321e-01, -3.998558e-02, -2.140729e-01, 1.573894e-01, 2.394936e-02, -1.795253e-01, -5.887065e-02, 8.250813e-02, 1.175522e-01, -2.206987e-01, -3.830835e-02, -1.160234e-01, -1.789149e-02, -3.512496e-02, -4.776465e-01, 6.684449e-02, 6.159342e-02, -7.057697e-02, -2.093070e-01, -1.361696e-01, -6.378501e-02, -1.580440e-01, 8.501193e-02, -1.374032e-02, 3.056692e-02, -5.996758e-02, 5.867973e-02, -4.829977e-02, -2.471791e-01, -1.066857e-01, -1.716213e-01, 2.018222e-01, -4.050706e-02, -6.936100e-03, -2.731948e-02, 5.084394e-02, 1.741427e-02, -1.604567e-01, 1.663435e-01, -1.784799e-01, -1.125176e-02, -1.394497e-01, 2.069284e-02, -1.063816e-02, -2.048856e-01, -3.661235e-03, 2.590294e-03, 1.160751e-01, -1.116102e-01, -9.605209e-02, -1.638137e-01, -1.628039e-02, -1.884580e-01, -1.149158e-01, 3.956874e-02, -7.037651e-02, -4.111962e-01, 5.079456e-02, -1.151624e-01, 1.664257e-01, -5.825593e-02, -1.047416e-01, 8.868189e-02, -5.690604e-02, -1.942670e-02, -5.452480e-02, -9.615655e-03, -7.211124e-02, -4.406072e-02, -6.623054e-02, 1.702138e-01, -1.141031e-01, -5.458710e-02, 1.395900e-01, -3.850050e-02, -1.377848e-01, 8.276584e-02, -6.030064e-02, -7.795557e-02, 3.360146e-02, 1.373252e-02, 1.791461e-01, 1.434232e-01, 4.590525e-02, 2.802062e-02, 1.354138e-01, 6.466745e-02, 6.122220e-02, -7.066280e-02, 4.506288e-02, -3.275757e-02, 9.614174e-02},
{1.286899e-01, 9.591938e-02, 3.244504e-01, 1.049946e-01, -4.382471e-01, -3.503228e-02, -1.541047e-01, -1.509421e-01, -7.074339e-02, 8.439062e-02, -2.663527e-02, -2.681209e-01, 1.391105e-01, 2.304841e-01, 1.152225e-01, -1.679457e-01, -2.215918e-01, 2.483841e-01, 3.674372e-01, 1.763313e-01, 2.443053e-01, -1.606538e-01, 1.192505e-01, -1.805616e-01, -2.549680e-01, -2.320974e-01, -6.901506e-01, -2.276934e-01, -1.242487e-01, -9.519055e-02, -2.865705e-01, 7.443302e-02, -3.315974e-01, -2.352794e-01, 2.022291e-01, -6.597859e-02, 4.416580e-01, 1.725893e-01, 3.139722e-01, -7.754331e-02, 2.211599e-01, 1.842550e-01, -6.620836e-01, -7.982443e-01, 2.946132e-01, 8.082701e-02, 1.024246e-01, -1.143996e-01, 4.942838e-01, 5.653893e-02, 2.167012e-02, -6.576078e-02, -2.546529e-01, 4.203179e-02, -2.554109e-01, -2.060704e-01, -3.600680e-01, -6.499158e-01, 1.284313e-01, -8.507829e-01, -2.164711e-01, -3.893855e-02, -1.891738e-01, 2.778230e-01, -2.434606e-01, 2.017758e-01, 1.421792e-01, -6.219723e-02, -2.036882e-01, -1.045870e+00, 1.354411e-01, 4.957531e-02, 1.899188e-01, 1.819059e-01, 1.961720e-01, -7.254620e-03, 5.767820e-02, 1.407163e-01, -7.684878e-02, 2.594831e-01, -3.875875e-01, -5.341014e-01, -1.172021e-01, 1.119414e-01, 5.052818e-02, -2.953450e-01, -5.165401e-02, -3.257769e-01, 1.055047e-01, 4.429572e-01, -1.634062e-01, -8.613028e-02, -4.038100e-01, 3.129076e-01, 7.289121e-02, -2.659148e-03, -9.117794e-02, -2.104418e-01, 3.037523e-01, -1.636356e-01, -3.271084e-02, -3.617562e-01, -2.004353e-01, 3.112212e-02, 1.943182e-01, 3.825104e-01, -2.047053e-01, -3.190184e-02, 1.014285e-01, 9.539737e-02, 5.324923e-01, 1.117451e-01, -1.042564e-01, -1.280696e-01, 5.223837e-02, 3.486837e-01, -2.245555e-01, 7.425524e-02, -2.988815e-02, -4.602502e-02, 1.317523e-01, -2.966753e-01, -2.200528e-01, 1.938399e-01, 3.621290e-02, -1.690845e-01, 9.790457e-02, -2.174966e-01, 1.869553e-01, -5.357610e-01, 1.740981e-01, -1.272739e-01, 2.058327e-01},
{6.947613e-02, -4.016113e-02, 9.254208e-03, 6.589997e-02, 6.103934e-02, -7.478484e-02, -8.181666e-03, -4.931615e-02, 7.176552e-02, 2.575457e-02, 1.307207e-02, 5.375949e-02, 5.208800e-02, -5.235083e-02, -1.208375e-02, -6.345749e-02, 3.688511e-02, -4.917395e-02, 3.676112e-02, -2.403894e-02, 4.780572e-02, 4.622146e-02, 9.506363e-02, -8.554893e-02, -8.273251e-02, -4.590774e-02, 2.827413e-02, -6.210241e-03, -6.434536e-02, -2.148883e-02, 3.997313e-03, -7.975588e-02, -1.400891e-02, 9.083819e-03, -9.418864e-02, -1.563117e-02, -2.479400e-02, -1.139018e-02, -5.218118e-02, 4.972990e-02, 6.551292e-02, 5.060944e-02, 1.572797e-01, 1.253952e-01, -3.979620e-02, 3.665195e-02, 2.562053e-02, 4.910557e-02, -1.037731e-01, -9.784609e-02, 5.625518e-02, -5.839664e-02, 6.095750e-02, -3.828913e-03, 8.133799e-02, -1.103079e-02, 6.046614e-02, -7.417376e-03, -1.425628e-02, 1.006848e-01, 7.434546e-02, -7.547580e-04, 4.685262e-02, 5.232767e-02, -6.393535e-02, -1.169560e-02, -6.041234e-02, -1.892062e-02, 5.127003e-02, -1.429467e-01, -4.727660e-02, 7.508572e-03, 4.732795e-02, 5.719631e-02, 2.284236e-02, -3.185473e-02, 8.739031e-03, 2.401116e-02, -6.077596e-02, 1.562710e-02, 5.302055e-03, -1.919491e-02, 7.796709e-03, -8.892374e-02, 9.158105e-02, 4.947948e-02, -2.413920e-02, 2.898123e-04, -2.259849e-02, -1.008106e-01, -3.680372e-02, 7.960293e-02, 4.454207e-02, 1.481646e-01, -5.661626e-02, -5.574362e-02, -1.046287e-01, -5.927220e-02, -2.039728e-02, 5.889421e-03, -8.003452e-02, -2.542653e-02, 6.262403e-02, -4.521101e-02, -4.800075e-02, 5.268398e-02, 8.318921e-02, 5.883179e-02, -4.858929e-02, 7.452538e-02, 3.026920e-02, 9.651554e-02, 2.160376e-02, 8.862036e-02, -8.620994e-02, -1.696067e-03, -8.318879e-02, 7.732534e-02, -5.659736e-02, 2.811869e-02, -7.691883e-02, 6.129776e-02, -6.700286e-02, -8.046937e-03, 6.083644e-02, -4.453061e-02, -4.557377e-02, -2.004998e-01, 8.656173e-02, 7.054342e-02, -5.097879e-02, 1.099505e-01, 8.255740e-02},
{4.282800e-03, -7.703312e-02, 8.799805e-02, 5.193333e-02, 1.759967e-02, -3.280607e-02, 4.996366e-02, 3.102474e-02, -2.500593e-02, -7.604576e-03, -6.250329e-02, 7.425039e-02, -5.451525e-03, 4.549883e-02, 2.815363e-02, -8.989950e-02, 2.841989e-02, -6.887618e-02, 2.874471e-02, 1.434537e-02, 4.022349e-04, -1.182769e-02, 1.113828e-01, -1.570334e-01, -7.119684e-02, -5.777952e-02, 6.867796e-02, 3.772622e-02, 3.108161e-02, 2.686408e-02, -8.680961e-02, -9.964791e-03, 1.329082e-01, -2.029697e-02, -5.376775e-02, 9.151952e-03, -4.339930e-03, -6.184326e-02, -1.302930e-01, 1.162210e-01, -2.735993e-02, 1.127361e-01, 2.253207e-01, 3.821401e-02, -5.429288e-02, 4.998444e-02, 4.932407e-03, -3.246852e-02, -1.429940e-01, -2.761594e-01, 7.801840e-02, -3.042733e-02, -1.062725e-02, 7.688245e-02, 5.760675e-02, -7.501072e-02, -1.698550e-02, -1.029109e-01, 6.521974e-02, 1.752344e-02, 4.099381e-03, 1.715737e-02, -2.520051e-03, 8.039945e-02, 4.190176e-02, 3.228441e-02, -4.733972e-02, -2.853989e-02, 4.895759e-03, -2.181395e-01, 3.360085e-02, 9.534483e-02, -2.051158e-01, 8.043984e-02, 1.002019e-01, 9.252167e-02, -1.888482e-01, 2.179789e-02, 5.885741e-02, 4.537750e-02, 4.601997e-02, -4.544912e-02, 2.445675e-02, -2.994081e-02, 7.485823e-02, -7.393130e-02, -3.688328e-02, -6.004705e-02, 1.956026e-02, 2.506567e-02, -8.786663e-02, -5.120803e-04, -1.012617e-01, 6.787129e-02, -6.309426e-02, 8.275273e-02, -4.413263e-02, -6.662620e-02, 9.663266e-02, -4.276716e-02, -1.674795e-02, 6.146153e-02, -1.707516e-02, 2.660425e-02, 7.530015e-02, -3.887691e-02, 1.004043e-03, -9.179514e-02, -6.660830e-02, -5.786013e-02, -1.622120e-02, 1.037801e-01, 4.667268e-02, 3.020121e-02, 5.451926e-03, -1.407226e-02, -3.261330e-02, 5.941434e-03, -5.273628e-02, 7.420722e-02, -8.236570e-03, -1.131997e-01, 3.154990e-02, 5.092631e-03, 7.611519e-02, 4.918746e-02, -7.522230e-02, -1.091368e-01, 3.046574e-02, 9.381474e-02, 8.242016e-02, 1.262545e-01, 1.501996e-03},
{-6.111508e-03, 1.048865e-01, -2.980934e-02, -1.230262e-01, -1.573188e-01, 4.277930e-02, -4.129813e-02, 2.215058e-03, -1.033954e-01, -3.937375e-02, 1.366011e-02, -2.371495e-02, 1.016755e-01, -1.371986e-02, 8.486034e-02, 7.740240e-02, 6.502167e-02, 1.279157e-02, 8.836566e-02, -4.843887e-02, -2.073390e-01, -3.395227e-02, 6.429374e-03, -6.237150e-03, 3.758694e-03, -1.157504e-01, -3.233616e-02, -1.309273e-02, 4.577355e-03, 9.407586e-02, 3.024969e-02, 6.580231e-02, 4.243541e-02, 1.306627e-02, -1.102515e-01, -1.899571e-02, -4.229906e-02, -4.857239e-02, 3.294827e-02, 1.164048e-01, 6.533024e-02, -5.826155e-02, 1.595667e-01, -5.525405e-02, -4.957578e-02, -2.638892e-02, 6.822201e-02, -3.950827e-03, -1.254823e-01, -1.400133e-01, -1.041430e-01, 9.455677e-03, -2.362882e-02, -3.256575e-02, -7.288700e-02, -1.172444e-01, -8.394230e-02, -1.339478e-01, 7.311557e-02, 4.239798e-02, 4.098449e-02, 5.194265e-02, -3.277280e-03, 5.773269e-02, -5.640708e-02, 7.348739e-02, -7.538616e-02, 3.823408e-03, -8.031649e-02, -1.948606e-01, -1.281650e-01, 1.984321e-02, -1.277915e-01, 5.522882e-02, 4.422239e-03, 8.065535e-02, -5.430501e-02, -1.209521e-01, -6.383059e-02, -6.972914e-03, 4.844841e-02, -8.585025e-02, 4.747218e-02, -1.212647e-02, 6.539330e-02, 3.926957e-02, -2.010489e-02, 3.578364e-02, -5.084518e-02, 8.840328e-02, -6.777766e-02, -3.072652e-02, -4.056103e-02, 1.397762e-04, 8.660707e-02, -8.840018e-02, 6.848277e-02, -1.230362e-01, -3.435764e-02, -4.893658e-02, 7.801957e-02, 2.262648e-01, -5.585220e-02, 6.613597e-03, 1.876166e-02, 9.180739e-02, -1.799193e-02, 6.470960e-02, 5.880399e-02, -5.107579e-02, -9.325735e-02, -1.331941e-02, 3.999409e-02, -7.227451e-02, -6.225609e-04, 1.360484e-02, -8.499612e-02, 8.390179e-02, -7.077567e-02, 3.219282e-02, -4.854526e-02, -5.330765e-02, 9.930319e-02, 1.991193e-02, -5.103108e-02, -5.536445e-02, 7.560622e-02, -7.653643e-02, -6.568298e-02, -9.194590e-03, 5.716417e-02, -9.461110e-03, 1.029062e-01},
{1.716533e-01, -1.156247e-01, -8.541322e-02, -2.954001e-02, 6.696980e-02, -3.233632e-02, -5.207513e-02, 4.770605e-02, 4.973013e-02, 4.061034e-02, 5.250611e-02, -4.479809e-02, 3.527163e-02, 7.836260e-02, -7.908393e-02, 8.962401e-02, -9.085266e-02, 7.837042e-02, -1.003572e-02, 9.207135e-02, -1.189528e-02, 3.153275e-02, 4.777313e-02, -1.210632e-01, -5.558798e-02, -3.310201e-02, -3.922196e-02, -9.082323e-02, 5.873036e-02, -1.253272e-03, 1.016739e-02, -3.034757e-02, 1.749744e-01, -4.339261e-02, -3.470949e-02, -7.642268e-02, 2.202096e-02, 8.249938e-03, 6.397687e-02, 1.387374e-02, 2.834896e-02, 1.024987e-02, 1.017289e-01, -9.692986e-02, 7.721161e-03, -2.815567e-02, -9.748620e-03, -1.859572e-04, 5.653992e-02, -7.757487e-02, 7.847346e-03, -4.240487e-02, -5.141715e-02, -5.168533e-02, 1.257409e-02, -1.348542e-01, -3.979902e-02, 3.826234e-03, 2.850193e-02, -2.220726e-02, -6.561428e-02, 7.075423e-02, -8.145840e-02, -5.726387e-02, -9.476129e-03, 8.469173e-02, -4.195113e-04, 8.099664e-02, 7.650586e-03, -1.483604e-01, -5.408394e-02, 5.244699e-02, -8.159124e-02, 2.942606e-02, 2.967273e-02, 1.827513e-02, -2.211333e-02, -1.145540e-01, 5.785760e-02, -6.073702e-02, -3.239248e-02, 4.365594e-02, 4.911833e-02, 6.262780e-02, 2.229805e-02, 1.142095e-02, -2.036825e-03, -2.181902e-02, -6.858572e-02, -8.120833e-02, -8.211602e-02, 5.212684e-03, 3.714316e-02, -5.315439e-03, 4.488062e-02, -1.890041e-03, -5.385786e-02, -7.087409e-03, -8.535380e-03, -9.303905e-02, -4.822325e-02, 1.582408e-01, 7.867501e-03, -7.506771e-02, 6.211341e-02, -6.325935e-02, -2.979631e-02, 2.368918e-02, -1.894673e-02, -6.066919e-02, 6.464726e-02, 6.047498e-03, -8.068296e-03, -1.258855e-02, -2.279512e-02, -7.641771e-02, 6.496629e-02, -2.766153e-02, -1.272622e-01, -1.429266e-02, 1.494333e-02, -5.247339e-02, 8.800571e-02, 2.324203e-02, 4.504073e-02, 7.985160e-02, -7.703480e-02, -1.764487e-01, 5.319777e-02, 4.244431e-02, 5.104528e-04, 1.019738e-01, 4.108960e-02},
{1.242109e-01, 9.030033e-03, -6.284678e-02, -2.471145e-02, -1.250960e-03, 6.841075e-02, 4.764515e-02, 5.188815e-02, -3.150832e-02, -8.392584e-02, -4.220448e-02, 5.157728e-02, -3.156644e-02, 2.578469e-03, -7.007607e-02, -5.462617e-02, -9.105287e-02, 1.093441e-02, 2.492613e-02, 7.043286e-02, -1.073734e-01, -1.058884e-02, 7.673559e-02, 1.403602e-02, 4.541244e-02, 4.959091e-02, 9.791315e-02, -1.544964e-02, -6.934459e-02, 7.480784e-02, -3.425182e-02, -3.594789e-02, 1.405823e-01, 8.421218e-02, -4.439832e-02, -7.796974e-02, 8.903182e-02, -1.690610e-02, 4.737639e-02, -1.827551e-02, -5.211755e-02, -3.112281e-02, 1.953990e-01, -2.154306e-02, 3.476567e-02, -3.199158e-02, -6.116874e-03, -6.146965e-03, -7.811110e-02, -1.656197e-01, -3.480296e-02, -5.149039e-02, 1.984244e-03, -5.154509e-02, 1.872705e-02, -2.001739e-01, 3.448832e-02, -1.250639e-01, 7.994662e-02, 6.637737e-02, 3.194739e-02, 1.164060e-02, -1.004949e-01, 1.280686e-02, 1.859611e-02, -1.369870e-02, -7.091618e-02, 5.318914e-02, 9.256019e-02, -3.938399e-02, -8.671995e-02, 9.270556e-02, -1.136238e-01, 1.523700e-02, -1.612737e-02, -1.427870e-02, 3.169362e-02, -5.799443e-02, -1.892353e-02, -7.521676e-02, 3.552632e-02, -1.191475e-01, -1.616325e-02, -2.342699e-02, 3.215743e-02, -6.828442e-02, 1.042372e-01, 2.588841e-02, 4.794039e-02, -8.527961e-02, 5.280896e-03, -7.272442e-02, -4.155903e-03, -4.665095e-02, -1.497731e-02, 2.027107e-02, -6.129538e-02, 5.032440e-02, 7.282092e-02, 7.757207e-04, -2.964934e-02, 7.087577e-02, 7.028236e-02, 7.541869e-02, -2.947115e-02, -5.604140e-02, -1.672725e-02, 1.306883e-02, 7.076300e-02, 6.603534e-03, -9.978011e-02, 8.183412e-02, -2.580316e-02, 2.293443e-02, -1.323121e-02, -2.506856e-02, -4.120577e-02, -2.771254e-03, -8.888722e-02, 8.424332e-02, -4.405241e-02, -3.388241e-02, 2.589396e-02, -1.863397e-02, -5.077188e-02, 3.724885e-02, 1.678021e-02, -1.102449e-01, 4.993372e-02, -3.709135e-02, -3.204060e-02, 1.147206e-01, 4.017615e-02},
{-1.186742e-01, -1.011571e-02, 1.038523e-02, -1.149712e-01, -4.896023e-02, -1.646432e-03, 4.119139e-02, -8.491325e-02, 7.607960e-04, -9.080175e-02, 3.125960e-02, 8.878267e-02, 4.855511e-02, -6.587657e-02, -4.020959e-02, 1.085257e-01, 5.576449e-02, -4.461746e-02, -1.018562e-01, 3.675709e-02, 9.887893e-03, 4.088474e-02, 1.135149e-01, -6.204837e-02, 1.765409e-02, -3.398933e-02, 3.047631e-02, -2.556768e-02, 5.981728e-02, 1.101875e-04, -3.553741e-02, 9.850549e-02, -7.108838e-04, 3.231872e-02, 7.149637e-02, -1.315333e-03, -1.517050e-01, 2.141273e-02, 9.146381e-02, -4.297676e-02, 1.440188e-01, -1.783695e-01, 1.753328e-01, -1.558965e-03, -3.845344e-02, -6.788528e-04, 3.587854e-02, 1.003516e-01, 1.687349e-02, -1.448349e-01, 3.340960e-02, 1.257391e-01, -1.289321e-02, -2.932640e-02, -1.863666e-02, -2.925614e-02, -5.578940e-02, -2.333196e-01, -1.785311e-02, -3.432142e-02, -3.893307e-02, 6.440793e-02, -1.278426e-02, 5.343794e-03, 3.634914e-02, -1.772660e-02, -7.224984e-02, 1.244704e-02, -3.824618e-03, -2.779902e-03, 3.664908e-02, 1.019940e-01, -1.728532e-02, -1.723397e-02, -1.022651e-01, 6.315575e-03, 2.451521e-01, -6.453753e-02, 2.180312e-02, -2.365007e-01, 2.231326e-02, -1.251385e-01, -1.492519e-02, -4.672049e-02, -6.624745e-02, 1.227671e-01, -8.754779e-02, 1.861497e-01, -4.815337e-02, -9.800357e-02, 1.266555e-01, 1.725727e-01, 3.370066e-02, 3.523324e-02, 1.635152e-02, -1.350577e-01, -1.894829e-02, -1.320590e-01, -1.079479e-01, 6.099572e-02, -2.498725e-02, 5.014329e-02, 1.412713e-01, 8.351684e-02, -4.930316e-03, -1.137087e-01, 4.775527e-02, 1.198292e-01, 1.530164e-02, 5.691912e-03, 7.476615e-04, -1.006976e-01, -1.498406e-01, -3.665690e-03, -5.670445e-02, -1.294700e-01, -1.655538e-02, -1.102007e-01, -8.146938e-03, 3.202642e-04, -9.312307e-04, 2.977178e-02, -1.211789e-02, -7.896992e-03, -1.057026e-01, 7.297341e-02, -2.165188e-02, -1.185214e-01, -1.104590e-01, 1.569078e-02, -4.708758e-03, -5.386614e-02, 1.596740e-02},
{2.074915e-02, -7.922293e-02, -1.049156e-01, 6.434096e-02, -4.473560e-02, -8.677250e-02, 1.435379e-02, -7.645979e-02, -4.082349e-02, -7.554755e-02, -1.703462e-02, 1.474740e-03, 3.745610e-02, 2.723749e-02, -9.250831e-02, 1.683851e-02, 9.899977e-02, -3.429230e-02, -6.876802e-02, -6.185102e-02, -1.044197e-02, -5.171087e-02, 9.108587e-02, 2.300685e-02, 5.571685e-02, -4.629304e-02, -1.338454e-02, -2.512993e-02, -8.037756e-02, 6.471142e-02, 6.956968e-03, 2.869827e-04, 3.127171e-02, 5.958227e-02, 4.764158e-02, -5.869441e-02, -1.077673e-01, -8.995260e-02, -1.761902e-02, -7.672115e-02, 5.560553e-02, -8.898921e-02, -4.302890e-03, 1.005211e-01, 8.814475e-03, -1.028534e-01, -5.233454e-02, 5.715274e-02, -7.623520e-02, -4.561425e-02, 2.012609e-02, 1.933124e-02, -4.421652e-02, 2.147335e-02, -6.658043e-02, 4.472640e-02, -2.156481e-02, 1.254486e-01, -9.037769e-02, -4.351892e-02, -3.616269e-02, 5.805088e-02, 8.806630e-02, 9.733188e-03, 9.138648e-02, 6.959118e-02, -1.142110e-02, -8.671761e-03, -6.306185e-02, 8.762439e-02, 4.563501e-02, 4.195645e-02, 3.991953e-02, -2.216273e-02, 7.475114e-02, -2.984776e-02, 5.573367e-02, 3.022514e-02, 2.264703e-02, -1.003795e-01, 8.160481e-04, 9.745603e-02, -8.301400e-02, 4.839499e-02, 6.636537e-02, 9.563182e-02, -2.326419e-02, 1.355319e-01, 5.845960e-02, -4.076274e-02, 2.680121e-02, 2.568202e-02, 1.874228e-02, 2.201454e-02, 4.351289e-02, -4.039826e-02, 5.134550e-02, -1.959040e-02, 6.359718e-03, 4.127266e-02, 9.119517e-02, 3.284318e-02, 6.489076e-02, -2.195249e-02, -4.686823e-02, -3.144053e-02, 4.570927e-02, 4.957955e-02, -4.097668e-02, -8.894420e-02, 1.190680e-01, -8.873158e-03, -3.327164e-02, -6.989647e-02, -1.985433e-02, 1.076560e-02, 6.557276e-02, 4.147992e-02, -9.092165e-02, -5.887953e-02, -2.161523e-03, 1.004165e-01, 6.702147e-03, -4.763337e-02, -2.311952e-02, 2.299087e-02, -7.196236e-02, -5.658644e-02, -4.186735e-02, -4.726159e-02, 7.817711e-02, 5.635135e-02, -7.906074e-02},
{9.489886e-02, -4.554698e-02, 1.151587e-02, -9.950679e-02, -1.698005e-01, -9.658708e-02, -1.386343e-02, -6.269167e-03, 6.606618e-02, -1.787519e-02, 1.172710e-01, -8.888030e-02, 1.028882e-02, -2.259618e-02, -5.679763e-02, -2.740674e-02, -6.379348e-02, 6.072398e-02, -3.716259e-02, 3.806456e-02, -9.700112e-03, 3.888196e-02, 2.358454e-02, -6.602607e-02, 2.951295e-02, 1.048698e-01, -7.490953e-02, 6.959455e-02, -9.489699e-02, -8.395804e-02, -1.790168e-02, 8.168776e-02, 9.153692e-03, 1.078526e-01, -3.476245e-02, -2.490709e-02, 2.803883e-02, -1.206754e-01, 7.238727e-02, 3.093449e-02, -4.876116e-02, 1.127417e-02, 3.195456e-02, -7.839281e-02, 4.509192e-02, -8.521044e-02, -4.236294e-02, -2.978026e-02, 5.108253e-02, 5.382471e-02, 4.848184e-02, -3.673194e-02, -3.395514e-02, 1.206952e-01, 2.164659e-02, -1.333729e-01, -4.285933e-02, 7.943046e-02, 8.991472e-03, -1.888102e-02, 1.671923e-02, -4.717102e-02, 4.270249e-02, 2.635811e-02, -7.752693e-02, 7.318072e-02, -8.871095e-02, 7.177643e-03, -3.012152e-02, 7.688433e-02, -2.285735e-03, 2.194003e-02, 4.100241e-02, -5.219103e-02, 4.200589e-02, 3.190924e-02, -1.276429e-02, -4.323413e-03, -5.103531e-02, -5.409698e-03, -3.267724e-02, -6.163963e-02, -6.595783e-02, 5.569445e-02, 6.279726e-02, -6.259111e-02, -5.589012e-02, 8.204794e-02, -6.663816e-02, -2.483415e-02, 7.839951e-02, -1.278872e-01, 9.937515e-03, 1.157970e-01, -1.268032e-02, 6.776675e-02, -7.860017e-02, -1.152746e-01, 8.233044e-02, 5.393656e-02, -4.994949e-02, -2.650254e-02, 2.580419e-02, -5.915165e-02, -5.838517e-02, -1.961083e-02, 6.054663e-02, -6.759253e-02, -9.905091e-03, -5.993525e-03, -1.883586e-02, 4.434526e-02, 2.278011e-03, 4.442098e-02, 9.662413e-02, 9.193128e-03, -3.454928e-02, -1.930472e-03, 3.610488e-02, -8.447768e-02, -7.681791e-02, 8.021753e-02, -1.785602e-02, 2.345644e-02, 8.876310e-02, -3.267539e-02, -3.977194e-02, 9.608796e-03, 7.886679e-03, -9.978733e-02, -4.736844e-02, 7.131094e-05, 4.521369e-02},
{3.773927e-03, -1.877346e-02, -1.253959e-01, -8.897965e-03, -5.408808e-02, -3.192282e-02, -2.197195e-02, 2.543999e-03, -7.293836e-02, -3.716803e-02, 1.481084e-01, -1.205216e-01, -1.205222e-01, 9.361318e-02, -8.330470e-02, -1.129655e-02, 4.627581e-02, 2.412355e-02, 5.735642e-02, -5.496630e-02, 4.646645e-02, 3.684068e-02, 4.838796e-02, -8.059070e-02, -2.856294e-02, 7.879035e-03, -6.120419e-02, -2.523723e-02, -6.211494e-02, -1.008226e-01, 3.488184e-02, -5.445122e-03, -4.205633e-02, -7.099058e-03, 8.680891e-02, -2.046007e-02, 9.711639e-02, -1.308463e-01, 3.143559e-02, -8.707949e-02, 4.857467e-02, -5.398447e-03, -1.136078e-01, -9.130280e-02, 7.924049e-02, 9.384718e-02, -9.263495e-02, 4.341424e-02, 1.809799e-01, 1.624656e-01, -3.926976e-03, -4.184590e-02, 4.593698e-02, -3.257218e-02, -1.658361e-02, 4.961135e-02, -7.079399e-02, 5.269632e-02, -2.539806e-03, 8.040332e-02, -7.899161e-02, 4.680678e-02, 9.864426e-02, -6.729098e-02, 5.769062e-02, 8.448651e-02, -2.637405e-02, 1.712492e-02, -4.633240e-02, 1.818798e-01, 1.480315e-02, 3.422561e-02, 9.056412e-02, -1.567827e-02, -8.027697e-03, 5.814687e-02, -7.508521e-02, 4.939590e-02, -1.072597e-01, 2.045824e-02, 7.763083e-03, 1.990121e-02, 4.642743e-02, -6.101735e-02, -3.562713e-02, -7.164200e-02, 1.168329e-01, 7.134525e-02, 6.035984e-02, -8.143760e-02, -1.347408e-02, 1.037204e-02, 6.068360e-02, 1.128780e-01, -1.708530e-02, 1.582874e-01, -6.677046e-02, -1.335144e-01, -4.807300e-02, -3.740369e-02, -7.571810e-02, 7.577562e-03, 3.747261e-02, -7.782094e-02, -7.184681e-02, -4.458827e-02, -4.910608e-02, -3.036729e-02, -1.647723e-01, 6.409806e-02, 7.160477e-02, 1.542861e-02, -1.878618e-02, -6.805798e-02, 5.438694e-02, 8.414658e-02, 1.261040e-02, -3.283759e-02, -2.124415e-02, 9.530309e-02, 6.102205e-02, 2.479493e-02, -6.226840e-02, 6.941819e-03, -4.069766e-02, -3.614344e-02, 4.338177e-02, 1.394718e-01, -1.978268e-02, -3.248329e-02, -2.042821e-02, -1.527683e-02, -3.884662e-02},
{6.240982e-02, 3.300316e-03, 8.549245e-02, 7.164037e-02, -7.914803e-02, -1.565597e-02, 3.945080e-03, 8.266038e-02, 1.475077e-01, 7.143425e-02, 1.036648e-02, 2.225292e-02, -2.236176e-03, 7.175280e-02, -1.185617e-02, -4.337737e-02, 5.967601e-02, 8.718565e-02, 9.970862e-02, 5.423938e-02, 3.326724e-02, -1.616528e-02, 8.164917e-03, -3.471860e-02, -1.854531e-03, 2.199666e-01, -2.587847e-01, -7.270461e-02, -5.816745e-03, -1.428433e-01, -1.739549e-01, 1.846046e-03, -1.070302e-01, 3.925068e-02, 3.816937e-01, 6.611331e-02, 1.534900e-01, 1.569777e-01, 1.005663e-01, -6.705317e-02, 2.682762e-01, -7.757111e-02, -7.571343e-01, -5.064846e-01, 3.820084e-02, 9.999795e-02, 1.134585e-01, -2.918142e-02, 5.254724e-01, 2.616583e-01, 4.066786e-02, 7.753059e-02, -5.903497e-03, 4.243343e-02, -5.469333e-02, 2.036155e-01, -7.820789e-02, -9.080328e-03, 1.039012e-02, -3.201275e-01, -8.857440e-02, -4.899986e-02, 1.694483e-01, 1.268691e-02, -1.018217e-01, -2.475106e-02, 1.308557e-01, -8.239806e-02, 7.160313e-02, -1.145445e-01, 1.349383e-01, 5.569961e-02, 2.837196e-01, -8.254620e-04, 8.937332e-02, 1.744359e-02, 2.723099e-01, -4.166283e-02, 3.774751e-03, 2.541819e-02, -3.686722e-01, -3.504030e-01, -1.398001e-01, 7.331187e-02, 6.955893e-02, 3.425865e-02, -6.385946e-02, -1.085565e-01, 1.400775e-02, 1.431641e-01, 4.793498e-02, -2.224703e-03, -1.105698e-03, -1.271978e-01, -5.471288e-02, -9.347843e-02, -8.461072e-03, -6.453570e-02, -2.660666e-02, 7.861730e-02, -2.408163e-02, -2.331302e-01, 1.110125e-01, -1.588643e-02, -8.838104e-02, 1.997461e-02, 4.208690e-02, -4.163481e-02, 1.471316e-02, -5.478489e-03, 5.169271e-01, -9.626339e-02, -2.819962e-01, 1.574618e-02, -6.246634e-02, 9.581909e-02, -7.090236e-02, 3.870582e-02, 1.772656e-01, -2.591453e-02, 7.026144e-02, 1.221297e-01, -2.692083e-01, -1.768006e-01, 2.488456e-02, 1.326330e-01, -1.062400e-02, 1.140875e-01, -5.872371e-02, -8.119082e-02, -8.623418e-02, -5.455346e-02, -3.384489e-02},
{-6.292904e-02, 1.055512e-01, 5.171376e-02, -6.765267e-03, -1.470685e-02, 2.762249e-02, 2.374636e-03, 4.802029e-02, 6.462573e-02, -2.612684e-02, 1.541826e-03, 7.636288e-03, -9.472336e-02, 8.862668e-02, -1.073404e-01, 3.264553e-02, -1.565792e-02, -5.223035e-02, 5.100474e-02, -8.173978e-02, 4.177769e-02, -2.633621e-02, -2.887388e-02, 9.380718e-05, -2.879942e-02, 6.792178e-02, -5.292270e-02, 8.504175e-02, -1.576398e-02, -3.279509e-02, -1.866870e-02, 3.647397e-03, 5.956382e-02, 2.065254e-02, 3.343255e-02, -7.540120e-02, -8.043476e-02, -7.258992e-03, -1.796269e-02, -1.092335e-02, -1.501362e-02, -1.033429e-01, 5.959328e-02, -4.396984e-03, -4.014995e-02, 4.859832e-03, -6.070590e-02, -7.248534e-02, 4.140965e-02, -1.731911e-01, -3.256054e-02, 2.678066e-02, -3.522244e-03, -1.759169e-02, -1.913486e-02, -1.028146e-01, -2.163416e-02, 1.659483e-02, 5.330332e-02, -2.870131e-02, 3.373043e-02, -3.470879e-02, 4.745311e-02, 3.442051e-02, 3.826346e-02, -7.262536e-03, 1.125700e-02, -9.714540e-02, -2.813320e-02, -5.418222e-02, 6.493902e-02, -2.561662e-02, 5.483143e-02, 7.003042e-02, -1.043234e-02, -2.214675e-02, 1.923175e-01, -6.404933e-02, -7.405412e-02, -6.103995e-02, 1.012979e-01, -1.014360e-01, -1.527866e-03, 4.844603e-02, 2.825672e-02, -7.300755e-03, 1.324335e-02, 5.514141e-02, -7.769981e-02, -3.511188e-02, 9.371550e-02, -1.599101e-02, 4.647009e-02, 5.832855e-02, 2.200405e-02, 1.621360e-02, 1.725340e-02, 1.721706e-01, -7.023580e-02, -6.536029e-02, -5.994252e-02, 8.567598e-02, 9.485247e-02, 2.347954e-02, 4.743208e-02, -1.027825e-01, 7.187023e-02, -8.525327e-02, -2.552163e-02, -1.209592e-02, 1.633545e-01, -3.544647e-02, 8.552430e-02, 6.637453e-02, 3.902312e-02, -9.638067e-02, -2.793934e-02, -9.251098e-02, 4.525237e-02, -1.043807e-02, 5.158430e-02, -4.015978e-03, -1.554494e-01, 9.917932e-02, -2.507785e-02, -2.271068e-02, -9.678379e-02, -8.159311e-02, 2.651674e-02, 1.016976e-02, 5.385396e-02, 2.868347e-02, -8.814365e-03},
{1.264577e-02, 6.394253e-03, -6.937049e-02, -5.709376e-04, -2.071767e-01, 3.762462e-04, -2.502152e-02, 3.471982e-03, -5.830088e-02, -7.991298e-02, 9.013887e-02, -6.932685e-03, 1.054971e-01, -2.120899e-02, 4.825552e-02, 2.941664e-02, 6.188084e-02, -9.235602e-02, -1.361009e-02, -8.968840e-02, 4.087433e-03, 2.462176e-02, -2.806129e-03, -7.499234e-02, 3.852671e-02, -7.233910e-02, 5.519438e-02, 7.260179e-02, -3.985801e-02, -1.291966e-02, -7.905295e-02, 7.302712e-02, 3.834565e-02, 1.429997e-03, -1.750142e-01, 7.552852e-02, -8.674110e-02, 3.056097e-02, -2.955080e-02, -2.127530e-02, -5.475360e-02, -6.039539e-02, 5.240592e-03, 1.106251e-01, 5.553764e-02, -7.381283e-02, -6.101627e-02, 4.875290e-02, -1.433381e-03, -2.392403e-01, -5.054350e-02, 8.345074e-02, -5.453068e-03, 6.564244e-02, 7.806250e-02, -3.373891e-02, 5.031313e-02, 4.019546e-02, 3.171024e-02, -4.277874e-02, -6.364081e-02, 7.452068e-02, -1.077032e-02, -3.046777e-02, 5.231544e-02, 1.133275e-02, -5.369295e-02, 6.828962e-02, -3.454325e-02, -2.107994e-01, -6.259774e-02, 2.418061e-04, 5.817859e-02, -5.783030e-02, -6.245373e-02, 1.678832e-02, -1.721780e-01, 3.696353e-02, -2.042373e-02, -9.859312e-02, -2.385133e-02, 2.402509e-02, 5.297317e-03, 3.703207e-02, 4.945904e-02, 2.790030e-02, -5.767760e-02, 8.377712e-02, 6.273812e-02, 1.881761e-02, 1.354212e-02, -8.403730e-02, 3.615044e-02, 3.100535e-02, -7.222201e-02, -1.449307e-02, -5.222074e-02, -1.647028e-01, 5.692386e-02, 4.036368e-02, 2.170808e-02, -6.227437e-02, -8.496436e-02, -8.257020e-02, 6.177199e-02, 3.415840e-02, 7.425833e-02, -6.205633e-02, 6.084046e-02, 1.956090e-02, -6.778067e-02, 8.753033e-02, 3.349172e-02, 4.292909e-02, -7.992646e-02, 1.118533e-02, 2.709712e-02, 1.012420e-02, -7.951043e-04, 6.114222e-02, 2.566912e-02, 1.148497e-01, -1.297702e-02, 9.930034e-02, 2.614233e-02, 8.553267e-03, -3.608638e-02, -8.172713e-02, 4.493011e-02, -3.241621e-03, 5.821215e-04, -2.678086e-02, 7.969062e-02},
{-2.758791e-02, -3.428863e-02, 7.483407e-03, -1.184838e-01, -2.040021e-01, 3.398077e-02, -6.834437e-02, 1.481873e-03, -2.547051e-02, 9.042068e-02, -3.992157e-03, 7.945420e-03, 9.115871e-02, 4.235228e-02, 8.888022e-02, 2.911593e-02, 9.072348e-02, 6.481496e-02, 1.964755e-03, -5.322744e-02, -2.259553e-01, 8.799778e-02, -2.894760e-02, -1.597932e-01, -1.013876e-01, -8.872209e-02, 7.422328e-02, 7.565407e-02, 2.554665e-02, -2.965239e-02, -6.501427e-02, -1.617666e-02, 3.429686e-02, -2.048307e-03, -7.111838e-02, 5.804740e-02, 2.963178e-02, -1.151300e-01, 1.851484e-01, -3.492224e-02, 3.934217e-02, -5.668683e-02, 5.394507e-01, 5.372124e-02, 6.827890e-02, -7.294658e-02, 8.601109e-03, -1.614554e-02, -3.657296e-02, -2.642635e-01, 8.003866e-03, 8.180200e-02, -7.125875e-02, -3.268297e-03, 4.341643e-03, -2.725953e-01, -4.822225e-02, 7.212963e-03, -4.929759e-02, -7.765337e-02, 2.330739e-02, 5.045720e-02, -1.306404e-01, 8.615461e-02, 8.790749e-02, -1.046855e-03, -2.179983e-02, -8.740130e-02, 9.097225e-02, -2.133825e-01, 3.840256e-02, 4.133419e-02, -1.423156e-01, -1.291396e-02, 6.673342e-03, 5.085844e-02, 1.587076e-01, -8.159394e-02, 4.426407e-02, -6.645270e-02, 4.873354e-02, -1.524642e-02, 5.435461e-02, 6.422697e-02, 7.466806e-02, 8.201741e-02, 6.827895e-02, -4.810779e-02, 2.270466e-02, 3.475346e-02, -3.890771e-02, 1.164521e-01, -1.190815e-01, -7.469281e-02, -5.140265e-02, 3.552828e-02, -3.440417e-02, -7.216743e-02, -6.563180e-02, -3.842504e-02, -6.889266e-02, 3.244365e-01, -7.101507e-02, -6.800278e-02, -9.788971e-02, -4.509074e-02, -7.245611e-02, 4.717338e-03, -6.069103e-02, -1.633091e-02, 1.306110e-01, 1.391296e-01, -2.109978e-02, -6.804744e-02, 8.852746e-02, 7.783008e-02, 7.105280e-02, 6.957246e-02, 4.065885e-03, 4.085509e-02, -4.288997e-02, -2.192659e-02, 1.323453e-02, -1.745184e-02, -4.523828e-02, -7.219518e-02, 7.118485e-02, 2.606775e-02, 4.365841e-04, 2.215078e-02, 8.109124e-02, 5.115401e-02, 5.510185e-02},
{9.851436e-02, -8.228871e-02, -7.522042e-02, 8.597148e-02, -2.065143e-02, -2.693737e-02, -1.222771e-01, -7.396852e-03, 4.251142e-03, 7.703995e-02, -7.353882e-04, -1.654526e-01, 8.576181e-02, 7.401837e-02, 2.293017e-03, 4.687230e-02, -8.294868e-02, -7.025896e-04, 1.044583e-01, 1.038066e-01, 4.192042e-02, 3.969001e-02, -6.213538e-02, -4.450478e-02, -1.722725e-02, -7.064003e-02, -8.964211e-02, -4.655629e-02, 9.860231e-03, -9.758022e-02, -7.313566e-02, 3.993628e-02, 2.181980e-02, 2.775160e-02, -6.642667e-02, -1.221564e-01, 1.134654e-01, 3.782264e-02, 7.532554e-02, -7.132583e-03, -7.543217e-02, 4.690905e-02, 2.575332e-02, 2.815743e-02, 1.084324e-01, -2.873095e-03, -1.327217e-01, -1.054256e-01, -4.137695e-03, -1.282753e-01, 7.789566e-02, 2.772834e-02, -4.955316e-02, 1.956508e-01, 4.673751e-02, -1.741781e-01, 2.446545e-02, 3.052147e-02, 3.912767e-02, -3.366658e-02, 4.898703e-03, -4.822438e-03, -2.925721e-02, -4.452203e-02, 5.070512e-02, 1.224518e-02, 6.857246e-02, 1.780163e-02, -9.667064e-02, -6.658243e-02, -6.960712e-02, -4.244947e-02, -3.858953e-02, 5.516404e-02, 9.368909e-02, 6.597362e-02, -1.541081e-01, -4.648196e-02, -1.473849e-01, -9.676343e-03, -1.309622e-01, 1.298532e-02, 7.701449e-02, -4.078643e-02, 6.335163e-02, -1.016771e-02, 1.330131e-01, -1.125036e-01, 1.398488e-01, -1.707936e-03, -9.646985e-02, -2.430196e-02, -5.300094e-03, 1.117659e-01, -5.049276e-02, -2.189525e-02, 1.192653e-02, -1.823130e-01, 1.023380e-02, -1.467583e-01, 2.199077e-02, 8.256510e-02, -1.443585e-01, -7.334446e-02, -1.123165e-01, -5.933751e-02, -6.668193e-02, 4.224126e-03, -5.140514e-02, 1.281201e-02, 1.203111e-02, 6.969149e-02, 6.514471e-02, -6.108525e-02, 1.121208e-01, 8.366041e-03, 1.250956e-03, -6.985642e-03, -1.256074e-01, 2.303476e-02, 3.007863e-03, 4.018809e-02, -6.689070e-02, 9.876794e-02, 5.522064e-02, 4.729863e-02, 6.062766e-02, -1.309066e-01, 1.153465e-01, 4.114746e-03, -4.264830e-02, 4.077323e-03, 1.576364e-01},
{2.246732e-01, 2.818789e-01, -1.029504e-02, -4.817950e-03, 3.095617e-01, -7.497808e-02, -2.694794e-01, 1.737230e-01, -7.063495e-02, 1.718079e-01, -2.231870e-01, -2.250742e-01, 2.683112e-01, 2.387533e-01, 2.736671e-01, -1.019115e-01, 6.774434e-02, 2.022507e-01, 2.061066e-01, 1.037460e-01, -2.519606e-01, -1.485325e-01, -3.344521e-01, -4.330014e-02, -1.714988e-01, -5.900716e-02, -1.137744e-01, -2.370599e-01, -1.104958e-01, -2.401557e-01, -1.917898e-02, 1.141804e-01, 2.648095e-01, -4.948974e-01, -4.962242e-02, -2.242296e-01, -3.362577e-02, 1.519696e-01, -1.207427e-01, -1.799696e-01, 1.324371e-01, 2.037224e-01, 1.856494e-01, 1.786176e-01, 1.841380e-01, 2.786598e-01, -7.956216e-02, -2.469708e-01, 1.060560e-01, 3.686124e-01, 4.055097e-01, -2.644002e-01, -6.440128e-02, 3.669027e-01, -9.482165e-02, 5.445372e-02, -1.947542e-01, -5.928036e-02, 1.843174e-01, 1.395843e-01, -5.144510e-02, -1.314141e-01, -1.356905e-01, 2.362356e-01, -2.435936e-01, 2.167737e-01, 1.693809e-01, -1.814891e-01, -9.021885e-02, -1.111899e-01, 3.689965e-02, -6.250135e-02, -4.162077e-01, 1.729842e-02, 2.332605e-01, -8.357518e-03, 1.432850e-01, 5.813554e-02, -2.447261e-01, 2.875144e-01, 8.504252e-02, -9.593727e-02, 1.303791e-01, 1.178795e-01, -1.859036e-01, -2.125986e-01, 1.347015e-01, -3.788643e-01, 3.192970e-01, 2.617781e-01, -1.356451e-01, 7.454666e-02, -4.103793e-02, -1.739595e-01, -4.115620e-02, 7.955029e-02, -1.796129e-01, -6.094458e-01, 1.758093e-01, -2.383254e-01, -7.551719e-02, -2.941534e-01, -1.383368e-01, 2.123473e-02, -5.495220e-02, 1.366928e-01, -1.182689e-01, -1.292161e-01, 5.266529e-02, 2.101766e-01, -1.200434e-01, 2.665867e-01, 1.330477e-01, -1.275777e-01, 1.153515e-01, 3.673190e-01, -1.381919e-01, 1.586707e-01, 9.274204e-02, -1.023078e-01, 2.695256e-01, -2.667869e-01, 3.791788e-02, 6.555924e-04, 1.191285e-01, -4.844042e-02, 3.609910e-01, 3.572137e-01, 2.979422e-01, 5.287107e-02, 1.468164e-01, 4.233901e-01, 1.930926e-01},
{2.049120e-01, -7.454737e-02, -1.123627e-02, -7.060828e-02, -9.635283e-02, -1.229072e-01, 2.256257e-02, 1.248269e-01, 1.779755e-02, -5.508647e-02, -5.391017e-02, -3.909365e-02, 6.708234e-02, 4.979165e-02, 4.310030e-03, -4.455213e-02, -1.354717e-01, -2.909279e-02, -2.985453e-02, 5.522624e-02, -5.430393e-02, -1.854895e-02, 3.107164e-02, -8.981725e-02, -7.755245e-03, -1.612657e-02, 2.367865e-03, -6.624170e-02, 3.906401e-02, -7.003509e-03, -3.415613e-02, 5.575557e-02, -2.537487e-02, 8.745281e-02, 7.953647e-02, -9.126731e-02, -1.324011e-02, 2.723373e-02, -4.610749e-03, -4.031083e-02, -2.964555e-02, 2.038957e-02, 1.141163e-01, -9.033870e-02, 8.779240e-02, 2.037900e-02, -6.571109e-03, -9.224973e-02, -2.661817e-02, -4.692303e-02, -8.390780e-02, 2.341588e-02, 6.577086e-02, 1.628189e-01, 2.596505e-02, -1.034068e-01, 5.703416e-02, -8.231682e-03, 8.008602e-02, 5.906178e-02, -8.175226e-02, -7.858157e-02, 6.570974e-03, 8.794717e-02, 3.186969e-02, 1.454126e-01, 4.627474e-02, 8.352280e-02, 4.876218e-02, -1.053605e-01, 1.046547e-02, 1.267002e-02, 1.445769e-02, -7.923841e-02, -1.692649e-02, 1.542247e-02, 4.244997e-02, -1.070250e-01, -3.692023e-02, 1.010145e-01, 1.089506e-02, 1.371189e-02, 5.222283e-02, -2.096147e-02, 1.342785e-02, -1.318345e-01, 6.469725e-02, 4.128199e-02, -2.479782e-02, 7.635674e-02, 2.923389e-02, -6.840707e-02, -9.500445e-02, -6.848861e-02, 7.564905e-03, 4.440742e-02, -1.539371e-01, -7.879374e-02, -1.016250e-02, -7.516836e-02, 1.801223e-02, 1.001391e-01, -9.722559e-02, -7.191025e-02, 5.078850e-02, -6.508560e-02, -4.035754e-02, -5.207463e-02, 1.587933e-02, 5.038328e-02, 8.177587e-03, 1.488203e-01, 1.072241e-01, 4.440787e-02, 9.758306e-02, -4.181549e-02, -1.081011e-01, -3.530776e-02, -1.350707e-01, -8.320928e-02, 7.924837e-04, -3.879089e-03, 2.344034e-02, -1.427430e-02, -3.180483e-02, -7.767652e-02, 7.487944e-02, -1.580503e-01, 6.422002e-03, -1.317850e-02, 6.291457e-02, -8.415563e-02, -2.078892e-02},
{5.034899e-02, -6.471884e-02, -3.050962e-02, 1.611006e-01, -1.323961e-01, 7.014862e-02, -4.046560e-03, 8.871445e-03, 8.181343e-02, -4.629608e-02, 2.195779e-02, -7.952456e-03, -3.704030e-02, 6.774256e-02, -7.381141e-02, -3.802186e-02, 7.063369e-02, 7.247191e-02, -5.555397e-02, 2.538114e-02, -2.811641e-03, 6.974443e-02, 1.130184e-01, 8.966653e-02, -1.912513e-03, -7.421181e-03, -1.738601e-01, -7.761577e-02, -4.782193e-03, -6.533426e-02, -6.763191e-02, 2.029270e-02, -6.074422e-02, -6.465109e-02, 1.222538e-02, -1.448771e-02, 1.541812e-01, 5.457402e-02, 3.655687e-02, -9.833451e-02, 9.611225e-03, 1.859382e-02, -5.331987e-01, -1.507604e-01, -5.871675e-02, 8.344024e-02, -1.431680e-02, -2.056174e-02, 1.459251e-01, -3.594033e-02, -5.932903e-02, -9.613907e-02, -6.777782e-02, 6.901138e-02, -3.603958e-02, 1.326075e-01, -6.940514e-03, 8.892260e-03, -1.733642e-02, -1.239920e-01, -1.543100e-02, 7.938506e-02, 2.060053e-02, 1.908582e-02, 2.564145e-02, -7.994797e-04, 6.674439e-02, 8.321380e-02, 8.171493e-02, -1.374796e-01, -5.082367e-02, -6.410341e-02, 1.356701e-01, -2.992841e-02, 3.186447e-03, 7.103329e-02, 2.064047e-01, 1.592654e-02, -5.577042e-02, -2.957174e-02, -1.968537e-01, -6.500871e-02, 2.548649e-02, 2.734141e-02, 9.752376e-02, -6.129943e-02, 3.171702e-02, -3.672548e-02, 5.598517e-02, 2.603499e-02, -2.872048e-02, -1.817111e-02, 1.571074e-01, 2.175038e-01, 5.435599e-02, -7.357413e-02, 5.617288e-02, 2.620904e-02, 1.903294e-02, 2.751333e-02, -4.260231e-02, -7.915094e-02, 3.603809e-02, 2.750671e-02, -1.090100e-01, 5.325335e-02, 1.103346e-01, -7.345898e-02, -1.040431e-01, -3.555152e-02, 2.401434e-01, -2.451030e-01, -1.382629e-01, -6.125447e-02, -1.023930e-01, 6.523263e-02, -7.702392e-03, -8.909806e-02, -4.126260e-02, -5.193277e-02, 3.704429e-02, 6.894059e-02, -1.267999e-01, 2.423867e-02, 4.544920e-02, 7.631649e-02, 3.689208e-02, -5.878508e-03, 5.544910e-02, -9.694066e-03, 6.748147e-02, -1.046663e-01, -3.495918e-02},
{1.544134e-01, 8.378855e-02, -3.274128e-02, -7.238140e-02, 9.291353e-02, 1.314940e-02, -2.820579e-02, 8.931582e-02, 2.565688e-02, -2.280834e-03, -4.126105e-02, 2.425263e-02, -3.791627e-02, 9.000739e-03, 6.457769e-02, 4.385454e-03, -6.191423e-03, 1.359369e-04, -2.395153e-02, 2.027979e-02, -2.724427e-02, -4.681804e-02, 1.157586e-02, -3.290703e-02, -1.207523e-02, 3.576935e-02, 3.568704e-02, -1.646718e-04, -4.205216e-02, 1.128809e-02, 2.183908e-02, 8.522824e-02, 8.022792e-02, -7.945662e-02, -3.471459e-02, -2.157085e-02, -1.683318e-02, 4.019418e-02, -9.372617e-02, 8.924380e-02, 4.175451e-02, 8.925325e-02, 2.938080e-01, 7.098544e-02, 3.649512e-02, 5.023367e-02, -1.526404e-02, -2.539510e-02, -8.950834e-02, -2.326802e-01, -2.238117e-02, 4.609244e-02, -4.341401e-02, -3.862142e-02, -1.199481e-02, -8.103940e-02, -8.646847e-02, -9.490835e-03, -1.369453e-02, -4.555854e-03, -1.574359e-02, 3.241402e-02, -6.025977e-02, 1.308083e-02, 5.535145e-02, -1.457817e-02, 6.332177e-02, 1.407751e-02, -3.365394e-02, -1.876017e-01, -6.327105e-02, -4.974977e-02, -6.693947e-02, -2.013612e-02, 1.047727e-01, 5.638563e-02, -6.490479e-02, -6.363703e-02, -1.020748e-01, -1.973159e-03, -3.904116e-03, -1.158785e-01, 3.300441e-02, 8.267483e-02, 8.078965e-02, -5.013586e-03, 1.602619e-02, -2.511231e-02, 9.020302e-02, 3.226100e-03, -2.290594e-02, -3.969446e-02, -1.305607e-02, 1.122136e-01, -1.364791e-02, -5.902461e-02, -2.335874e-02, 8.681061e-02, 2.374557e-03, -9.190353e-02, 2.562316e-02, 1.036292e-01, -3.195653e-02, 3.719334e-02, -1.569613e-02, -7.092250e-02, -6.122970e-02, -4.989248e-02, -3.510173e-02, -5.499778e-02, -2.568666e-02, 1.494916e-01, 8.809891e-03, -5.248467e-02, -1.626235e-02, -5.006460e-02, 3.157909e-02, 3.203598e-02, -2.163038e-02, 6.005266e-02, -5.326605e-03, -8.706183e-02, 1.147541e-01, 3.803883e-02, 2.196400e-02, 6.800056e-02, 4.425882e-02, -1.771948e-01, -4.043502e-02, -6.043416e-02, -4.684864e-02, 6.951118e-02, -5.259301e-02},
{1.347770e-01, -2.801213e-01, -1.720727e-01, 1.027692e-01, 9.917134e-02, -6.098531e-02, -9.560848e-02, -5.846561e-02, -7.889841e-02, -3.616578e-02, -7.543407e-02, -4.564974e-02, 1.427663e-01, 1.866835e-03, 2.417750e-02, -9.221650e-02, 4.292222e-02, -1.186254e-02, 9.139333e-02, -2.603454e-02, 1.346756e-02, -1.546151e-01, -1.644689e-02, -8.596351e-02, -8.912066e-02, 4.029847e-02, -1.883667e-02, -1.589145e-01, -9.962248e-02, -5.875772e-02, -3.315296e-02, -7.368261e-02, -8.883327e-02, -3.875918e-02, 2.086316e-01, -1.225147e-01, 1.565685e-01, 2.351141e-02, 8.789741e-02, 1.855220e-02, -3.031548e-03, 1.653959e-01, -1.556263e-01, -1.586550e-01, 1.143160e-01, 8.190677e-02, -9.376883e-02, -6.966677e-02, 1.116834e-01, 4.056052e-02, 1.504034e-02, -3.771029e-04, -5.106093e-02, 1.515199e-01, -8.705616e-02, -6.951904e-02, -7.448735e-02, -1.536862e-01, 1.314814e-01, -1.549379e-01, -1.552945e-02, 4.167177e-02, -1.044046e-01, 6.449918e-02, -4.117562e-02, 1.103744e-01, 9.729057e-02, -9.887680e-02, -8.456283e-02, -2.909836e-01, -5.947331e-02, 5.911101e-02, 3.204576e-02, 4.550350e-02, -3.800641e-02, -4.841599e-02, 3.973612e-02, -5.889894e-03, -4.922054e-02, 1.906486e-01, -1.643861e-01, -1.564387e-01, -5.949327e-02, 1.341487e-02, 2.943633e-02, -1.214299e-01, 1.545422e-01, -1.516135e-01, 1.729404e-01, 7.577340e-02, -8.573066e-02, -2.731607e-02, -1.066499e-01, 1.907267e-01, 1.728450e-02, -2.425911e-02, -3.473317e-03, -2.609183e-01, 1.505132e-01, -1.921168e-01, 1.004775e-01, -8.832628e-02, -1.105335e-01, 3.741946e-03, -6.337333e-02, 2.513447e-02, -5.112167e-02, -5.939367e-02, -7.789639e-02, 1.374541e-01, 1.370811e-01, 7.532830e-02, 6.189824e-02, -1.607446e-02, 5.843810e-02, 2.024892e-02, 7.543296e-03, 7.379565e-02, 3.203396e-02, -1.021854e-01, 4.054297e-02, 1.256857e-02, -1.524299e-01, 1.318083e-01, 3.763458e-03, 4.879090e-02, 8.750042e-02, -1.258171e-02, 2.152271e-01, -3.536008e-02, 7.442974e-02, -2.644169e-02, 1.001213e-01},
{1.483186e-01, -2.497083e-02, 3.029804e-02, -9.198793e-02, -2.896485e-02, -4.995108e-02, 1.769071e-02, 8.755010e-02, -9.390881e-03, -1.406475e-02, 8.699729e-02, -5.081310e-02, -8.025032e-03, 9.288958e-02, -1.537478e-03, -7.661925e-02, -3.062460e-02, 5.989804e-02, 1.019189e-01, 6.121631e-02, -1.278982e-01, 6.791653e-02, 1.516577e-02, -1.034740e-01, -3.618993e-02, -5.413886e-02, -3.799885e-03, -8.030336e-02, -3.619439e-03, -2.695092e-03, 1.058202e-01, 6.532679e-02, 5.547294e-02, 4.938933e-02, 4.979117e-02, 5.759499e-02, -2.054944e-02, -1.279671e-01, 1.020333e-01, 9.517173e-03, 2.924114e-02, 8.194128e-02, 2.431693e-01, 7.098737e-03, 1.684035e-02, -1.762248e-02, -4.460576e-02, -7.079697e-02, -1.682923e-01, -2.196017e-01, -1.661576e-02, 3.273363e-02, 7.423587e-02, 9.140503e-02, -2.827507e-02, -1.259035e-02, -6.410940e-02, -9.231174e-02, -2.545011e-02, 1.049752e-01, 6.231346e-02, -6.503266e-04, -2.590007e-02, 1.086291e-02, -7.447416e-02, 8.496436e-02, 4.447067e-03, 1.158382e-02, 2.214677e-02, -1.411380e-01, -3.775239e-02, -3.292339e-02, 1.986484e-02, 4.166554e-02, 5.317187e-02, -1.641083e-02, -8.906757e-02, -5.339231e-02, -1.572843e-02, -8.913086e-02, 5.964171e-03, 2.920556e-03, -7.077893e-02, -5.064566e-03, 4.854879e-02, -1.034354e-01, -3.602163e-02, 4.406415e-02, -1.741838e-02, -9.694139e-04, -4.882827e-02, 1.061822e-02, -4.268886e-02, 2.658805e-02, -3.142529e-02, -1.920014e-02, 2.499931e-02, 3.997028e-03, 6.038743e-02, 1.735660e-03, 5.395764e-02, 1.573844e-01, 1.577208e-02, -1.252485e-02, -2.679246e-02, 3.059086e-02, -3.283029e-02, 5.510457e-02, -6.268311e-02, -7.201832e-02, -1.043809e-01, 8.916587e-02, 1.389473e-01, 4.311499e-03, -4.422862e-02, -6.917278e-02, 2.694425e-02, 1.367980e-02, -2.541252e-02, -5.817324e-02, 3.165537e-02, -5.243432e-02, 2.900280e-02, 8.319832e-02, 4.380752e-02, -4.272350e-02, -6.219784e-02, -5.588466e-02, 8.370999e-02, 5.206326e-02, 5.167301e-02, 6.512119e-02, -4.434466e-03}

};
float Bias0_i[128] =
{
    6.898926e-02, -4.826774e-02, 2.219262e-02, 3.654741e-02, -3.252837e-02, -5.899080e-02, 1.257104e-01, -2.239657e-02, 2.755247e-02, -1.620155e-01, -9.399460e-02, 9.472233e-02, -5.755572e-02, 5.009478e-02, 4.952215e-04, 2.729567e-02, 4.071789e-02, -6.452626e-02, -1.412724e-01, -3.581139e-02, -5.664876e-02, 1.763975e-01, -9.150661e-02, 7.496250e-02, 2.885251e-02, -2.167566e-01, -5.495216e-02, 5.978566e-02, 7.476914e-02, -1.233003e-01, -6.734005e-02, 4.073142e-01, -1.997458e-01, -1.163290e-02, -4.311233e-02, 3.674347e-01, -2.769993e-02, -3.528111e-02, 8.280113e-03, -7.629735e-02, -1.855842e-01, 6.515895e-02, 1.507221e-02, -7.060437e-02, 4.257446e-01, -1.568803e-01, -6.926542e-02, -1.183169e-01, 1.291444e-01, 1.780151e-02, -2.586545e-02, 3.001254e-02, 1.633467e-01, -9.753046e-02, 3.076147e-01, -1.145723e-01, -5.342879e-02, -1.305961e-03, 3.424773e-02, -3.984421e-02, 1.024930e-01, -7.197075e-02, -9.968734e-02, 3.851022e-02, 1.616697e-01, 1.407221e-01, -3.034839e-02, -1.404853e-01, -1.059045e-01, -3.624370e-02, 7.993846e-02, 1.062325e+00, -1.359088e-01, 3.009736e-02, 9.696293e-02, -9.890344e-02, 1.144283e-01, -2.982527e-02, -1.130290e-01, -8.857472e-02, -9.319257e-03, 7.117789e-02, 3.080177e-01, 3.813233e-02, 9.154167e-02, -1.035975e-02, -7.457002e-03, 7.001787e-03, 1.790908e-01, 3.584071e-02, 8.998130e-02, 7.361142e-02, -2.144673e-01, 2.273690e-02, -1.167124e-01, -1.253463e-01, -9.220464e-02, -8.122099e-02, 2.937583e-02, 5.652645e-02, -1.659877e-01, -2.657595e-02, -3.171968e-02, 1.371038e-01, 1.542024e-01, 1.463285e-01, 1.351228e-01, 4.024107e-01, 1.181518e-01, 1.031139e-02, -7.910953e-02, -2.313465e-02, 3.930978e-02, 8.989090e-02, -1.056674e-01, 1.633592e-02, 8.380066e-02, 1.800904e-01, -3.325860e-02, -9.299461e-02, -7.502815e-02, -6.209734e-02, 6.143605e-01, 4.857913e-02, -1.236168e-01, 1.384448e-01, 8.358174e-02, 4.394922e-02

};
float Weight0_c[128][5 + 128] =
{
    {-2.408642e-01, -2.349822e-02, -8.785442e-04, 1.533808e-01, -4.715622e-03, 4.238288e-02, -8.315296e-03, 5.409513e-02, -2.179615e-02, 1.051212e-01, 2.518275e-02, -7.691855e-02, 1.179532e-01, 3.222840e-02, 6.349545e-02, 2.668431e-02, -3.936978e-02, 9.885541e-03, -4.946944e-03, 7.568154e-02, 3.488106e-02, 1.406623e-02, -5.117045e-02, 1.237594e-01, 4.830122e-02, -1.223414e-01, 8.629096e-03, 4.742474e-02, 2.149896e-02, 5.752121e-02, 8.985452e-02, 6.996782e-02, 5.415621e-02, -4.799713e-02, -9.991121e-02, -4.369573e-03, -2.464493e-03, -1.623335e-02, 8.608256e-03, 3.734276e-02, -9.093737e-02, 7.601851e-02, 4.187104e-01, 1.619843e-01, -3.258851e-02, 2.594493e-02, 4.248570e-02, -1.396060e-02, -1.767623e-02, -6.311448e-02, 4.371295e-02, 4.372966e-02, 2.364366e-02, 1.581939e-02, -7.372074e-02, -7.538311e-02, 2.264494e-02, 8.582166e-03, 5.835417e-02, 4.098308e-02, -6.310694e-02, 1.914314e-02, -1.243988e-01, 5.366446e-02, -1.027169e-01, 1.899250e-02, 2.825309e-02, 3.968743e-02, -3.770889e-03, -2.214173e-02, 2.579596e-02, 2.945891e-02, -1.245297e-01, 1.060879e-01, 2.049864e-02, 5.282599e-02, 1.179758e-01, -1.595424e-02, 5.989493e-02, 1.371965e-01, 1.912905e-01, 4.129473e-02, 2.038619e-02, 7.410225e-02, -1.704507e-02, 2.929458e-02, 5.893244e-02, -1.313401e-01, 7.466011e-02, 7.948473e-02, -7.148055e-02, -1.610670e-02, 4.690174e-02, -7.339283e-02, 3.992139e-02, 3.996066e-03, 6.521811e-02, -6.146082e-02, -6.029689e-03, 1.295650e-02, -8.702146e-02, 3.987612e-02, -4.938393e-02, 7.119311e-02, 2.398089e-03, 3.539753e-02, 5.089652e-03, 3.740783e-02, -5.330282e-02, 1.239007e-03, -7.978695e-02, 1.617122e-01, -1.564666e-02, 1.851759e-02, -2.982169e-03, 3.850623e-02, 2.078897e-02, -1.835988e-02, -1.712120e-02, 4.788428e-02, 6.502743e-02, -4.422935e-02, 8.224823e-02, 9.864408e-02, -4.898037e-02, -5.840159e-02, 7.757082e-02, 1.488605e-01, 3.807775e-02, 7.800302e-02, 1.092631e-01, 9.579736e-03, 8.368871e-02},
{-1.989319e-01, -7.242892e-02, 5.256598e-02, -4.518430e-03, 2.827971e-02, -3.239468e-02, 1.475249e-02, -7.210831e-02, 8.201272e-03, 5.952999e-02, -7.624306e-02, 2.108379e-04, -2.137675e-02, -4.857310e-02, -1.110832e-02, 3.958989e-02, -8.490261e-02, -4.664441e-02, -5.798642e-02, -2.880731e-02, -1.309223e-02, -5.250192e-02, -6.994927e-02, -3.546409e-02, -7.226453e-02, 3.642645e-02, 8.801163e-03, -8.140923e-02, 7.360962e-02, 2.178681e-02, -8.321299e-02, -2.472733e-02, 1.927068e-02, -1.173473e-01, -2.171137e-02, -8.457827e-02, 4.121619e-03, 2.568993e-02, 5.410846e-02, -3.118967e-02, 1.927138e-02, -8.158844e-02, 3.347048e-02, 2.152388e-02, -6.911121e-03, 3.113733e-02, 2.752441e-02, -9.006239e-02, 7.121716e-02, 1.748426e-01, 1.270905e-01, 4.263241e-02, -4.859734e-02, -8.358596e-02, -9.176519e-02, 1.039803e-01, 6.652966e-03, -5.077696e-02, -4.959394e-02, 1.141838e-02, 1.712238e-02, 3.870637e-02, -3.443574e-02, 1.086683e-01, 4.211132e-02, 5.866380e-02, 6.082445e-02, -7.272664e-02, -8.914189e-02, 1.673008e-04, 3.460417e-02, 2.161290e-04, -1.071279e-02, 5.817750e-02, -3.563308e-02, -3.588166e-02, -1.187334e-01, 6.105722e-02, 2.578785e-02, 1.211003e-01, 6.743117e-02, -4.758775e-02, 8.468960e-02, 6.564616e-02, 5.334647e-02, -5.354064e-02, -7.932136e-02, 1.408690e-02, -6.487117e-02, -2.337359e-02, -6.143378e-02, 1.309471e-01, -7.479347e-02, 1.322940e-01, 4.179545e-02, 8.834101e-02, 2.637939e-02, -1.148292e-01, 1.094951e-01, 7.822002e-02, -2.446337e-02, -3.481904e-02, -8.412917e-03, 1.005675e-01, -3.671219e-02, 1.022047e-01, -6.538943e-02, 1.827409e-02, 1.879059e-02, 7.196999e-02, -1.912226e-02, 2.440484e-02, 1.592331e-02, -1.792173e-02, 7.979502e-02, -6.823327e-02, -3.075740e-02, -3.064727e-02, -7.121373e-02, -5.365623e-03, 2.863121e-02, -3.723852e-02, 7.785182e-02, 8.184013e-02, -2.190917e-02, 4.319028e-02, 3.529554e-02, 1.645270e-01, -3.347693e-02, -1.194622e-03, 5.000295e-02, 1.155511e-01, -6.184372e-02},
{2.085313e-01, 6.657303e-02, -7.447033e-02, -5.167294e-03, 4.959845e-02, 9.386808e-02, -6.527216e-02, 4.795936e-02, 6.231724e-02, -7.145463e-02, -8.254598e-02, 1.155400e-01, -1.177572e-01, 6.274632e-02, 8.864601e-03, -3.909218e-02, 7.390390e-02, -1.708272e-02, -3.409025e-02, -2.355395e-02, -9.276787e-02, -4.594039e-02, 2.848140e-02, -1.189502e-01, 2.743288e-02, 7.723179e-02, 1.150378e-02, 5.164469e-02, -5.680876e-02, -3.081127e-03, -9.349969e-03, -7.592664e-02, 1.530172e-01, -5.981721e-03, 4.833777e-02, 9.279259e-04, -4.898632e-02, -2.415428e-02, 2.733495e-02, 1.013559e-01, 1.014865e-01, 3.975787e-02, 2.735318e-03, -1.055041e-01, -1.702021e-02, 5.302097e-02, 9.099768e-03, 1.118429e-02, 2.743201e-02, -1.474507e-01, -2.158782e-02, 1.897191e-02, 3.760244e-02, 6.823874e-02, 8.717059e-02, -2.736518e-03, 7.151541e-02, -8.519194e-02, -8.344756e-02, 8.560900e-02, 9.383953e-02, 2.285804e-02, 4.697033e-02, 4.379139e-02, 9.408432e-02, 6.042390e-02, -1.206526e-02, 6.865174e-02, 4.795168e-02, 3.031086e-02, -7.882636e-03, -4.576474e-02, -6.276007e-02, -8.986936e-02, 3.730626e-02, -4.143279e-02, 5.513891e-02, -6.476251e-02, 9.574414e-02, 2.256239e-02, -9.311821e-02, -4.947559e-02, 5.640149e-03, 2.439601e-02, -4.874200e-02, 8.738086e-02, -2.247008e-02, -4.770523e-02, -8.231842e-02, 3.711423e-02, 7.742286e-02, -8.228130e-02, 6.165721e-03, -4.781836e-02, 2.234597e-02, -2.232073e-02, -1.415097e-02, 1.191285e-01, 1.191158e-02, 5.536973e-02, 4.294226e-02, 6.532083e-02, 3.630454e-02, 7.284875e-03, 9.659590e-03, -5.158243e-02, 1.068167e-01, 5.358319e-02, 3.130868e-03, -2.696063e-02, -4.413686e-02, -6.699917e-02, 3.908895e-02, 7.037487e-02, -2.267829e-02, -2.517825e-02, 6.977435e-02, 3.796246e-02, -1.454669e-02, -9.320372e-02, 2.220844e-03, 1.075441e-01, 4.600980e-02, 4.666598e-02, -4.206097e-02, 9.821184e-02, -9.752970e-03, -6.524315e-02, -5.178241e-02, -6.474546e-02, 1.397782e-03, 8.326890e-02, -3.487252e-02},
{-1.627522e-01, -4.407027e-02, 6.230747e-02, 1.627346e-01, -2.043763e-01, 1.049735e-01, -6.547047e-02, 5.903925e-02, 7.004285e-02, -9.094140e-03, 6.727321e-02, -6.158081e-02, -4.992495e-03, 5.658072e-02, 6.288901e-02, 2.316901e-02, 8.846895e-02, -5.017912e-02, -6.229888e-03, -4.541359e-02, 5.195342e-02, -5.513825e-02, 3.728434e-02, -3.865007e-02, -5.680589e-02, -7.470505e-03, 1.709338e-02, -1.022480e-02, -3.491315e-02, 6.498622e-02, -4.663549e-04, -8.125284e-02, 9.411567e-03, 7.465677e-03, -3.709257e-02, 9.588753e-02, -1.894103e-02, -6.778460e-02, -9.024896e-02, -2.715117e-02, 6.172167e-02, -4.409579e-02, -9.870204e-02, -1.819090e-01, 2.884607e-02, 5.036424e-03, 3.809816e-02, -5.124616e-02, 1.262504e-01, 1.302385e-01, 1.165926e-01, -3.663792e-02, -4.605313e-02, -6.231523e-02, -2.560586e-02, -9.452630e-03, -5.008245e-03, 8.608562e-02, -4.723770e-02, -1.085407e-01, 5.587527e-02, 3.194443e-02, 6.051509e-03, 9.159177e-02, 7.784670e-02, -1.013729e-01, 1.088210e-01, 7.273142e-02, 1.655963e-02, -9.726649e-02, 3.443456e-02, 4.796269e-02, -5.134627e-02, 4.491211e-02, -4.126670e-02, 2.302453e-02, -5.482692e-02, 2.943534e-02, 9.035991e-02, 8.040499e-02, -8.173770e-02, -4.133920e-03, 7.545931e-02, -4.410043e-02, 1.408481e-02, -4.887997e-02, -7.362121e-02, -1.754026e-02, -6.204757e-02, 1.408241e-02, 3.961557e-02, 1.021806e-01, 2.851718e-02, 4.867668e-02, -4.394451e-03, -2.108544e-03, -2.661373e-02, -1.822381e-02, 6.266288e-02, 4.877632e-03, 6.065549e-03, -7.694114e-03, -3.189194e-02, 3.105772e-02, -9.704965e-02, 7.697636e-02, -6.562402e-02, -3.505415e-02, -1.737023e-02, 7.419596e-02, 1.179694e-01, -9.762558e-02, -4.915043e-02, -2.778033e-02, -6.926433e-03, -3.415890e-02, 4.668791e-02, -2.774420e-03, -4.600710e-02, 1.531556e-02, 9.513965e-02, -7.335524e-02, -4.784111e-02, 2.667456e-02, 4.865338e-03, -3.004578e-02, 5.935763e-03, 6.337504e-02, 3.598640e-02, 3.926468e-02, -1.590811e-02, -4.070769e-03, -9.371274e-03},
{1.116197e-01, 2.282840e-02, -1.942870e-02, 6.702045e-02, 2.331897e-02, 7.759587e-02, -1.482409e-02, -7.067390e-02, -8.100175e-02, -1.631735e-02, -3.006617e-02, -1.324102e-02, -1.597638e-02, -9.236328e-03, -8.253895e-02, 1.003298e-01, 3.662828e-02, -9.672644e-02, 4.799513e-02, 3.703521e-02, -1.312714e-01, 2.976222e-02, 4.548101e-02, -5.891012e-02, -5.491388e-02, 1.051762e-02, 5.410166e-02, -6.102404e-02, 1.024926e-02, 1.638360e-02, 4.411022e-02, 6.330627e-02, -3.574593e-02, 7.544775e-02, 1.008326e-01, 2.537563e-02, -6.903121e-02, 8.411413e-02, 7.359269e-02, -5.560115e-02, 1.965973e-02, -2.190933e-02, 6.406008e-02, 6.868835e-03, -4.817474e-02, 4.372770e-02, -6.664881e-02, -6.066767e-02, 6.711652e-02, -1.191697e-01, -1.007320e-01, 3.064406e-02, 5.198429e-02, -5.927480e-02, -3.446134e-02, 8.054608e-02, -4.377834e-02, -2.853795e-02, 5.656960e-03, -1.592093e-02, 1.064577e-01, 2.394590e-02, 8.112440e-02, 2.249825e-02, -6.829807e-02, -7.612098e-02, 8.006037e-02, 9.351959e-02, 6.523039e-02, -4.783205e-02, 5.048231e-02, 1.685762e-02, -3.910735e-02, 6.006561e-02, 5.188819e-02, 3.042809e-02, 1.236508e-02, -2.156055e-02, 5.707470e-02, 3.848011e-02, -2.564174e-03, 8.389381e-02, 7.164684e-02, -5.641588e-02, -5.127882e-02, -8.451193e-03, 1.183296e-02, 6.419227e-02, -8.392043e-02, -1.465895e-02, -5.022216e-02, 2.610723e-02, -9.014565e-02, -1.173155e-01, -1.768431e-02, -1.165390e-01, -1.179746e-02, -9.764463e-02, -8.960512e-03, 2.628945e-02, 3.750802e-02, -6.883481e-02, 6.086275e-02, -7.125126e-02, 4.903078e-02, 5.122423e-02, 8.580774e-02, -6.073088e-02, 2.663929e-02, -8.917222e-02, 1.228008e-01, -7.320306e-02, -1.196699e-01, -5.329625e-02, -6.966280e-02, 4.474010e-02, 7.124946e-02, -8.774443e-03, -8.240763e-02, 4.137027e-04, 5.104481e-02, 6.874303e-02, -3.506950e-02, 6.176313e-02, 5.264686e-02, -4.055541e-02, 6.870153e-02, -1.154331e-01, 4.291077e-02, 2.555868e-02, 4.796920e-02, -5.456004e-02, 1.589618e-03},
{1.402999e-01, 1.071617e-01, 1.873445e-02, 3.107102e-02, -5.155884e-02, -1.184711e-02, 4.261594e-03, 1.075116e-02, -5.979144e-03, -3.480872e-02, -2.827603e-02, 2.905441e-02, 1.172120e-02, -6.888665e-02, 1.380885e-02, 5.563072e-02, 5.746238e-02, -6.538619e-02, 5.908917e-02, -1.035939e-02, -2.637422e-02, 7.237150e-02, 2.717806e-02, 1.235644e-01, -4.190966e-02, -5.065429e-02, 5.820006e-02, 7.638375e-02, 1.001455e-01, -2.989075e-02, 2.789782e-02, 4.600826e-02, 3.351094e-02, 5.095868e-03, -1.070499e-01, -3.254096e-02, -4.420102e-02, -2.796299e-02, 1.517854e-02, 5.674997e-02, 5.407929e-02, 5.618635e-02, -1.378944e-01, -6.112274e-02, -5.824714e-02, -3.959311e-02, -3.289385e-02, 1.182769e-01, 4.143365e-02, -4.905784e-02, 3.200848e-03, 1.116607e-01, -1.301610e-01, 6.225837e-02, -2.492087e-02, -1.830319e-01, -2.024032e-02, 5.976984e-02, -8.480566e-02, 5.700655e-02, -5.177569e-02, 1.579784e-02, 2.071036e-02, -1.526945e-02, 4.098269e-02, 3.139795e-02, 5.854656e-02, 1.594351e-02, 7.910015e-03, -5.036624e-02, 4.476223e-02, -2.353353e-02, 8.559340e-03, -4.194769e-02, -7.832017e-02, 5.726803e-02, 1.188035e-01, 1.117523e-01, -1.266655e-02, 4.465713e-03, -4.297111e-02, -1.328129e-02, -3.932152e-02, 4.591271e-03, 9.670087e-02, 6.972566e-02, 2.966246e-03, -6.706987e-02, 5.809932e-02, -6.591593e-02, 3.844387e-02, -3.530573e-02, 3.025852e-02, -4.791543e-03, 1.593753e-01, -1.593814e-01, 3.484448e-02, 4.347422e-02, 2.983758e-02, 5.034004e-02, 7.862619e-02, 2.749208e-02, -6.592387e-03, -5.291586e-02, 4.169395e-02, 4.317337e-02, 7.965121e-02, -2.132738e-02, 4.278820e-02, 6.476360e-02, -4.366881e-02, -3.160762e-02, 6.747004e-02, 9.592535e-02, 4.265102e-02, -1.200116e-01, 2.823822e-02, 5.101134e-02, -3.709002e-02, 6.013484e-02, 1.951880e-02, -3.528561e-02, -5.313617e-02, 9.591531e-02, -3.644510e-02, -4.314271e-02, -3.835323e-02, 1.975483e-02, -7.586276e-02, 3.089231e-02, 1.706926e-02, 2.089968e-02, -3.719665e-02},
{-1.959454e-01, 5.959043e-02, -1.144298e-02, -3.993122e-02, 1.304288e-01, -2.175483e-03, 6.763592e-02, 9.188779e-02, -2.147999e-02, 3.541548e-02, 3.652568e-02, -8.319741e-02, 5.940489e-02, -2.992954e-02, 2.557328e-02, -4.454668e-02, 5.981322e-02, 8.577072e-02, -3.194159e-02, 5.134036e-02, 8.342063e-02, -1.161723e-01, -7.714894e-02, 2.948949e-02, 1.965970e-02, -1.051450e-01, 3.098522e-02, -6.588976e-02, -1.463083e-02, -4.405237e-02, -4.467607e-03, -4.373652e-04, -3.372629e-02, -6.133954e-02, 6.025102e-02, 5.878820e-02, 6.786227e-02, 8.885034e-02, 5.957809e-02, -1.049208e-02, -5.152317e-02, 2.846610e-02, 1.260064e-01, 1.632935e-01, -7.941017e-02, 8.764718e-02, 3.769200e-02, -1.335725e-02, -7.450113e-02, 7.970070e-02, 1.433715e-02, -1.101845e-02, -1.337363e-02, 3.376187e-02, 4.492084e-02, 4.321321e-02, -4.031456e-02, -2.440297e-02, 9.657482e-02, -4.132537e-02, -2.655149e-02, -2.227004e-02, -1.293246e-01, -3.835345e-02, 1.091485e-02, -1.798470e-02, -2.681688e-02, -8.338671e-02, -6.739923e-02, -1.256057e-02, -2.057621e-02, -4.087896e-02, 5.510505e-02, -4.330410e-02, -6.882460e-02, -3.382315e-02, -7.545391e-02, 2.101138e-02, 1.208641e-02, 1.366528e-02, 1.906279e-02, 3.122627e-02, 7.345626e-02, -1.908998e-02, -5.620868e-02, 7.395429e-02, 9.646104e-02, -3.657020e-02, -1.407008e-02, -4.709100e-02, -1.932644e-02, 3.109198e-02, -5.184637e-02, -1.057229e-01, -2.760853e-02, -3.360376e-02, -7.481436e-02, 1.856272e-02, -5.093599e-03, 7.778620e-02, -4.459631e-02, -2.416081e-02, -8.099850e-02, 4.337709e-02, 6.573772e-02, 7.018451e-02, -7.106299e-03, 7.735342e-02, -7.612856e-02, 7.266637e-03, -1.158239e-01, 1.263206e-01, 7.276597e-02, -9.152223e-02, -8.198504e-04, 2.777854e-02, -8.437972e-03, 7.190918e-02, 6.142859e-02, 6.568329e-02, 5.410755e-02, -7.422918e-02, -3.255671e-02, -5.132509e-02, 5.482475e-03, 1.011912e-02, -1.426919e-02, 5.517991e-02, -3.617267e-02, 3.568526e-02, -2.909989e-03, 7.604215e-02, -3.368109e-02},
{1.726018e-01, -2.828114e-02, -5.224879e-02, 4.649131e-03, -3.174042e-02, -2.259312e-02, -9.185098e-04, 1.127214e-01, -1.632660e-01, -1.545334e-02, 1.323765e-01, 7.512268e-02, -6.137951e-02, 3.529529e-02, -9.230627e-02, 5.523431e-02, -6.058893e-02, 9.804476e-02, -1.588255e-02, 2.432494e-02, -1.223378e-01, -1.037012e-04, 8.763038e-02, -5.630675e-02, -3.560087e-02, 6.226806e-03, 3.622436e-02, -3.684986e-02, -9.821361e-02, 1.044856e-01, 1.528585e-02, -1.167980e-02, 1.544482e-01, -4.781898e-02, -6.206140e-02, 4.216644e-02, -1.437986e-01, -6.259937e-02, 2.650019e-03, -5.375206e-02, -1.313502e-01, 4.272129e-02, 4.179037e-01, 4.675965e-02, -5.960179e-02, 8.589920e-02, -3.711461e-02, 8.638507e-02, -1.103782e-02, -1.675912e-04, 3.151195e-02, 4.123398e-02, 1.332756e-01, -3.505546e-02, 3.955374e-02, 1.051172e-01, -2.206357e-03, -1.089617e-01, 1.063768e-01, 2.319030e-01, 1.792455e-02, -9.333847e-02, 4.624833e-02, 5.669358e-02, -5.952094e-02, -6.743498e-02, -3.288830e-02, -1.013011e-01, 9.667635e-02, 1.756460e-01, 8.162967e-03, -3.691637e-02, -7.334128e-02, -9.025000e-02, -1.174987e-02, 2.342359e-02, -9.126398e-02, -1.310611e-01, -7.192518e-02, -1.277356e-01, 7.180721e-02, 4.866368e-02, 8.959525e-02, 4.299230e-02, -8.314935e-02, -6.742244e-02, 4.601876e-02, 1.292550e-01, 8.869605e-02, -7.754404e-02, 4.658845e-02, -5.008590e-03, 2.287982e-02, -3.438173e-02, -4.665954e-02, 1.264010e-01, 2.536165e-02, -1.332190e-01, 6.226732e-02, -1.080443e-01, -3.732670e-02, 1.166756e-01, 5.313288e-02, -1.457427e-01, -3.089745e-02, 3.468332e-02, -4.408820e-03, 7.307745e-02, -2.900355e-02, -3.224523e-02, -1.382148e-02, 1.321226e-01, -2.211921e-02, 8.955103e-02, 2.895364e-02, -5.026450e-02, 2.940478e-02, -1.740472e-02, 1.091826e-01, 9.369590e-02, 1.818485e-02, -4.806046e-02, -3.420358e-03, -4.028907e-03, 1.421099e-01, -8.200435e-02, 4.077812e-02, -1.789444e-01, -4.355035e-02, 5.738190e-02, 3.568790e-02, 6.756461e-02, 4.119700e-02},
{2.267778e-01, -1.045539e-01, -4.981727e-02, -4.401622e-02, 7.408979e-04, -5.336685e-02, 4.114230e-02, 6.907433e-03, -1.620165e-02, -6.978522e-02, 1.064443e-01, 1.302204e-01, -1.217109e-02, -5.544984e-02, -2.522971e-02, -1.004023e-04, 5.498010e-02, -4.412093e-02, -8.428951e-02, -5.658067e-02, -1.403113e-01, 6.123267e-02, 4.380793e-02, -1.199908e-02, 4.858254e-03, -3.070587e-02, -4.583884e-03, -1.445820e-02, -4.468259e-02, 1.097990e-02, 6.738943e-03, 3.771428e-02, 5.615029e-02, 1.118041e-01, 6.778415e-02, -5.955831e-03, -8.229261e-02, -4.436887e-02, -3.663839e-02, 5.891743e-03, 8.566438e-02, 2.453390e-03, 3.832307e-02, -1.883424e-01, 2.761705e-02, 9.855793e-03, -3.754806e-02, -1.685978e-02, -1.259844e-02, -3.667776e-02, 8.885784e-03, -1.572800e-02, -2.706114e-02, 1.885848e-02, 1.016687e-01, 1.522857e-02, 4.968783e-04, -1.694405e-01, 2.787793e-02, 8.180534e-02, -6.533870e-02, 5.853492e-02, 1.763438e-02, -2.292987e-02, 8.853169e-02, 2.270101e-02, 4.911412e-02, -7.602615e-02, -1.605851e-02, -3.778544e-02, -4.126550e-02, -4.279583e-02, 1.421470e-02, 2.452569e-02, -2.344367e-02, 2.791477e-02, -4.584289e-02, -8.924074e-02, 2.752841e-03, -8.879318e-02, -8.775418e-02, -3.642238e-02, 3.386797e-02, 1.446454e-02, -1.995784e-02, 5.848750e-02, 6.573480e-02, 7.620039e-02, -1.102887e-02, -6.679945e-02, 4.384247e-02, -9.008329e-02, -8.860634e-02, 5.175067e-03, 3.945422e-03, 8.502486e-03, -7.454698e-02, -8.446857e-03, -9.001790e-02, 1.074867e-01, -7.474314e-03, 1.069203e-01, 3.092598e-02, 4.879705e-02, 7.397373e-02, -1.371349e-01, -2.611841e-02, 8.349770e-02, 8.585605e-03, 2.987685e-02, 6.955662e-02, -1.140088e-01, -1.072682e-01, 3.818370e-02, 5.750034e-02, -9.968851e-02, 7.488368e-02, -8.810910e-02, -7.988150e-02, 1.688954e-02, -1.101721e-01, 1.303665e-01, 5.231934e-02, 4.725222e-02, -6.860090e-02, -2.302215e-02, -1.300074e-01, -4.107190e-02, -3.508177e-02, -2.735854e-02, -8.312704e-03, 4.946297e-02, -9.649172e-02},
{9.724684e-02, 8.970033e-02, -6.291196e-02, -3.218022e-02, 1.203921e-01, -2.553231e-02, -8.595800e-02, -7.719915e-02, -5.048943e-02, -3.803467e-02, 8.656894e-03, 4.979661e-02, -3.276251e-02, -5.065527e-02, -1.139202e-02, 2.253554e-02, 5.442860e-03, 6.320728e-02, -1.924445e-02, 1.752369e-03, -5.372169e-02, -1.705040e-02, -7.494494e-03, -1.224715e-01, -6.931049e-02, 1.091899e-02, 3.060067e-02, -1.827013e-02, -5.678416e-02, 2.391925e-02, -7.923441e-02, 8.734746e-03, 8.682348e-02, -2.986722e-03, 3.348104e-02, -2.032118e-02, -1.046922e-01, -1.941867e-02, -3.470797e-02, -7.702062e-02, 3.097327e-02, 2.215558e-02, -1.831405e-01, -5.038307e-02, 8.791237e-02, -2.960264e-02, 6.538723e-02, -3.723099e-02, -9.506781e-02, 1.154955e-02, 6.144709e-02, -1.811437e-02, 1.395103e-02, -7.909530e-03, 4.623800e-02, 1.026827e-01, -2.916490e-02, -3.864741e-03, 7.922653e-02, -4.592887e-02, -6.141045e-02, -6.644986e-02, 1.069912e-01, 9.003177e-02, 1.626739e-02, -4.424455e-02, 8.506831e-02, -3.106282e-02, 3.488237e-02, -9.367769e-02, 3.138164e-02, -2.688516e-02, -1.104271e-02, 6.740108e-02, -4.329262e-02, 4.279663e-02, -9.009385e-03, 1.450544e-02, -8.714159e-02, 4.369185e-02, -3.949523e-02, -6.144219e-02, -1.009766e-01, 5.332069e-02, -4.902781e-02, 5.485402e-02, 6.172980e-02, -2.722488e-02, 4.173147e-02, 7.650807e-02, -7.847413e-02, 5.294876e-02, -5.074531e-02, -5.530163e-02, -2.300649e-02, -2.328183e-02, -2.770105e-02, 3.675637e-02, -1.689478e-02, -1.075041e-01, -9.628806e-02, -8.008012e-02, 7.510529e-02, 2.789160e-02, 1.716752e-02, 2.303286e-02, 9.373700e-02, 8.078847e-03, 1.932170e-02, 3.201402e-02, 6.054170e-02, -5.957263e-02, -1.579571e-02, 5.152523e-02, 7.068755e-02, 3.591248e-02, -1.731268e-03, -2.486033e-02, 3.044417e-02, -1.837446e-02, 7.095851e-02, -2.128467e-02, -1.212630e-01, 5.583333e-02, 3.718485e-02, 4.313030e-02, -9.118305e-03, -1.081358e-01, 1.147621e-02, 1.563755e-02, -4.924724e-02, -2.483522e-02, 6.351984e-03},
{-1.515829e-01, 1.833348e-02, 2.124531e-03, -1.607099e-02, -7.930126e-03, 2.392444e-02, -3.018682e-02, 1.509460e-02, 3.443145e-02, -4.120909e-02, 5.688754e-02, 4.698281e-02, 9.060464e-02, 8.263948e-03, 6.328330e-03, -3.695929e-03, -6.042693e-02, -5.616990e-03, 9.701032e-03, 7.113237e-02, 7.913782e-03, 1.803401e-02, 2.623118e-02, 1.611949e-02, -2.360576e-02, -1.254547e-02, 9.887277e-02, -2.017293e-02, 1.889458e-02, 2.447718e-02, 3.276782e-02, -5.563543e-02, 6.537588e-02, -3.877504e-02, -9.376910e-02, 4.749685e-02, 2.119226e-02, -9.269851e-02, -7.942070e-02, 6.488932e-03, -7.441034e-02, 6.134992e-02, 2.847688e-01, 8.609945e-02, -1.768379e-04, 3.351768e-02, 6.344786e-02, -4.592959e-02, -3.951067e-02, 3.209469e-02, 1.737861e-03, -7.512827e-02, 3.878457e-02, 2.355845e-02, 6.790125e-02, -8.147860e-02, 3.873143e-02, 7.875183e-02, 8.778293e-02, 8.365453e-02, -7.436340e-02, -2.478503e-02, -3.200845e-02, -5.454747e-02, 1.981086e-02, -9.181624e-02, 5.044317e-02, -6.882279e-02, 7.183364e-02, -2.536066e-02, 3.348414e-02, 5.742169e-02, 2.913229e-02, -1.231077e-02, 1.515609e-02, -2.180165e-02, 1.153585e-02, 1.004663e-02, 2.989129e-02, 4.297315e-02, 7.542633e-02, 7.131951e-02, 3.265449e-02, -6.402078e-02, -1.155699e-02, 3.289600e-02, 8.702539e-02, 4.484100e-02, 9.774767e-02, 9.882953e-03, -3.348783e-02, 3.850051e-02, 2.155497e-02, -5.381465e-02, -6.067060e-02, 6.958932e-02, 3.885161e-02, -1.893914e-02, -6.490128e-02, -2.760621e-02, 8.149815e-02, 6.071803e-02, -5.686733e-02, 8.697949e-02, 5.123764e-02, 2.744121e-02, 4.689853e-02, -4.534359e-02, -1.793936e-02, 1.561759e-02, -1.235637e-01, 6.390174e-02, 7.404497e-02, -2.054647e-02, -4.760355e-02, 4.455039e-03, 8.558995e-02, 4.030552e-02, -9.604985e-02, 3.451510e-02, -6.109359e-02, -2.053714e-02, 1.074529e-01, -4.628669e-02, -6.378795e-03, 5.088408e-03, 9.200656e-02, 6.766027e-02, 1.439737e-02, 9.400088e-02, 6.057936e-02, 9.197331e-02, -6.696579e-02},
{-2.635186e-01, -4.742675e-02, -8.417255e-02, 1.169748e-01, -2.363746e-02, 3.026500e-03, 4.820354e-02, -2.734937e-02, -6.310371e-02, -1.643459e-02, 6.044500e-02, -3.786624e-03, 5.401354e-02, -9.728729e-03, 6.603575e-02, -5.632054e-02, -6.865810e-02, -4.934973e-02, 7.451386e-02, 6.207373e-03, 1.182173e-01, -6.500347e-02, -7.890482e-02, 6.169883e-02, -4.941570e-02, -7.854894e-02, -6.478048e-02, 5.066635e-02, 8.234522e-02, -3.671685e-02, -6.763701e-02, -2.921973e-02, -1.462142e-01, -1.006321e-01, 6.760335e-02, -8.299427e-02, 9.015917e-02, 4.321602e-02, -2.247785e-02, -7.310032e-02, 3.339678e-02, -6.639587e-02, -1.100233e-01, -4.413725e-02, -2.636280e-02, 2.102778e-02, -1.183820e-02, -2.958439e-02, 1.249425e-01, 1.472095e-01, 8.197676e-02, -7.733151e-02, -5.462777e-02, 7.388871e-02, -5.982435e-02, -9.972067e-03, 3.179631e-02, 1.239157e-01, 3.004323e-02, -1.482866e-01, 6.894153e-02, -4.992960e-02, 2.263249e-03, 3.862187e-02, -8.237088e-02, 1.025015e-03, 1.557625e-02, 6.989885e-02, -1.010019e-01, -3.709749e-02, 1.607315e-02, 7.795560e-02, -7.433775e-02, -8.482636e-03, -2.785974e-02, 3.704064e-02, -3.936350e-02, 5.538900e-02, -4.190684e-02, 1.338966e-01, 7.025106e-02, 8.315019e-04, -1.005912e-03, -1.188483e-02, -5.141829e-02, -3.340298e-02, -2.518720e-02, -6.589155e-02, 1.067721e-01, 1.206100e-01, -1.717414e-02, 4.905798e-02, 4.786171e-02, 5.271503e-02, -9.677927e-02, -4.366437e-02, 3.861370e-02, -1.500842e-01, 5.482867e-03, -1.435790e-03, 3.839444e-02, -1.753733e-01, 6.854554e-02, 7.232349e-02, 4.221809e-02, 8.728036e-02, -1.101394e-01, 3.277604e-02, -8.723759e-02, 3.942478e-02, 9.003295e-03, -4.610353e-02, 4.501023e-03, -5.369700e-02, -4.815268e-02, 7.458266e-02, -5.114621e-02, 5.403717e-02, -5.704549e-02, -7.475007e-02, 3.308989e-02, 1.433423e-02, 2.275918e-02, 9.790128e-02, 1.004850e-01, 2.616955e-03, 9.868920e-02, 5.510995e-02, -3.329005e-02, -4.892509e-02, -5.132467e-02, -1.093657e-02, 7.458674e-02},
{1.582400e-01, -1.032995e-01, -3.739567e-02, 1.157854e-02, -9.188053e-04, 3.660861e-02, 5.726156e-02, 1.119756e-02, -6.631896e-02, 3.808636e-02, -9.665127e-03, 8.914717e-02, -1.011744e-01, -2.584740e-02, -5.617698e-02, 7.926074e-02, 3.293134e-02, 2.584102e-02, 2.290347e-02, 5.009604e-02, -1.168660e-01, -6.545094e-02, 6.621093e-02, -1.095967e-01, -5.301856e-03, -5.476831e-03, 5.850553e-02, 8.404638e-02, 4.305898e-02, 8.052233e-02, 8.648879e-02, -7.570909e-02, 9.079932e-02, -3.667211e-02, -4.242863e-02, 7.030556e-02, 1.081611e-02, -7.260520e-02, -8.293387e-02, -3.742203e-02, -4.678345e-02, -6.980326e-03, 6.160852e-02, 5.620041e-02, 6.087549e-02, -1.014462e-01, -5.535937e-02, 9.330710e-02, 1.033045e-03, -1.378417e-01, -5.867331e-02, 7.656618e-02, 1.637763e-02, -1.311619e-02, -3.606571e-02, 2.790785e-02, -6.416072e-02, -6.921723e-02, -3.876309e-03, 4.246387e-02, -2.110299e-02, 6.201214e-02, 1.181360e-02, 4.398317e-03, 7.337882e-02, -9.372050e-02, -4.623162e-02, -6.712008e-02, -5.048518e-03, 2.182644e-02, -4.377703e-02, 6.478086e-02, 3.047361e-02, 1.933332e-02, -9.774412e-03, 4.947220e-02, 8.886742e-02, 3.735309e-02, 5.462197e-02, -2.719344e-03, -2.766437e-02, -5.539924e-02, 9.143626e-03, 6.784785e-02, 3.357112e-02, -6.985138e-02, 1.662004e-02, 2.485564e-02, 4.429388e-02, 3.585595e-03, 7.403558e-02, -1.180252e-01, -8.684555e-03, -3.840047e-02, 9.516117e-03, -5.402982e-02, -1.138335e-01, -5.511788e-03, -5.510304e-02, 9.032819e-02, 2.571173e-02, 3.242917e-02, -7.922373e-02, -5.484602e-02, -6.714900e-02, 5.389807e-02, -8.427764e-03, -7.305320e-02, 7.387900e-02, -1.559004e-02, -2.433609e-02, 1.671946e-02, -2.452101e-02, -7.299215e-02, 7.456640e-02, 5.861697e-02, -4.215682e-02, 7.779325e-02, 5.373320e-02, 1.452089e-02, -1.725993e-02, 7.037121e-02, 5.708057e-02, 7.224105e-02, 4.918564e-02, 7.608593e-02, 7.100781e-03, -1.428792e-01, -7.066652e-02, 5.670154e-02, 5.340009e-02, 4.057478e-03, -8.541995e-02},
{6.874757e-02, -4.478712e-02, 4.388586e-02, 1.029323e-01, -2.115836e-01, 3.641341e-02, 5.757668e-02, -8.911953e-02, -8.110865e-02, 2.543479e-02, 2.205079e-02, 8.688186e-02, 1.891321e-02, -1.193824e-02, -3.775910e-02, -5.418725e-03, -2.574738e-02, 4.147842e-02, 1.578908e-02, -9.116982e-02, -4.028651e-02, 7.914614e-03, 1.038212e-01, -1.334645e-01, 7.753691e-02, -1.420268e-02, -3.078436e-02, -2.076629e-02, 1.898907e-02, 3.424459e-02, -1.092150e-02, 3.159236e-02, -6.895494e-02, 1.244085e-01, 8.263480e-02, -8.502898e-02, 3.905471e-02, -7.047183e-02, -3.654464e-02, 4.515956e-02, 1.017549e-01, 4.450807e-02, 6.782888e-02, 3.944919e-02, -4.116910e-02, 4.703951e-02, -1.207593e-02, 3.823002e-02, -2.425908e-02, -5.629949e-02, 5.422310e-02, -2.416211e-02, 6.399092e-03, 1.178286e-02, 4.965827e-03, 1.986326e-02, -3.796514e-02, -1.243858e-01, 2.673831e-02, -2.286517e-03, 1.020317e-02, 6.769472e-02, -1.647882e-02, -4.895521e-02, 6.347899e-02, -5.165727e-02, -2.476611e-02, -4.137589e-02, 5.296587e-02, -9.219729e-02, 7.063693e-02, -7.656714e-02, -5.227460e-02, 3.577608e-03, -6.778185e-02, 3.652131e-02, 3.853781e-02, 4.709999e-02, -7.219648e-02, 3.767205e-02, 1.774558e-02, -9.086762e-02, -5.548712e-02, 2.585976e-02, 5.647179e-02, -5.399861e-02, -7.864637e-02, -2.437231e-02, 4.431163e-03, -4.746496e-02, 7.074413e-02, -7.598628e-02, -6.270956e-02, -8.242331e-02, -6.394490e-02, -5.739246e-02, -6.081976e-02, -9.310233e-02, 7.308971e-02, -4.670824e-02, 1.058299e-01, 3.630945e-02, 2.667577e-02, -7.945331e-02, -4.965387e-02, 6.336303e-02, 7.960418e-02, -9.581145e-03, -2.057455e-02, 3.228765e-03, 7.902040e-02, 1.114199e-01, -1.095389e-01, -6.869028e-02, 7.071421e-02, -6.266921e-03, 4.362142e-02, 4.810902e-02, -1.023693e-01, -4.235486e-02, -5.470699e-02, 2.825207e-02, 4.098457e-02, -4.461882e-02, -2.886636e-02, 3.185720e-02, -8.199045e-02, -2.002414e-02, -1.075370e-02, 5.333832e-03, -3.461444e-03, -5.121801e-02, 1.833206e-02},
{1.128627e-01, 7.015505e-02, -6.077529e-02, -1.318735e-01, 4.485737e-02, -6.002891e-02, -1.627003e-02, 4.164516e-03, -1.966784e-02, 3.231135e-03, 9.079806e-02, 7.379716e-03, -3.489157e-02, 3.923217e-02, -1.004897e-01, -4.627485e-02, 2.736676e-02, -5.237336e-02, -1.078917e-01, -7.113280e-02, -1.225462e-02, 7.337015e-02, 6.653599e-03, 3.234598e-02, 9.392131e-02, 3.833914e-02, -8.931246e-02, -5.488192e-02, 7.984228e-02, -4.172756e-02, -4.011179e-02, 7.356245e-02, -2.998959e-02, -1.036638e-02, 3.080052e-02, 3.040731e-02, 4.642513e-02, 6.950132e-02, 8.020774e-02, 3.268033e-02, -7.434788e-02, 4.410808e-02, -1.327934e-01, 3.293063e-02, 1.787199e-02, 4.927776e-02, -9.566220e-03, -5.845126e-02, 7.296436e-02, -2.599427e-02, 2.149565e-02, 3.836334e-02, -9.157434e-02, 8.463024e-02, -2.537275e-02, 8.877828e-02, 3.221095e-02, 9.788507e-03, 5.316632e-02, -2.290979e-02, 7.070771e-03, 1.484144e-02, 5.649891e-02, 1.445748e-02, -7.566035e-03, 1.172152e-02, -7.382355e-03, -7.145807e-03, 3.394353e-02, -5.606780e-04, -3.659352e-02, -2.555383e-02, 4.929650e-03, -1.908202e-05, 1.484054e-02, 3.912500e-02, -4.489143e-02, -4.579237e-02, -2.081407e-02, -4.191182e-03, -4.959002e-02, -5.935195e-04, 1.959897e-02, -9.881091e-02, 9.539920e-02, 3.474296e-02, 3.070568e-03, -2.544113e-02, -3.186094e-02, 1.185320e-02, 5.674420e-02, -2.392853e-02, -6.983586e-02, -5.929705e-02, 4.391390e-03, -8.354253e-02, 3.157993e-03, -6.316545e-02, -8.624940e-02, 3.262835e-02, 1.173471e-01, -1.944472e-02, 6.699228e-02, -3.791100e-02, 1.802952e-02, -7.346801e-02, 1.060231e-01, -2.143371e-02, 1.173792e-02, 6.576711e-02, -6.004889e-02, 5.564604e-02, -4.439359e-02, 1.692042e-02, 5.371137e-02, 3.323987e-02, 8.496022e-02, -5.206093e-02, -7.839528e-02, -5.971450e-02, -2.143745e-02, 7.412884e-02, -1.601749e-02, 6.334513e-02, 5.227327e-02, 7.861441e-02, -7.612830e-02, -9.057298e-02, -4.386689e-02, -4.207912e-02, 3.802694e-02, 9.314560e-03, -8.955809e-02},
{1.972972e-01, -1.399481e-01, 2.560450e-02, -1.022831e-01, -1.859929e-02, -1.419127e-01, 8.301862e-03, 4.035194e-02, 1.517574e-02, -5.869103e-02, 1.196279e-01, -2.168012e-01, -6.009902e-02, 5.043516e-02, 1.727145e-02, -2.406247e-02, -1.249863e-01, 8.370903e-02, 1.058507e-01, 1.300379e-01, 8.647274e-02, -5.510420e-02, -4.934153e-02, 4.322777e-02, -3.269109e-03, 9.047083e-03, -1.770285e-01, -9.093553e-03, -3.454477e-02, -1.015262e-01, -4.299041e-03, 1.018226e-01, -1.205080e-01, -1.585463e-02, 1.768139e-03, -3.434319e-02, 1.358017e-01, 8.425341e-03, 6.170533e-02, -8.438555e-02, 1.050386e-01, 1.885570e-01, -2.081643e-01, -1.947695e-01, 1.388640e-01, 3.342864e-02, -9.969053e-02, 2.355411e-02, 1.188638e-01, 3.742115e-03, -8.588302e-02, -1.345834e-01, 3.654075e-02, 1.321586e-01, -5.106630e-02, 1.056626e-01, -4.278467e-04, 1.721742e-02, 6.338460e-02, -2.552457e-01, -1.360621e-01, -1.028690e-01, 4.837468e-02, 1.489272e-01, -7.745512e-02, 1.614438e-01, 9.095275e-03, -8.159202e-02, -3.560761e-02, 8.268225e-02, -3.174379e-02, -6.804053e-02, 1.566701e-01, 8.497215e-02, 1.453702e-02, 4.170469e-02, -9.205382e-02, 5.565513e-03, -1.244992e-01, 9.675213e-02, -1.585942e-01, -1.440713e-01, 7.473582e-02, 1.015885e-01, 4.449237e-02, -1.247228e-03, 5.259438e-02, 6.084742e-02, 8.009213e-02, 1.166455e-01, -8.428463e-02, -9.010124e-02, -4.074685e-02, 5.530602e-02, -5.936192e-02, 4.316293e-02, -1.091145e-01, 2.220257e-01, 1.022817e-01, 7.347267e-02, 4.496279e-02, -7.269296e-02, -1.841834e-01, -6.026554e-03, -8.015200e-02, -7.711762e-03, -1.049303e-01, -1.218475e-01, -7.907085e-02, 6.137591e-02, 2.882997e-02, -1.853567e-03, -8.816005e-02, -1.289464e-02, 1.439930e-02, 1.836724e-01, -1.137860e-01, 6.553392e-03, -1.638591e-02, -4.323300e-02, 1.280192e-01, -1.212827e-01, -1.769104e-02, -8.966444e-02, 6.014015e-02, 8.436622e-02, 5.358828e-02, 7.653508e-02, -1.969583e-02, -9.141099e-02, 1.632792e-01, -1.554438e-01, 1.232028e-01},
{-7.021938e-02, -8.666063e-02, 8.671003e-02, 5.818842e-02, -2.461312e-01, 9.781463e-02, -4.416369e-02, 9.749271e-02, 4.924805e-02, 9.904799e-03, -4.448089e-02, 1.125699e-01, 1.265729e-01, 7.571883e-02, 1.347560e-02, 7.442069e-02, -9.848706e-02, -1.059622e-03, -5.320171e-02, -3.392428e-02, 4.550370e-02, -7.773171e-02, -7.853970e-03, 1.090496e-01, 3.872858e-02, -3.998730e-02, 3.479492e-02, 7.488064e-02, -1.961715e-02, 1.000481e-01, 5.080757e-02, 5.775903e-03, 8.327822e-02, 1.012632e-02, 6.724676e-02, 2.567391e-02, 6.354704e-02, -1.232804e-01, -5.953193e-02, 2.948012e-02, -8.408915e-02, -4.880321e-02, 1.585605e-01, -1.001746e-01, -8.674019e-02, 4.109239e-02, 1.743125e-02, 3.036334e-02, 3.853533e-02, -8.907689e-02, -1.662472e-02, -6.390205e-02, -2.696752e-02, -4.333782e-02, -6.087751e-03, -1.396988e-01, 5.563263e-03, -4.169786e-02, 1.431373e-02, 1.299101e-01, -7.197851e-02, 2.260973e-04, -6.173214e-02, -7.838442e-02, 7.999266e-02, -9.090549e-02, -1.120385e-02, -5.578637e-02, -6.601931e-03, -8.350431e-02, 4.095436e-02, -5.309633e-02, -1.125442e-01, 3.232142e-02, -1.228339e-02, -7.449315e-02, 2.609325e-02, -7.211446e-02, 9.090945e-02, -5.747619e-02, -3.559833e-02, 7.119181e-04, 7.379176e-03, -6.393282e-02, -7.940241e-02, 9.556964e-02, -2.726899e-02, 2.554634e-02, 3.518360e-02, -7.770485e-02, 9.358724e-02, -8.447616e-04, -1.107925e-02, -1.384539e-01, -5.457376e-02, 8.589048e-02, -2.168793e-02, -1.595866e-03, 3.454645e-02, 2.936750e-02, -6.464674e-02, 7.233001e-02, -1.154008e-02, 6.394139e-02, -9.230331e-02, 1.106805e-01, 3.070663e-02, -1.768005e-02, -6.286520e-02, -2.369682e-02, -2.506017e-02, -2.206223e-02, 1.892726e-01, 4.050075e-02, 2.721620e-02, 7.003744e-03, 9.160825e-02, 5.506360e-02, 2.732740e-03, 5.441904e-02, -7.821126e-02, 2.387048e-02, -1.241395e-02, 8.544129e-02, -1.074957e-02, -7.631338e-02, -6.471784e-02, 1.281427e-01, -9.076531e-03, 3.753331e-03, 3.765741e-02, 7.616705e-02, 3.252370e-03},
{-1.819676e-01, -1.196175e-01, 3.110853e-02, 6.638834e-02, 3.735063e-02, 4.431740e-02, -6.336013e-03, -4.991194e-03, 2.361516e-02, 1.411705e-02, -1.146087e-03, -3.240385e-02, -3.110366e-03, 1.216242e-02, 4.595071e-02, -3.613286e-02, -1.059652e-01, -6.883220e-02, -7.906822e-02, 8.599261e-03, 1.385088e-01, -5.966577e-02, -4.763182e-03, 4.537306e-02, 4.313637e-02, 9.538092e-02, -5.849804e-02, 1.000329e-01, 8.025155e-03, 2.723102e-03, 4.027856e-03, -6.650502e-02, -8.443862e-02, 9.507247e-02, 7.031957e-02, -5.858520e-03, 2.303718e-01, 1.447731e-02, 1.463249e-02, 5.936227e-02, -5.666088e-02, 7.038012e-02, -1.050082e-01, 2.633732e-02, -3.871309e-02, -4.456041e-02, -5.524440e-02, -6.468716e-02, 1.051965e-01, 7.599360e-02, -2.407855e-02, -7.084696e-02, -3.650614e-02, -9.566123e-02, -3.873043e-02, -3.732543e-02, -3.099804e-02, 1.339998e-01, 3.938067e-02, -6.596084e-02, -4.255189e-02, -1.791904e-02, 1.233285e-02, 7.372519e-03, 2.388272e-02, 1.620909e-03, 4.638078e-02, -8.727973e-03, -9.295626e-02, 3.133952e-02, 4.987535e-02, 3.764897e-02, 1.357987e-01, 8.234072e-03, 6.791472e-02, -2.383699e-02, -1.239796e-01, -6.386967e-02, 8.198150e-03, 8.662093e-02, -6.731061e-02, -1.332661e-01, -5.197766e-02, -1.821353e-02, -3.769140e-02, -8.673565e-03, -4.662675e-02, -4.256197e-02, 3.716062e-02, 6.865856e-02, 1.413235e-02, 7.089468e-03, -1.000739e-01, 7.750512e-02, -1.734194e-01, 1.926599e-02, -3.248608e-02, 1.811464e-01, -2.625095e-02, 2.147143e-02, 9.920025e-02, 3.350332e-02, -1.239278e-01, 2.829112e-02, -5.036670e-02, -4.826501e-03, -1.588524e-02, 5.253330e-02, 1.902970e-02, 2.668248e-03, 1.048284e-01, -3.188823e-02, 1.581309e-02, 8.136791e-02, -5.071004e-02, -1.010096e-02, -5.378024e-03, 2.773413e-02, -8.480705e-02, 6.019463e-02, 4.191278e-02, 6.084205e-02, -1.777272e-02, -7.223616e-02, 1.067639e-01, -6.009011e-02, 5.971534e-03, 1.191258e-01, 2.586705e-02, -4.514983e-02, 3.244295e-02, -1.188966e-01, 3.798507e-02},
{-9.141667e-02, 1.415964e-01, -5.779796e-02, -2.452896e-02, -1.872924e-02, -8.797555e-02, -1.139091e-01, 7.987376e-02, -7.652687e-02, 3.326559e-02, -7.063895e-02, -5.855221e-02, -4.535608e-02, -5.172299e-02, -4.392878e-02, -9.996318e-02, -1.005922e-01, -4.340467e-02, -1.756267e-02, 7.732110e-03, 7.923207e-02, -3.842154e-02, 8.226494e-02, -1.336695e-01, -6.737864e-02, 4.316207e-02, 1.686393e-01, -1.018370e-01, 2.688712e-02, 5.305545e-02, -7.822240e-02, 3.065612e-02, -2.328279e-02, -8.519388e-02, 5.437301e-02, -6.560013e-02, -1.529587e-01, 1.564336e-02, -1.733624e-02, -7.321382e-03, -3.321303e-02, -6.519462e-02, -2.979265e-02, 1.611079e-01, 1.047187e-01, 6.104007e-02, -3.188017e-02, -1.246625e-01, -8.181271e-02, 5.169899e-02, -1.464646e-02, -2.832804e-02, 9.578367e-02, -7.296948e-02, -3.186585e-03, 3.298398e-02, 8.098554e-02, -1.152889e-01, -6.370440e-02, 6.516861e-03, 6.130014e-02, -3.299346e-03, 1.495615e-02, 4.529662e-02, -7.536473e-02, 4.956511e-02, 9.607474e-02, -1.112583e-01, -9.355409e-02, 1.710821e-01, 1.148418e-01, 8.855017e-02, 1.676905e-02, 1.144674e-01, -6.813295e-02, -4.697622e-02, -3.036555e-02, 8.190114e-02, -1.053114e-01, -5.356360e-02, 1.486361e-02, -4.274599e-02, -1.128428e-02, -2.708901e-02, -1.153876e-01, -4.327295e-02, 3.262921e-02, 1.153248e-01, 7.807171e-02, -2.933285e-02, 5.135909e-02, -3.180101e-02, 5.743171e-02, -2.050818e-03, 5.337696e-02, 2.325338e-02, -2.309868e-02, -6.748009e-02, -3.654377e-02, -7.598899e-02, -8.353684e-03, 1.964879e-01, -1.028888e-02, -2.813682e-02, 7.390598e-02, -1.074779e-01, -6.244934e-02, 5.550318e-02, -1.649175e-02, 1.099703e-01, -2.392840e-01, -1.138833e-02, -1.041887e-01, 1.396745e-02, 4.528536e-02, 8.190466e-02, -9.409071e-02, 1.063287e-01, 1.520673e-02, -5.618583e-02, -3.530968e-02, 4.592908e-02, 8.081504e-02, -1.076397e-01, -1.580683e-02, -2.188489e-02, -4.453866e-02, -1.057289e-01, 7.787133e-02, 7.418835e-02, -1.226260e-02, 6.286971e-02, 4.264085e-02},
{-1.581498e-01, -6.093380e-02, 8.633155e-02, -5.652384e-02, 1.003849e-02, -1.026765e-01, 3.967547e-02, 3.072881e-02, 1.626585e-02, 5.958463e-02, 6.301045e-02, -6.171637e-02, -1.071300e-02, -3.990813e-02, 6.323975e-02, -2.479801e-02, -1.022333e-01, 8.224238e-03, -1.687840e-02, -2.334097e-02, 6.188939e-02, -1.005986e-02, -7.063164e-02, 9.123958e-02, -3.662624e-02, -6.421634e-02, 8.612872e-02, 1.065624e-02, -5.894849e-02, 1.778340e-02, 4.960387e-02, 7.351606e-02, -8.017823e-02, 8.659495e-03, -6.800134e-02, -5.625387e-02, 1.718562e-02, -7.224628e-02, -1.309755e-02, -1.015364e-02, -8.450542e-02, 4.340697e-02, -3.027222e-02, -5.773733e-02, -3.467860e-02, 9.666841e-02, 3.984267e-02, 2.888959e-02, 4.733483e-02, 2.229893e-02, 7.114120e-02, -6.615295e-03, 5.237850e-02, -9.178773e-03, 3.028209e-02, -9.283395e-03, 5.422335e-03, 1.493061e-01, 2.779305e-02, 5.151873e-02, 5.375140e-03, 1.553225e-02, -8.089576e-02, 8.478424e-02, -5.522877e-02, 1.607673e-02, 7.571246e-02, 2.918008e-02, 3.293042e-02, -2.466287e-02, 2.082334e-02, -3.235360e-02, 9.373646e-02, 5.719173e-02, 7.102893e-02, -3.603988e-02, -1.056478e-01, -7.015523e-02, -4.454805e-02, 1.277796e-01, -6.686585e-02, -3.743211e-02, 1.508292e-02, 3.403577e-03, 5.538288e-02, -6.392073e-02, 8.386678e-02, 4.096983e-02, -8.438946e-02, 2.053431e-02, -3.268201e-02, 5.415026e-02, -1.769235e-02, 3.307491e-02, -7.637127e-02, 5.786109e-02, -3.932301e-02, 7.880363e-02, -1.329839e-02, 9.744639e-02, -8.458261e-02, -1.006450e-01, 1.016541e-02, 4.178358e-02, 7.621747e-02, -9.950403e-03, 1.002047e-03, -1.601413e-02, 2.990654e-02, -3.060837e-02, -1.316711e-01, -8.094501e-02, 1.458810e-02, 7.146448e-03, -4.921752e-02, -6.441978e-02, -7.916059e-02, 4.980154e-02, -1.023102e-02, 7.107066e-02, -4.333644e-02, -8.654439e-02, -4.222257e-02, 3.439920e-02, -3.453749e-02, -4.270104e-02, -3.173956e-03, 1.867419e-01, 5.905283e-02, -2.313026e-02, 4.335627e-02, 1.207257e-02, 6.385253e-02},
{1.475844e-01, 1.721822e-02, -8.724528e-02, 5.281059e-02, -6.884072e-03, 2.302623e-02, 4.320530e-02, -6.988832e-02, -6.703104e-03, -1.102284e-01, -2.740972e-02, -2.281887e-02, -4.639199e-02, 4.447523e-02, -6.729359e-02, 1.942585e-02, 9.218694e-02, -3.616061e-02, 1.029910e-02, 2.117496e-03, 2.329133e-02, -2.243004e-03, -7.959040e-02, 6.279297e-02, 6.024050e-02, -2.142983e-02, 6.473913e-02, 9.393086e-02, 7.580859e-02, 2.511442e-02, 4.634356e-02, -7.126100e-02, 9.353098e-02, -8.880604e-03, 5.429085e-02, 9.047918e-02, 5.161712e-02, 8.595709e-02, 5.290812e-02, 2.667625e-02, -2.452217e-02, -1.113990e-01, -1.062249e-01, -1.229426e-01, -4.844564e-02, -1.709683e-02, 2.366869e-02, 7.989996e-03, 1.002221e-01, -8.182397e-02, -4.973108e-02, -9.861203e-04, -3.924838e-02, 4.839813e-02, 1.052916e-01, -1.596364e-01, 5.770854e-02, -5.226148e-02, -1.278774e-01, 5.691310e-02, 7.264195e-02, 3.620631e-02, -4.401897e-02, 4.304516e-02, 1.127463e-01, -1.142416e-01, 2.214967e-02, 1.960809e-02, 1.027438e-02, -6.538329e-02, -1.116929e-01, 1.055996e-02, 5.914219e-02, 4.832652e-02, 1.139417e-02, -1.822742e-02, 1.436705e-01, -6.534343e-02, 3.528190e-02, -3.461028e-02, -9.638513e-02, 4.947310e-02, -1.043742e-01, -1.768428e-02, 2.249527e-02, -8.173566e-02, -6.480304e-02, -3.772931e-02, -9.370265e-02, 2.963926e-02, 2.771466e-02, -4.503367e-02, 2.074693e-02, -9.014107e-03, 4.059703e-02, -3.724668e-02, 7.071701e-02, -3.428232e-02, -1.469261e-02, -4.077082e-02, 9.708916e-02, -8.505857e-02, 6.354806e-02, 6.680392e-02, -4.200559e-03, -1.120496e-01, 6.806156e-02, 6.361222e-02, 8.045892e-02, -7.738046e-02, -9.204444e-03, -6.851494e-02, 4.635579e-03, 1.049250e-01, -4.447812e-02, 2.544909e-03, 1.843478e-02, 2.471354e-02, -1.035062e-01, -1.230891e-01, 6.664224e-03, 8.133431e-03, -3.730098e-02, 7.405251e-02, -8.270834e-02, 3.628834e-02, -6.576412e-02, -9.656937e-02, 4.898524e-02, 3.212199e-02, -1.184976e-01, -6.734472e-04, -7.060748e-02},
{-7.262576e-02, 1.279623e-01, -6.220500e-03, -1.257868e-01, 3.696979e-01, -5.641954e-03, 1.055206e-01, 1.714886e-03, -7.864587e-02, -5.833864e-02, 3.629784e-02, 1.536015e-02, 4.913388e-02, -8.505983e-02, 5.615643e-02, -2.707767e-04, 1.186338e-01, 1.135837e-02, -4.723149e-02, -4.803656e-02, -9.094547e-03, -1.244895e-01, 2.823850e-02, -1.626481e-02, -1.046823e-01, -6.391875e-03, -6.594198e-03, -8.424586e-02, -5.564113e-02, -1.070719e-01, -8.458545e-03, -1.564776e-02, 2.385251e-02, -1.466349e-02, -9.735686e-02, 1.481803e-02, -5.178331e-02, 4.798737e-02, 8.622048e-02, -8.495348e-02, -6.571764e-02, 6.126242e-02, 2.662850e-01, 2.998587e-01, 8.985548e-03, 1.030407e-02, 1.040485e-01, -1.239534e-02, -1.614462e-01, -2.007286e-02, 9.090685e-02, 9.428588e-02, 3.176101e-02, 5.009553e-02, 9.815104e-02, 7.037603e-02, 6.402756e-02, 6.145629e-02, -2.562561e-02, 3.132073e-02, -3.631703e-02, -8.941975e-02, -1.256301e-01, -1.060609e-01, -1.027851e-03, -8.438305e-02, -5.780446e-03, 4.528988e-02, 9.633621e-02, 1.652188e-01, 6.458417e-02, 2.311340e-02, -1.726122e-01, 6.059100e-02, -7.375556e-02, 3.141830e-02, -9.521989e-03, -1.160440e-02, 7.766490e-02, -2.259118e-02, 1.581845e-01, 8.121558e-02, -6.073588e-03, 4.302805e-02, -1.669176e-02, 3.628543e-02, -2.906686e-02, 9.721347e-03, -6.942447e-02, 6.572798e-02, 2.146201e-04, 1.353048e-01, 1.105507e-01, -5.825464e-02, 3.302889e-04, 7.437715e-02, -9.047054e-02, -1.053895e-01, 6.784825e-02, -4.407711e-02, 5.925269e-02, 9.432930e-03, 1.169742e-01, -1.046872e-01, -6.239874e-02, -3.567576e-02, 5.420035e-02, 6.105270e-02, 7.730038e-02, -7.861517e-02, -2.864334e-02, 4.930805e-02, 2.248796e-01, 2.568617e-03, -8.461485e-02, 4.986690e-02, 4.415657e-02, 1.130437e-01, -6.321722e-02, -4.768597e-03, -5.129616e-02, 7.556396e-02, -3.974843e-02, -9.565017e-02, 7.124585e-02, -8.010670e-03, 1.137482e-01, -1.266928e-01, -6.801666e-02, 1.438004e-01, -1.117328e-01, 7.614832e-02, 3.696392e-03},
{-1.604776e-01, 5.268081e-02, 7.580945e-02, -1.042196e-01, 6.265534e-03, -8.118927e-03, 7.153429e-03, 2.757739e-03, 8.585116e-02, -7.061228e-02, 4.293028e-02, -2.159726e-02, 3.258959e-02, 6.115931e-02, -5.515851e-02, -1.460781e-02, 1.681744e-02, -5.866598e-02, -3.172536e-03, -6.850409e-02, 1.087514e-01, -9.206951e-03, -6.090244e-02, 7.861203e-02, 1.735156e-02, 5.344890e-02, -8.365519e-02, 4.038779e-02, 6.408019e-02, -2.629167e-03, -4.323095e-02, 1.123194e-03, 3.138268e-02, -9.228288e-03, -9.801399e-02, 2.869723e-02, 1.788649e-03, -5.703172e-02, 4.035890e-02, -5.058589e-02, -6.606575e-03, -1.197195e-01, -3.769876e-02, -1.280890e-01, 5.265908e-02, 1.995158e-02, 3.243406e-02, 7.059132e-02, -3.451504e-02, 1.237514e-01, -6.281513e-02, -3.176953e-02, 3.439855e-03, -9.247243e-03, 4.568956e-02, -2.179296e-02, -2.169722e-02, -1.960605e-02, 1.345498e-02, -3.904612e-02, -3.194315e-02, -2.477040e-02, -3.960206e-02, -1.938293e-02, 8.295225e-02, -8.292172e-02, 2.478135e-03, 5.678059e-02, -4.968391e-02, -7.341180e-02, -9.674601e-02, 6.174039e-02, -6.623771e-02, 5.239826e-02, -4.237878e-02, 6.335632e-02, -7.219791e-02, 5.863306e-02, 1.982277e-02, 2.908121e-02, -7.727236e-02, -6.484295e-02, 5.963368e-02, -7.008853e-02, -7.902986e-02, -3.152056e-03, 4.335140e-02, -3.015379e-02, 2.019361e-02, 6.508989e-02, 1.563723e-02, 1.556576e-02, 1.058566e-02, -5.263146e-02, -1.486687e-02, 8.659937e-02, 9.022257e-02, -4.766997e-02, -4.728973e-02, -5.543676e-02, -3.933151e-02, -1.058361e-01, 4.096299e-02, 9.807869e-02, 1.673490e-02, -1.563158e-02, -9.907420e-02, -3.989115e-02, -1.235782e-02, -5.343369e-02, -1.097017e-01, 6.656056e-02, -9.912081e-03, -3.306319e-02, -5.420305e-02, -3.337706e-02, 4.320504e-02, -6.046112e-02, -4.412673e-02, -2.254858e-02, -8.565273e-02, 3.724479e-02, -6.775338e-02, 6.258821e-02, 4.546910e-02, -4.385643e-02, 2.644065e-02, 1.706346e-02, -3.892586e-03, 2.468932e-02, 6.907588e-02, 8.654416e-03, -5.438652e-02},
{-1.574061e-01, -2.666613e-02, -3.325347e-02, -2.844205e-02, -9.365368e-02, -5.888983e-02, -8.213470e-02, 5.301606e-02, 4.286281e-02, 6.747498e-02, -5.563365e-02, 5.289697e-02, 1.138868e-01, 5.963825e-02, 9.914023e-02, -5.976088e-02, -1.217156e-01, -5.319149e-02, 6.706431e-03, -5.697367e-02, 3.175870e-02, 5.414963e-02, -2.761680e-02, -6.090614e-02, -9.579050e-02, -4.771762e-02, 7.304542e-02, -2.505350e-02, -6.913819e-02, 1.941616e-02, -2.175237e-02, 5.112690e-02, -1.323467e-01, -6.801424e-02, 3.986472e-02, -8.467453e-02, 1.660055e-02, -1.091445e-01, -7.104455e-02, -1.360006e-02, -2.269091e-02, 6.271976e-03, 1.829765e-02, -1.146441e-01, 2.497692e-03, -4.236202e-02, -8.310825e-02, 1.364268e-02, 5.817411e-02, 5.828374e-02, 8.210028e-02, -8.074363e-02, -6.560823e-02, -8.453639e-02, -3.024793e-02, -4.937246e-02, -6.439415e-02, 8.973105e-02, -2.643671e-02, 8.592623e-04, -1.505456e-02, -8.423727e-02, 1.432281e-02, -4.281214e-02, -2.973660e-02, -1.649066e-03, 9.492255e-02, -1.083355e-02, 1.457651e-02, 7.097914e-02, -4.586806e-02, 5.096203e-02, -1.155207e-02, -6.907402e-02, -6.129164e-02, 6.011136e-02, -7.540490e-02, -2.730198e-03, 3.138169e-02, 2.696632e-02, 7.327595e-02, -4.746567e-02, 4.903188e-02, -2.841125e-03, -6.956051e-02, 1.282954e-02, 7.246267e-02, -7.974906e-02, 7.094635e-03, 8.610061e-03, 9.200373e-03, 2.699498e-02, -1.210086e-02, 3.658895e-03, 3.260333e-02, 5.193562e-04, -3.713781e-03, -2.936743e-02, 5.320120e-02, -5.943727e-02, -8.246473e-02, -2.307724e-02, -3.943751e-02, -2.516543e-02, 7.473507e-02, 1.020950e-01, -5.294272e-02, -7.845746e-02, -9.871191e-02, 5.161858e-02, -7.083084e-02, -7.042191e-02, -2.005848e-03, 4.370049e-02, 1.467676e-02, -6.525102e-04, -4.381634e-02, 8.634897e-02, -5.099154e-03, -1.412965e-02, 6.574006e-02, -3.663474e-02, 1.034786e-01, 1.986807e-02, -1.640251e-02, -3.398316e-02, -1.242700e-02, 5.142099e-02, 4.017168e-03, 3.838804e-02, -4.169474e-02, 2.741854e-02, -3.403911e-02},
{-1.282141e-01, 9.098616e-02, 8.014484e-02, 4.090696e-02, -3.383729e-03, -6.756701e-02, -4.981263e-03, 1.101495e-01, -7.968399e-02, -3.871291e-02, -4.825205e-03, -2.935811e-02, 2.095253e-02, 1.111895e-01, 2.508282e-02, -1.587202e-02, 5.933832e-02, 1.968991e-02, 4.941869e-02, 6.842721e-02, -5.416770e-02, 4.331024e-02, -7.343177e-02, 3.681483e-02, 1.178876e-02, -8.369231e-02, 9.951602e-02, 4.965286e-02, 2.468601e-02, -5.331041e-02, 7.762016e-02, 6.750731e-02, 1.596011e-01, -1.180203e-01, -8.667264e-02, 5.256909e-02, -1.751448e-03, -6.074419e-02, -5.412249e-02, -5.226455e-02, -2.634971e-02, -1.179914e-02, 2.506751e-01, 1.748769e-01, -3.916016e-02, 9.310994e-02, -1.023306e-02, -4.389402e-02, -6.104060e-02, -2.010186e-02, -2.915587e-02, -3.533218e-02, 5.740762e-02, -2.440504e-02, 4.922697e-02, -1.962541e-02, -7.013280e-02, 6.468808e-02, 8.267242e-02, 3.456616e-02, -1.927128e-02, 8.364473e-02, 1.242423e-02, 4.027750e-02, 5.060876e-02, -4.729732e-02, 3.157018e-02, 4.820586e-02, -2.612845e-02, -5.275618e-02, -3.227673e-02, 3.067265e-02, -9.615596e-02, 3.503098e-02, -2.895949e-02, -7.098331e-02, -1.430966e-01, 3.415703e-02, 2.600096e-02, 2.409659e-02, 1.904164e-01, 1.374067e-02, 8.601513e-03, 7.144009e-02, -5.853453e-02, 4.334290e-02, -9.245864e-03, -1.309839e-01, -3.465971e-02, -5.360502e-02, 1.754331e-02, 6.364135e-02, -7.117309e-02, -2.779185e-01, -1.009671e-01, 4.853860e-02, -4.702319e-02, -1.890779e-01, 1.844628e-05, -8.227748e-02, 2.384546e-02, 5.203789e-02, -2.132601e-02, -5.275575e-02, -6.346549e-02, 1.037636e-01, 5.032562e-02, 3.148247e-02, 4.330487e-02, 2.878876e-02, -7.022527e-04, 3.917212e-02, 1.409850e-01, 6.886761e-02, -4.503550e-02, 5.994643e-02, 7.125014e-02, -5.836643e-02, -6.292715e-02, -6.457965e-02, 3.455599e-02, 4.828177e-02, 1.285593e-01, -7.427633e-02, 7.255032e-02, -1.106831e-01, 9.810428e-03, 5.248445e-02, -9.218794e-04, 2.096442e-02, -2.196618e-02, 2.907927e-03, -7.280736e-02},
{-9.596168e-02, 1.248553e-01, -1.154305e-02, -9.360768e-02, 1.543593e-01, -5.013725e-02, 8.752563e-02, -2.037661e-02, -6.350557e-02, 2.896376e-02, -5.968425e-02, 3.611099e-02, 3.539822e-02, -4.590892e-02, 5.768717e-02, -8.100164e-03, 4.222074e-02, 2.288930e-02, -9.017292e-02, -3.499939e-02, 7.888429e-02, -5.610493e-03, 3.369494e-02, 8.531185e-02, 6.307214e-02, 1.550734e-02, -4.367779e-02, 7.192899e-02, -1.977991e-02, -8.111270e-02, 3.452628e-03, -7.559676e-02, 8.981100e-02, -1.393710e-02, -1.956034e-02, -6.160579e-02, -1.679106e-02, -2.995728e-02, -6.625693e-02, -7.072547e-02, -2.084267e-02, -9.339950e-02, 8.429221e-02, 1.708736e-01, -1.289997e-02, -8.842545e-02, 8.478027e-02, -4.539108e-02, 1.780265e-02, 1.470867e-02, 2.939923e-02, -6.407231e-02, -7.418770e-02, 3.304823e-02, 4.932834e-02, 8.849382e-02, 2.474837e-03, -2.457526e-02, -1.613921e-02, 8.073556e-02, -4.192071e-02, -3.987839e-03, 4.424489e-04, 7.854063e-03, -3.961783e-02, 3.601383e-02, -6.764393e-02, 5.219347e-02, 9.577827e-02, 7.687383e-02, -3.530896e-02, 1.508710e-02, -1.169431e-01, 4.887465e-02, 5.019327e-02, 4.753983e-02, 2.517398e-02, 6.983680e-02, 2.431412e-02, 6.211399e-02, 4.183414e-02, 1.237571e-01, -2.779579e-02, -3.909229e-02, -1.163241e-03, -9.827501e-02, 6.007407e-02, -5.586822e-02, 7.502780e-02, 1.165426e-02, 7.601707e-02, 7.820495e-02, -5.929239e-02, -5.642774e-02, -5.485586e-02, -6.380559e-02, 5.028567e-02, -7.955324e-02, -3.353684e-02, -4.993790e-02, 1.119245e-03, -5.588289e-02, 5.691427e-02, 5.258682e-02, 1.783081e-02, 8.120760e-02, -5.208977e-02, 9.720042e-02, -2.693971e-02, 3.679766e-02, -6.771025e-02, 1.425396e-01, 1.112889e-01, -1.651525e-02, 2.777153e-02, 2.843061e-02, 4.633046e-03, -4.350406e-02, 5.439327e-02, 8.690658e-03, 4.346621e-02, 3.209392e-02, 4.915673e-02, 6.019981e-02, 5.268791e-02, 4.916298e-02, 1.069033e-01, -2.544752e-02, 4.674880e-02, -5.492466e-03, -3.441417e-02, -3.092897e-02, -9.906712e-02},
{6.380118e-02, -2.786678e-02, -7.053700e-02, 3.066195e-02, -1.783389e-01, -4.890529e-02, 2.513750e-02, 8.025871e-02, 6.700352e-02, -6.327824e-02, -3.028480e-02, 2.438770e-02, -5.249621e-02, -9.767530e-02, 5.758015e-02, 8.026144e-02, 9.088095e-02, 2.167594e-02, 4.863255e-02, 6.309324e-02, -6.982941e-02, -5.939853e-02, 1.044924e-01, -1.160156e-01, 8.265320e-02, -3.157091e-02, -6.861873e-02, 6.353228e-02, -7.652187e-02, -6.601275e-02, -1.006239e-02, -8.044039e-02, 9.354132e-02, -1.046633e-02, -7.354461e-04, -3.599359e-03, -2.062818e-02, 5.181464e-02, 4.006715e-03, -7.092701e-02, -4.626637e-02, -6.002828e-03, 2.131008e-01, 8.319383e-02, 1.074332e-02, 5.392469e-02, 2.351937e-03, 1.796799e-02, -5.901205e-02, -1.168178e-01, 3.894876e-02, 7.307466e-02, 9.994474e-03, -6.118206e-02, 1.019150e-01, 8.583964e-02, 1.233249e-01, 6.146733e-02, -4.727674e-03, 1.571862e-01, -3.459724e-02, -4.207201e-02, -4.410808e-03, 8.265696e-02, -2.232196e-02, -1.484312e-02, 6.117706e-02, -7.840777e-04, 9.668897e-02, 7.439761e-02, 2.958523e-02, 6.533728e-02, -2.021607e-02, 1.165667e-02, -7.468031e-02, 8.586819e-02, 6.659423e-02, -3.705821e-02, -6.764001e-03, -7.205184e-02, 1.023225e-01, 1.072644e-01, 1.435696e-02, 6.784573e-04, -6.359425e-02, 8.108032e-02, 5.355164e-02, 1.054489e-01, 8.070236e-02, -4.770883e-02, 7.751980e-02, 9.505012e-03, -1.427928e-01, 1.099417e-03, -3.246403e-02, 5.669188e-02, 2.941633e-02, -8.815493e-02, -5.889460e-02, -2.941098e-02, 7.120232e-02, -5.219192e-02, 1.030118e-01, 3.805878e-02, 4.707862e-02, 3.655384e-02, 9.675581e-03, -7.142524e-02, -2.165357e-02, 3.420627e-02, 1.331073e-01, -1.028817e-02, 7.533538e-02, -6.487818e-03, 8.281478e-02, 4.041519e-02, -3.091179e-03, -4.543846e-03, -2.925161e-02, -2.558195e-02, 8.126144e-02, -3.889280e-03, -4.948562e-03, 3.111120e-02, 3.554326e-02, 7.092411e-02, 1.407770e-02, -1.704377e-02, -3.217677e-02, -2.086178e-02, -5.963969e-02, -3.350907e-02, 6.789043e-02},
{-1.565405e-01, 4.915820e-02, -8.748304e-02, 1.651072e-01, 9.696449e-02, -8.119176e-02, -9.339011e-02, -7.429371e-02, -6.813809e-02, -4.198053e-02, 2.445294e-02, -3.815201e-02, -7.079710e-02, -5.079876e-02, 6.572392e-03, -7.580410e-03, -1.870209e-02, -2.165927e-02, -4.166577e-03, -4.428653e-03, 3.472292e-02, -9.351256e-02, 7.362624e-02, 1.291755e-01, 7.822526e-02, -1.079762e-02, 1.495334e-02, -1.311444e-02, 5.262969e-02, -9.247965e-02, 2.389569e-02, 2.410014e-02, -5.983987e-02, -5.722599e-02, -4.587952e-02, -4.260793e-02, 6.606035e-02, 1.016543e-01, -7.957666e-02, -8.949452e-02, -5.923319e-02, -4.377137e-02, 1.382396e-01, 1.234776e-01, -3.442363e-02, 8.620372e-02, -1.028441e-01, 5.467454e-02, -9.646299e-02, 1.090171e-01, 3.795153e-02, -8.440821e-03, -7.152752e-02, 3.556957e-02, 4.660333e-02, 1.433233e-02, 3.210652e-02, -8.005669e-03, 9.214643e-02, -2.542472e-02, -5.228331e-02, 1.136084e-01, -5.558809e-03, -8.879051e-02, -3.001063e-02, 1.448025e-02, -3.669855e-02, -1.396727e-02, 5.183148e-02, -8.556316e-02, 8.443099e-02, -5.628348e-02, -5.752073e-02, 5.013500e-02, -7.741691e-03, 7.178033e-03, -5.717460e-03, 5.901985e-02, -6.113305e-02, -3.410929e-02, 1.295543e-01, -3.678164e-02, -9.382945e-02, 2.917368e-02, 6.471412e-02, -6.001355e-02, 4.340596e-03, -5.454652e-02, 6.437477e-02, 9.091850e-02, -7.850184e-02, -2.074473e-02, -7.385711e-02, 6.989922e-02, 4.675827e-02, -3.540764e-02, 1.262084e-01, 8.100795e-03, -2.759989e-02, -8.020735e-02, 5.658395e-02, -4.601113e-02, -9.238925e-03, -2.507587e-02, 3.686675e-02, 1.128034e-01, 7.310482e-03, -7.699972e-02, 3.766105e-02, -8.654761e-02, 1.244021e-03, 3.390239e-02, 3.462575e-02, 4.703339e-02, 1.999353e-02, -1.025223e-02, -8.549983e-02, 8.755667e-02, 3.458424e-02, -1.625664e-03, 6.349736e-02, -6.216636e-03, 1.855832e-03, -4.515679e-02, 9.579670e-02, 7.300004e-02, -4.919282e-02, -6.440379e-02, 3.656262e-04, -2.956939e-02, -1.065285e-01, -9.926800e-02, -6.736721e-02},
{4.025168e-02, 1.474105e-02, 3.886876e-02, -1.884948e-01, 2.454191e-01, -5.661602e-02, -1.218821e-02, -1.118078e-01, -1.472683e-02, 6.922493e-02, 4.518108e-02, -7.543715e-02, 5.548891e-02, -5.611297e-02, -2.002748e-02, -5.287410e-02, -4.707053e-02, -7.634940e-02, 8.678300e-02, -4.826642e-02, 9.448818e-03, -2.398320e-02, -3.516235e-02, 4.326713e-02, 5.872068e-02, -3.965154e-02, 9.138777e-03, 1.148871e-01, 9.755930e-02, -4.665767e-03, 4.346803e-02, -4.880907e-02, -2.674002e-02, -8.951491e-02, 7.032163e-02, 7.111729e-02, 7.086431e-02, 2.548607e-02, 7.843024e-02, 7.211068e-03, 2.550149e-03, -8.551254e-02, -2.116109e-01, -1.118744e-01, 2.539024e-02, -9.287709e-03, 4.225607e-03, 8.781683e-02, 1.780360e-01, 8.518758e-02, -1.218053e-02, 9.634975e-02, 4.965959e-02, -2.945476e-02, -5.985813e-02, 5.687704e-02, 6.613544e-03, 9.391258e-02, 3.679233e-02, -2.479443e-01, -1.312165e-01, 4.132444e-02, 3.305858e-02, -1.108846e-01, 9.339016e-02, 1.006638e-01, -4.863222e-02, -4.054963e-02, -6.091106e-02, -1.710058e-01, -2.672951e-02, 1.136719e-02, 1.426980e-01, 2.775504e-02, 6.619763e-02, -4.613355e-02, -1.575060e-01, 3.550786e-02, 3.950793e-02, -1.652103e-02, -1.077051e-01, -1.353963e-02, -7.511782e-03, -2.385736e-02, 3.902182e-02, -5.094631e-02, -5.000262e-03, -1.399821e-01, 2.943737e-02, 9.416799e-02, 1.013878e-01, -1.967619e-02, 7.789628e-02, -3.861393e-02, -8.487936e-02, 2.023865e-02, -3.838610e-02, 8.006179e-02, -5.083031e-02, 8.666975e-02, -7.459526e-02, -1.188789e-01, -9.592680e-02, 2.950578e-02, 6.660169e-03, 4.540435e-02, 1.895343e-02, -3.642851e-02, -1.662086e-02, 3.646591e-02, -1.038293e-01, -4.787071e-02, -2.511700e-02, 1.648612e-02, 3.682217e-02, -2.272533e-02, -2.808766e-02, -1.552005e-02, -1.380801e-02, -6.012587e-02, 1.749630e-02, -3.243561e-02, 1.386505e-02, -1.133464e-02, -2.408223e-02, -2.872369e-02, -1.021011e-01, 8.601316e-02, -1.298476e-03, -4.088489e-02, -7.601564e-03, -3.491917e-02, -1.055193e-01},
{1.515757e-01, 2.334606e-02, -3.807095e-02, -1.202409e-01, -3.866161e-03, 1.086141e-01, 9.431335e-02, 6.839336e-03, -1.060832e-02, -4.358118e-02, -2.437293e-02, 1.349775e-01, -2.199423e-02, 4.724563e-02, -6.251810e-02, 8.679652e-02, -5.233072e-02, -3.832730e-02, -3.868133e-02, -5.149674e-02, 4.917223e-03, -1.501288e-02, 3.022034e-02, -3.087668e-02, -6.791326e-03, -4.038835e-02, 6.189806e-02, 3.470087e-02, 6.612792e-02, 8.377463e-02, 1.092339e-01, 6.979632e-03, -4.962435e-02, 8.995758e-02, -7.344098e-03, -2.922704e-02, -1.621056e-01, -8.353371e-02, 1.346950e-01, 1.062868e-02, 9.680151e-02, 5.735961e-02, 1.407131e-02, -1.219098e-01, -7.148711e-02, -5.664615e-02, 2.295007e-02, 1.061419e-01, -4.114017e-03, -6.042478e-02, -8.638675e-02, 1.298466e-01, -7.834125e-02, 4.722374e-02, 3.732874e-02, -2.158866e-02, 6.281152e-03, -7.155797e-02, -9.155922e-02, 5.262340e-02, 1.344147e-03, 3.611587e-02, -5.701797e-02, 2.909634e-02, 2.021527e-02, -8.434684e-02, -6.335850e-02, 1.630456e-02, -2.895263e-02, 2.939057e-02, -4.895784e-02, 6.172112e-02, 2.408630e-02, -6.973209e-02, -5.601075e-03, -3.302024e-02, 1.379599e-01, 1.268973e-02, -1.433523e-02, -6.045514e-02, 3.320339e-02, 8.747961e-02, -4.082561e-02, -3.243858e-02, 9.642178e-02, -9.037692e-02, 4.967009e-02, 1.884246e-02, 1.943859e-03, -3.694314e-02, 7.938989e-02, -5.281177e-02, 4.138883e-03, -1.557111e-01, -5.453713e-02, -8.579142e-03, -4.528316e-02, -1.624300e-01, -5.142619e-02, -1.447290e-03, 6.195365e-03, -3.955950e-02, -2.004598e-02, 1.452990e-02, 8.798158e-02, -2.912182e-02, 4.379398e-02, 8.928165e-02, 7.950214e-02, -2.807513e-02, -1.082964e-02, -8.550467e-03, 6.561971e-02, 5.915380e-02, -3.969914e-02, -1.319439e-01, 1.610434e-02, 4.075663e-02, -1.171767e-01, -1.074536e-01, -9.850724e-02, 6.952682e-02, 1.799282e-01, 1.514385e-01, 8.470304e-03, -1.496822e-02, -3.427914e-02, -4.626736e-02, 5.471556e-03, -4.910376e-02, -6.694759e-02, -1.842090e-02, -1.138207e-01},
{-1.142408e-01, 1.027256e-01, -1.320149e-02, -1.095921e-02, -6.142002e-02, 3.057029e-02, 6.565627e-02, 7.149261e-02, 1.897704e-02, 5.500378e-02, -1.439993e-01, 8.174411e-02, 1.536330e-02, -3.828055e-02, -4.304080e-02, -7.125174e-02, 4.521073e-02, -5.059306e-02, -6.174549e-02, 7.114398e-02, -1.884336e-02, -1.308573e-02, 2.536537e-02, -3.286082e-02, -9.245321e-02, -1.183086e-01, -4.251832e-02, -3.541346e-02, 3.987538e-02, -7.447929e-03, 7.889267e-02, 4.213147e-02, 3.150422e-02, -1.335760e-01, -1.814432e-02, -5.547645e-03, -1.741374e-02, -1.089211e-01, 1.192230e-01, -7.581177e-02, -4.792677e-02, -4.076465e-02, 7.995362e-02, -1.293135e-01, 7.676460e-02, 7.490037e-02, 1.143796e-01, 6.016634e-02, 9.034023e-02, -3.268367e-02, -1.844220e-02, 7.392389e-02, 9.883108e-03, -1.120419e-01, 1.762101e-03, 1.509142e-02, -6.236176e-03, -9.198204e-02, 4.370127e-02, -1.374030e-02, -5.761496e-02, 8.017005e-02, -5.094666e-03, -7.367590e-02, -9.105230e-02, -5.389173e-02, -6.290489e-02, -5.183553e-02, -6.005966e-02, -1.139344e-01, -1.582700e-02, -8.356050e-02, 2.113142e-02, 8.594520e-02, -2.239425e-02, 5.295097e-02, 9.230267e-02, 2.240397e-02, -2.014547e-02, -1.136811e-02, 2.450996e-02, -4.011948e-02, -5.972706e-02, 5.850647e-02, 4.032959e-02, -4.325252e-02, 4.513604e-02, -2.771915e-02, 5.875781e-02, 6.461075e-03, 8.368821e-02, 1.302216e-01, 2.412112e-02, -6.988920e-02, 3.642988e-02, 8.161867e-02, 5.274077e-02, -2.366011e-01, 7.647768e-02, -3.652766e-02, -2.594753e-02, -2.056067e-03, 3.489012e-02, -6.492391e-02, 9.244752e-02, 9.632643e-02, 3.081962e-03, 2.348164e-02, 6.768356e-02, -3.534989e-02, -7.382702e-02, 8.240578e-03, 6.794765e-02, -2.735215e-02, -7.390149e-02, 8.229006e-02, 8.895235e-02, 6.983635e-02, -3.446979e-02, 3.797446e-02, -3.942255e-02, -3.064568e-02, 4.333617e-03, -1.800737e-02, 4.412819e-02, -1.202721e-01, 1.926143e-02, 2.211200e-02, -1.000532e-01, 1.264554e-01, -3.776142e-02, 1.418868e-02, -5.468096e-02},
{4.176904e-01, -5.852150e-02, 1.320987e-01, 1.294366e-02, -8.117678e-02, 2.464318e-02, 1.065718e-01, 4.968409e-02, -2.759450e-02, -1.402813e-02, 6.101963e-02, 5.649257e-02, -4.679279e-02, -1.455954e-02, -8.715369e-02, 2.087308e-02, -3.946551e-02, 3.839460e-02, -9.256828e-02, -7.111551e-02, -9.646631e-02, 1.018170e-01, 2.937443e-02, 4.578029e-02, 3.616427e-02, -7.738165e-03, 1.599218e-01, 1.304915e-01, 7.915523e-02, 1.246874e-01, 1.608154e-01, 3.621380e-02, -1.331464e-01, 1.415801e-02, 1.957732e-01, 6.702059e-02, -1.287863e-01, 1.521833e-02, 4.390330e-02, 2.676178e-02, 1.401632e-01, -1.601572e-02, -2.943341e-01, -2.681825e-01, -8.208837e-02, -3.919318e-02, 6.281190e-02, 9.678968e-02, 9.247903e-02, -2.761211e-02, -9.152582e-02, 4.652559e-02, -2.334263e-02, -8.513174e-02, -9.743417e-03, 2.017883e-02, 8.803168e-03, -1.013896e-01, -1.077094e-01, 1.617217e-01, -4.702050e-02, -3.018629e-02, 6.969672e-02, -1.118487e-01, -1.061570e-02, -5.609450e-02, -7.644805e-02, -3.029569e-02, -3.942808e-02, 1.004698e-01, -3.387311e-02, 4.577350e-02, -1.184415e-02, -1.912732e-03, 3.453355e-02, -8.196262e-02, -4.590887e-03, -6.885918e-02, 9.563901e-02, -1.297951e-02, -1.009109e-01, -3.158726e-02, -5.299327e-02, -3.216893e-02, -4.794862e-02, -2.177331e-02, -8.508056e-03, 1.086124e-01, -6.978353e-02, -8.326633e-02, 8.367372e-03, -8.485575e-02, 6.172318e-02, 7.530549e-02, -7.581316e-03, -1.160567e-01, 4.782416e-02, 1.242200e-01, -2.653781e-03, -1.029764e-02, 8.343580e-02, 1.020567e-02, -4.047171e-02, -5.660172e-02, 1.342859e-01, 4.376164e-03, 2.978309e-02, 6.894124e-02, 1.054343e-01, -2.832934e-02, -1.168158e-01, -9.304945e-02, -8.475503e-02, 2.575369e-02, -8.082678e-02, -4.462103e-02, 2.610694e-02, -3.938867e-02, -1.538031e-02, -8.993399e-02, -2.615402e-03, 8.458377e-02, 1.986954e-02, 8.501839e-02, -8.813505e-02, 2.030769e-02, -5.207662e-03, 2.669854e-02, -3.837841e-02, -7.442967e-02, -6.048603e-02, 4.985358e-02, -1.026476e-01},
{-8.860338e-02, -1.127983e-01, 9.983035e-02, -8.866262e-02, 1.694756e-01, 9.958927e-03, -9.850307e-03, -5.583141e-02, 3.778705e-02, -9.380623e-03, 8.365665e-02, -8.536675e-02, -6.134855e-02, 7.061560e-02, 4.741765e-02, 4.982436e-02, -9.913840e-02, 2.540231e-02, 8.350060e-02, -3.186338e-02, -4.625290e-02, 3.913778e-03, 2.190145e-02, -4.153683e-02, -4.136708e-02, -2.434588e-02, -1.071561e-01, 4.397175e-02, 3.939442e-02, -8.439459e-02, -7.658187e-02, -6.429900e-02, -1.412896e-01, -4.087681e-02, 7.135062e-02, -5.261092e-02, 8.914096e-02, 2.476307e-02, -4.463841e-02, -6.952842e-03, 2.940452e-02, 6.465943e-02, -2.858880e-01, 2.209198e-02, 6.575639e-02, 3.646133e-02, -9.030508e-02, 1.979683e-03, 1.181767e-01, 6.779727e-02, 2.799796e-02, -9.026558e-02, 7.543919e-04, -8.981001e-02, 4.204576e-02, 3.933375e-02, -3.495917e-02, 1.180314e-01, -5.032314e-02, -1.881193e-01, -6.100364e-02, -6.858750e-02, 5.053115e-02, 5.691378e-02, -5.124986e-02, 5.837932e-02, -3.776871e-02, -8.984021e-02, 3.225863e-02, -2.477704e-02, 8.100420e-02, 7.176070e-03, 4.458772e-02, 2.689609e-05, -3.497918e-02, -3.392004e-02, -1.095258e-01, 1.915279e-02, 4.407397e-02, 9.421641e-02, -9.665281e-02, -1.199224e-01, 2.904106e-02, -2.980872e-02, -3.271585e-02, 1.201695e-01, 8.754039e-02, -4.149677e-02, -1.198349e-02, 4.775386e-02, -4.996834e-02, 7.203538e-03, -7.124096e-02, 1.345346e-01, -4.283148e-02, -1.468371e-02, -9.647083e-02, 1.792195e-01, -3.186965e-02, -5.085835e-02, -1.421742e-02, -1.448649e-01, -3.697550e-02, 2.225525e-02, 4.433007e-02, -7.003769e-02, -7.342172e-02, 6.062185e-02, -8.328343e-03, -3.608205e-02, 2.673858e-02, -1.233268e-01, -1.356212e-01, -8.721624e-02, 8.786225e-02, -1.954939e-02, -5.260414e-02, 8.936320e-02, -1.794291e-02, -5.126193e-02, 7.522120e-02, 3.433379e-03, -1.026163e-01, 2.019370e-02, 4.633027e-02, -1.259331e-02, 6.957571e-03, 7.542998e-02, -6.968825e-02, -1.306636e-01, -1.984438e-02, -6.378761e-02, 4.709329e-02},
{-1.537591e-01, 1.791032e-02, -6.124852e-02, -7.442258e-02, -2.101758e-01, -7.697616e-02, -6.241796e-02, 6.034767e-03, 8.373126e-02, 1.434052e-03, -1.027811e-01, -5.690886e-02, 1.005720e-01, 7.269487e-02, 6.640577e-02, -6.104107e-02, 9.276397e-03, -3.062432e-02, 4.574431e-02, 6.285434e-02, 3.639046e-02, -1.194960e-01, -9.793742e-02, 5.964646e-02, 5.210406e-02, 1.096343e-02, 1.918154e-02, -1.080621e-01, 2.577573e-02, -4.012233e-02, 5.176711e-02, -1.841556e-02, -6.556264e-02, 4.997455e-02, 1.133228e-01, 7.542693e-03, 5.486316e-02, -9.648287e-02, -5.855797e-02, -7.881308e-02, 9.484761e-02, 1.862367e-02, 5.459384e-02, 4.604642e-02, 4.382757e-02, -2.530824e-02, -2.653195e-02, 3.782522e-02, 6.836513e-02, 2.003551e-01, -1.771899e-02, -3.155288e-02, 1.552017e-02, 7.450750e-02, 5.121692e-02, -8.430174e-03, 3.127040e-03, 8.822222e-02, -4.189581e-02, 2.466545e-02, 2.218271e-02, -3.122959e-02, -7.175932e-03, -6.199104e-02, -3.661872e-02, 1.000664e-01, -3.211155e-02, 1.061860e-01, 7.643192e-03, 6.948749e-02, 5.203672e-02, 4.323616e-02, 4.148896e-02, 4.002056e-02, 1.954581e-02, 5.917977e-02, -6.664184e-02, 3.194366e-02, 2.345135e-03, 5.938034e-02, -2.829514e-02, -1.916069e-03, 8.005245e-02, 3.077763e-03, 1.983461e-02, -3.793186e-02, -1.797148e-04, -1.135735e-02, 4.892369e-02, 6.632480e-02, -7.912192e-03, 1.212876e-02, 8.576556e-02, -1.536964e-01, 4.750375e-03, -2.930834e-02, -3.054426e-02, -3.173417e-01, 9.035382e-02, -1.191253e-01, 9.219828e-02, -9.932461e-02, -4.522517e-02, -5.185047e-02, -1.800771e-02, -3.462836e-02, 3.062639e-03, -6.341230e-02, -5.386801e-02, -2.570532e-02, -1.045599e-01, 8.906791e-02, 1.108637e-01, -8.706643e-02, -1.337132e-02, -7.607786e-02, -3.147125e-02, 8.508691e-02, 4.862269e-02, 3.973655e-02, -5.362762e-02, 8.778232e-03, 4.403597e-02, 8.926658e-02, 2.636349e-02, 3.144168e-02, 1.206000e-01, 1.123726e-01, 7.836295e-02, 8.069360e-02, 6.084501e-02, -4.386515e-02, -9.139906e-03},
{7.185704e-02, -8.341467e-02, 8.855060e-03, -1.473391e-01, -3.961264e-02, 1.984864e-02, -3.204748e-03, 9.904779e-03, 1.960965e-03, -7.736620e-02, -9.503474e-02, 5.198181e-02, 1.226316e-01, -4.861216e-02, 5.695638e-02, 1.111286e-01, 2.746572e-02, 5.040641e-02, -7.780999e-02, -4.201645e-02, 3.679070e-02, -5.512742e-02, -8.718666e-03, 7.646900e-03, 3.968170e-02, -6.539154e-02, 1.079537e-01, 1.648045e-02, -6.705646e-04, 7.657218e-02, 3.473579e-02, -6.763078e-02, 7.413477e-02, 3.284185e-02, 1.441149e-02, 7.087969e-02, -9.544057e-02, -1.619600e-02, 1.650110e-01, -5.918643e-02, -1.282157e-01, -5.883838e-02, 2.072223e-01, 4.581924e-02, -6.902970e-03, -8.220265e-03, 1.097244e-01, 9.174085e-02, -1.254814e-02, -9.822570e-02, 1.333490e-02, 1.024484e-01, 4.217838e-02, 9.407242e-03, 1.080967e-01, 4.446900e-03, 5.914080e-02, -3.715925e-04, 3.146023e-02, 7.105365e-02, 5.358016e-02, 9.874585e-02, -9.561729e-02, -2.188715e-02, 3.001050e-02, -2.720704e-02, -7.379752e-02, 2.396875e-02, 3.031878e-02, -5.338149e-03, -2.429857e-02, -5.389344e-02, -1.274834e-01, 8.150946e-02, -1.488931e-02, -6.032624e-02, -3.003786e-02, 7.819404e-03, 2.922602e-02, -3.861300e-02, 9.189577e-02, -1.273106e-03, -1.594538e-02, 6.331147e-02, 3.317242e-02, -1.638705e-02, -6.393482e-02, -9.141954e-02, 1.294742e-02, 3.207441e-02, 4.420187e-02, 1.034546e-01, -2.469822e-02, -2.129141e-01, -5.651284e-02, 2.017451e-02, -2.591115e-02, -4.422712e-02, -5.844056e-02, 5.899326e-02, -1.962545e-02, 1.669935e-02, -5.609793e-02, -2.115765e-02, 3.425802e-02, 7.315505e-02, -5.634360e-02, 9.314580e-02, -3.941583e-03, -5.546204e-02, -5.468773e-02, 1.028426e-01, 2.120270e-01, 3.360656e-02, -1.080840e-01, -1.077688e-01, 1.508535e-02, 2.113385e-02, 1.913042e-02, -5.576436e-02, -7.133870e-02, 5.452259e-02, 8.376035e-02, -9.582880e-03, 4.620511e-02, 4.496108e-02, -6.001017e-02, 2.826879e-02, 3.629646e-02, 9.122845e-02, -2.034760e-02, -4.790400e-02, -7.770423e-03},
{-1.538521e-01, -9.600737e-02, -6.348527e-02, 1.000641e-01, -7.331266e-01, 1.570173e-01, -8.232610e-03, -8.198538e-02, 2.337164e-03, -2.867878e-02, 1.483170e-02, 2.376249e-02, 2.024393e-01, -8.128538e-02, -5.911081e-02, 1.112144e-01, -1.122262e-02, 1.119934e-01, 5.363495e-02, -2.689861e-02, 5.310675e-02, 9.070916e-02, -6.620319e-02, -2.047440e-02, 3.916698e-02, -1.275084e-01, 2.164169e-02, 1.502775e-02, 5.232421e-02, 1.110980e-01, -7.967234e-02, 2.850654e-02, 1.690681e-01, -5.729416e-02, -1.265579e-02, 2.034740e-02, -1.762329e-01, -1.068352e-01, 3.608629e-02, 7.868010e-02, 2.101035e-02, 1.334878e-01, 5.760611e-02, -1.224161e-01, 1.898644e-02, -3.984633e-02, -7.901327e-02, -1.365193e-02, -1.176630e-01, -2.071195e-01, 5.868812e-03, 5.579710e-02, -1.434976e-02, 4.604970e-03, 6.457984e-02, -1.659812e-01, -2.708853e-02, 1.302545e-02, -1.378741e-01, 2.873876e-01, 2.935020e-02, 2.694414e-02, -1.864036e-01, -2.921280e-02, 1.663920e-03, -1.107249e-01, -2.141178e-02, -4.044820e-02, 1.099598e-01, -1.062656e-01, -9.949820e-02, -3.638632e-02, -1.741751e-01, 1.645887e-02, 1.436240e-01, 1.847910e-02, 3.871574e-01, 1.005886e-01, 3.030960e-02, 2.872671e-02, 9.171138e-02, -2.905717e-02, 9.189541e-03, 2.652946e-02, -1.400165e-02, 8.629451e-03, -5.991679e-02, -1.172153e-01, 5.261545e-02, -1.533416e-01, -7.286802e-03, 1.504892e-01, 6.871937e-02, 1.644986e-02, 7.840664e-02, 3.920228e-02, 1.193987e-01, -3.965866e-01, 1.204015e-02, 6.439031e-03, 9.077881e-02, -7.789794e-02, -4.763725e-02, 1.601109e-01, -7.835914e-02, 5.530747e-02, -1.269225e-01, 1.512410e-01, -9.884891e-02, 3.403379e-02, -1.342092e-01, 1.231496e-01, 9.541874e-02, 1.840475e-01, -8.579749e-03, -2.298754e-02, 8.580133e-02, 2.306512e-02, -1.546395e-01, 3.630012e-02, -2.366693e-02, -6.354521e-02, 7.293977e-02, 1.394954e-01, -3.352612e-02, -8.523800e-02, 1.141916e-01, 8.161620e-02, 9.701215e-02, 3.516332e-02, 1.514891e-01, 1.657423e-01, 1.188406e-01},
{1.996342e-01, -5.513359e-03, -3.462933e-02, 3.825033e-02, -1.451701e-02, 6.416833e-03, -7.774767e-02, -6.796737e-02, -9.245273e-02, -1.958854e-03, 7.442817e-02, 6.821029e-02, -7.768527e-02, -1.594418e-02, -4.148799e-02, 3.591109e-02, -4.602455e-02, -5.038958e-02, -5.474465e-03, 9.949540e-02, -1.442822e-01, 7.358616e-02, 9.107348e-02, -4.099076e-02, -4.300514e-03, 4.153978e-04, 3.273171e-02, -9.311072e-03, -4.294508e-02, -4.414595e-02, -1.287685e-02, -3.328127e-02, -3.060767e-02, 2.212843e-02, 4.137591e-02, -7.264523e-02, -7.102464e-02, -1.564595e-02, -4.171033e-02, -6.276936e-02, 7.835165e-02, 5.955733e-02, 1.845809e-02, -4.237659e-02, 7.677300e-02, 6.685174e-02, -9.003391e-02, -5.163548e-02, -7.818537e-02, -6.569047e-02, 4.864373e-02, 4.933463e-02, 7.316290e-02, 1.192544e-01, -6.697471e-02, -9.504219e-02, 1.003437e-01, -1.209041e-01, -5.291936e-03, -1.200682e-02, 2.754314e-02, 3.275966e-02, 3.279410e-02, 5.499740e-02, 2.924542e-02, 1.022876e-01, -1.931975e-02, 1.945193e-02, 8.931033e-02, 1.214266e-02, -7.354897e-02, 4.454221e-02, 4.078759e-02, 5.030498e-02, -6.313963e-02, -8.452118e-02, 4.237525e-02, -3.367808e-02, -8.106054e-02, 1.031802e-02, 4.732014e-02, -1.356613e-02, 2.541067e-02, -4.730236e-02, 8.352441e-02, -5.003552e-03, 8.832701e-02, 8.953267e-02, -6.053220e-02, 4.971972e-02, 6.823268e-02, -6.914956e-03, -8.694594e-02, -1.053459e-01, -6.025143e-02, -3.851495e-02, -6.380428e-02, -2.977801e-02, 4.598121e-02, 1.824868e-02, 2.581679e-02, 8.592816e-02, 7.852791e-02, -8.393459e-02, 8.368938e-02, -2.539209e-02, 8.620474e-02, -5.258542e-02, 8.199383e-03, -8.455940e-02, -1.153419e-02, 7.637089e-02, 6.384983e-02, 7.144841e-02, 5.171699e-02, -1.446407e-02, 2.756474e-02, -2.087312e-02, 1.989846e-02, 6.728729e-02, 9.005930e-03, 5.296901e-02, 5.732298e-02, 9.250193e-02, 2.328397e-03, 6.312571e-02, -6.720883e-02, -1.863425e-01, 9.143572e-02, -1.661391e-02, -7.787087e-02, 3.722540e-02, 6.426752e-02},
{-5.623521e-02, 1.334886e-01, -9.553770e-02, -8.293357e-02, 4.597166e-01, -3.541486e-04, 2.884642e-02, 6.113191e-02, -2.121163e-01, 3.266807e-02, -3.746371e-02, -2.550525e-03, -1.851599e-03, 5.193527e-02, 9.232713e-02, -1.378064e-01, -1.882005e-02, -7.394558e-02, -3.252971e-02, 1.268966e-01, -8.798007e-02, -1.556677e-01, -2.581701e-02, 5.578773e-02, -2.363706e-03, 8.620750e-03, 2.001652e-01, -5.018257e-02, -1.251310e-01, 2.099769e-02, 1.357183e-01, 1.066184e-01, 2.765760e-02, 5.190142e-02, -1.749320e-01, -7.438608e-02, -4.489788e-02, -8.481438e-03, 1.624076e-02, -1.168836e-02, -2.339090e-01, 3.359424e-02, 1.291461e-01, 3.821106e-01, 1.466025e-01, -1.616764e-02, -1.313989e-01, 1.732240e-02, -2.566463e-01, 2.628524e-02, 5.597152e-02, -3.342105e-02, -1.240995e-02, 2.787466e-01, -6.593043e-03, 1.549657e-01, 6.277832e-02, 1.962560e-02, 3.038011e-02, 2.644375e-01, 1.090344e-01, -6.079205e-02, -9.318829e-02, -1.579121e-03, -1.256470e-01, 3.288126e-02, 6.124813e-02, -1.446525e-01, 3.053044e-02, 2.113191e-01, -1.116045e-03, 4.785507e-02, -1.515127e-01, 1.174916e-01, -2.159875e-03, 2.995700e-02, -4.387696e-02, 2.941815e-02, -5.176520e-02, 6.039876e-02, 1.962666e-01, 2.658225e-01, 9.519963e-02, 7.939572e-02, -4.403476e-02, -1.462540e-02, 7.401548e-02, 7.154957e-04, 1.947151e-01, -3.824180e-02, -1.094203e-01, -4.224242e-03, -2.571875e-02, -8.179862e-02, -5.187011e-02, -7.088506e-03, -1.009515e-01, -8.492150e-02, -2.857183e-02, -1.108101e-01, -3.506270e-02, 1.243479e-01, -1.849115e-02, -7.506310e-02, -4.941690e-02, 1.221111e-02, 4.355778e-02, 2.175855e-02, 4.503880e-02, 4.613946e-02, -1.191121e-01, 2.890184e-01, 1.270516e-01, -4.681164e-02, 7.968131e-02, 5.167062e-03, 1.148449e-02, 8.589269e-02, 6.922465e-02, 1.359485e-01, 1.561349e-02, 3.355934e-03, 1.264129e-01, -8.103321e-02, 1.070856e-01, -7.456037e-02, 2.181083e-01, -1.258806e-01, 1.767410e-01, 1.315958e-01, 1.075045e-01, 7.421830e-02, 8.809041e-02},
{-1.640158e-01, 1.783749e-02, -7.987081e-03, 1.870086e-01, 3.483227e-01, -1.139702e-01, -6.479840e-02, 8.825285e-02, 1.167645e-01, -5.452913e-02, 1.398814e-03, -1.049213e-01, 1.940396e-02, 3.349705e-02, -2.828915e-02, -6.509890e-02, 1.271265e-01, -4.761571e-02, -8.248076e-03, 4.749725e-02, 1.101888e-02, -2.935446e-02, 1.541510e-01, -1.640676e-01, -3.009506e-03, 6.617557e-02, -1.513236e-01, -9.010247e-03, -6.609126e-02, -7.263086e-02, -1.332009e-01, 5.414315e-02, 4.880969e-02, 4.540323e-02, -5.531457e-02, -7.880141e-03, -4.484832e-02, 7.469668e-02, -3.867587e-02, -1.892727e-02, -1.361932e-02, 6.880548e-02, -6.311564e-03, 1.955338e-01, 3.130745e-02, -2.743713e-03, -1.206342e-01, -7.846840e-02, -3.324476e-02, 7.597297e-02, 6.928319e-02, -4.752530e-02, 1.323739e-02, 3.866875e-02, -2.708246e-02, 4.883019e-03, 1.288822e-02, -4.740831e-02, 6.751059e-03, 6.278343e-03, 6.366318e-02, -3.791924e-02, -7.621689e-02, 1.089028e-01, -3.135840e-03, 2.159639e-02, 5.040094e-02, -2.073825e-02, 9.437606e-02, 2.357590e-02, 1.740655e-01, 9.816241e-02, 1.418192e-02, 1.001914e-02, 7.951805e-02, 7.545726e-02, -1.914688e-01, 1.011294e-01, -1.867448e-01, 3.899193e-02, 5.051668e-02, -1.158449e-01, 4.371199e-03, -1.283284e-02, 4.784561e-02, 5.291657e-02, 5.630882e-02, -3.713598e-02, 2.533068e-02, -2.157690e-02, 6.266548e-02, 2.154680e-02, 8.604805e-02, 2.095272e-01, -9.524816e-02, 5.503964e-03, -3.410115e-02, 2.438305e-01, -2.219927e-02, -4.087848e-02, 1.226194e-02, -5.232783e-02, 6.743489e-02, 8.772286e-02, -1.480322e-01, 6.196499e-03, 4.793170e-02, -2.635552e-02, -6.420093e-03, 7.331497e-03, 4.368320e-02, 6.726316e-02, -2.663869e-02, 6.144544e-02, -3.970335e-02, 1.142891e-01, 4.469558e-02, -6.602132e-02, -3.186515e-02, -4.087313e-02, 8.355667e-02, -3.187235e-02, -7.662776e-02, 5.900241e-02, 7.111704e-02, 4.825814e-02, 8.656672e-02, -7.882155e-02, 4.851540e-04, 1.587935e-02, -2.155106e-03, -2.786861e-02, 9.198744e-02},
{2.361311e-01, 6.439358e-03, -1.811566e-03, -1.251981e-02, 2.060573e-02, 1.630199e-02, 3.595171e-02, 2.702780e-03, -7.749597e-02, 1.834353e-02, 5.851914e-02, -5.082171e-02, -1.332771e-02, -5.296167e-02, 2.608189e-02, 9.674544e-02, 1.964412e-02, 3.473765e-03, -9.655059e-03, -6.367575e-02, -3.735968e-02, 6.392723e-02, -5.824811e-02, 1.191804e-02, 2.463290e-02, 9.788073e-02, -4.411856e-02, 9.478103e-02, -8.147522e-02, 3.241453e-02, -3.544529e-02, -4.417396e-02, 2.485836e-02, -1.844604e-02, 8.002229e-03, 3.780110e-02, 5.524257e-02, -1.501500e-02, 7.244139e-02, 9.263939e-02, -4.640819e-02, -4.462768e-02, -4.043630e-02, 4.202218e-02, -8.012678e-02, 6.471943e-02, -1.983949e-02, 5.894169e-03, -6.440539e-02, -7.005646e-02, -3.374554e-02, 3.955001e-02, 8.010170e-02, 8.672644e-02, -2.976376e-02, -6.421497e-02, -4.322864e-02, -2.317636e-02, 2.073166e-03, -1.717868e-03, 2.855659e-02, 4.658072e-02, 3.951443e-02, 5.200191e-02, 4.434012e-02, -5.825679e-02, -3.250927e-02, 1.046699e-01, -1.137771e-02, 3.328274e-02, 9.941980e-02, 4.721242e-02, 8.722514e-02, -1.038978e-01, -6.566345e-02, -6.028878e-02, 1.172535e-02, -3.723905e-02, -4.614251e-02, 1.300344e-02, 1.685593e-02, 8.387931e-02, -5.767065e-02, 2.463808e-02, 9.112405e-02, 3.092194e-02, 3.242910e-02, 8.744134e-02, 6.006800e-03, -6.444020e-02, -5.235380e-02, -8.118320e-02, -2.316651e-02, -9.608429e-02, 3.313546e-02, 3.122508e-02, 3.232799e-02, 2.048684e-02, 3.555986e-02, -3.078619e-02, -2.420180e-02, 8.805759e-02, -4.678060e-02, 6.445602e-02, -5.720393e-02, -5.219655e-02, 3.202679e-02, 8.869976e-02, -5.597336e-02, 5.227964e-02, 6.326764e-02, -8.199737e-02, -9.038588e-02, 2.101990e-02, 4.238439e-02, 2.162556e-03, 2.830699e-02, -8.885727e-02, -7.259481e-02, -6.559635e-02, -5.298220e-02, 1.073452e-01, -6.008985e-02, -6.856545e-02, -2.172896e-02, 6.387881e-02, -7.744910e-02, -3.352816e-02, 1.432621e-02, -6.009657e-02, 2.508887e-02, 6.535546e-02, 6.073788e-02},
{7.642157e-02, -9.526709e-03, -5.021948e-02, 1.150361e-01, 2.920267e-02, -5.194129e-02, 2.752852e-02, 1.373500e-02, 2.350441e-02, 3.421971e-02, 1.800297e-02, 2.487969e-02, -6.820592e-02, 8.015503e-04, -7.661331e-02, 2.894082e-02, -5.887688e-02, 1.041821e-02, 1.318703e-02, 3.749410e-02, -4.967706e-02, -6.508109e-02, 2.550032e-02, 2.768560e-02, 3.744401e-02, 5.993035e-02, 2.884500e-02, 5.480264e-02, 6.982225e-02, -7.669597e-02, 3.780523e-02, -1.466342e-02, -4.056362e-02, 2.199476e-03, 9.203856e-02, 4.455313e-02, -8.534585e-02, 1.021132e-01, -2.994103e-02, 1.989253e-02, 6.509223e-02, 3.766850e-02, -6.112659e-02, -2.396383e-02, -4.078365e-02, 4.121809e-02, -8.819411e-02, -5.784176e-02, -3.957914e-02, -3.369469e-03, 9.251405e-04, 7.440651e-02, -1.464974e-02, 5.199734e-02, -6.371090e-02, 7.895769e-02, 8.749890e-02, -1.536884e-01, 1.254924e-02, 7.943595e-03, -7.427312e-02, 3.157743e-04, 5.972338e-02, 6.015979e-02, 5.042211e-03, -5.263676e-03, 3.578265e-02, 3.519185e-02, -2.649477e-02, -1.676305e-03, -3.171391e-02, 7.676652e-02, -1.512855e-02, 8.372727e-02, -5.631541e-02, 3.374940e-02, 1.530803e-01, 8.340765e-02, -4.224285e-02, 4.522733e-02, -8.706462e-02, 5.327943e-02, 1.766347e-02, -5.421077e-02, 6.558046e-02, -3.915308e-02, 1.121657e-02, 1.064182e-01, -5.495888e-02, 2.348337e-02, -6.833113e-02, -8.575340e-02, -6.152607e-02, 7.156481e-02, -4.994756e-02, -6.362659e-02, -9.252095e-02, 8.140163e-03, -2.930663e-02, 6.526063e-03, 2.462406e-02, -6.624188e-02, -5.401040e-02, -5.187987e-02, -6.256489e-02, -5.946784e-02, 1.150139e-02, -5.983195e-02, 1.196199e-01, 9.044454e-02, 8.945461e-03, 8.409713e-02, -2.748540e-02, -8.529942e-02, -5.894612e-02, 2.005336e-02, -9.347402e-02, -1.335382e-02, 2.869899e-02, 5.939294e-02, 8.331749e-02, 3.759544e-02, 4.883795e-03, -5.207409e-02, -9.584523e-02, -2.169389e-02, 1.025965e-02, -1.234790e-01, 6.398992e-02, -5.903550e-02, 4.893449e-02, -1.024724e-01, -3.671779e-02},
{-2.185789e-01, 3.702760e-02, 1.835989e-03, 3.977720e-03, -5.886120e-02, -2.499619e-02, 7.346328e-02, 2.836753e-02, -2.460370e-02, 5.567050e-03, -1.221551e-02, -3.921133e-04, 2.385729e-02, 1.555021e-02, 3.844197e-03, -4.844703e-03, 1.405337e-02, -6.352369e-02, -3.296790e-02, 6.142532e-02, 6.761755e-02, 5.998605e-03, -1.023393e-02, 2.285567e-02, -2.114537e-02, -1.000942e-01, -4.144282e-02, -3.565068e-02, -2.866731e-02, -1.871315e-02, 2.544936e-02, -4.508932e-03, -4.318060e-02, -1.067828e-01, 8.419915e-03, -7.044999e-02, 4.924078e-02, -9.105915e-03, 6.730180e-02, 5.756827e-03, 4.632365e-02, 6.046760e-02, -2.932527e-02, 8.042709e-02, 5.569357e-02, 8.447735e-02, 1.557150e-02, 6.654925e-02, 1.042161e-02, 9.881953e-02, -1.248180e-02, 2.886544e-02, 6.210349e-02, -4.033822e-03, 1.298798e-02, 1.371575e-01, -1.448202e-02, -1.285027e-02, 1.522125e-02, -3.593061e-02, -3.481989e-02, -1.763878e-02, -1.062971e-01, 1.047866e-01, -4.122003e-02, -1.061591e-02, 4.328552e-02, -1.939338e-02, 7.323293e-02, 1.315009e-01, 3.769647e-02, 2.497298e-02, -9.584867e-02, 6.667313e-02, -1.986500e-02, -3.679515e-02, -5.211771e-02, 8.047317e-02, 5.492830e-02, -1.597569e-02, 7.532720e-02, 8.512029e-03, -6.073869e-02, 5.885496e-02, -3.466859e-02, -3.587485e-02, 2.732982e-02, 3.528683e-02, 9.714565e-02, -5.991087e-02, 5.266703e-02, -1.624024e-02, -9.285867e-02, 8.840963e-02, -3.141501e-02, 7.507326e-02, -5.021217e-02, -5.424950e-03, 7.118581e-02, -5.722473e-02, -3.559086e-02, -6.610966e-02, 1.200256e-03, 1.175945e-01, -1.493446e-02, 8.179449e-02, -8.471190e-02, 3.275751e-02, 8.842425e-02, 3.754177e-02, 5.444267e-02, -3.335128e-02, -5.242927e-02, -1.004849e-01, 3.261083e-02, -7.811792e-03, 4.703360e-02, 4.492899e-02, 6.730887e-02, -2.016961e-02, 5.038537e-02, -6.919435e-02, -2.472370e-02, -1.106031e-01, -5.967331e-02, -6.178816e-02, 1.042664e-01, 1.818887e-01, 1.289674e-02, -7.417257e-02, 1.818937e-02, 9.279054e-02, 4.371079e-02},
{-1.852144e-01, 3.138468e-02, -5.276843e-02, -1.006774e-01, -8.289023e-02, -2.486421e-02, 1.421667e-02, -2.065913e-02, 8.455461e-02, 6.707145e-03, -7.169697e-02, -4.858958e-02, -7.165119e-03, -5.224678e-02, 1.712722e-03, -5.156215e-02, 6.016921e-02, 5.085160e-02, -5.295255e-02, 2.542670e-02, 6.015979e-02, -4.796965e-02, 4.488900e-02, -3.453586e-02, 6.608236e-02, -7.112989e-02, 5.521467e-02, -4.840472e-02, -9.900064e-03, 7.344268e-02, 9.323956e-03, -6.766308e-03, 1.661159e-03, -1.284869e-01, -8.538876e-02, 2.471955e-02, 5.475234e-02, 7.784778e-03, 5.588997e-02, -8.038754e-02, -2.691136e-02, 5.277261e-04, 1.206620e-01, 1.288013e-02, 3.167561e-02, -3.694309e-02, 1.406837e-02, -1.628708e-02, 4.512429e-02, 1.376867e-01, 5.360622e-02, -4.593604e-02, -9.445067e-02, -5.929765e-02, 5.613073e-02, 4.040091e-02, 6.062749e-02, 8.081345e-02, 9.438842e-03, -2.916620e-02, 4.961193e-02, -6.214309e-02, -1.188376e-01, 9.238493e-02, -8.250780e-02, -8.727999e-02, 8.986527e-02, 5.832511e-03, -1.595675e-02, -6.493007e-02, 7.181220e-03, -4.323941e-02, 2.677138e-02, 7.144681e-02, 7.533545e-02, -1.777868e-02, -8.803040e-02, -2.477501e-02, -4.957636e-02, 4.223848e-02, 4.369066e-02, 2.384476e-02, -3.946325e-03, -8.164103e-02, -5.627443e-02, 4.650798e-02, -8.991291e-02, 3.558350e-02, 3.999330e-02, 6.975168e-02, 6.277083e-02, 8.991328e-02, -4.172184e-02, -3.266902e-02, 4.570491e-02, 9.675333e-02, 5.624263e-02, -9.460147e-02, 3.901976e-02, -2.605227e-02, 9.869939e-03, -3.082154e-02, 4.854942e-02, 7.281288e-03, -2.601620e-02, 8.603738e-02, -3.770170e-02, 2.967136e-02, -1.265200e-02, 5.410637e-02, 4.158756e-03, 4.187403e-02, -2.609568e-02, 6.846312e-02, 6.512997e-02, 9.031986e-02, 9.215337e-02, -7.348908e-02, -1.355056e-02, -6.894357e-02, 2.362962e-02, -6.025396e-02, -3.238207e-02, 6.118203e-03, -2.072810e-02, -9.312223e-02, 9.001242e-02, 1.174060e-01, 4.737278e-02, 4.433301e-02, 4.492408e-03, 3.328589e-02, 6.911414e-02},
{2.003994e-01, -7.761233e-02, -5.796583e-02, 8.775143e-02, -2.262027e-01, 7.160459e-02, -5.133670e-02, -8.788787e-02, 2.301209e-02, -5.274832e-02, 1.700556e-02, -2.997253e-02, -1.016536e-01, -7.531993e-02, 1.719085e-03, -5.430723e-02, 3.850058e-02, -7.960229e-02, 6.233618e-03, -6.247499e-02, -2.122763e-02, -2.259851e-02, -6.331045e-02, 8.097461e-02, 2.719321e-02, -6.502151e-03, 1.233614e-01, -5.099314e-03, -6.270433e-02, 1.010057e-01, 1.074074e-01, 6.064351e-02, -1.888803e-02, -4.045168e-02, 1.101917e-01, 1.080477e-01, -1.103286e-01, 1.113173e-02, 8.523119e-02, -3.964848e-02, 1.626302e-01, -8.827120e-02, -5.020966e-02, -1.379067e-01, 2.649086e-02, -1.182057e-01, 3.270321e-02, 8.671091e-02, -3.751827e-02, -5.161694e-02, -5.698934e-02, 1.246376e-01, 7.331399e-02, -6.200083e-02, 2.420446e-02, 2.510774e-02, -2.612357e-02, -1.049430e-01, -6.074047e-02, 9.496028e-02, -7.807028e-02, 2.940071e-03, -3.603692e-02, -5.377785e-02, 4.061082e-03, -4.184427e-02, -6.066764e-02, 2.945600e-02, 8.477496e-02, -2.823845e-02, -2.343237e-02, 8.502938e-02, 1.972319e-02, 4.334988e-03, -7.879154e-02, 3.231132e-03, 1.182513e-01, -1.158388e-04, -3.476194e-02, -9.813928e-02, -1.185344e-01, -3.753768e-02, -2.886166e-03, -7.668649e-02, 9.347532e-02, -5.692967e-02, 1.198380e-02, -1.534814e-02, -5.520021e-02, -2.836704e-02, -6.025538e-02, -4.105107e-02, 8.612128e-02, 4.473104e-02, 1.313585e-01, -1.688454e-02, 8.515161e-02, -2.398215e-01, 4.536257e-02, -4.584399e-02, 3.231310e-02, 3.844833e-02, -4.822231e-02, 7.257949e-03, 7.641137e-02, 2.815304e-02, 2.697798e-03, 1.215751e-03, 6.373911e-02, -4.981121e-02, -6.968793e-02, -3.737433e-02, -1.460549e-01, -3.866941e-02, -5.968733e-03, 2.297530e-02, -5.660012e-03, -7.330813e-02, 5.258849e-02, 4.973725e-02, -7.008158e-02, 4.506417e-02, -1.608267e-02, 2.061345e-02, -3.327356e-02, 4.360556e-02, -2.759081e-02, -5.612540e-02, -1.593021e-02, -8.486004e-02, -7.028736e-02, 4.724096e-02, 3.610435e-02},
{3.472100e-01, 8.998083e-02, -1.709216e-02, 4.261804e-02, -1.750574e-01, -3.086327e-03, -2.118927e-02, -5.573870e-02, -1.230593e-02, -3.291352e-02, -7.462179e-03, 9.366497e-02, -3.833050e-02, -1.016282e-01, 2.088130e-02, 1.255374e-01, 2.730315e-02, -9.463582e-02, -6.055954e-02, 1.502578e-02, -1.650141e-01, 8.227412e-02, -1.113016e-02, 2.611396e-02, 3.728575e-02, -4.633807e-02, 6.213837e-02, -7.016788e-02, 4.175713e-02, 6.489950e-02, 1.197829e-01, 4.728689e-02, 1.018375e-01, -1.187927e-01, -1.626725e-02, 5.648063e-02, -1.662876e-02, -4.461077e-03, 5.745517e-02, -3.119560e-03, 1.425687e-01, -5.377526e-02, 6.515562e-02, -1.819129e-03, 1.932815e-02, -4.664561e-02, 5.843784e-03, -2.373026e-02, -1.008760e-01, -1.244965e-01, 5.182110e-02, -3.279743e-03, -7.617108e-02, -6.939169e-02, 8.875985e-03, -8.150879e-02, 5.310486e-02, -6.137643e-02, -8.933999e-02, 2.650181e-01, 5.056150e-02, -5.487012e-02, -6.628319e-02, -9.231715e-04, 3.470682e-02, -1.152452e-01, -4.248019e-02, -3.300733e-02, 7.774732e-02, 1.463291e-01, -3.072310e-02, -6.627861e-02, -5.174571e-02, 4.629888e-02, -2.982314e-02, -5.952261e-02, 2.322343e-01, 4.702739e-02, 1.015944e-01, -4.693041e-02, 6.547403e-04, 5.253099e-02, 1.164784e-01, 4.873221e-02, -5.324700e-02, 7.789954e-02, -1.990899e-02, 3.777030e-02, 4.032901e-03, -7.657196e-02, -6.347781e-02, 8.462971e-02, 1.519716e-01, -7.208144e-02, 1.189691e-01, 1.348752e-02, 5.359363e-02, -1.436367e-01, 1.459506e-02, 2.413215e-02, 6.070824e-02, 8.964600e-02, -6.045396e-03, 1.384756e-01, 1.642801e-01, -9.604231e-02, -4.435797e-02, 8.983283e-02, 8.887015e-02, 1.997059e-02, -3.263351e-01, -9.567948e-02, -8.703778e-02, -6.531199e-02, -4.418693e-02, -1.053708e-01, -2.843297e-02, 3.568143e-02, 4.199340e-02, 6.683888e-02, -5.650930e-02, -7.556220e-02, 1.861803e-02, -1.579106e-03, -8.527978e-02, 3.070555e-02, 5.234056e-02, 3.167849e-02, 5.578372e-02, 1.617425e-01, -6.495214e-02, 1.121572e-01, 4.862256e-02},
{-7.882423e-02, -4.215273e-02, -5.233062e-02, 1.766976e-01, 2.058012e-02, 2.559136e-02, 4.876553e-02, -7.981833e-03, -7.354774e-03, -2.969249e-02, 1.148778e-01, -1.126951e-01, -3.340245e-02, 4.781751e-02, 7.940497e-02, -5.617696e-02, -8.904018e-03, 1.015165e-01, -4.616177e-02, -4.515044e-02, 5.897122e-02, -3.367765e-02, -4.004823e-02, 7.845058e-03, -9.989574e-04, -1.115140e-02, -8.575936e-02, -5.328127e-02, -1.045894e-01, -7.779497e-02, -9.405951e-03, -6.058712e-02, -9.439145e-02, 7.654815e-03, -1.628840e-02, 1.616347e-02, 6.423672e-02, 3.133339e-02, -7.966404e-02, -1.035351e-01, 5.927510e-02, 9.298178e-02, -1.161896e-01, 7.674988e-02, 3.974852e-02, 1.677953e-02, 5.017688e-02, 8.953568e-03, 6.025570e-02, 1.595207e-01, 6.098120e-02, -1.126301e-01, 1.018022e-01, 1.005034e-01, 5.424450e-02, 5.710496e-02, -9.632952e-02, 9.174401e-02, -7.559844e-03, -7.869558e-02, -2.064995e-02, 2.299769e-03, 5.588517e-03, -8.732865e-03, -9.665586e-02, 9.301903e-02, 4.563700e-02, 2.355424e-02, -1.004416e-01, 1.279569e-01, 1.206930e-01, 2.927832e-02, -4.022263e-02, 4.246830e-02, -6.438071e-02, 1.944232e-02, -6.262861e-02, 1.038478e-02, -1.888405e-02, -5.437997e-02, -9.559446e-02, -6.994354e-03, 1.713538e-02, 1.411893e-03, -3.265033e-02, 4.009657e-02, 1.123554e-01, -3.006726e-02, 8.941297e-02, -1.173236e-02, 3.994985e-02, 9.141965e-02, -1.437719e-03, 2.022740e-01, 1.910548e-02, -8.678900e-02, 7.311749e-02, 1.414429e-01, -7.040216e-02, 6.554110e-02, -4.090358e-02, -1.301648e-02, -1.908592e-02, 1.017907e-02, -4.834655e-02, 8.493441e-02, -8.683789e-02, -2.530095e-02, -5.786464e-02, -5.002201e-02, 3.681229e-02, 5.855780e-02, -3.406088e-02, -8.144293e-02, -4.270818e-02, 1.061393e-01, 5.360924e-02, -7.073214e-02, 8.698522e-02, 9.846208e-02, -2.696739e-02, 2.116723e-02, -1.671217e-01, -1.082775e-01, 5.983157e-02, -4.347819e-02, -7.427955e-02, -2.939490e-02, -3.711675e-02, 3.245982e-02, -3.960121e-02, -6.420230e-02, -6.442077e-02},
{-6.973732e-02, 6.608990e-02, -4.980552e-02, -2.627240e-02, -7.634668e-02, -5.093833e-02, 3.241160e-02, 9.822246e-02, -3.333627e-02, -6.371483e-02, 4.804837e-02, 6.690070e-02, 1.127371e-01, 1.435015e-02, -1.312992e-02, 5.304310e-02, -6.673102e-02, 1.648291e-03, 6.496856e-03, -9.124227e-04, 2.572013e-02, 5.228316e-02, -1.159177e-01, -3.744101e-02, 4.505962e-02, -9.206246e-02, -1.007894e-02, 6.906214e-02, -7.625269e-02, 3.056807e-02, 7.609601e-02, 7.755569e-02, 8.237211e-02, 6.347775e-03, 4.967657e-02, 9.610417e-02, 3.465148e-02, -8.811139e-02, -1.771163e-02, 2.324239e-02, -6.487671e-02, 1.212255e-02, 5.351357e-02, 2.390715e-02, 5.148110e-02, 4.189455e-02, 5.266219e-02, 2.601486e-02, -6.993730e-02, 4.354971e-02, -3.768968e-02, 4.011209e-02, -5.277453e-02, -9.296779e-03, -5.304969e-03, 3.640912e-02, -3.214375e-02, 3.779186e-02, -7.638972e-02, 7.910429e-02, -3.115279e-02, 4.272514e-02, -1.754781e-03, -2.942350e-02, 4.594369e-04, 7.248451e-03, -3.483082e-02, -2.604793e-02, -4.646036e-03, -5.640172e-02, -7.420816e-02, 2.677793e-03, -1.706207e-02, 4.225282e-02, 2.055499e-02, 6.712302e-02, -9.661455e-02, 2.800070e-02, 1.055261e-01, 3.976218e-02, 6.990318e-03, 9.591053e-02, 4.856594e-02, 1.084729e-02, 2.401633e-02, -1.890323e-02, 4.905152e-02, -4.644341e-02, 4.435436e-03, 2.250698e-02, 8.278871e-03, 8.232149e-02, -5.121581e-02, -8.493144e-02, 5.866333e-02, -2.271963e-02, 9.163342e-02, -1.503501e-01, -2.246963e-02, -4.156146e-02, -5.727912e-02, -5.535669e-02, 6.518684e-02, -1.139081e-03, 1.059220e-01, -2.178049e-03, -2.709328e-02, -8.138594e-02, -2.623670e-02, 5.148799e-02, -9.026476e-03, 2.638072e-02, -4.534219e-02, 1.285782e-02, 4.025021e-02, 3.323416e-02, -3.700747e-03, -2.814795e-02, -6.554123e-03, -7.702454e-02, -4.894095e-02, -8.450810e-02, 8.823497e-02, 5.476209e-02, -7.722048e-02, -1.944386e-02, 3.703208e-03, 2.894906e-02, -6.266018e-03, 7.458057e-02, -6.597140e-02, 4.786474e-02, 1.547819e-02},
{3.320311e-02, -4.050890e-02, -5.888142e-02, 3.757459e-03, 7.648550e-02, 2.746768e-02, 5.215207e-02, 7.307730e-02, -2.228839e-02, -5.223747e-02, -5.035794e-02, 1.675604e-02, 2.444161e-02, -3.063714e-04, -3.937676e-02, 6.300038e-02, -1.706845e-02, 6.583193e-02, -3.562655e-02, 6.295029e-02, -8.971461e-02, -1.067941e-02, 1.451316e-02, -5.447543e-02, 2.980597e-02, 7.305921e-02, 6.809761e-02, 3.057154e-02, -6.904426e-02, -8.216825e-03, -1.707392e-02, -5.520856e-02, -6.457504e-02, -4.417126e-02, 4.058008e-02, 7.742979e-02, 4.959486e-02, 1.920690e-02, 6.320178e-02, 6.456022e-02, 6.566547e-03, -5.896364e-02, -1.303798e-01, -2.514940e-02, 4.666087e-02, -5.642148e-02, 7.668800e-02, -4.242697e-02, 5.754916e-03, -6.948743e-02, -9.889466e-02, -7.290795e-02, 5.053106e-02, 2.861931e-02, 8.306277e-02, -8.470978e-03, 3.570505e-02, -4.267874e-02, 1.639959e-03, 3.573953e-02, -1.698630e-02, -3.025802e-02, 5.419604e-02, -2.843990e-02, 6.631220e-02, -2.025902e-02, -4.643409e-02, -4.366457e-02, 4.003613e-02, -4.783008e-02, 4.241927e-02, -2.324106e-02, -3.262936e-02, 4.611054e-02, 7.794485e-03, -8.646520e-02, 7.815863e-03, -4.194496e-02, 3.616212e-02, -5.574313e-02, -2.298262e-02, -4.350367e-02, 2.012950e-02, 7.282584e-02, -5.211080e-02, -4.076418e-02, -8.063636e-02, -3.535170e-02, 4.222935e-02, 5.168579e-02, 3.635198e-02, 2.042242e-02, 8.750078e-03, -6.222682e-02, 1.983074e-02, -4.170958e-02, 1.817014e-02, -8.778396e-02, 8.374105e-02, 3.988673e-02, -4.374788e-02, -2.535290e-02, -3.976136e-03, -6.015932e-02, -6.997027e-02, 5.608610e-02, 1.862273e-02, -1.437024e-03, -3.876325e-03, -5.538120e-02, 8.205228e-02, -1.009684e-01, 1.572084e-02, -5.580559e-02, 3.739335e-02, -8.631939e-02, 5.141914e-02, -8.676907e-02, 5.562354e-02, -7.346129e-02, 6.304047e-02, 9.832448e-02, -2.648037e-02, -1.132545e-02, 6.006103e-02, -1.048737e-02, 5.990314e-02, 3.833399e-02, -1.036615e-02, -1.277141e-02, -5.719136e-02, 2.278253e-02, -7.629857e-02},
{2.383307e-01, 4.531911e-02, -1.162890e-01, -2.601118e-02, 1.029463e-01, 2.938537e-02, -1.293121e-02, 6.767433e-02, 2.844575e-02, -3.046587e-02, 2.645709e-02, 5.984607e-03, -4.384399e-02, -4.271819e-04, 2.205061e-02, -3.662749e-02, 6.749260e-02, -7.291068e-02, -1.606416e-02, 4.088183e-02, -5.507056e-02, -3.838551e-02, -2.888392e-02, 7.481291e-02, -3.488716e-02, 9.659582e-02, 6.741568e-02, -9.013943e-02, -9.399464e-03, -6.382060e-02, -1.658835e-02, -4.969482e-02, 5.939922e-02, 2.330193e-02, 6.255915e-02, -9.321185e-02, -2.150923e-02, 5.415724e-02, -5.979039e-03, 1.714958e-03, 7.623273e-02, -2.528038e-02, -1.607413e-01, -1.102053e-02, -7.105992e-02, -5.892700e-02, -1.328987e-01, 5.780999e-02, 4.695269e-02, -1.185267e-01, 2.930825e-02, -2.182553e-02, 5.933418e-02, -9.185821e-03, -1.027352e-02, 1.946405e-02, 9.958329e-02, 4.209907e-02, 8.562808e-03, -8.533987e-02, 3.592984e-02, 7.106565e-02, 4.361621e-02, -4.823636e-02, 8.547870e-02, 7.080795e-02, 5.731578e-02, -2.395944e-02, -4.737191e-02, 1.589887e-02, 7.195546e-02, -2.262146e-02, 4.716217e-02, -8.154424e-03, -6.343429e-02, -3.757428e-02, 1.534397e-03, -8.986485e-02, 4.713336e-03, 3.792786e-02, -1.190432e-01, 1.139198e-01, -1.631253e-02, -8.393186e-02, 7.776202e-02, 3.093198e-02, 9.434602e-02, 9.162160e-02, 4.996958e-02, 7.398580e-02, -4.614795e-02, -1.439528e-01, 1.002236e-01, -2.382754e-02, -2.565196e-02, -9.176235e-02, -1.595829e-02, 1.190228e-02, -9.099309e-02, -1.974474e-02, 7.968416e-02, -4.766563e-02, 4.400687e-02, -9.049064e-03, 3.593895e-02, -3.747785e-02, 7.422926e-02, -4.645322e-02, -8.641947e-02, -6.190598e-02, -7.116878e-02, 1.048124e-02, 3.373617e-02, 1.607337e-02, -5.176453e-02, 6.369054e-02, 2.298784e-02, -1.073735e-02, 3.900884e-02, -5.808218e-02, -8.353916e-02, -2.032192e-02, 6.285132e-02, -6.839745e-02, 5.714907e-02, 1.601422e-02, 7.495425e-02, -1.295056e-01, -5.536710e-02, -1.173004e-01, -9.575624e-02, -8.745396e-02, -6.915572e-02},
{-1.813938e-01, 9.343760e-02, -4.156369e-02, 5.622086e-02, 6.150481e-02, -9.343752e-02, -2.010142e-02, 4.070273e-02, 9.127788e-02, -2.009508e-02, 4.231116e-02, -9.111939e-03, 4.882058e-02, 7.525539e-02, -5.499323e-02, 6.947389e-02, 3.002482e-02, -1.506230e-02, 8.672020e-02, 8.636632e-02, 2.079479e-02, -7.594097e-02, 4.893482e-02, 5.096826e-02, -2.690313e-02, -4.224056e-02, -1.189711e-01, 4.669830e-03, 2.218287e-02, -8.275679e-02, 2.725635e-02, 4.745750e-02, 3.999465e-02, -7.207756e-02, -9.837040e-02, -3.773892e-03, -2.652489e-03, 2.726416e-02, -6.340189e-02, 1.286607e-02, 4.713522e-02, -3.510949e-02, 1.062433e-02, 5.739759e-02, -2.778071e-03, -2.850965e-02, 9.597252e-02, 6.804378e-02, 3.566111e-02, 6.263555e-02, 1.247952e-01, -3.454828e-02, -3.048770e-02, 3.252420e-02, 8.951797e-03, -7.371815e-02, -5.118766e-02, 1.050384e-01, 7.873046e-02, -1.608507e-01, 4.054850e-02, 4.988479e-02, 3.880753e-02, -1.455940e-02, -6.844095e-02, -6.125602e-02, -3.133551e-02, 5.246342e-02, 1.009008e-02, 7.097518e-02, -3.925343e-02, 4.336999e-02, -1.269861e-02, -3.728704e-02, 9.345711e-02, 2.207304e-02, -5.927784e-03, 1.777481e-02, -6.197956e-03, 9.448624e-02, -4.670843e-02, 7.228651e-02, -3.014956e-02, -3.701104e-02, 3.784356e-02, -7.552040e-02, -1.879576e-02, -7.916059e-02, 8.504850e-02, 9.862992e-02, 5.322202e-02, 8.723310e-02, 1.804354e-02, 1.079370e-01, 6.808166e-02, 2.481607e-03, 5.220414e-02, 4.027111e-02, -3.619735e-02, 6.027697e-02, -2.047269e-02, 6.284089e-04, 4.755115e-02, 1.105463e-01, 1.608840e-02, 8.253535e-02, -9.980703e-02, -8.039638e-02, 3.909509e-02, 8.270660e-02, -6.458834e-02, 4.810772e-02, -5.487187e-03, 6.064397e-02, 8.533029e-02, 1.068980e-01, 5.103921e-02, 5.916143e-02, 1.717682e-02, -2.047840e-03, 2.195080e-02, -5.860000e-02, 7.891315e-02, 4.203661e-03, 6.936106e-02, 8.322832e-03, 3.083677e-02, 1.208971e-01, 7.746456e-02, 5.201029e-03, -6.602169e-02, -5.735143e-02, 1.576824e-02},
{5.995334e-02, 1.302631e-01, -7.368822e-03, 4.317772e-03, 3.087427e-01, 1.347143e-01, -2.867774e-02, -5.165358e-02, 8.063172e-02, 1.416081e-02, 2.193446e-02, -5.758554e-03, -6.788465e-02, -6.108460e-02, -7.600177e-02, 1.049773e-01, 1.624611e-02, -5.711884e-02, -4.042340e-02, -8.256243e-02, 5.160511e-02, 3.495822e-02, -1.020688e-02, 1.639401e-02, 9.713381e-02, 3.439621e-02, -7.251240e-02, -4.945132e-03, -5.301142e-02, -4.869846e-02, -2.131561e-03, -7.046246e-02, 3.334855e-02, 1.910119e-02, -1.163706e-01, 1.046865e-01, 5.287424e-02, 7.708311e-02, 1.758670e-02, 4.930282e-02, 3.971981e-02, 3.444315e-02, -3.624946e-01, -1.266112e-01, -2.455006e-02, -2.408459e-02, 1.173017e-01, -3.471974e-02, 7.138176e-02, -3.508414e-02, 1.271658e-03, 4.465335e-02, 1.246981e-02, -4.746325e-02, 5.576476e-02, 6.014166e-03, -1.574780e-02, -1.421836e-03, -9.558532e-02, -1.209278e-01, -8.003525e-02, -3.803683e-03, -3.391778e-02, 3.132660e-02, 5.201849e-02, -1.254670e-01, -2.306783e-02, -7.388078e-02, 1.563766e-02, -1.353192e-01, 9.802830e-02, -6.957209e-02, 6.267575e-02, -5.671413e-02, 1.183160e-02, -9.447443e-02, 1.151755e-01, 3.661636e-02, 7.904413e-02, -6.986038e-02, -2.347055e-02, -1.110095e-01, -9.383219e-02, 4.239025e-02, 1.059401e-02, 3.843790e-02, -3.297996e-02, -1.255790e-02, -2.387741e-02, -3.623102e-02, 2.137422e-02, 1.153744e-01, 2.886847e-02, 1.954861e-01, -1.925137e-02, -6.713000e-02, -1.476548e-02, 4.234228e-02, -7.679515e-02, 3.643895e-02, -2.090037e-02, -9.852767e-02, -5.686119e-02, 9.045397e-02, 7.738940e-02, 6.386285e-02, 8.585897e-02, -3.145219e-02, 7.110000e-02, -1.854556e-02, 1.168515e-01, -1.335789e-01, -1.345588e-01, 4.662212e-02, 8.452551e-03, 5.559867e-02, 3.638856e-02, -2.595296e-02, -4.178239e-02, -3.557650e-02, -4.695251e-02, 8.752968e-02, -8.273704e-02, -1.888476e-02, -6.068697e-02, 5.042371e-02, -8.865494e-02, -8.512720e-02, -4.578530e-02, 4.699143e-02, -6.074867e-02, -3.248160e-02, 6.181473e-03},
{-2.302040e-02, 9.551878e-02, -3.812896e-03, -1.365216e-01, 2.119749e-01, -2.176824e-02, -7.923176e-02, -3.389224e-03, -1.400828e-02, -6.339729e-02, -1.350195e-01, 6.332653e-02, 8.610369e-02, -4.200062e-02, 6.630536e-02, -6.816021e-02, 5.278536e-02, 8.889369e-02, 4.177340e-02, -9.865919e-03, 1.778402e-02, -4.692832e-02, 3.919230e-02, -3.085089e-02, 7.252662e-02, -6.268099e-03, -6.623977e-02, 4.359305e-02, -1.713895e-02, 7.696009e-02, -2.372915e-02, -5.823809e-02, -1.242371e-01, 2.075729e-02, -8.897542e-03, 6.539950e-02, -1.096071e-01, 1.403093e-02, 1.087249e-01, 7.657144e-02, -9.039936e-02, 1.458276e-02, -1.679811e-01, -6.267282e-02, -5.261073e-02, -2.973480e-02, -7.793749e-02, -5.978822e-02, -7.315623e-02, -1.214726e-02, 6.588120e-03, -3.191660e-02, -4.418200e-02, 4.077986e-02, -5.041150e-02, -3.572644e-02, 4.030905e-02, -2.275450e-02, -4.933536e-02, -1.340638e-01, -5.543674e-02, -4.821196e-02, 4.036120e-02, 3.856763e-02, -1.835594e-02, 5.181333e-03, 7.925105e-02, -5.193985e-02, -3.720674e-02, -4.090852e-02, 3.793319e-02, 1.799080e-02, -6.006634e-02, 4.385668e-02, -5.380395e-02, -7.960395e-02, -2.979814e-02, 9.269649e-02, -4.448832e-02, 4.682356e-02, -1.464710e-02, -4.398182e-02, -5.256435e-02, 1.048504e-02, 7.253524e-02, 8.439003e-02, 6.410188e-02, -1.000516e-01, -8.891597e-02, -9.220785e-03, -5.298627e-02, -2.956297e-02, 1.465973e-01, -1.714670e-02, -3.422299e-03, 5.262337e-02, -4.592836e-02, 6.095476e-02, -8.128452e-02, 4.331302e-02, -2.390311e-02, 2.953494e-02, 2.838689e-02, -1.446712e-02, 3.986983e-02, -8.136467e-03, 3.762532e-02, -2.449901e-02, 8.723649e-02, -8.312950e-02, 3.184224e-02, -1.661694e-03, 9.780576e-02, -2.117305e-03, -2.363207e-02, 5.575904e-02, -3.183512e-02, 1.226872e-02, 7.092950e-02, -3.542816e-02, 3.988054e-02, -6.572247e-02, 3.966248e-02, -8.077461e-02, -8.407588e-02, 6.361732e-03, -9.575602e-02, 4.564722e-02, 2.237344e-02, 1.026006e-01, 5.500370e-02, -1.176245e-02, 5.797649e-02},
{1.965596e-01, 1.498783e-01, -8.234141e-02, -4.009342e-02, -6.502924e-02, 8.286203e-03, 5.092092e-02, -6.507353e-02, 1.127909e-01, 6.840123e-02, -4.199473e-02, -5.201428e-02, 3.649517e-02, -9.399208e-02, 1.613584e-02, -3.730558e-02, 1.100294e-02, -6.631417e-02, 7.667757e-03, -5.605252e-02, -4.081499e-02, -4.284685e-02, -3.079159e-02, -7.273519e-02, -2.314788e-02, 2.607427e-02, 4.591495e-02, 1.249181e-02, -4.604118e-02, 9.695996e-02, 8.165160e-02, -6.896842e-02, 1.104171e-01, 4.202801e-02, 6.932674e-02, -6.177866e-02, -6.701776e-03, -3.511561e-02, 4.714591e-02, -7.757448e-02, 3.482472e-02, -8.793022e-02, -1.810850e-01, 1.583064e-02, 6.907164e-02, -4.673131e-02, -1.384502e-02, 8.900394e-02, 4.729332e-02, -1.441386e-01, -8.921958e-02, 3.917871e-02, 2.759307e-02, -5.560637e-02, 7.629778e-02, 6.533872e-02, 5.345646e-02, -4.543054e-02, -2.330184e-02, -4.901741e-02, 4.457273e-02, 5.242443e-02, 3.696539e-02, -2.734600e-02, -5.677485e-02, -4.682584e-02, -3.056749e-02, 8.116318e-02, 1.881159e-02, -8.168068e-03, -7.320768e-02, -7.845290e-02, 7.269741e-02, 9.167519e-03, 3.850855e-03, -1.001795e-01, 1.611628e-01, -2.633729e-02, -4.792385e-03, -6.447718e-02, -6.333814e-02, -4.144042e-02, -9.228003e-02, 6.224491e-03, 4.745677e-02, 1.331461e-02, -8.320746e-02, -5.413413e-03, 5.677005e-02, 4.340091e-02, -8.118633e-03, -4.805221e-03, 1.310656e-02, -1.227389e-01, 2.303535e-02, -1.640217e-02, 5.247494e-02, 1.460636e-01, -5.504669e-02, 8.066852e-02, 6.475635e-03, -8.775296e-02, -2.028910e-02, -5.652917e-02, 2.342821e-02, 2.783275e-02, -8.132368e-02, 2.631825e-02, 9.539586e-03, 1.505735e-02, 6.457466e-02, -1.033351e-02, 2.828615e-02, 8.617790e-02, -4.644998e-03, 1.757705e-02, -5.597574e-02, -8.907557e-02, 5.087969e-02, -6.334078e-02, 4.658313e-02, -2.837205e-02, -1.709729e-01, -7.569277e-02, -2.794118e-02, 8.688758e-02, -7.786974e-02, -2.907079e-02, 6.330276e-02, -3.601558e-02, 4.057391e-02, 5.167654e-02, -5.104533e-02},
{1.252454e-01, -4.879571e-02, -3.721152e-02, 4.745056e-02, 7.291983e-02, -6.296927e-02, 2.655691e-02, -8.014022e-02, -8.363896e-02, -1.955278e-02, 4.878356e-02, 7.853728e-02, 1.274865e-02, -7.109758e-02, -7.210718e-02, 8.719378e-02, -4.590537e-02, -4.594426e-02, -4.340247e-02, 2.994182e-02, -5.353530e-03, -6.377880e-02, 5.645951e-02, 3.668243e-02, -3.931225e-02, 9.147968e-02, -2.756152e-02, -4.831343e-02, 2.973691e-02, 1.328570e-02, 4.748764e-02, 8.580264e-02, -5.695859e-02, -3.298348e-03, 5.379983e-02, 4.423319e-02, 1.866769e-02, 9.980150e-02, -5.931152e-03, -4.362668e-02, 7.653615e-02, -5.906514e-02, -1.865338e-01, -2.171207e-02, -6.144113e-02, 7.688745e-03, 1.650965e-02, 1.266531e-03, 4.232267e-02, 3.203609e-02, -3.660033e-02, 3.127253e-02, 3.184747e-02, 6.509213e-02, -2.816920e-02, 7.409311e-02, 7.139194e-02, -1.141346e-02, -6.074235e-02, -8.462009e-03, 3.149499e-02, -3.942955e-02, 1.208161e-02, -4.873426e-02, 6.326587e-02, 1.648542e-02, 3.213601e-02, 2.611598e-02, 8.459014e-02, 6.857629e-02, -7.358880e-02, -3.149706e-02, 1.340826e-01, -5.706579e-02, -8.594464e-02, 4.527048e-02, 3.586165e-02, 1.470964e-02, 1.117812e-02, -9.744538e-02, -4.555081e-02, 5.559449e-02, 3.361201e-02, 6.784018e-02, -2.077837e-02, 2.135641e-02, 7.230436e-02, 9.560727e-02, -6.134852e-02, -8.832266e-02, 2.847634e-02, -6.530485e-02, 5.281045e-02, 7.190769e-02, 6.216801e-02, -2.076563e-02, -1.805791e-02, 4.841325e-02, -7.190416e-02, -2.482278e-02, 2.093580e-02, 6.465869e-02, -6.428726e-02, 1.940204e-02, -5.390843e-02, -1.110623e-01, 4.373124e-02, -9.700239e-02, 5.485462e-02, -8.171866e-02, 5.334792e-02, -2.692830e-02, 2.146327e-03, -2.221623e-02, -6.807547e-02, -3.429034e-02, -6.418132e-02, -6.852786e-02, 1.746958e-02, 2.364969e-02, 4.956982e-02, 6.060479e-02, 3.507841e-02, -1.220427e-02, -9.268290e-02, 2.651889e-02, 3.769666e-02, 1.969179e-03, -1.414000e-02, -9.538191e-02, -2.646993e-02, -5.924223e-02, -3.884110e-02},
{-1.688831e-01, 1.183547e-01, -8.783101e-02, 1.282429e-01, 3.022758e-01, -2.980501e-02, -5.315665e-02, 7.439210e-02, 4.307391e-02, 4.900324e-02, -5.293592e-02, 3.249681e-02, 9.793028e-02, -4.105341e-02, 7.703433e-02, 1.692035e-02, 1.758529e-01, -4.871180e-02, -5.162063e-02, 2.719639e-02, 7.138470e-02, -7.558370e-02, 8.935351e-02, -1.546795e-03, -9.561728e-02, -9.721902e-03, 1.001757e-01, -9.015527e-02, -9.090079e-02, 2.334274e-04, 9.772551e-02, -8.455608e-02, 3.670249e-01, 1.542392e-02, -2.194647e-01, -8.293135e-02, -9.800556e-02, 1.589404e-02, -2.961928e-02, -7.357828e-02, -1.688063e-01, 4.516110e-02, 2.210542e-01, 2.974198e-01, 4.307227e-02, 5.710826e-02, -3.240684e-02, -6.113474e-02, -6.695922e-02, -1.276341e-01, 1.686399e-01, -2.427966e-02, -3.269308e-02, 1.071576e-01, 1.034329e-01, -4.248083e-02, 9.710301e-02, -7.975526e-03, -5.926220e-02, 6.108167e-02, 9.482281e-03, 7.012257e-02, -1.662422e-02, -6.382051e-02, -7.364463e-02, -4.353946e-02, -5.673303e-02, 7.724839e-02, 1.681854e-02, 3.153834e-02, 7.496662e-02, -3.522737e-02, -1.999064e-01, -9.792563e-02, 8.659340e-03, -2.002866e-02, 1.435525e-01, 4.765724e-02, -5.430501e-02, -5.966387e-02, 2.729153e-01, 1.197064e-01, 6.465446e-02, 6.625581e-02, -3.427028e-02, -1.091208e-01, 9.377472e-02, 2.820724e-02, 9.007212e-02, 4.657954e-03, -3.814293e-02, -1.669366e-02, 6.000154e-02, -2.927844e-02, 1.200573e-01, 2.031243e-02, 5.619798e-02, 7.297679e-02, 6.949624e-03, -8.471902e-03, -1.279854e-02, 1.168832e-01, 1.670897e-01, 4.767353e-02, -9.333479e-02, 3.632129e-02, -6.979853e-03, 3.202008e-02, 4.019479e-02, 5.300728e-03, 1.192233e-02, 8.561222e-02, 2.695405e-01, 9.293348e-02, -1.008112e-01, 7.927416e-02, -3.214183e-02, -3.142675e-02, 8.303580e-02, 8.171874e-02, 5.841577e-02, -3.955776e-02, -1.187617e-01, -5.744138e-02, -3.243443e-02, 3.370044e-02, 6.486326e-02, -6.623098e-02, 2.104643e-03, 1.513881e-01, 1.295506e-04, 2.315481e-01, -8.776743e-02},
{-1.387333e-02, 2.580219e-02, 5.752968e-02, 5.800633e-02, 9.330198e-02, 3.226996e-02, -5.855707e-02, -4.031250e-02, 6.460923e-02, -2.852510e-02, 4.409940e-02, -6.335699e-02, -2.090671e-02, 2.877332e-02, 1.060484e-01, -4.646702e-02, 6.341801e-02, 1.699037e-02, 8.171175e-02, -6.925963e-02, 4.468466e-02, 5.189703e-03, -8.000924e-02, 3.091984e-02, 2.260133e-02, -7.578020e-02, 6.781480e-02, -4.031574e-02, -1.834553e-02, 3.969679e-02, -2.059381e-02, -8.650655e-02, -7.694522e-02, -5.841458e-02, -7.190733e-02, -5.108269e-02, 1.233054e-03, 2.229198e-02, 6.272455e-02, -4.711439e-02, -1.233125e-02, 8.678423e-02, 4.630303e-03, -4.638967e-02, -8.484935e-02, -4.634780e-02, 4.375564e-02, 4.098000e-02, 5.734039e-02, 8.981381e-02, 6.171536e-02, 6.081614e-02, -2.442529e-02, -4.198243e-02, 5.006707e-02, 6.438367e-02, -5.493069e-02, 7.448219e-02, -4.563313e-02, 9.078284e-02, 3.802584e-03, 5.380673e-02, 1.297668e-02, 5.789598e-02, -6.883156e-02, 5.808130e-04, 6.175786e-02, -3.722921e-02, 7.141546e-02, 3.909469e-02, 5.495127e-02, -1.600552e-02, -7.525804e-02, -9.559137e-02, 7.271423e-02, 3.594467e-03, 5.555393e-03, -2.949078e-02, -6.690196e-02, 2.494885e-02, 1.932815e-02, -3.634797e-02, 2.684376e-02, 1.761900e-02, 2.708848e-02, 6.253099e-02, -5.533462e-02, 3.903973e-02, 2.539453e-02, -1.235214e-02, 4.244372e-02, 8.394352e-02, 2.393355e-02, 1.096635e-01, -1.575962e-02, -2.368260e-03, 2.622694e-02, 3.204771e-02, 2.313918e-03, 2.400524e-02, 1.586253e-02, -2.552687e-02, 9.529256e-02, 1.985353e-02, -1.859115e-02, 1.810667e-02, -2.101878e-02, -8.731461e-02, 5.774618e-02, -6.321608e-02, -2.375773e-02, 5.896737e-02, 3.230564e-03, 9.795109e-02, -7.950582e-02, 6.790069e-02, -7.488905e-03, 2.912617e-02, 3.435806e-02, 4.944144e-03, -8.416772e-02, 2.819989e-02, -4.993917e-02, -3.539717e-02, 2.666596e-02, 2.592930e-02, 6.471864e-04, 4.224677e-02, -6.232125e-02, 5.271068e-02, 7.214821e-02, 4.706389e-02, -8.684776e-02},
{-7.250585e-02, -6.260346e-03, -8.070023e-02, -1.995487e-02, 4.041843e-02, 2.395719e-02, 4.291763e-02, -2.390859e-02, 1.003681e-02, 8.734355e-02, -5.662386e-02, -2.624504e-02, 3.351608e-02, 1.372856e-02, 1.190296e-02, 1.520699e-02, -4.579235e-02, 3.654148e-02, -3.739066e-02, 5.241384e-02, 3.306194e-02, 2.289324e-02, 7.254960e-02, 1.463053e-01, 2.252980e-02, -3.209138e-02, 1.975350e-02, 6.207481e-02, 7.184884e-02, 5.483922e-02, -7.288859e-02, 5.994863e-02, -3.291121e-02, -4.826281e-02, 7.269456e-03, 2.848448e-02, -1.151277e-02, 5.977156e-02, 3.925545e-02, 8.813269e-02, -8.974300e-02, -6.306762e-02, 1.734832e-02, -1.716138e-02, -6.783010e-02, -6.148408e-02, -1.860703e-02, -2.608744e-02, 3.846840e-03, 5.705425e-02, 7.656266e-02, -8.318584e-03, -1.966260e-03, -2.855279e-02, -5.879604e-02, -1.017647e-01, -3.680807e-02, -8.694836e-02, 5.234478e-02, -7.413917e-02, 1.272538e-02, 4.528275e-02, -5.159479e-02, -2.195113e-02, 4.411208e-02, 1.206531e-01, 2.834181e-02, 3.698950e-02, -5.924298e-02, -1.364508e-01, 4.698559e-02, -4.999952e-02, 3.869008e-02, 9.685015e-02, 5.938557e-02, 1.594836e-02, 3.857569e-02, -6.228954e-02, -7.121019e-02, 1.433173e-03, 1.085660e-01, 8.117397e-02, -4.410335e-02, -3.361623e-02, 1.520219e-02, 3.837050e-02, 7.719526e-02, -9.247264e-02, 8.520623e-02, 8.605993e-02, 4.355665e-02, -6.244495e-02, 4.087192e-02, -3.689397e-02, -2.517226e-02, 2.899508e-02, -8.886028e-02, 8.418828e-02, -1.823251e-02, -2.818948e-02, -9.850448e-02, 1.838134e-02, -1.130281e-01, 1.088680e-02, 5.259500e-02, -9.902171e-03, 1.895051e-02, 1.777007e-02, -8.159167e-02, 3.789570e-02, -1.206894e-01, -9.245125e-02, -5.846037e-02, -7.387617e-02, -6.284711e-03, 8.439881e-02, 6.239248e-02, -3.841718e-03, 3.842102e-02, -7.645058e-02, -7.815077e-02, 3.494145e-02, 1.046670e-01, -8.514595e-02, -7.625990e-02, -3.478238e-02, 4.452287e-02, -1.435264e-01, 8.961855e-02, -9.123661e-02, -7.950946e-02, 7.187766e-02, 3.938717e-02},
{3.067257e-02, -5.656176e-02, 5.772669e-02, -7.170162e-02, -9.729042e-03, 3.722363e-02, 1.189728e-02, -1.044780e-01, -6.795416e-02, -4.493479e-02, -8.127396e-02, 1.268616e-01, 6.475686e-02, 9.912633e-02, -2.168507e-02, -2.968567e-02, -2.667527e-02, 6.898446e-02, 1.829700e-02, -1.081521e-02, 7.128561e-02, -5.991859e-03, -5.544909e-02, 3.820829e-02, -2.174865e-02, -7.696143e-03, -3.094964e-02, -1.208820e-02, 6.187027e-02, 4.092117e-02, 1.136600e-01, 4.579563e-02, -2.646398e-02, -1.038290e-01, 1.028671e-01, 1.397739e-02, 5.260483e-02, -5.138453e-02, 2.079833e-01, 3.616364e-02, 7.774111e-02, 9.183629e-02, -2.826697e-01, -3.137055e-01, 6.779493e-04, 6.078034e-02, 5.781005e-02, 8.018830e-02, 1.906152e-01, 1.279091e-01, -1.306974e-01, 1.079407e-01, -1.176758e-01, -8.000714e-02, 1.634948e-02, -1.574815e-03, 1.091623e-01, 9.092392e-02, 1.309079e-02, -1.294837e-01, -1.156576e-01, 7.492107e-02, 1.974476e-02, -7.344146e-02, -3.758190e-02, 5.887187e-02, -2.993681e-02, -1.734641e-02, 2.714086e-02, -2.010030e-01, -3.102732e-02, 7.598939e-03, 1.440433e-01, 1.119776e-02, -7.258749e-02, -1.253276e-01, 1.272933e-01, 4.504382e-02, 3.025898e-02, 1.350299e-01, -8.392598e-02, -2.119417e-02, -1.279121e-01, -2.123529e-02, 1.010138e-02, -6.992406e-02, 6.542996e-02, -7.489054e-02, -7.738419e-02, 1.763450e-02, -8.011216e-04, -1.844001e-01, 1.423959e-01, -1.324887e-01, 1.215556e-01, -5.451124e-02, 2.807276e-02, -4.242095e-02, -9.254404e-03, 8.789782e-02, 1.520032e-02, -4.591529e-02, -8.185644e-02, -9.149730e-02, 6.333421e-02, -2.079380e-02, -5.809862e-02, 1.997071e-02, -5.319525e-02, -7.906605e-02, -1.028788e-01, -1.833076e-01, -2.025391e-02, -4.924111e-02, 3.632357e-02, 3.614917e-02, -8.436687e-02, -5.496052e-02, -2.033455e-02, 6.674499e-03, -1.003730e-01, -6.497154e-02, 7.250853e-02, -2.122307e-02, -8.993213e-04, -3.675520e-02, -6.449326e-02, 1.894968e-02, -7.664084e-02, 2.780931e-03, 2.030171e-02, -3.788698e-02, -2.647807e-02},
{8.522762e-02, -1.116704e-01, 3.727481e-02, 8.012842e-02, -1.324117e-01, 3.676565e-02, 7.190046e-02, -8.786660e-02, 1.747104e-02, -6.160632e-02, 4.223041e-02, 4.225615e-02, -3.234355e-02, -4.731702e-02, 3.746045e-02, 9.802663e-02, 1.091822e-01, -7.820518e-02, 4.042422e-02, -3.314042e-02, -6.928620e-02, 4.667410e-02, 4.424120e-02, -1.061806e-01, -4.213747e-03, -5.006631e-03, -9.396356e-02, -1.821874e-02, -1.606475e-02, 1.288309e-02, -2.605489e-02, 6.599084e-02, 4.701855e-02, 1.314830e-01, -4.787777e-02, 2.049933e-03, 5.108140e-02, -3.085040e-02, 1.179771e-02, 7.819578e-02, -6.314272e-03, -1.934078e-03, -1.191491e-01, -1.221535e-01, -3.637160e-02, -1.077643e-01, 9.653796e-02, 1.075138e-01, 2.164295e-02, 3.449250e-02, -1.893865e-03, 3.961807e-02, -7.511921e-02, 4.121204e-02, 8.120622e-02, 7.426063e-02, -3.587292e-02, -8.341462e-02, -2.576987e-02, 1.058971e-02, -1.405283e-02, 2.394098e-03, -2.052285e-03, -4.801708e-02, 3.141873e-02, -7.171356e-02, 2.116965e-02, 7.042763e-02, -7.151444e-02, 3.117881e-02, -3.724409e-02, -1.352725e-02, 6.078575e-02, -5.650800e-02, -9.230212e-02, 9.456487e-03, 4.806395e-02, -3.230611e-02, 1.597002e-02, -9.939363e-02, 4.395142e-02, 3.248084e-02, -3.195418e-02, -3.892970e-02, -1.990311e-02, -4.499381e-02, -4.493516e-02, 1.771613e-02, 1.970669e-02, -2.940538e-02, -5.656563e-02, -1.681857e-02, -3.030038e-02, -1.171606e-02, 2.399058e-02, -7.319549e-02, 9.645409e-02, 1.014744e-02, 5.836964e-02, -7.853684e-02, -2.794811e-02, 6.910916e-02, 1.446716e-02, -2.553365e-02, -1.143394e-01, 4.742682e-02, 6.141448e-02, 3.421195e-02, -3.195642e-03, -8.422257e-02, 8.023216e-02, 2.151831e-02, -5.145690e-02, -3.207040e-02, -2.738764e-02, 4.136873e-02, -2.337250e-02, -1.096685e-01, 2.909253e-02, -6.996535e-02, 3.168909e-02, -1.784528e-02, -1.050057e-02, 4.536849e-02, -9.053617e-02, 7.122125e-03, 6.024751e-02, -9.534287e-02, -2.105037e-02, -5.435579e-02, 1.776870e-02, -1.059785e-01, -2.249327e-02},
{-1.831326e-01, -8.031943e-02, 9.476281e-02, -2.358440e-02, -1.873842e-02, -9.137402e-02, -4.937701e-02, 6.325008e-02, 6.580452e-02, -7.235111e-02, -1.222755e-01, 4.524612e-02, 6.945691e-02, -2.004748e-02, 5.204111e-02, 6.449038e-02, -2.532232e-02, -4.178497e-02, -1.697725e-03, -7.479317e-02, -3.684787e-02, -4.808708e-02, -5.350503e-02, -7.180427e-03, -1.051920e-02, -3.420815e-03, 3.139775e-02, -6.125889e-02, 3.180672e-02, -8.136229e-02, -2.100086e-02, 7.747325e-02, -1.028439e-01, -2.053550e-02, -3.234081e-02, -3.237308e-02, -1.044350e-02, 9.177320e-02, -2.640860e-02, -9.149574e-02, 6.008562e-02, -3.556790e-03, 2.073846e-01, 6.666411e-02, -4.017284e-02, 8.570369e-02, -4.267959e-02, 7.667238e-03, 3.454889e-02, 2.038269e-02, 9.096308e-02, -5.562734e-02, -4.605660e-02, -1.965354e-02, 3.129666e-02, 7.884282e-02, -7.464883e-02, -7.037739e-02, 1.217711e-03, -2.025705e-02, -5.648211e-02, 4.020694e-02, -6.437754e-02, -3.129009e-02, -3.459727e-02, 1.220568e-02, -3.490063e-02, -6.911652e-02, -2.397907e-02, -4.204977e-02, -8.873583e-02, -6.574947e-02, -1.137996e-01, 7.324620e-02, 4.711746e-02, 5.008433e-02, -1.443033e-01, -1.264178e-02, 2.319356e-02, -1.058296e-02, -1.454691e-03, -9.392159e-02, -3.089228e-02, 1.263371e-02, -1.045576e-01, 6.484564e-02, 1.105976e-02, -4.907289e-02, -2.855332e-02, 5.405942e-02, 4.584940e-02, 1.296877e-01, -1.173391e-02, 6.404576e-02, -8.109731e-02, 4.551804e-02, 3.904791e-02, -5.049538e-02, -2.973420e-02, 1.636939e-02, -6.710562e-03, 2.013227e-02, 3.017045e-02, 9.097623e-02, 8.647592e-02, -3.361415e-02, -1.829231e-02, 2.670144e-02, 4.318406e-02, -4.076413e-02, -1.436258e-01, -5.991703e-02, 4.896370e-02, 8.358481e-04, 3.331538e-02, -5.282256e-02, -5.563649e-02, 4.181444e-02, 5.045448e-02, -7.153697e-03, 2.219458e-02, 3.733825e-02, -3.772483e-02, -7.979024e-02, -4.828455e-02, -3.896170e-02, 1.403819e-02, 1.188985e-01, 1.306888e-02, 8.679784e-02, -4.389879e-02, 3.104808e-02, -7.381938e-03},
{2.095006e-01, -5.772210e-02, -5.155145e-02, -1.073118e-01, 1.482438e-02, 6.067445e-02, -6.591906e-02, 1.297703e-02, -1.674542e-02, -5.371103e-02, 6.565796e-02, -3.530097e-02, -8.354333e-02, 2.423289e-02, -8.246616e-02, -4.706684e-02, -3.308771e-02, 7.452718e-02, 9.008200e-03, 6.394540e-02, -1.045155e-01, -4.440205e-02, -2.407644e-02, -1.175992e-01, 5.363518e-02, 5.321078e-02, -3.217271e-02, -4.428006e-02, 8.606634e-02, 4.570776e-02, -8.774367e-03, -8.567464e-02, 1.026746e-02, 6.897409e-02, 5.014211e-02, 5.730913e-02, 4.095002e-02, 3.615024e-02, 6.337260e-02, -3.369678e-02, 7.083303e-02, 4.115804e-02, -2.839462e-02, -1.018252e-01, -7.278343e-02, -9.028606e-02, -6.611249e-02, 4.947303e-02, -3.735002e-02, -2.664674e-02, -5.872099e-02, -6.721054e-02, 7.036060e-02, -6.073607e-02, -3.349012e-02, 3.288624e-02, -3.989131e-03, 4.227413e-03, 6.915901e-02, -3.350611e-02, -5.754058e-02, 8.667367e-02, 1.734032e-02, 5.136777e-02, -2.290408e-02, 3.613807e-02, 3.003260e-02, 7.944104e-02, 4.676645e-02, -1.005567e-01, 2.606132e-02, 1.062098e-03, 8.115178e-02, -1.658571e-02, 8.500420e-02, -3.795969e-02, -5.817278e-02, -7.685371e-02, -2.196253e-02, 2.674005e-03, -7.922111e-02, -2.248921e-02, -2.450261e-02, -3.525970e-02, 9.275613e-02, 6.833041e-02, -5.703894e-02, -1.102207e-02, 5.678366e-02, -6.666425e-02, 7.525388e-02, -7.039495e-04, 8.916098e-02, -1.082461e-02, 1.879309e-02, 1.214196e-02, 5.266480e-02, -2.708666e-03, -2.339120e-02, 8.798621e-02, 5.419759e-02, 8.690412e-02, -5.747101e-02, -3.337235e-02, -8.975029e-04, -9.722641e-02, 3.886515e-02, -8.501566e-02, -4.491116e-02, 9.838890e-03, 1.050509e-01, -1.032459e-01, -4.723506e-02, -1.692310e-02, -4.729596e-02, 1.395907e-02, 1.760396e-02, -4.062046e-03, 1.465850e-02, -4.558479e-02, 2.677822e-02, 3.236672e-02, 6.339201e-03, -1.471982e-02, -4.547397e-02, 6.774571e-03, -5.547669e-02, -9.226296e-02, 4.189787e-02, -4.234302e-02, -5.131950e-03, 6.028812e-02, 6.485390e-02},
{4.478390e-02, 5.354901e-02, -1.523316e-02, 6.357420e-02, -5.144798e-02, -2.417585e-02, 6.149928e-02, 7.806774e-02, 7.292457e-02, -5.403190e-02, 1.458170e-01, -6.710506e-02, 2.767721e-02, -6.048844e-02, 7.014989e-03, -6.872012e-02, 6.507728e-02, 2.119818e-02, 4.378879e-02, 2.991198e-03, -8.978526e-02, 1.020317e-01, 9.307498e-02, -9.802367e-02, 8.427820e-02, 9.553735e-03, 4.258982e-03, 3.932916e-02, -6.221556e-02, 1.484860e-02, -2.651785e-02, -5.323924e-02, -5.308232e-02, 4.061434e-02, 6.852254e-02, 6.913563e-02, 2.003840e-02, -2.705988e-02, -4.679555e-03, -1.368533e-02, 1.681941e-01, 4.237695e-02, -1.378966e-01, -7.775597e-02, 3.731697e-02, -9.224474e-02, 6.977971e-02, 4.048691e-02, 1.387583e-01, -2.031130e-02, -1.101479e-01, -3.447758e-02, -3.907022e-04, 5.501671e-02, 9.129933e-02, 7.646466e-02, -5.778927e-02, 9.812668e-02, -3.609708e-02, -3.041802e-03, 6.297468e-03, 5.400080e-02, 7.001307e-04, 4.256982e-02, 1.937024e-02, 7.988853e-03, -1.069234e-02, 4.105382e-02, -1.993860e-04, 1.987282e-02, -4.941579e-02, 7.433657e-02, 1.202657e-01, -1.531964e-02, -6.926423e-02, 4.796580e-04, -3.366829e-03, 4.646106e-02, -1.164189e-03, 5.296674e-02, -4.618004e-02, -5.865244e-02, 4.636354e-02, 2.158143e-02, 1.016544e-01, 4.416128e-02, 1.766626e-02, 1.065654e-01, -2.686325e-02, 1.250046e-02, -3.723222e-02, 8.136435e-03, 3.661361e-03, 1.209672e-01, -5.166370e-02, -1.876337e-02, 2.091059e-02, -1.664188e-02, -6.030809e-02, 8.387631e-02, 5.919857e-02, -1.337546e-01, -1.308078e-02, 2.417368e-02, -1.407782e-01, 4.319553e-02, 8.036124e-02, -3.689728e-02, 1.500603e-02, 4.460838e-02, 2.148147e-02, 4.536205e-02, -1.497892e-01, 4.189004e-02, -7.888182e-02, 5.607865e-02, -5.392528e-02, 2.069709e-02, -2.354643e-02, -8.610515e-02, -5.187836e-02, 4.660471e-02, -1.363294e-01, -7.622297e-02, 4.109300e-03, -6.078917e-03, -4.324435e-02, 6.123022e-03, 8.183505e-02, 3.574305e-02, -3.922377e-02, -3.321501e-02, 7.414524e-02},
{-6.772929e-02, 3.460016e-02, -9.806133e-03, 6.978039e-02, -6.383421e-02, 3.299629e-02, -5.424722e-02, -1.402143e-02, -3.550141e-04, -8.689121e-03, -5.570940e-02, -9.068923e-02, 3.818120e-02, -3.901890e-02, 1.196445e-02, 2.561216e-02, -9.510459e-02, 7.996791e-02, -4.419202e-02, -5.178362e-02, 2.102800e-02, -4.916725e-02, -1.137641e-01, 7.012866e-02, -5.309983e-02, 1.727988e-02, 2.146283e-02, 4.844180e-02, 5.585381e-02, -6.412825e-02, 1.210856e-02, 7.654326e-02, -5.644122e-03, 3.771473e-02, -4.929705e-02, -1.530001e-02, -8.318542e-02, 4.184427e-03, -9.795085e-02, -4.203636e-02, -4.512865e-02, 4.611618e-02, -4.047203e-02, -9.085719e-02, -6.917460e-02, -1.798487e-02, -9.228597e-02, -8.288371e-02, 1.937720e-02, 6.415395e-02, -3.785338e-02, -6.865042e-02, -7.735251e-02, 1.209107e-02, -9.111506e-02, -7.501159e-02, 8.625127e-02, 6.592438e-02, -1.642801e-03, -7.084853e-03, -6.202566e-02, -6.916597e-03, -2.899986e-03, -2.502242e-02, -5.103263e-02, 5.401534e-02, -1.384684e-02, 1.975106e-02, -8.678322e-02, -2.134953e-02, 3.009444e-02, 6.899107e-02, -7.629187e-02, 9.059286e-03, 5.090540e-02, -6.653848e-02, 3.414847e-03, 8.942555e-02, -1.934008e-02, -3.233483e-02, -6.118567e-02, 8.255122e-02, -2.014678e-02, -6.880079e-02, -7.497482e-02, 2.130229e-02, 5.558764e-02, 2.582834e-02, -1.649691e-02, -7.618792e-02, 3.804726e-02, -6.330717e-02, 6.907960e-02, 5.868435e-02, 4.166269e-02, 1.152142e-01, -5.494184e-02, 1.101904e-01, 6.114232e-04, -8.595800e-03, -2.115253e-02, 7.823236e-02, 5.270723e-03, -5.508542e-02, 1.732989e-02, 7.289885e-02, -6.312904e-02, 4.516599e-02, 1.611154e-02, -4.481259e-02, -1.207454e-01, 6.046759e-02, -1.173472e-02, 6.755836e-02, 6.641011e-02, 1.646449e-02, 5.470221e-04, -5.237387e-02, 1.865824e-02, 1.381338e-02, 2.056505e-02, -1.269064e-02, 3.985172e-02, -4.452663e-02, 4.958831e-02, 2.071565e-02, -1.259765e-03, 3.886598e-02, 7.221642e-04, -2.688208e-02, -8.605549e-02, 4.549929e-02, -1.570362e-02},
{-1.136757e-01, -1.009637e-02, -6.008507e-02, 9.339260e-02, 9.223045e-02, 6.575378e-02, -2.574363e-02, -4.621674e-02, 8.538111e-02, -8.326676e-02, -5.268246e-02, -7.557884e-02, 6.646465e-02, -7.596036e-03, 2.344734e-02, 4.659752e-02, -4.480519e-03, -7.958997e-02, 2.644900e-02, 1.236846e-03, -1.287758e-03, -7.931899e-02, 2.602386e-02, 1.087424e-01, 6.788364e-02, -1.115906e-01, 6.219552e-03, 5.437267e-02, -2.077379e-02, -6.619707e-02, 4.341696e-02, -2.928486e-02, -8.895458e-02, -1.876815e-02, -6.413529e-02, 2.939427e-02, -1.715282e-02, 5.430641e-02, -7.096986e-02, 5.498289e-02, -3.903797e-02, -3.559303e-02, -6.658015e-02, 1.749679e-02, -7.481210e-02, 1.102907e-02, 4.294428e-02, -8.358526e-02, 2.615783e-02, 7.670593e-02, 6.779786e-02, -9.606470e-02, -6.014719e-02, -1.886967e-02, 4.318934e-02, 5.350601e-02, -3.452702e-02, 1.016869e-01, 7.195112e-02, 5.985691e-02, -6.206118e-02, 4.037339e-02, -1.577879e-02, 2.438077e-02, -1.526116e-02, -4.530034e-03, 4.452785e-02, -5.443792e-02, -5.674220e-02, 6.082723e-03, 1.478968e-02, -8.396232e-02, -8.301415e-02, -1.679085e-04, -3.056921e-02, -5.932338e-02, -6.392332e-02, -1.698911e-02, -6.699966e-02, 8.257847e-02, -7.219704e-02, -5.734892e-02, -5.890619e-02, 2.559003e-02, -7.386867e-02, 7.717735e-02, 8.000759e-02, -8.737957e-03, -6.859113e-02, 6.385935e-02, -2.856450e-02, 8.224837e-03, -4.344762e-02, 2.452513e-02, 5.370206e-02, -6.564914e-03, -2.100835e-03, -6.953064e-02, -5.988811e-02, 7.294750e-02, -5.376224e-02, 2.653546e-02, -1.814261e-02, 4.599109e-02, 7.563384e-02, 5.155086e-02, 2.418619e-02, -4.862387e-03, -6.436731e-02, -2.117654e-03, 6.375868e-02, 9.139247e-02, -7.729969e-02, 7.518294e-02, -4.103128e-02, 9.066936e-02, 3.257285e-02, 5.809610e-02, 6.448503e-02, -4.683054e-02, 4.117576e-02, 5.350743e-02, 4.303513e-02, 7.187527e-02, -3.323858e-02, 6.677002e-02, 6.245608e-02, 9.762462e-02, 3.621523e-02, -7.985032e-02, 3.486871e-02, 4.681949e-02, 7.073095e-02},
{-2.524472e-02, 1.909771e-01, -2.408855e-01, -6.042238e-02, 1.408625e-01, -3.640752e-03, -6.653307e-02, 2.741595e-02, 2.501484e-02, -3.084114e-02, 1.585474e-01, -1.213132e-01, 7.930977e-02, -6.862971e-02, 1.148452e-01, 2.152505e-02, 1.548422e-02, -5.082883e-02, 3.818940e-02, 2.937584e-02, -4.604471e-02, 4.220409e-02, -6.328173e-02, 1.056086e-02, -2.223209e-02, -2.292874e-02, -3.368243e-03, 2.556687e-02, -6.011503e-02, -5.968785e-02, -1.276331e-02, 4.046590e-02, 2.041408e-01, 1.789743e-02, -1.665517e-01, 6.732396e-02, -1.986048e-01, -1.715980e-02, -1.371931e-03, 3.463713e-03, -6.023297e-02, 9.996644e-02, -1.249441e-01, 1.674561e-01, -5.345894e-02, 3.813653e-02, -3.272082e-02, 1.403936e-02, -1.164238e-01, 1.289465e-02, 3.942314e-02, -4.086992e-02, -9.359414e-02, 1.216550e-01, 1.547726e-01, -3.863486e-02, -4.956283e-02, 2.078687e-01, -5.543850e-02, 1.826961e-01, -4.826773e-02, -1.361935e-02, -5.545916e-02, -7.640621e-03, -1.213367e-01, -6.471362e-03, -5.500120e-02, 5.115790e-02, 1.199024e-03, -3.419931e-02, -5.747985e-02, -5.222073e-03, -2.749315e-02, -1.123511e-01, 8.989529e-03, -1.326966e-02, 1.490222e-01, -1.107741e-02, -1.370426e-01, 6.486531e-02, 6.189844e-02, 2.046571e-01, 8.135558e-02, -7.019142e-02, 8.121030e-03, -1.533354e-01, -3.560431e-02, 4.850950e-02, -9.820756e-02, -9.967338e-02, -9.840167e-02, -5.879622e-02, 1.412198e-01, 1.657273e-01, 1.292051e-01, 2.450589e-04, 7.449142e-02, 2.449855e-01, 7.523720e-02, -5.161924e-02, 4.802196e-02, -1.217701e-01, 9.751971e-03, -4.819550e-02, -1.155964e-01, 6.869108e-03, 6.967301e-02, -1.776578e-02, -1.148028e-02, 1.278123e-01, -4.821245e-02, -1.154502e-01, -4.925603e-02, 8.359139e-02, -1.238373e-01, 5.415399e-02, -3.150189e-02, -1.652562e-02, -7.811427e-03, 7.367550e-03, 1.709153e-02, 9.626266e-02, -1.861404e-01, -1.008264e-01, 7.692979e-02, 1.239405e-01, -1.708998e-02, 2.900294e-02, -1.138762e-02, -9.924700e-03, 6.884016e-02, 2.130100e-01, -3.842757e-02},
{4.383152e-02, -6.442440e-02, 2.175802e-02, 6.029823e-02, 2.727564e-01, -8.050828e-02, 6.965739e-02, 3.583296e-02, 8.049246e-02, -4.160126e-03, 5.928875e-02, -1.264982e-02, -4.515737e-02, -3.027509e-02, -1.067227e-02, -3.483402e-02, 4.544594e-02, -6.126961e-02, 4.236431e-02, 1.650374e-02, 3.294339e-02, -7.125919e-02, 9.207943e-02, 4.781555e-03, 5.416629e-02, 1.386059e-01, -1.023401e-01, -1.959345e-02, -7.124686e-02, 4.383964e-02, -8.462812e-02, 2.768923e-03, -3.026178e-02, 4.504668e-02, 4.663822e-02, -6.609883e-02, 5.178575e-02, 3.102194e-02, -5.652219e-02, -3.869085e-02, 1.683758e-01, -3.264666e-02, -3.475729e-01, -2.220391e-01, -4.213673e-02, 2.678234e-02, -8.094186e-02, 9.958488e-03, 7.762504e-02, 4.254174e-02, 1.814359e-02, -8.263860e-02, -3.646832e-03, -3.519594e-02, 6.361780e-02, -1.645939e-02, 3.102958e-02, 6.590301e-02, 6.846935e-02, -1.665525e-01, -1.180414e-01, -6.051671e-02, 1.571265e-02, -8.043342e-02, 2.456282e-02, 9.353714e-02, 8.650807e-02, -4.515338e-02, 3.017353e-02, -2.408088e-02, -2.457681e-02, -1.794590e-02, 6.160507e-02, -3.504339e-02, 7.943369e-02, -3.222852e-02, -6.326824e-02, -9.853372e-02, 7.621696e-02, -6.251974e-02, -1.365813e-01, -1.035693e-01, -3.059658e-02, -6.241759e-02, 1.327763e-02, 2.103105e-02, -1.817798e-02, 4.831382e-02, 2.056066e-02, 6.095523e-02, -4.225145e-02, -2.548765e-02, -2.494008e-02, 1.595970e-01, 3.906009e-02, -4.060156e-02, -7.042491e-02, 2.315493e-01, -2.400452e-02, 6.239875e-02, 7.775789e-02, -4.822699e-02, -8.818247e-02, -5.731329e-02, -5.802168e-02, -5.713211e-02, -1.051226e-02, -7.826512e-02, 5.389294e-02, 7.290849e-02, 1.132886e-01, -1.265649e-01, -2.210671e-01, 2.724507e-02, 6.305110e-02, 9.495192e-02, 2.377022e-02, -7.628942e-02, -8.990615e-03, -5.372090e-02, 2.053155e-02, 7.024381e-02, -6.081831e-02, 3.295920e-02, 7.848682e-03, -3.549380e-02, 3.009002e-02, 6.382641e-03, -1.023106e-01, -1.311120e-01, -8.327565e-02, 3.128956e-02, 1.136270e-02},
{9.406950e-02, -4.547582e-02, 4.145961e-02, -1.070210e-02, 4.999120e-02, 7.051399e-02, 6.958468e-02, -5.472889e-03, 4.234404e-03, -4.632997e-02, 6.081014e-02, 9.634744e-02, -1.230050e-01, -2.576069e-02, -9.940046e-02, 9.084799e-02, 7.520920e-02, 3.175752e-02, 2.540139e-02, -9.440710e-02, 9.927247e-02, -5.409341e-02, -8.858908e-02, 3.410887e-02, 2.788727e-02, 5.199813e-02, 5.326999e-02, 4.242963e-02, -8.155635e-02, -4.334682e-02, 2.041983e-02, 6.697983e-02, 6.792948e-03, 6.312025e-02, 4.826740e-02, 3.369231e-02, -2.328184e-02, 1.413519e-02, -5.999441e-02, -5.479749e-02, 1.836805e-02, 5.704697e-02, -1.313871e-01, -2.017015e-01, 3.850104e-02, 2.398506e-02, -2.933114e-03, -1.631037e-02, -4.234786e-02, -2.037510e-02, 1.797082e-02, -8.493299e-03, -2.958657e-03, -1.676514e-02, 9.923654e-02, 2.810955e-03, -5.170128e-03, -3.544230e-02, -8.867072e-02, 9.360894e-02, 2.470693e-02, -6.283705e-02, 9.422090e-02, 1.623401e-02, 2.520268e-02, 6.905720e-03, -1.024484e-01, 3.105048e-02, -5.311698e-02, 4.898898e-02, -7.099983e-02, -2.516191e-02, -8.826876e-03, 3.729142e-02, -7.568783e-02, -9.554143e-02, -4.053598e-02, -6.521185e-02, 6.249731e-02, -1.241771e-01, -1.216452e-01, 1.786257e-02, 2.470671e-02, 1.476558e-02, -9.173682e-03, 7.867863e-02, 7.759450e-02, 1.079131e-01, -3.326487e-02, 1.811204e-02, 9.456562e-02, -4.877506e-02, -6.705910e-02, 5.686493e-02, -4.890969e-02, -4.716866e-02, 4.525666e-02, -8.522436e-03, 3.762711e-02, 8.593883e-02, -7.424127e-02, -5.741132e-02, -7.559957e-02, -7.969714e-02, -9.424517e-02, -1.622558e-02, -5.838863e-02, 4.643287e-02, -7.444771e-02, -8.094795e-02, -5.080819e-03, 2.995136e-02, -3.481706e-03, 7.614203e-02, 5.073105e-02, -1.224364e-02, -3.091711e-02, -6.934218e-02, -5.346419e-03, -8.311587e-03, 3.464229e-02, 2.037683e-02, 1.263253e-01, 8.357830e-04, -2.677534e-02, -2.217957e-02, 2.050093e-02, -7.435127e-02, -9.090918e-02, -8.033025e-02, -6.506889e-03, -6.946335e-02, 3.435997e-02},
{1.337975e-01, -1.653700e-02, -5.206214e-02, -1.643160e-01, -1.050903e-01, -1.411450e-02, 9.134245e-02, -7.857586e-03, -3.050826e-02, -2.122092e-02, -6.259199e-02, -5.069262e-02, 9.495163e-02, -2.077901e-02, -5.529234e-02, -3.642727e-02, 3.667620e-02, -7.602791e-02, -8.804753e-02, 9.162845e-02, -5.965531e-02, 2.562167e-02, 3.900373e-02, -2.943213e-02, 1.028390e-01, -8.759314e-02, 1.197045e-02, -1.265184e-02, -3.595934e-02, 4.756667e-02, 6.494908e-03, -4.674300e-02, -9.601901e-02, 1.136472e-01, 6.711935e-02, 7.751114e-02, 2.840933e-02, 4.155313e-02, 8.963198e-02, 1.105091e-01, 1.874504e-02, -8.198588e-02, 4.999870e-03, -1.397703e-01, -3.193390e-02, -1.156175e-02, 1.469731e-02, 4.898674e-02, 7.431570e-02, -1.175917e-03, -5.734328e-02, 9.366280e-02, 9.245628e-03, -1.065866e-01, 5.453268e-02, -4.607993e-02, 9.372086e-02, 7.911080e-02, 2.447794e-02, 5.716513e-03, -1.331820e-02, -5.450331e-02, 7.669843e-02, 2.484054e-02, 4.918202e-02, 5.872963e-02, 9.119760e-03, -6.227141e-02, -3.454577e-02, -9.409186e-02, -8.434504e-02, -7.229640e-02, -8.162456e-03, -7.424816e-02, 6.560751e-02, -9.192753e-02, 5.566412e-03, -8.094315e-03, 1.169153e-02, -3.633923e-02, -6.691422e-02, 9.378495e-02, -3.047856e-03, -9.960650e-02, -2.753750e-02, 6.318855e-02, 1.312623e-02, 1.889626e-02, -1.116638e-01, -8.279089e-02, 7.892197e-03, -7.741417e-03, -1.391043e-04, -9.605101e-02, -3.489349e-03, -7.316231e-02, -1.047552e-01, -4.534612e-03, -1.334645e-02, -7.569754e-03, -9.125052e-02, -4.897665e-02, -1.310109e-02, -6.599954e-02, 3.586295e-02, 4.197201e-02, -2.384141e-03, -8.142754e-02, -8.078507e-03, -8.378515e-03, 7.425234e-02, -3.413638e-02, -1.457547e-03, -4.167259e-02, 5.793200e-02, 1.073092e-02, -6.463336e-02, 6.906885e-02, -5.177474e-02, -5.453370e-02, -2.506792e-02, 5.137325e-02, 3.479682e-02, 5.450786e-03, -4.934547e-02, 2.055820e-02, 2.509503e-02, -9.075981e-02, -5.455495e-02, -2.066502e-02, -3.415537e-02, -1.715476e-02, 4.372034e-02},
{-1.885538e-02, -2.461851e-02, -1.280277e-02, -7.880843e-02, -5.149351e-03, -1.422245e-02, 7.746973e-02, 3.409482e-03, 7.662789e-02, 4.882207e-02, -1.836623e-02, 1.374154e-02, -3.313716e-02, -3.979614e-02, -5.600685e-02, 3.638768e-04, -3.078301e-03, 8.494765e-03, 3.857608e-02, -1.469594e-02, 1.119355e-02, -7.865497e-03, -5.583476e-02, 9.403381e-03, -2.204949e-02, 9.403618e-02, -2.243345e-02, 4.699433e-02, 4.102405e-02, 2.754619e-02, -4.598041e-02, 2.318067e-02, -3.591757e-02, -8.759361e-03, -2.306204e-02, -6.457339e-02, 1.261321e-01, 5.537570e-02, 3.147987e-02, 3.114709e-02, 8.856726e-02, 9.219865e-02, 2.626467e-01, 7.113182e-02, 2.529772e-02, -1.241431e-02, 8.561478e-03, 4.612396e-03, 1.090950e-01, -2.131618e-02, 7.137911e-02, 2.253060e-02, 1.518838e-02, -6.196274e-02, -7.017685e-02, 1.877574e-01, -4.519194e-02, 3.803211e-02, 3.422866e-02, -2.871921e-02, 2.745624e-02, -6.962666e-02, -4.388551e-02, -3.053895e-02, 1.847740e-02, -2.790108e-02, 7.765976e-02, -5.638735e-02, -3.769512e-02, 1.813082e-01, -7.141114e-03, -2.335379e-02, 3.984220e-02, -5.104303e-02, -1.322815e-02, 2.283314e-02, -8.445115e-02, 7.393924e-02, 9.878976e-04, 7.000012e-02, 1.162882e-02, -5.168483e-02, -4.352114e-02, -4.729712e-02, 8.097395e-03, 8.324315e-02, -6.288807e-02, -6.151524e-02, 2.926580e-02, 3.496668e-02, -6.457496e-02, 5.534003e-02, -5.323180e-03, 2.477747e-02, -1.260190e-01, -6.133368e-02, 2.114427e-02, -4.358796e-02, 8.331401e-02, -2.373827e-02, -6.434476e-02, -2.032530e-02, 4.717191e-02, 1.920289e-02, -2.540729e-03, -2.174553e-02, -3.183669e-02, 4.637227e-02, 2.717423e-02, -1.581058e-02, 9.749341e-02, -1.036175e-02, 1.299691e-02, 2.969325e-02, 5.689642e-02, -2.366116e-02, 1.130482e-02, 3.013610e-02, 6.254698e-02, -1.141519e-02, -2.150116e-02, 3.985090e-02, 4.977829e-02, 5.388483e-02, -1.476202e-02, 5.962311e-02, -3.840417e-02, -1.758737e-03, -3.894129e-02, 1.990238e-02, 2.462243e-02, 5.571014e-02, 6.028469e-02},
{1.724011e-01, -1.147988e-01, 1.361001e-02, 3.504891e-02, -3.006424e-02, 5.997204e-02, 1.284884e-02, 3.601413e-02, 1.565492e-02, -4.212605e-02, -3.341860e-02, -8.266173e-03, -6.222324e-02, -2.759225e-02, 1.606393e-02, 2.440806e-02, 3.319848e-02, 3.378392e-02, -8.659315e-03, 4.620923e-02, 3.108013e-03, 1.003555e-01, -2.791904e-02, -1.213764e-01, -1.597885e-02, -1.358494e-02, 3.801616e-02, 7.278682e-02, -7.661159e-04, 9.458695e-02, 6.538054e-02, -1.770757e-02, 3.966738e-02, -4.089275e-02, 3.767354e-02, -4.437084e-03, -4.666273e-02, 9.864041e-02, 3.367523e-02, 4.752540e-02, 7.389110e-02, 1.779001e-02, 2.557732e-02, -9.682973e-02, 4.579563e-03, 7.320502e-03, 1.867280e-02, -5.196911e-02, 8.972144e-03, -1.263888e-01, 5.401031e-03, 8.325864e-03, -5.402613e-02, 1.720361e-02, 6.937570e-04, -5.338797e-04, -3.061143e-02, -1.263220e-01, 5.500391e-02, -5.843395e-02, -3.787393e-03, 2.611770e-03, 1.819272e-02, 9.422606e-03, 2.061814e-03, -5.444081e-02, 4.499948e-02, 9.518781e-02, 9.224013e-02, 1.377545e-02, -3.508615e-02, -1.891026e-02, -9.466537e-03, 5.946796e-02, -1.692922e-02, -2.171013e-02, -9.456477e-02, -5.571045e-02, 1.027538e-01, -8.474877e-02, 2.935940e-02, 4.164596e-03, -7.511418e-02, 3.980936e-02, 9.430625e-02, 1.696543e-02, -6.575610e-02, 5.145970e-02, -1.007454e-02, 1.919768e-03, 7.180527e-02, 1.819481e-04, 5.097875e-02, -8.030887e-02, 3.044094e-02, -1.020501e-01, -5.674688e-02, 2.414397e-02, 3.356457e-02, 5.636413e-02, 7.745215e-02, -3.187206e-02, 7.629505e-02, -2.757129e-02, -5.053600e-02, 3.005279e-02, -5.683022e-02, -7.674070e-03, 9.484519e-02, -1.647542e-02, 3.802006e-02, -1.174669e-01, 3.432528e-02, -1.427508e-02, -4.795348e-02, -9.469568e-02, 1.394929e-02, 5.372196e-02, -8.999013e-02, -5.916021e-03, 4.197891e-02, 9.160194e-02, -7.456500e-02, -3.790862e-02, 1.626476e-02, 4.010817e-02, -8.510782e-02, -9.264424e-03, -6.317249e-02, -1.513865e-02, -5.405805e-02, 6.681595e-02, 6.157495e-02},
{1.435972e-01, -5.020680e-02, -5.768146e-02, 6.453265e-02, 1.081561e-01, -8.275782e-03, -4.659546e-02, -1.092705e-01, 9.265746e-02, 6.119205e-02, 3.646119e-02, -2.567810e-02, -7.498333e-02, -2.646982e-02, -9.908549e-02, -2.372158e-02, 9.334573e-02, 6.259120e-02, -2.182346e-02, 4.364645e-02, -7.844926e-02, -1.787820e-02, -4.304667e-02, 3.611673e-03, 1.015242e-01, 3.584182e-02, 5.328561e-02, -2.673053e-02, -7.480005e-02, 4.627725e-02, 1.940220e-02, -3.622561e-02, -5.758044e-02, 4.164920e-02, 9.335380e-03, 7.642858e-02, 1.069903e-03, -1.170514e-02, -7.086742e-02, -1.267838e-02, -4.505944e-02, 8.141325e-03, -1.989622e-01, -9.158261e-02, 5.189221e-02, -6.226611e-02, -4.638744e-02, 8.043814e-02, 2.535988e-02, -5.547828e-02, -6.745598e-02, 4.250854e-02, 6.842431e-03, -7.330694e-02, -1.360162e-02, 4.209618e-02, 6.985739e-03, -3.558530e-03, -1.055227e-01, 2.950999e-02, 5.216686e-02, -5.184219e-03, 1.330606e-01, 5.768869e-02, 4.064242e-02, -6.653783e-02, -9.319418e-02, 7.606916e-02, -4.893097e-02, 5.761295e-03, -3.818122e-03, -2.053468e-03, 8.561721e-02, -4.333150e-02, -2.176572e-02, 4.193420e-03, -3.003842e-03, 3.201773e-02, 2.329931e-02, -9.380466e-02, -2.206118e-02, 1.102146e-01, -1.031127e-01, 5.044914e-03, -3.646724e-02, 1.040102e-01, -8.412129e-02, 5.619990e-02, 3.895282e-02, -4.663166e-02, -1.117858e-02, 3.923675e-02, 4.917431e-02, 7.559886e-02, 1.160770e-01, 3.495474e-02, -1.834171e-02, 5.126673e-02, -3.198791e-02, -4.867882e-02, -6.970152e-02, -3.407723e-02, 8.501182e-02, 4.649451e-02, -1.989181e-02, 6.946143e-03, -1.814663e-02, -6.534785e-02, -6.343409e-02, -6.082170e-03, 5.277991e-02, -6.093716e-02, -5.757233e-02, -1.346090e-02, -2.679654e-02, -3.157223e-02, 7.208893e-02, -1.325237e-02, -5.783145e-02, -3.814681e-02, 4.366028e-02, 2.989211e-03, -8.137045e-02, -8.009491e-02, -2.644361e-02, 9.483868e-02, -7.691272e-02, -1.461524e-01, -1.388417e-02, -1.014407e-02, -6.772511e-02, -4.701061e-02, 5.337280e-03},
{-7.581315e-01, 8.992340e-02, -3.567550e-02, 5.182163e-03, -2.428996e-02, 1.134181e-02, -1.129596e-01, 1.231260e-01, -1.755484e-01, 1.269402e-01, 1.041640e-02, -3.107350e-02, -1.157734e-03, -2.707911e-02, 6.119277e-02, -4.338425e-02, 4.814365e-02, 1.153282e-01, 1.115006e-01, 1.215969e-01, -2.798575e-01, -9.203149e-02, -1.149967e-01, -3.417156e-02, -1.752994e-01, -1.633282e-02, 8.425717e-02, -1.472535e-01, -1.288880e-01, 1.048705e-01, 1.043444e-01, 4.507954e-02, 4.464898e-02, -1.377717e-01, 4.924224e-02, -1.415896e-02, -9.986088e-02, -8.131765e-02, 1.106120e-01, -1.690669e-02, -1.180590e-01, 1.538851e-01, 4.020466e-01, 4.391589e-01, 9.466620e-02, 9.567790e-02, -2.673728e-02, -3.096857e-02, -5.518701e-02, -1.512989e-02, 3.901131e-02, -1.080074e-01, -6.145437e-04, 8.978996e-02, 9.420351e-03, -8.850916e-02, -1.144866e-01, 5.031589e-02, -3.113975e-03, -1.854441e-02, -6.727997e-02, -4.376543e-02, -7.061005e-02, 5.746544e-02, -9.625705e-02, 5.322879e-02, 7.439308e-02, -1.481091e-01, -6.839646e-02, -1.336749e-01, -1.272537e-01, -4.693237e-02, -1.616483e-01, 1.164956e-01, 1.267706e-01, -2.977311e-02, 1.122012e-01, -1.290582e-01, -4.774957e-02, 1.400864e-02, 1.914116e-01, 1.478852e-02, 2.215557e-02, 1.066128e-01, -9.006646e-02, -1.441647e-01, 1.562585e-01, -1.850961e-02, 1.212066e-01, 1.807162e-02, -1.761569e-01, -8.336419e-02, -1.574909e-01, -4.369664e-01, -3.161571e-02, -4.230630e-02, -8.949819e-02, -1.548347e-01, 4.083670e-03, -1.516496e-01, -1.270040e-01, 1.714063e-01, 2.279781e-02, -3.111012e-02, 6.906088e-02, 6.808039e-02, -1.441186e-01, 1.334354e-02, -1.718589e-02, 1.229380e-02, 4.020079e-02, 2.904839e-02, 1.546384e-01, 4.109571e-02, 2.018382e-02, 8.197162e-02, -9.299994e-02, 1.500103e-01, 1.305383e-01, 4.082307e-02, 7.689381e-02, -7.074017e-02, 1.369935e-01, -5.311035e-02, -5.173580e-02, -1.183587e-01, 8.596578e-02, 1.919478e-01, 1.646859e-01, 1.092682e-01, 7.873078e-02, 1.622625e-01, -2.871536e-02},
{-1.243592e-01, -7.173929e-02, 9.149272e-03, -4.296192e-03, 2.217605e-02, -1.418575e-03, -8.169896e-02, 2.441100e-02, 4.618235e-02, -5.513115e-03, -4.029994e-02, 1.661826e-02, 4.391608e-02, -2.967018e-02, 1.001875e-01, -8.495849e-02, -1.280852e-01, 2.503476e-02, 4.980597e-03, 2.429298e-02, 8.681181e-02, -5.117410e-02, -1.823603e-02, 7.358146e-02, 3.075017e-02, 9.050021e-02, 2.517959e-02, -9.794243e-04, -1.211531e-01, -9.953272e-02, -9.395596e-02, 9.130354e-02, -1.033798e-01, 3.390748e-02, -6.537472e-02, 2.271153e-02, 4.079055e-02, -5.242678e-02, -2.253207e-02, -9.989008e-02, -1.266364e-02, 1.159574e-01, -9.758017e-02, -6.493065e-02, 1.081923e-01, 1.956154e-02, -3.735832e-02, -1.162234e-01, 4.868919e-03, 1.555448e-01, 7.411821e-02, 4.966649e-03, 9.404863e-02, -6.864053e-02, -6.754599e-02, 6.799898e-02, -1.319684e-01, 2.096234e-02, 8.540852e-03, -3.537979e-02, -1.055269e-01, 2.973673e-02, -6.198903e-02, 5.563869e-02, -8.183204e-02, 8.444877e-02, -4.990831e-02, -1.264242e-01, -9.887342e-04, 1.283750e-01, 1.901689e-02, 5.590518e-03, 6.658684e-02, -5.557388e-02, -1.853214e-02, 3.471706e-03, -1.293787e-01, -1.243589e-01, -7.660615e-02, 2.885643e-03, -6.624775e-02, -5.385983e-02, 8.071853e-02, -3.257647e-03, -3.515773e-02, 5.525859e-02, -3.600105e-02, 1.855147e-02, -3.650521e-02, 3.509967e-02, 3.351351e-02, -6.170099e-02, -5.728828e-03, 7.084535e-02, 7.900147e-02, 1.003869e-01, -2.571145e-02, 1.627137e-01, 7.803957e-02, -6.643344e-02, 3.866679e-02, -2.885703e-02, -8.403630e-02, -9.271032e-02, 7.421011e-02, 9.319212e-02, 2.485285e-03, 3.435593e-02, 3.256202e-02, 9.200495e-02, 9.397951e-02, -1.097848e-02, -8.953582e-02, -1.107184e-02, -4.903737e-03, -1.578621e-02, -1.012220e-01, 1.207306e-01, 5.346400e-02, 1.100933e-01, 2.931467e-02, -1.268009e-01, 9.967337e-03, -3.752166e-02, 3.741706e-02, 1.590040e-02, 4.891854e-03, -1.581759e-02, -4.406751e-02, -1.381174e-01, -7.046117e-03, 5.651722e-02, 5.930277e-02},
{-2.432190e-01, 5.658639e-02, 8.539491e-02, -3.962274e-02, 3.394662e-02, 6.735483e-02, -7.840267e-02, -7.673127e-02, -2.483964e-02, 6.055185e-02, 5.235181e-02, -1.013090e-01, 8.285433e-02, -1.960071e-02, 5.463241e-02, -1.233441e-03, 2.833515e-03, 2.024174e-02, 5.565024e-02, 1.705200e-02, 7.889205e-02, -7.657161e-02, 3.004348e-02, -8.580493e-02, -1.728536e-05, -1.144525e-01, 4.689335e-02, -6.049049e-02, 8.928842e-02, 5.386296e-02, 9.265333e-03, 8.334549e-02, -2.578385e-02, -1.195006e-01, -7.486922e-02, -3.013599e-02, -3.672973e-02, 1.123787e-03, 4.978392e-02, -6.560279e-02, 5.888217e-02, -3.284897e-02, 7.558281e-02, 1.086113e-01, 1.531155e-02, 2.802080e-02, 6.699284e-02, -5.712795e-02, 5.888269e-02, 5.049116e-02, 1.162566e-01, 3.060280e-02, 7.081849e-02, -5.295245e-02, 6.759458e-02, 1.581978e-02, -1.325249e-01, 1.037157e-01, 6.064234e-02, -4.231541e-02, -1.225267e-02, 5.821868e-02, -8.918791e-02, 2.738266e-02, 1.505156e-02, 3.138775e-02, 3.404682e-02, -4.288507e-02, 2.240671e-02, -3.901434e-02, 6.439441e-02, 1.252213e-02, -5.470106e-02, 5.083646e-02, 8.148408e-02, 1.560876e-02, 2.154507e-03, 1.543445e-02, 2.131373e-02, 1.190989e-01, 1.242640e-01, -8.016133e-02, 2.961528e-02, 4.625487e-02, -1.102891e-01, -4.580976e-02, -5.378682e-02, -9.997563e-02, 8.337173e-02, 7.912391e-02, 1.313999e-02, 1.168257e-01, 8.173649e-03, -5.628875e-02, -3.249922e-02, 5.134759e-02, -6.154855e-02, -1.610022e-01, 9.711022e-04, 4.080208e-02, 3.586884e-02, 9.055522e-04, -6.148018e-02, 1.209370e-01, 1.568606e-02, 5.883866e-02, 1.609003e-02, 7.966980e-02, 9.006127e-03, 3.201135e-02, -9.561273e-02, 1.402610e-02, -1.914544e-02, 5.609988e-02, -7.435786e-02, 6.940897e-02, 1.404508e-02, 3.518208e-02, -6.414577e-02, 9.233540e-02, 1.096078e-02, -9.056256e-02, 4.849315e-02, -2.441618e-02, 4.779950e-02, -7.455703e-02, 2.518984e-03, 1.297044e-01, 5.964364e-02, -1.166105e-02, 7.535332e-02, -1.561300e-03, -5.955727e-02},
{3.073412e-01, 3.226750e-02, 9.252582e-03, -6.689006e-02, -1.005075e-01, 1.014157e-01, -9.083696e-02, 3.082944e-02, 1.120013e-03, 8.153488e-02, -6.447676e-03, 7.807533e-02, -1.363696e-02, -5.701452e-02, -5.197509e-02, 9.545204e-02, 3.390000e-02, -7.908122e-02, -8.209575e-03, -2.319282e-02, -2.616630e-02, -4.393458e-02, 9.415928e-02, -1.001543e-01, -3.071411e-02, -2.761116e-02, -1.015843e-01, -2.861685e-02, 2.188942e-02, -8.166550e-02, 4.892005e-02, -2.943728e-02, 5.935777e-02, 3.679454e-02, -6.378838e-02, 5.463134e-02, -1.085198e-01, 9.554210e-02, -1.652533e-02, 5.899199e-02, 6.513949e-02, 8.505365e-03, -2.356110e-01, -2.930155e-02, 2.167831e-02, 4.231897e-03, -7.929703e-02, 2.935362e-02, -2.990621e-03, -6.374947e-02, -2.656296e-02, 6.804710e-02, 5.600785e-02, -2.629609e-02, -3.427433e-04, 1.393761e-01, -3.599160e-02, 1.644960e-02, -4.219722e-02, 2.765444e-02, 4.438424e-02, 3.302975e-02, 1.073275e-01, 1.849857e-03, -5.683733e-02, -3.548383e-02, 7.858247e-02, 7.876303e-02, -1.076203e-02, 1.448929e-01, 6.065350e-02, 2.931560e-02, -1.234395e-02, -7.662961e-02, -6.472853e-02, -6.894656e-02, 6.782984e-02, -4.806808e-02, -4.180259e-02, -5.551341e-02, -3.546477e-02, 1.741085e-02, 5.605135e-02, -5.236733e-02, 1.350239e-02, 1.335926e-02, 6.806508e-02, 1.232611e-01, -3.419147e-02, -2.804350e-02, -4.497433e-02, -8.866491e-02, 4.136777e-02, 1.001852e-01, -6.573288e-02, -5.183346e-02, 2.787641e-02, -6.608879e-02, 5.679822e-02, -1.022907e-01, 3.778252e-02, -6.826294e-02, -3.854120e-02, -2.615035e-02, -5.923191e-02, -1.085561e-01, -6.051662e-02, -4.972436e-02, 2.575555e-02, 4.802176e-03, 1.076564e-01, -1.107807e-01, -9.071723e-02, 3.260971e-02, 7.790119e-02, 2.299069e-02, -5.251249e-02, -1.073063e-02, 1.142325e-02, -2.283162e-02, 1.378983e-02, 4.678463e-02, -2.202411e-02, -1.417066e-02, -1.048730e-02, 3.612945e-02, -9.828798e-03, -1.699438e-01, -6.110070e-02, -3.787871e-03, 2.541928e-02, 7.861043e-02, -7.655083e-02},
{-1.586877e-01, 1.037231e-01, 5.133030e-02, 3.805747e-02, 3.168359e-01, -1.108073e-01, -2.445445e-02, 7.799366e-02, -7.959132e-02, -5.932918e-02, 6.171233e-02, -2.743305e-02, -3.557389e-02, -3.013110e-02, 7.081862e-03, -4.365464e-02, -3.657417e-02, 9.300905e-02, -3.030498e-03, -6.959792e-02, 9.988836e-02, 3.613855e-04, 2.162860e-02, -6.598747e-02, 4.096051e-02, -2.033033e-02, 7.802933e-03, -8.958802e-02, 2.260298e-02, -8.797647e-02, -3.497852e-02, -6.475549e-02, -1.049606e-01, 1.274835e-02, -9.351104e-02, -1.081830e-01, 2.710307e-02, 7.895023e-02, -4.271388e-02, -1.263796e-01, -1.903828e-02, 2.130647e-02, -4.022275e-03, 2.115301e-01, -3.821772e-02, -4.562100e-02, 1.368016e-02, 2.949960e-02, -3.303814e-02, 1.013352e-01, -2.372351e-02, -2.672070e-02, 4.797395e-02, 8.000470e-02, 4.687613e-02, 1.438305e-01, -2.380702e-03, 8.803049e-02, 3.201621e-02, -2.931080e-02, 1.911809e-02, -2.267821e-02, -2.882361e-02, 8.565407e-02, -9.223558e-02, 9.093500e-02, -7.292863e-03, 2.412767e-02, 3.339465e-02, 1.411600e-01, 1.167602e-01, 8.125125e-02, -7.761200e-02, -7.882972e-03, -4.994901e-02, 1.303615e-01, -1.836336e-01, -1.809761e-02, -3.384908e-02, -5.395973e-02, -3.393506e-02, 5.531771e-02, 9.556470e-02, 4.545835e-02, 4.308927e-02, 4.213947e-02, 1.137279e-01, 4.954914e-02, 5.329893e-03, -1.732251e-02, -8.654909e-03, 3.905379e-02, -5.242418e-02, 2.886932e-02, 1.949722e-02, 1.206383e-02, -9.846640e-02, 1.329102e-01, -5.218962e-02, 2.400973e-02, -8.053069e-02, -3.867977e-02, -6.092426e-02, -1.532293e-02, -5.889443e-02, -6.127154e-02, -5.307939e-02, 5.287224e-03, -1.130292e-02, -1.866905e-02, 8.504927e-03, 9.050862e-02, 1.002344e-01, -5.845028e-03, 1.018752e-01, 2.750890e-02, -7.322104e-02, 8.181425e-02, -8.642615e-03, 6.308447e-02, -4.129450e-02, -1.100365e-01, -1.166562e-01, -8.170937e-02, 7.512835e-03, -7.296056e-02, 5.546752e-02, -1.014084e-01, 6.453243e-02, -7.282945e-02, 5.860396e-03, 3.252717e-02, -1.875972e-02},
{-2.416327e-01, 1.770858e-01, -4.459643e-02, -9.070488e-02, 2.075391e-01, -4.893207e-02, -5.948534e-02, 6.889920e-02, -7.454685e-02, -1.884017e-02, -9.158660e-05, -9.788815e-02, -3.173915e-02, 4.350315e-02, 1.167159e-01, -5.908747e-02, -5.558674e-02, 7.610245e-02, 6.617580e-02, -1.982471e-02, 1.050589e-01, 4.182592e-02, 7.133310e-02, 3.232811e-02, 3.560926e-02, -1.108004e-01, 1.834708e-02, 2.008594e-02, -4.974919e-02, -4.119001e-02, -1.644454e-01, 9.174074e-02, -8.124091e-02, 1.540282e-02, -5.669789e-02, -4.387739e-02, 6.691849e-02, 1.713947e-02, 4.699058e-02, -1.120494e-01, -1.187184e-01, 7.432383e-02, -8.036011e-02, 2.339586e-01, 1.106732e-01, 1.762100e-02, 1.474284e-02, -3.745355e-02, -1.072505e-01, -1.831640e-02, -9.302361e-03, 5.165382e-02, -3.598261e-02, 1.057316e-01, -8.340033e-02, 7.017901e-02, -5.540081e-03, 1.978179e-02, 7.508793e-02, -8.413165e-02, -4.460771e-03, -1.185944e-02, -7.177628e-02, 5.511872e-02, -2.243415e-02, 4.081230e-02, 5.256375e-02, 3.957727e-02, 3.712340e-03, 6.458777e-02, 1.079174e-01, -5.490770e-02, -6.954516e-02, -3.230422e-02, 7.106874e-02, 2.748154e-02, 4.567754e-02, 4.341814e-02, 2.993809e-02, 3.309547e-02, 1.051456e-01, -7.214685e-02, 4.884814e-02, -3.434982e-02, -6.391411e-02, -2.866088e-02, -4.227386e-02, -5.233036e-02, 7.636409e-02, 2.521298e-02, -4.642604e-02, -7.438395e-03, 2.437952e-02, -4.251567e-02, 9.954570e-02, -2.310383e-02, -2.545848e-02, 8.892016e-02, 3.978461e-02, -5.348720e-02, 3.864872e-02, -1.281967e-01, 2.432433e-03, -9.261400e-03, -1.085554e-01, 9.279466e-02, 9.452970e-04, -3.514593e-02, -5.617965e-02, 3.661054e-02, -9.852714e-02, 1.270695e-01, 3.063174e-02, 1.459852e-02, 2.287892e-02, 1.263113e-01, -2.298450e-03, 5.059324e-02, -8.443925e-03, 6.924165e-02, 1.719809e-02, -7.637289e-02, 1.126607e-02, 3.723014e-02, 5.350506e-02, -4.631383e-02, 7.075556e-02, 2.365518e-02, 8.538166e-02, -8.002755e-02, 2.256797e-02, -7.687425e-02, 6.478311e-02},
{-5.722668e-02, 9.476669e-02, -9.667305e-02, -2.973363e-02, 1.806996e-01, -1.932851e-02, -1.346213e-02, 4.642503e-02, 4.202374e-02, 1.560668e-02, 9.045028e-02, -1.005793e-01, -6.359996e-02, -1.704221e-02, -3.749819e-02, -8.842444e-02, -1.583214e-02, -6.065386e-02, -1.112611e-02, 1.160994e-02, -5.970570e-02, 8.050594e-02, 7.756521e-02, -7.517733e-02, -9.613107e-02, 1.419210e-02, -5.002078e-02, -8.349818e-02, -4.160264e-02, 5.172822e-02, -2.548392e-02, -1.994943e-02, 2.197691e-02, -2.122085e-02, -7.271226e-02, -3.417792e-03, 7.099048e-02, -4.705422e-02, -1.615480e-01, 8.989342e-03, 2.416245e-02, -5.531704e-02, 6.721139e-02, 2.013312e-01, -4.886924e-02, 3.225250e-02, -7.905135e-02, -6.144744e-02, -1.791665e-02, 5.440157e-03, -4.033533e-02, -3.285736e-03, 3.479901e-02, 4.450623e-02, -4.256564e-02, 3.510392e-02, -6.017905e-02, 4.504088e-02, 4.838698e-02, 2.869429e-02, -1.911391e-02, -2.846325e-02, 1.396467e-02, 9.133156e-02, -3.184849e-02, -1.417942e-02, 5.875220e-02, 2.537136e-02, -1.460138e-02, 8.323748e-02, 9.702088e-02, -2.564843e-02, -3.447216e-02, -4.105088e-02, -7.884542e-02, -5.219211e-03, 2.799834e-03, -4.017315e-02, -9.363603e-02, -2.975110e-02, 5.594293e-03, 8.558810e-02, 5.915019e-02, 6.493025e-02, 2.262418e-02, 1.704752e-02, -7.386760e-02, -4.991455e-03, 1.575457e-02, 6.308331e-02, -3.223538e-02, -1.004422e-01, -8.023406e-02, 1.228205e-01, 3.891957e-02, -2.088833e-02, 4.945717e-02, 9.180238e-02, 2.433604e-02, -3.586552e-02, -8.746357e-02, 6.553395e-03, 9.342822e-02, -3.302249e-02, 5.681236e-04, 3.606342e-03, 3.218335e-02, -1.625944e-02, -5.762031e-02, -1.722509e-02, 1.113887e-01, 8.421022e-02, -1.069234e-01, 3.167133e-02, 5.337368e-02, 4.258337e-04, 3.527672e-02, -6.241076e-02, -3.729870e-02, 2.083308e-02, 2.307771e-02, 1.857863e-02, -6.855278e-02, -5.100263e-02, 4.390451e-02, 7.007973e-02, -2.612117e-02, -6.867134e-02, 7.401672e-03, -7.636184e-02, -5.682027e-02, -6.173883e-02, 8.205786e-02},
{1.126256e-01, 6.578887e-02, -8.214989e-02, -1.308240e-03, 1.094241e-01, 3.721729e-02, 3.071642e-02, -7.561429e-02, 4.565867e-02, -4.719443e-02, 1.012264e-01, -3.991294e-03, -9.899888e-02, 6.422365e-02, -1.962642e-02, 5.542008e-02, 1.756642e-02, -7.638404e-02, -6.099522e-02, -5.147142e-02, 3.465130e-02, -3.318927e-02, -3.702610e-02, -6.444786e-02, 2.141736e-02, 1.102587e-01, -6.844492e-02, -7.072208e-02, 4.168014e-02, -1.720597e-02, 7.665483e-02, 6.018619e-02, 1.008182e-01, 1.864522e-02, 7.774918e-02, 4.427291e-03, 3.033184e-02, 1.123184e-01, -3.009099e-02, -7.882838e-04, 9.740972e-02, -2.772207e-02, -3.482730e-02, -6.834511e-02, -6.231662e-03, -1.378475e-02, -4.886227e-02, -5.199699e-03, 2.983071e-02, -1.324350e-01, -4.992633e-02, 1.057179e-01, -1.866541e-02, 8.454594e-02, 4.807761e-02, -1.619991e-02, -6.368338e-02, -9.404030e-02, 4.962430e-02, -5.968859e-02, -6.759965e-02, -1.624843e-02, -2.203965e-02, 2.350867e-02, 8.044527e-02, 7.326733e-03, -6.651415e-02, -4.435894e-02, -9.643237e-03, 1.199951e-01, 9.444759e-02, 5.057652e-02, 2.379612e-02, 2.774613e-02, 9.594351e-03, 5.881038e-02, 7.583576e-03, -7.586838e-02, 6.192692e-02, -9.188552e-02, -1.086445e-01, 4.755780e-03, 1.132916e-02, 5.530371e-02, -3.474775e-02, 8.399714e-02, -5.030191e-02, 4.006467e-02, 5.379722e-02, -1.930190e-02, -4.357948e-03, -4.844482e-03, -3.982079e-02, -9.096471e-03, 7.124376e-02, -7.261618e-02, -9.883184e-02, -4.459411e-02, -6.578893e-02, -1.546321e-02, -5.762508e-02, -2.143288e-02, -5.001198e-02, 2.633963e-02, 2.878870e-02, 3.976877e-02, 6.993596e-02, 9.431612e-02, 4.318970e-02, 7.670739e-02, 2.364719e-02, 5.333593e-03, -1.346386e-01, -3.104565e-02, -9.330352e-02, 7.736476e-02, 2.856729e-03, 5.999289e-03, -2.570429e-03, 5.476369e-02, 4.392982e-02, 9.416186e-02, -8.840045e-02, 2.328160e-02, 4.039281e-02, -4.229381e-02, -6.147632e-02, -1.564391e-01, 1.591304e-02, -6.577107e-02, -8.816113e-02, -8.224078e-02, -6.600568e-02},
{-4.677714e-02, -4.829676e-02, 5.555109e-02, 1.224521e-02, -4.411229e-02, 1.908519e-02, -7.451630e-03, -7.177164e-02, 7.858378e-02, 2.346962e-02, -5.258319e-02, -5.034243e-02, -4.601451e-03, -8.507574e-02, -3.009850e-02, -7.879394e-02, -5.784041e-02, -1.725457e-02, -7.275348e-03, -7.494475e-02, -7.871272e-03, 2.214047e-02, -4.985879e-02, -2.675596e-02, 6.999465e-02, -1.195997e-01, 4.206176e-02, 5.014820e-02, 2.463712e-02, -9.192058e-02, -3.501061e-02, -6.907402e-02, -1.039980e-01, -6.159539e-02, 8.957748e-02, 4.408823e-02, 8.690387e-02, -4.365559e-02, -1.772232e-02, -4.920302e-02, 5.231329e-02, 3.067287e-02, -1.395593e-01, -4.321194e-02, 7.115106e-02, 9.136506e-02, -3.150443e-02, -9.071089e-02, 2.662833e-02, 1.269786e-01, 7.711102e-02, -3.412410e-02, 2.639990e-02, -4.617278e-02, -3.816443e-02, -1.172096e-01, -5.034602e-02, 6.329558e-02, 1.790976e-02, 2.179589e-02, 4.257032e-02, 3.122220e-02, -1.102254e-01, 7.670731e-02, -4.189394e-02, -5.354450e-02, -8.608396e-02, -7.006546e-02, -9.180370e-02, -6.713793e-02, 4.485959e-02, 7.878412e-04, 7.468239e-02, -4.155565e-02, -2.371551e-02, -2.584724e-02, -9.805344e-02, -7.341883e-02, 4.165421e-02, 9.164065e-02, 3.566910e-02, -7.110207e-02, 8.829142e-02, -4.057859e-02, -8.648731e-02, 2.330582e-02, -3.746778e-02, -2.947417e-02, 1.099284e-02, 7.413723e-02, 4.507858e-02, 3.204532e-02, 6.554805e-02, -4.292419e-02, -4.552872e-02, -1.004993e-02, -1.913451e-02, 7.874320e-02, 9.248895e-03, 8.350619e-02, 5.775642e-02, 3.746467e-02, -9.643293e-02, -7.421476e-02, 5.971071e-02, 5.742066e-02, -8.140139e-02, 4.871197e-02, -4.053664e-02, 6.129645e-02, 2.117004e-02, -6.604262e-02, 3.419269e-02, 7.227245e-02, 5.802910e-02, -3.881042e-02, -7.800624e-02, 2.911187e-02, 6.629489e-03, -1.872344e-03, -4.956824e-02, 5.010282e-02, -1.012066e-02, 2.240568e-02, -8.409011e-02, -6.974193e-02, 6.628777e-02, 2.646668e-02, 4.021405e-05, -2.426432e-02, 2.333166e-02, -5.268279e-02, -7.690010e-02},
{-2.603315e-01, -1.190881e-01, 2.773240e-02, 8.645096e-02, -1.882979e-02, 8.952924e-02, 8.456946e-02, -2.679077e-02, 5.107591e-02, 3.071425e-02, 1.359208e-03, -1.020294e-01, 2.580052e-03, -6.937308e-03, 7.794183e-02, 6.633805e-02, 8.704339e-02, 1.019670e-01, 1.021673e-01, 2.262316e-02, 7.030359e-03, -6.677667e-02, -3.991450e-02, 1.270943e-02, 6.342209e-02, 1.992996e-02, 1.332531e-02, -3.701273e-03, 4.821626e-02, 5.334680e-02, 1.202239e-02, 2.878478e-02, -3.230313e-02, -1.366695e-01, 6.205391e-02, 3.466650e-02, 6.330908e-02, -1.197447e-01, 7.211263e-02, -9.054532e-02, -4.170844e-02, -7.846485e-02, 8.653530e-02, -9.363259e-02, -1.706144e-02, -3.364795e-02, 1.012313e-01, -6.374387e-02, 1.683331e-01, 4.997524e-02, 1.150109e-01, -2.874399e-03, 3.405865e-02, -2.196305e-02, -5.162883e-02, -1.327086e-01, -3.392319e-03, 6.317146e-02, -4.615375e-02, -1.130701e-01, 4.462382e-02, -8.527337e-02, -9.609090e-02, 7.073944e-02, -7.324935e-02, 5.144151e-02, 9.397130e-02, -1.055112e-01, -2.245983e-02, 4.807279e-02, -6.271846e-02, -9.250308e-03, -1.024335e-01, -5.302794e-02, -2.502828e-02, 2.870588e-02, -2.416956e-03, -9.255039e-02, -1.074045e-02, 1.021511e-01, -2.320136e-02, -3.344193e-02, -3.911566e-02, 3.444597e-02, 6.421786e-02, 1.004434e-02, 4.278539e-03, -4.315307e-02, 1.801371e-02, 2.157053e-02, 2.807696e-02, 1.387863e-01, -1.126267e-01, 1.445635e-01, 4.549794e-02, 1.169097e-02, -2.088098e-02, 5.658142e-02, 1.063708e-01, -6.571356e-02, -2.790497e-03, -1.100955e-01, -5.822484e-02, 1.038579e-01, -8.967181e-02, -1.789811e-02, 4.346367e-02, 3.059170e-02, -3.172985e-02, 6.561480e-02, -3.367436e-02, -7.495762e-04, 9.603935e-02, -2.371330e-03, -7.960705e-02, -8.305425e-03, 8.694319e-02, -5.515038e-02, 5.167920e-02, 9.763341e-02, -1.973028e-02, -6.876732e-02, 3.495190e-02, -2.594248e-02, 9.095481e-02, 1.569583e-02, -7.254946e-02, 1.159934e-01, 1.302376e-02, -4.178091e-02, -5.617066e-02, 1.183430e-01, -4.177396e-02},
{1.720976e-01, -7.230739e-02, -9.526492e-02, -3.860199e-02, 1.344678e-01, -4.247442e-02, 2.866017e-02, -8.982749e-02, -3.895929e-02, -8.467757e-03, 7.432222e-02, 8.980702e-02, -5.994792e-02, -5.802097e-02, -6.074289e-02, 7.923974e-02, 3.333552e-02, 1.151814e-02, -3.334725e-02, 1.647985e-02, -1.758993e-01, 5.238280e-02, 8.142152e-02, 1.597072e-02, 9.054845e-02, 4.987247e-02, 9.176021e-02, 1.162378e-02, -4.629222e-02, -2.235338e-02, 4.390987e-02, 2.572290e-02, 1.054074e-01, -4.210299e-03, 6.972133e-02, -2.834960e-02, -4.217960e-02, 6.031925e-02, -8.202780e-02, 2.451141e-02, -4.894123e-02, -3.871432e-02, 9.490193e-02, 1.347647e-01, 5.129295e-02, -9.706144e-02, -5.471015e-02, -3.746283e-02, -9.821656e-02, -1.136761e-01, -3.853125e-02, -1.747541e-03, -2.358135e-02, 7.886397e-02, 2.958703e-02, 5.959133e-02, 6.977357e-02, 3.001788e-02, 5.627762e-02, 8.938958e-02, 4.500379e-02, 5.862005e-02, -2.203736e-02, 4.375824e-02, 1.060885e-02, 1.806010e-02, -5.714060e-02, 7.188565e-02, -4.033495e-02, 1.082155e-01, 7.476366e-02, 6.929063e-02, -1.473259e-02, -9.066923e-02, -9.133568e-02, 1.685971e-02, 7.438520e-02, -6.003326e-02, -5.172408e-02, 2.094609e-02, 5.818124e-02, 4.574247e-02, 4.385790e-02, -6.785453e-02, 9.947891e-02, 7.129071e-02, -5.513588e-02, -2.166406e-02, -6.464919e-02, -7.576697e-02, -3.280810e-02, -1.186076e-02, 5.523913e-02, 6.060556e-02, -5.232029e-02, -3.068454e-02, 2.791609e-02, -3.713406e-02, 5.196200e-02, 7.901049e-03, 3.666380e-02, 8.609279e-02, -5.072314e-02, -1.545924e-02, 3.979726e-04, 6.430952e-03, 5.991242e-02, -3.050309e-02, 6.291960e-03, 1.375210e-03, 4.133657e-02, 8.974841e-02, 1.805287e-02, 5.501261e-02, -4.312649e-02, 6.527192e-02, 3.883439e-02, 7.406775e-02, -3.439717e-02, 4.173771e-02, 7.028348e-02, -1.198067e-02, -3.491805e-02, -9.015574e-04, -4.320659e-02, 6.072652e-02, -5.892303e-02, -1.254247e-01, 2.943481e-02, 2.302007e-02, -9.489396e-02, 4.582576e-02, 1.743164e-02},
{-3.420105e-01, 1.088472e-01, -4.410958e-02, -5.621537e-02, -2.870701e-02, -8.397038e-02, 1.100783e-02, 5.454723e-02, -1.654333e-02, -3.289883e-02, -7.238470e-02, -6.281041e-02, 2.611271e-01, 2.032643e-02, 1.196161e-01, -5.034452e-02, -5.572942e-02, -6.916044e-03, -6.045547e-03, -4.305510e-02, 1.842916e-01, -8.013174e-02, -3.754785e-02, -6.097665e-02, 5.494450e-02, -1.372130e-02, 4.751184e-02, -1.072375e-01, -4.707630e-02, -1.105489e-01, -4.208076e-03, 1.328038e-02, 2.045854e-01, 5.353824e-02, -1.191155e-01, 2.899624e-02, -4.702870e-02, 2.931836e-02, -4.418655e-02, 1.033330e-01, -1.361376e-01, 1.017056e-02, 1.918596e-01, 1.062654e-01, 1.147296e-02, -5.212996e-02, -6.665829e-02, -1.599675e-02, 1.896002e-03, -8.210714e-02, 9.780937e-02, -6.147882e-02, -1.158475e-01, 1.126858e-01, -3.744644e-02, -2.593037e-01, 3.718681e-02, 1.377837e-01, -1.018280e-01, -3.973934e-02, 1.826512e-04, 3.544657e-02, -1.273436e-01, -3.278664e-02, -5.339990e-02, 4.260258e-02, -8.302988e-02, 7.611823e-02, -2.158043e-02, -1.715707e-01, 1.455295e-01, 2.931117e-02, 1.534548e-02, -1.480964e-02, 8.852480e-02, 9.615130e-02, 2.594787e-01, 1.549226e-01, -6.305789e-02, 1.617681e-01, 1.140186e-02, -1.145456e-01, -3.677883e-02, 3.013149e-02, 8.674395e-02, -1.228143e-01, 5.299110e-02, -2.716091e-01, -1.467472e-02, -5.907546e-02, 1.065305e-02, -5.247169e-02, -2.618162e-02, -8.001895e-02, -8.171809e-02, 1.776490e-01, -7.284614e-02, 1.752322e-02, 7.384010e-02, 4.249166e-02, 3.679228e-02, -5.054663e-02, 1.885178e-02, 2.514153e-02, -1.687362e-01, 1.042107e-02, 3.143506e-02, 8.909109e-02, -8.438116e-02, -5.984936e-02, -7.663451e-02, 2.551109e-01, 2.507128e-01, 1.371721e-01, 1.211614e-02, 9.784699e-03, 2.088688e-03, -2.098273e-03, -1.459163e-01, -5.146784e-04, -7.580231e-02, -8.060660e-02, -4.747511e-03, 6.171710e-03, 4.652154e-02, -1.182928e-04, 6.861193e-02, 1.249774e-01, -2.712469e-02, 9.452713e-02, 4.419862e-02, -6.572247e-03, 2.645169e-02},
{6.975619e-02, -4.224464e-02, -2.337878e-02, 2.473039e-02, 1.419004e-01, 3.886190e-02, -1.115716e-01, 6.555681e-02, 6.728718e-02, -7.245148e-02, -3.270268e-03, -1.184806e-01, -1.466482e-01, 6.358695e-02, 5.080089e-02, -1.096357e-01, 5.683059e-02, 3.983837e-02, -6.298153e-02, -3.669100e-02, -1.071543e-01, 7.296117e-05, -1.259996e-02, -9.618935e-02, 7.699805e-02, 1.527627e-02, -3.889140e-02, -2.391858e-02, -1.145615e-01, -5.645014e-02, 2.867992e-02, -6.428412e-02, 6.052724e-02, 3.382449e-02, -8.765919e-02, -9.078506e-02, -4.159922e-02, -5.345234e-02, -1.373928e-01, -7.149071e-02, -9.508801e-02, 4.093692e-02, 1.530404e-01, 2.059172e-01, -1.551254e-02, -2.441228e-02, -1.465110e-01, 4.205208e-02, -1.742384e-01, 5.366742e-02, 4.350775e-02, -4.503012e-02, -8.119246e-02, 1.534562e-01, -4.934331e-02, 1.481299e-01, 3.904126e-02, 1.116546e-01, -3.416208e-02, 8.224902e-02, -7.322931e-03, -1.088667e-01, -1.111140e-02, -4.507370e-03, -7.967542e-02, -1.612839e-04, 8.516597e-02, -1.265243e-02, 3.593148e-02, 1.989485e-01, 8.193944e-02, 7.080317e-02, 2.206982e-02, -2.167998e-02, 4.876385e-02, -1.237609e-02, 2.475399e-03, 7.587890e-03, -1.183879e-01, -6.822734e-02, 5.993404e-03, -2.688455e-02, 6.243430e-02, -2.425904e-02, 4.481824e-02, -1.020900e-01, 3.095824e-02, 2.525919e-02, 4.278493e-02, -3.338826e-02, 5.235746e-02, -6.680840e-02, -1.994767e-02, 1.372823e-01, 6.674882e-02, 1.133026e-02, -3.909699e-02, 1.022788e-01, 8.317284e-02, -1.157099e-01, 5.215397e-02, -1.084867e-02, -5.157668e-02, 2.155492e-02, 1.447829e-02, -1.754830e-02, 2.807564e-02, -6.545276e-02, 4.299439e-02, -4.424338e-02, -2.517363e-02, -1.174258e-02, -1.155859e-01, 4.408733e-02, -5.246216e-02, -3.545296e-02, -8.620390e-02, 3.155146e-02, 5.818811e-02, 4.928858e-02, 9.260589e-02, -5.940132e-02, -3.181628e-02, -1.472546e-02, -3.255444e-02, 8.324668e-02, 1.024167e-01, -8.649207e-02, 1.030760e-01, -5.623372e-02, 7.343278e-02, -4.036807e-02, -4.727166e-02},
{-8.173922e-02, 1.768377e-02, 8.419716e-02, 7.838606e-02, -2.254530e-01, -1.081824e-01, 8.637058e-03, -3.658798e-02, 1.792454e-02, -8.341578e-02, 9.238621e-02, -9.656261e-02, 5.424668e-02, 1.037301e-01, -7.839785e-02, -7.350297e-02, -1.030421e-01, -7.187410e-02, 5.526729e-02, 6.914977e-02, 4.339711e-02, 3.286941e-02, 5.380382e-02, -6.854775e-02, 7.833482e-02, -1.163884e-02, 4.295945e-02, -1.083411e-01, -1.396331e-02, 6.405484e-02, -2.275314e-03, 6.216227e-02, -2.532926e-01, -1.976492e-02, 3.075821e-02, 3.311091e-02, 6.690063e-02, 7.654728e-02, -8.396221e-02, 2.632405e-02, 1.179166e-01, 7.543890e-02, -2.761933e-01, -4.626076e-02, 9.249195e-02, 7.895619e-02, -2.773992e-02, 4.369052e-02, 9.689737e-02, 6.592667e-02, -1.399145e-01, -3.708373e-02, 2.428489e-02, 8.730421e-02, -1.073323e-01, 1.389362e-02, 1.689948e-02, 1.189500e-02, -4.254659e-03, -7.220651e-03, 3.499630e-02, -7.650582e-02, 6.255720e-02, -6.399392e-02, 9.620829e-03, 9.664711e-02, -9.792130e-02, -4.411318e-03, 2.258308e-02, 7.010721e-02, 3.767430e-02, 9.098502e-02, 1.685530e-01, -3.721492e-02, 5.942334e-02, 4.013096e-02, -9.281052e-03, -3.701229e-02, 1.641129e-02, 6.430796e-02, -2.229437e-01, -9.797032e-02, -8.533158e-02, 5.650655e-02, -2.144398e-02, 7.630030e-02, 6.967326e-02, 5.971588e-02, 2.812382e-02, -4.446902e-02, -4.698953e-03, -1.299221e-01, -6.742501e-02, 1.670286e-01, -2.954291e-02, -3.880918e-02, -5.829148e-02, 3.150782e-03, 1.362967e-03, -9.930647e-02, 8.285375e-02, -4.326387e-02, -1.126608e-01, -8.354878e-02, -4.095710e-02, -1.943766e-02, -7.660752e-02, -9.375402e-03, -1.997079e-01, 9.696954e-02, -7.095885e-02, -4.517987e-02, -2.700168e-01, -6.583153e-02, 4.517911e-02, -5.603400e-02, -1.770739e-02, -1.442255e-03, 3.096411e-02, -1.647956e-02, 1.921726e-03, 3.541153e-03, 9.336931e-02, -8.530758e-02, -7.328507e-02, -5.800637e-03, -1.250491e-02, 4.969909e-02, 2.580497e-02, -4.531785e-02, 1.045063e-01, 9.985135e-03, 5.764186e-02},
{-1.433964e-01, -8.866143e-02, 8.324446e-02, -1.677700e-02, -1.499451e-03, -5.210751e-03, 6.516245e-02, 6.244686e-02, 1.992785e-02, -1.604567e-02, -9.660879e-02, -3.286024e-02, 6.887989e-02, 2.563781e-02, 5.303305e-03, -1.081319e-01, 4.152287e-02, 1.137064e-02, 1.071456e-01, -5.597724e-02, 1.183822e-01, -4.494045e-03, -8.236983e-02, -1.513078e-02, -5.191115e-02, 2.317866e-02, -3.074004e-02, -6.847107e-02, 5.005056e-02, 3.445966e-02, 3.113675e-02, -6.186469e-02, -5.446549e-02, -2.877883e-02, 7.044621e-02, -2.470480e-02, -4.196739e-03, -5.832741e-02, -8.105042e-02, -9.301534e-02, -2.394700e-04, -7.028366e-02, 3.977950e-02, -6.813214e-02, 2.685345e-02, -4.787448e-02, 5.007018e-02, -5.071817e-03, -8.842273e-03, 1.646530e-02, -3.455290e-02, 4.655590e-03, 7.931329e-02, -3.054680e-02, -6.470151e-04, 4.372394e-02, -5.872365e-02, -2.492545e-02, 5.941715e-02, -1.575317e-02, -5.709908e-03, 3.655728e-02, -8.012317e-02, 6.357320e-02, 5.640619e-02, -6.181940e-02, -1.984603e-02, -1.042188e-01, -4.459356e-02, -6.801355e-03, 6.194751e-02, 7.513747e-02, 5.240979e-02, -3.582174e-02, 4.083257e-02, 1.024600e-01, -1.538781e-02, 7.266331e-02, -5.201288e-02, 6.743958e-02, -6.401516e-02, -1.350424e-01, 1.738306e-02, -1.912960e-02, -7.896141e-02, -1.915428e-02, -4.330791e-02, -9.341806e-03, 9.664982e-02, 6.953351e-02, -3.270645e-02, -1.093405e-02, -7.196365e-02, 1.011381e-02, 2.791093e-02, -5.891862e-03, 9.219396e-02, -8.097305e-03, 5.103463e-02, 2.955380e-02, -5.353320e-02, 4.252513e-02, -1.115234e-01, -3.784184e-03, 5.880095e-03, 1.187512e-01, -4.822428e-03, -8.645587e-02, -7.724354e-02, 3.651544e-02, -5.510219e-03, -4.980693e-02, 9.902647e-02, 6.395214e-02, -1.128726e-02, 1.428109e-02, 3.993225e-02, 5.896844e-05, 8.029179e-02, 3.724693e-03, 1.683942e-02, -1.197352e-01, -2.330699e-02, -1.931205e-02, 7.528646e-02, -1.207720e-01, -1.256558e-02, 4.467825e-02, -7.018099e-02, -6.353020e-02, -1.749976e-02, 4.437329e-02, 7.102326e-02},
{-1.676652e-01, -2.633156e-02, -2.572799e-02, 9.108185e-02, 2.534047e-03, 2.513799e-02, -1.151211e-02, 8.402492e-03, 7.481911e-02, -4.270402e-02, -1.566591e-02, 1.152814e-02, 7.261275e-02, 2.776164e-02, -5.062206e-02, -5.846470e-02, 9.441337e-02, 4.468075e-02, 5.738496e-02, 7.933284e-02, 1.010189e-01, 7.140476e-03, 3.232035e-02, 1.266616e-02, 1.474815e-02, -3.758243e-02, 2.748823e-02, -1.506392e-02, 2.301782e-02, -9.627458e-02, 1.021484e-02, 8.835759e-02, 3.164862e-02, 2.208398e-02, -4.114297e-02, -6.932769e-02, -3.245262e-02, 2.321078e-02, -1.438771e-02, -6.567838e-02, 7.969313e-02, -4.804828e-02, 8.533426e-02, 3.968887e-02, 6.156652e-02, 9.545454e-02, -4.397535e-02, -4.676014e-02, -3.334672e-02, 4.979223e-02, 6.644512e-02, 3.290701e-02, -5.481331e-02, 4.909171e-03, -9.795087e-02, 7.545465e-02, -2.791114e-02, 5.188573e-02, 6.465285e-02, 3.218781e-02, 9.404773e-02, -4.103490e-02, -2.843453e-02, 6.363777e-02, -2.396738e-02, -7.410685e-03, 9.784516e-03, -1.555346e-02, 1.934850e-02, 1.271239e-01, 3.207509e-02, 3.697845e-02, -7.154670e-04, 1.542572e-02, 6.840354e-02, 5.436855e-03, -4.304541e-02, -4.629399e-02, 4.181078e-02, 4.330299e-02, -2.243728e-02, -1.262853e-01, -4.543690e-02, 6.017585e-02, -8.863669e-02, -7.759180e-02, -3.700023e-02, -6.053193e-02, 9.865355e-02, 7.600374e-02, -3.866349e-02, 6.887396e-02, 4.035906e-02, 1.591553e-01, -5.931102e-02, 6.856634e-02, 9.424173e-02, 2.925106e-02, -1.487711e-02, 6.157456e-02, 2.883316e-02, 6.226345e-03, 2.068894e-02, 7.202556e-02, -9.342723e-02, 2.209394e-02, 3.479127e-02, 5.978001e-02, -8.284804e-02, 4.464526e-02, 7.411155e-02, -5.560749e-02, -7.593165e-02, -3.460001e-02, 5.406775e-02, -3.507293e-02, 7.122661e-02, -1.624980e-02, 2.721609e-02, 9.219807e-02, 2.881255e-02, -8.872895e-02, 3.005654e-02, 5.919454e-02, 4.030573e-02, 9.136478e-03, 4.577830e-02, 8.681517e-02, 6.386925e-02, -5.043156e-02, 7.245193e-02, -5.883419e-02, 2.809867e-02},
{-2.165815e-01, 9.941936e-03, -1.163275e-01, 2.834146e-03, 4.083212e-02, -7.931457e-02, -9.373277e-02, 6.437803e-02, 4.222889e-02, 5.544237e-03, -1.037450e-01, 3.130115e-03, -2.304868e-02, 1.033486e-01, 2.415875e-02, -8.954535e-02, -6.742191e-02, -1.476830e-02, 5.088751e-02, 6.563365e-03, 5.718607e-02, -9.966467e-02, 7.116970e-03, 3.622679e-02, -9.336790e-02, 1.262450e-02, -6.662942e-02, -1.050123e-01, 6.710468e-03, -7.832421e-02, 1.215317e-02, 6.753384e-02, -8.821997e-02, -3.864080e-02, -9.517913e-02, 4.563672e-02, -1.059021e-02, -2.223860e-02, -1.712005e-01, -7.794803e-02, -2.437877e-02, 2.311135e-02, -8.216523e-02, -4.362749e-02, 6.004892e-03, 4.328062e-02, -8.094280e-02, -6.882546e-02, 2.370612e-02, 1.869489e-02, 5.981229e-02, -1.272935e-01, -2.908171e-02, -1.451588e-02, -4.705004e-02, -4.889871e-02, 3.233629e-02, 1.492786e-01, 1.480682e-02, 3.119153e-02, -9.537832e-02, -2.929754e-02, 6.817650e-03, 6.088175e-04, -2.080839e-02, 1.184601e-01, 2.006684e-02, -2.665723e-02, -4.581796e-02, -8.688098e-02, 5.050058e-02, -5.679600e-02, 7.477264e-02, 2.248055e-02, 8.855717e-02, 6.476675e-02, 1.442919e-02, 6.830051e-02, -9.173574e-02, 6.523662e-02, 1.066864e-01, 1.297685e-02, 3.331070e-02, 7.570084e-02, 2.603513e-02, 4.837568e-02, -8.768533e-03, 2.439743e-02, -4.338614e-02, 6.197575e-02, 1.813855e-02, 2.026105e-02, 2.444573e-03, -1.525143e-02, 2.508482e-03, 1.135832e-01, -6.939178e-02, -7.913106e-03, 3.383832e-02, 3.199708e-02, -1.210254e-02, -4.732897e-02, -3.969597e-02, -1.194474e-01, -2.610518e-02, 4.541072e-02, -3.229971e-03, -3.655870e-03, -6.472360e-02, 4.717034e-02, 4.418293e-02, 6.080011e-02, 1.392175e-01, -1.854600e-02, -1.342897e-02, 1.683427e-02, -4.061141e-03, 4.367759e-02, -3.550890e-02, 1.636165e-02, 1.066643e-01, 1.513750e-03, -9.359705e-02, 2.336249e-02, 1.026972e-01, 3.114371e-02, 1.436609e-02, 6.795318e-02, 8.624595e-02, 2.134469e-02, -1.945345e-02, 2.448085e-02, 5.637366e-02},
{-5.568444e-03, -1.495984e-01, 7.069734e-02, 3.399665e-01, -2.958381e-01, -2.063542e-02, 5.686500e-02, 9.498073e-02, 1.073760e-01, 8.528325e-02, 1.706014e-01, -1.994450e-01, 8.144166e-02, 1.065645e-01, -1.565898e-02, -7.780171e-02, 1.139032e-01, 9.134351e-02, 1.435645e-01, -1.099618e-01, 2.502710e-02, 1.378639e-01, 1.366735e-01, -1.675113e-01, -3.204874e-02, 6.658836e-02, -1.399930e-01, -7.621941e-02, -1.875521e-01, -2.146289e-02, -2.241919e-01, 7.725165e-03, -8.434828e-02, -3.652506e-02, -2.872624e-02, 1.002542e-02, 2.203105e-01, 1.494537e-02, -2.741968e-02, -5.351948e-02, 1.433426e-01, 3.663721e-02, -3.087202e-01, -3.810329e-01, -2.287277e-02, 6.436635e-03, -6.712249e-02, -2.071614e-02, 3.115131e-01, -4.032748e-02, -2.848547e-02, -5.774013e-02, 8.464830e-02, -1.639018e-01, -1.208086e-01, -1.880788e-02, -1.624629e-01, -1.272018e-01, 1.024857e-01, -2.614055e-01, 1.153113e-01, -1.185601e-01, 1.149874e-01, 1.718082e-01, 2.464127e-02, -2.971377e-02, 1.181960e-01, 5.395266e-03, 3.791750e-02, -2.206194e-01, 1.120627e-01, -2.725764e-02, -1.242308e-01, 4.827615e-02, 1.142173e-01, -9.051397e-03, -9.207286e-02, 2.393149e-02, 1.251203e-02, -1.310735e-01, -3.767681e-01, -4.231190e-01, -1.913883e-01, -1.105673e-01, 3.858548e-02, 1.713567e-01, 5.246202e-02, 2.079634e-02, -7.059637e-02, 7.589050e-02, 7.242338e-02, -1.736268e-02, -1.803009e-01, 1.665951e-01, 4.500680e-02, -3.294700e-02, -3.813079e-04, 1.679402e-01, 5.562532e-02, 2.957244e-02, 8.281455e-02, -1.276427e-01, -1.433150e-02, 1.620678e-02, -6.357652e-02, -2.099122e-02, 6.135598e-02, 5.028196e-02, -1.634736e-02, 2.116789e-02, 2.931905e-01, -1.112369e-01, -8.241087e-02, -6.300267e-02, 2.283616e-02, 8.116593e-02, 7.032788e-02, -1.742585e-01, -8.515704e-02, -3.080024e-02, 7.253147e-02, 6.265973e-02, -3.413458e-01, 1.667678e-01, -2.127889e-02, 1.071902e-01, -1.304627e-01, 2.616717e-03, -1.197540e-02, -3.565490e-02, 1.800305e-01, -1.126445e-01, 1.329980e-01},
{-2.488822e-01, 3.841037e-02, 6.669327e-02, 4.791898e-02, -9.626990e-02, 2.302933e-02, -5.828873e-02, -5.405691e-02, 2.991743e-02, -3.731164e-02, -3.594086e-02, -6.867501e-02, -8.699317e-03, 1.747046e-02, 5.435997e-04, -1.052561e-01, 6.556664e-02, -8.815482e-03, 9.953972e-02, -1.665868e-02, 1.041479e-01, -1.091841e-01, -2.192678e-02, -7.149838e-03, -9.483235e-02, -3.177900e-02, -1.029321e-01, -5.942003e-02, 4.057512e-02, 4.510905e-03, -2.270520e-02, 6.531847e-02, 1.499293e-03, 2.633627e-02, -1.402538e-01, -7.448146e-02, -1.209693e-03, 6.687948e-02, -1.181688e-02, 3.585981e-03, -1.055731e-01, 9.676339e-02, -2.083235e-02, 1.203689e-01, 9.919497e-02, -3.051881e-02, -7.890680e-02, 5.855490e-02, 5.577796e-02, 7.639718e-02, 1.367456e-01, -5.181988e-03, 2.646232e-03, 9.505724e-02, -8.606937e-02, -4.985832e-02, 5.519807e-02, 9.119540e-02, 7.032891e-02, -2.523385e-02, -6.290876e-02, -5.115588e-02, -1.435340e-03, -2.154627e-02, 3.901263e-02, 2.847787e-02, 5.179014e-02, -8.887359e-02, 4.149936e-02, -4.638926e-02, -3.167416e-02, -2.108981e-02, 6.405421e-02, 8.216246e-02, -4.929660e-04, -2.876695e-02, 1.332406e-03, 1.268415e-01, -3.970887e-03, 8.624747e-02, 8.097782e-02, -1.305760e-01, 8.670664e-02, -3.171204e-03, 5.095590e-03, -1.772542e-02, -3.167756e-02, -7.708341e-03, 9.478260e-02, 5.093233e-02, -4.426119e-02, -6.152645e-02, -6.101899e-02, 5.789917e-02, -5.221575e-02, 5.553467e-02, 5.502938e-02, 3.443480e-02, 3.148730e-02, -4.064127e-02, 9.577740e-03, 2.682432e-03, 2.889026e-02, -4.208534e-03, -7.732021e-02, 1.442597e-02, -6.496014e-02, -8.096419e-02, -1.040278e-01, 8.061258e-02, 8.227541e-02, -4.888964e-03, 6.387867e-02, 4.474750e-03, 4.606454e-02, 1.186531e-01, -2.127310e-02, -1.087695e-02, 4.091826e-02, 5.309666e-02, -4.496323e-02, -8.336347e-02, -1.060253e-02, -9.281696e-02, -6.431102e-03, 2.450130e-02, 6.844338e-02, 3.674907e-03, 3.460237e-02, -1.033802e-01, 8.633829e-02, -3.122769e-02, 5.497802e-02},
{2.614638e-01, -1.196359e-02, 2.148869e-02, -5.093268e-02, 9.597498e-02, 1.026408e-01, 5.823162e-02, -4.145414e-02, 1.395998e-02, 3.837750e-02, 4.712803e-02, 1.533839e-01, -1.977552e-02, 1.007669e-02, -6.959397e-02, 4.389398e-02, -1.971773e-02, 1.315445e-02, -6.450628e-02, 1.144222e-02, 2.260645e-02, 3.552612e-02, 8.350787e-02, 3.282473e-02, 1.099038e-02, -3.248036e-02, 1.219839e-01, -3.759673e-02, -8.040795e-02, 9.720613e-02, 1.729599e-03, 1.393412e-02, 3.498771e-02, -2.027561e-02, -1.947453e-02, 6.469738e-02, -9.790356e-02, -6.394824e-02, 1.886301e-02, 5.397996e-02, -2.873706e-02, -4.823705e-02, 1.058554e-01, 1.199449e-01, 2.085382e-02, -5.508644e-02, 5.716036e-02, -7.355160e-02, -8.468913e-02, -7.453260e-02, 2.846766e-02, 5.315700e-02, 9.079780e-02, 1.061522e-02, 5.596714e-02, -9.449332e-02, -7.018315e-02, -2.728721e-03, -6.833761e-02, 3.372829e-02, -3.361994e-02, 1.817048e-02, 2.784091e-02, -5.533931e-03, -2.004113e-02, -5.081049e-02, 7.633826e-02, 1.476503e-02, -1.496850e-03, -1.442761e-02, -4.719256e-03, -5.029917e-02, -8.117940e-02, -3.592452e-02, 1.466724e-02, -9.193568e-02, 1.393957e-01, 1.143716e-03, -6.257650e-03, -1.096848e-01, 4.938462e-02, 9.011805e-02, 3.472396e-02, 1.597400e-02, -3.909215e-02, -4.642781e-02, 3.252273e-02, 1.294623e-01, 2.683381e-03, -9.543542e-02, -4.844725e-02, 5.139420e-02, -6.073152e-02, 1.505053e-02, -4.218122e-02, 2.127049e-02, -1.083810e-02, -4.737536e-03, 5.593928e-02, -8.761344e-02, -7.781676e-02, 1.489013e-01, 1.350466e-02, -2.921987e-03, -1.815327e-02, -5.994545e-02, 8.276027e-02, -1.077324e-02, 8.990891e-02, 5.745598e-02, -6.054955e-02, -6.165470e-02, -1.321520e-01, 2.451180e-02, 7.430074e-02, 2.593141e-02, -6.456117e-02, 5.660834e-02, -4.274552e-02, 1.707001e-02, 2.415388e-02, 7.000066e-02, -5.004543e-02, -3.637915e-02, -2.366911e-03, 9.499708e-02, -7.830176e-02, -1.313038e-01, -2.501539e-02, 6.936543e-02, -8.199284e-02, 5.358191e-02, -9.577366e-03},
{-1.913683e-01, 6.108563e-02, 1.010938e-01, 8.999082e-02, -1.202067e-01, 2.991164e-02, -9.159230e-02, 4.926069e-02, -2.147110e-02, -5.928748e-02, 8.685222e-02, 5.874345e-02, 7.934668e-02, -2.198890e-04, -5.922956e-02, -1.056274e-02, -7.965095e-02, -3.832561e-02, 5.997073e-02, -7.665933e-02, 1.672361e-01, 3.300863e-02, 2.982468e-02, 1.030838e-01, 4.628187e-02, -7.130277e-02, 5.212602e-02, -6.851853e-02, -6.844450e-02, 7.999002e-04, 1.884147e-02, -8.371817e-02, -1.076589e-01, -1.925893e-02, -4.753494e-02, 7.160728e-02, 1.791970e-02, -8.648790e-02, -4.076218e-02, -7.131884e-02, -7.195983e-02, 3.414031e-02, 1.430534e-01, 7.620241e-02, 1.146182e-02, 6.687555e-02, 5.238253e-02, 4.684739e-02, 5.991787e-03, 9.564225e-02, 9.550604e-02, 2.190563e-02, 2.110271e-02, 3.505719e-02, 2.556683e-02, -6.702168e-02, -4.901187e-02, 8.405395e-02, 1.940415e-02, 2.941724e-04, 4.499250e-02, -7.717451e-02, 5.429568e-02, 7.035743e-02, -5.447424e-02, -5.555084e-04, -5.024262e-02, 4.892233e-02, -9.847136e-02, 1.037574e-01, -9.186391e-02, -7.637404e-02, -2.398414e-02, -7.268217e-03, 7.945658e-02, 1.238989e-03, -1.257772e-02, 7.299575e-02, -8.809836e-02, 8.327083e-02, 7.714693e-02, -6.653342e-02, 2.666324e-02, -6.530665e-02, 6.399643e-02, -5.555638e-02, 5.220145e-02, 2.604447e-03, 8.806048e-02, 6.190246e-02, 1.341015e-02, -7.092635e-02, -3.015781e-03, -1.332567e-02, 2.755037e-02, -2.497099e-02, -3.034336e-02, -4.775783e-04, 4.778655e-02, -8.893876e-02, -5.770247e-02, 5.715833e-02, 1.903130e-02, -1.875608e-02, 2.071533e-02, 8.873113e-02, -2.219801e-02, -8.970748e-02, 5.596653e-03, 1.230833e-02, -9.604774e-02, -5.261484e-02, -1.849477e-02, 6.126849e-02, -2.015590e-02, 3.996911e-02, 3.989914e-02, 4.667825e-02, 5.785053e-04, 1.574309e-02, 8.764157e-02, -5.857746e-02, -2.758462e-02, -7.323375e-02, -4.760480e-02, -6.829979e-02, 9.313450e-02, 7.578828e-03, -1.318089e-02, -6.011053e-02, 7.815953e-02, -3.610843e-02, -6.032458e-03},
{4.126391e-02, 1.850170e-02, 1.188792e-01, 1.806807e-01, 3.103758e-01, 4.127164e-03, 4.608718e-02, -1.024731e-01, 1.828593e-01, 3.870399e-03, 1.683727e-03, 9.117199e-02, -1.444031e-01, -1.075867e-02, -6.431200e-02, 7.217284e-02, 2.978709e-02, -5.770251e-02, -7.283838e-02, -2.811234e-02, 6.060629e-02, 7.049917e-02, -1.799243e-02, -6.501862e-04, 6.161609e-02, 1.427129e-02, -9.580930e-02, 2.293295e-01, 1.165172e-01, 2.395676e-02, -3.929922e-02, -3.924258e-02, -1.347506e-01, 6.436766e-02, 1.530630e-01, 1.318108e-01, 9.989798e-02, -2.720662e-02, 4.121081e-02, -7.832257e-02, 1.258837e-01, -2.817618e-01, -2.896585e-01, -1.911056e-01, -8.995694e-02, -3.984141e-02, 6.771115e-02, -2.464728e-02, 2.894325e-01, 8.224577e-02, -5.464464e-02, 6.543402e-02, 4.130112e-02, -2.509313e-01, 5.487326e-02, 1.193310e-01, 4.025820e-02, 3.323040e-02, -7.226820e-02, -9.790464e-02, -1.552146e-02, 8.359280e-02, 1.963264e-01, -7.756125e-02, 5.542467e-02, -1.504418e-01, 3.271701e-03, 1.066608e-01, 3.920379e-02, -4.971030e-02, 7.293469e-02, 7.277105e-03, 2.606796e-02, -1.920894e-02, -5.444260e-02, 3.449991e-02, -1.890421e-01, 3.487333e-02, 1.450224e-01, -1.764321e-02, -1.341922e-01, -4.674580e-02, -5.577958e-02, 7.994404e-03, 8.389238e-02, 1.440506e-01, -2.545399e-01, -1.004234e-02, -1.690520e-01, 3.337609e-02, 1.441830e-01, 1.969307e-02, 2.513276e-03, 7.713979e-02, 1.178129e-01, -8.777124e-02, 9.700561e-02, 1.936240e-01, -9.241552e-02, 2.398376e-01, 2.539347e-02, -1.496706e-01, 2.195748e-01, -4.392146e-02, -6.033725e-02, -5.419785e-03, 5.907238e-02, -5.536612e-02, -3.110345e-02, -7.708982e-02, 2.428591e-01, -2.312622e-01, -1.379533e-01, 6.177279e-02, -1.071964e-01, -1.022021e-01, 7.905053e-02, -6.384856e-02, 3.239368e-02, 7.203348e-03, -9.689143e-02, 1.481866e-01, -1.972694e-01, -4.468122e-02, -1.383165e-01, 7.176969e-02, -2.597184e-01, 2.349494e-02, -1.285873e-01, -7.973107e-02, -1.492903e-01, -1.256315e-01, -1.940031e-01},
{2.157529e-01, -1.387158e-02, -6.753562e-02, 5.650057e-02, -3.300091e-02, 6.860147e-02, -5.058808e-02, 1.936484e-02, 4.607565e-02, 4.782902e-02, 2.420828e-02, 8.539126e-02, 2.930965e-02, 1.665270e-02, 5.279388e-02, 1.096159e-01, 1.415250e-02, -9.379447e-02, 4.105615e-02, -4.866280e-02, -4.444921e-02, 7.682116e-02, -5.612757e-02, 4.206088e-02, -6.850357e-02, -5.509997e-03, 1.660255e-01, 7.284410e-02, 6.364684e-02, 4.781875e-02, 1.686697e-03, -5.448920e-03, 8.784423e-02, 3.540046e-02, 8.384871e-02, -5.717328e-02, -1.199258e-01, -7.654480e-02, 4.090374e-02, -6.100919e-02, 1.822269e-02, -5.814450e-02, 8.763657e-02, -1.340593e-02, 3.545758e-02, 1.609715e-02, 7.398236e-02, 3.411350e-02, 8.439627e-03, -7.616518e-02, -1.762789e-02, 4.798634e-03, 1.417544e-03, 6.083536e-02, 5.422987e-02, -5.321879e-02, 1.195418e-02, -8.083019e-02, 1.813125e-02, 1.831600e-01, -4.958102e-02, 4.408429e-02, 9.433375e-02, -8.165773e-02, 9.923886e-03, -4.605155e-02, 4.783657e-02, -8.153342e-02, 2.740156e-02, -9.703819e-02, -8.037478e-02, 2.147763e-02, -8.966156e-02, 5.143494e-02, -8.333445e-02, -9.049252e-02, 2.698271e-02, -1.371919e-01, -4.521278e-02, -5.247371e-02, -8.656230e-02, 6.372959e-02, -6.822152e-02, 4.458452e-02, -4.025303e-02, 6.764497e-04, -3.627465e-02, 6.561095e-02, 5.996574e-02, 2.950698e-02, -3.076652e-02, -5.080109e-02, -3.951323e-02, -2.085018e-03, 3.667274e-02, 5.377680e-02, -9.801936e-02, -1.183352e-01, -7.264620e-03, 1.986340e-02, 2.673819e-02, 1.354651e-01, -4.303303e-02, -2.687943e-02, 1.766945e-02, 1.657992e-02, 3.589931e-02, 1.491083e-02, 1.745893e-02, 4.505273e-02, -2.365678e-02, 5.577857e-03, -8.443794e-02, -6.363540e-02, -2.462746e-02, 3.319290e-02, 7.715763e-02, 2.179329e-02, 1.101159e-02, 6.578068e-02, -6.500727e-02, 1.081161e-01, 9.281809e-02, -5.081157e-02, -3.555977e-02, 6.150315e-02, -1.107212e-01, -7.780246e-02, -7.249463e-02, 8.507507e-02, -7.973941e-02, -5.116497e-02, 6.428378e-03},
{-1.436619e-01, -5.737247e-02, 1.182755e-01, -6.197431e-02, -1.253391e-01, 2.177006e-02, 5.259201e-02, -8.600579e-02, 3.857336e-02, -3.907838e-02, -6.885200e-02, 3.695214e-02, -1.497874e-02, -4.931217e-03, -2.767295e-02, -5.911113e-02, 1.118418e-02, 5.812392e-02, 6.603168e-02, -1.011329e-01, 1.243377e-03, -3.574306e-02, 3.475489e-02, 3.471748e-02, -7.171385e-03, 3.554543e-02, 7.370714e-03, -3.032136e-02, -4.316529e-02, 3.826191e-02, 1.327238e-02, 2.086351e-02, -6.304797e-02, -3.609454e-02, -5.744508e-02, 3.975723e-02, -3.812363e-02, 5.251602e-03, 3.814549e-02, 6.133202e-03, 3.945024e-02, -1.231755e-01, -1.803799e-01, -4.460518e-02, 1.675882e-02, -2.123678e-02, 2.792133e-02, 1.539576e-02, 4.432625e-02, 1.109124e-01, 1.225675e-01, 7.299533e-02, 6.950208e-03, -1.416764e-01, -1.042730e-02, -8.694001e-02, 4.067310e-02, 1.194087e-01, -4.073776e-02, -1.309494e-01, -3.914628e-03, -1.726537e-02, 4.305192e-03, 4.580281e-02, -1.571111e-02, -9.102201e-02, 3.366688e-02, -7.093977e-02, 1.549293e-02, 6.091444e-02, -8.716612e-02, -8.219584e-02, -9.157544e-02, 3.984125e-02, -1.792705e-03, -8.732458e-03, -1.202600e-01, 8.093353e-02, -7.441580e-03, 6.757994e-02, -9.296645e-02, -1.173316e-01, 5.592882e-02, -1.878337e-02, -2.493905e-03, -2.268762e-02, -1.402296e-02, -1.318542e-01, -4.473398e-02, 3.182716e-02, -4.276672e-02, 1.321701e-01, -2.161020e-02, -1.029901e-02, 3.495181e-02, -2.718686e-02, -1.361116e-02, 1.123630e-01, 2.292204e-02, -1.935947e-02, -4.029033e-02, 2.185666e-02, 3.174879e-02, 4.029149e-02, 3.836286e-02, 6.164748e-02, 3.820362e-03, 9.048973e-03, 9.270602e-02, 2.605344e-02, 7.091614e-02, 2.144049e-02, -7.680759e-02, -6.981733e-02, 8.506884e-03, 7.943233e-02, 4.613062e-02, -4.751899e-02, 5.870162e-02, 8.097015e-04, -8.986788e-02, -2.529761e-03, 5.262584e-02, -8.527713e-02, -6.000167e-02, -3.457461e-02, -9.929772e-02, 4.568967e-02, -4.503079e-02, -4.315528e-02, -2.016165e-03, 1.184662e-02, 5.313822e-02},
{-6.875450e-02, -9.079363e-02, 1.022736e-01, 6.049149e-02, -1.361166e-01, -1.843989e-02, -5.548880e-02, -4.105526e-02, -8.633764e-02, -4.879361e-02, -5.660705e-02, -6.096601e-02, 1.432265e-01, 1.572850e-02, -1.955060e-02, 7.110886e-02, -4.767598e-03, 3.679327e-02, -6.246114e-02, -2.155189e-02, -5.491537e-02, -6.366863e-02, -2.749861e-02, 3.662330e-02, -2.804610e-02, -8.756626e-02, 1.401827e-01, 2.183949e-02, -6.813402e-02, 1.136873e-01, 6.132409e-02, 2.832333e-02, -2.204970e-02, -6.158547e-02, -3.977492e-02, -1.392795e-03, 5.067191e-02, -3.739659e-02, -1.946605e-02, -5.617389e-02, 3.228705e-02, 1.311218e-02, 1.401247e-01, -2.924652e-02, 4.649937e-02, -3.012912e-02, -7.666501e-02, -6.155546e-02, 3.025372e-02, -3.939975e-02, -2.172780e-02, -4.702126e-02, 7.694658e-02, 1.393915e-03, -6.517491e-02, -2.264432e-02, -6.058600e-02, 7.320170e-02, 3.184357e-02, 1.141034e-01, 7.831744e-02, 2.774395e-02, -6.875709e-02, -1.392440e-02, -4.940034e-02, 5.924485e-02, -6.058861e-02, -8.535082e-03, -5.296003e-02, 2.844695e-02, -1.224937e-02, -2.425614e-02, -8.056691e-02, 2.310039e-02, -6.170465e-02, 7.066894e-02, -8.096568e-03, 6.442259e-02, 1.048466e-02, 3.929892e-02, 1.086351e-02, 8.368818e-02, 5.904591e-02, -2.077597e-02, 2.082747e-02, 1.485991e-03, 7.367404e-02, -2.884370e-02, 8.849406e-02, -4.348275e-02, 1.450792e-02, -2.951693e-02, 6.495804e-02, 7.179058e-02, 9.535998e-02, -9.332866e-03, 4.551096e-02, 3.868599e-02, -8.976504e-03, -1.233608e-02, 4.558550e-02, 4.713250e-02, 5.164830e-03, -4.105936e-02, -3.645914e-02, -1.696819e-02, -8.549824e-02, -5.987911e-03, 1.161220e-02, 7.600137e-02, -1.495242e-01, 5.016138e-02, 7.568356e-02, 4.760718e-02, -5.173479e-02, 1.677508e-02, 8.829346e-03, -1.708187e-02, -6.207297e-02, -4.851042e-02, -5.979399e-02, -1.488258e-02, 7.949896e-02, 5.831464e-02, -8.047262e-02, 4.820666e-03, 1.221457e-02, 2.170016e-02, 3.291355e-03, 4.278317e-02, 6.735302e-02, 1.018110e-01, 8.772405e-02},
{-4.456522e-04, 2.796505e-02, -2.182057e-02, -1.019601e-01, 2.194582e-01, 7.623389e-02, -1.283498e-02, 9.023661e-02, -8.711879e-02, -7.124499e-05, -1.560142e-02, 1.522757e-01, -3.803361e-02, -6.341916e-02, -5.628888e-02, -2.132981e-02, 5.985080e-02, -3.204259e-02, -1.744784e-01, -6.314201e-02, -1.119595e-01, -6.381357e-02, -1.505522e-01, -1.667563e-02, 4.071804e-02, 6.152134e-02, 8.780548e-03, 8.003001e-02, -7.144735e-03, 8.516946e-02, 1.434398e-01, -5.910613e-02, 1.832346e-02, 1.339890e-01, 5.241722e-02, -4.046863e-02, 2.412305e-02, -7.425977e-02, 1.720904e-01, 7.490145e-02, -2.889113e-02, -8.786625e-02, 3.810934e-01, 3.349243e-01, -7.420504e-02, 1.004612e-02, 3.806686e-02, 7.205725e-03, -5.065137e-02, -4.713167e-02, 5.488839e-02, 2.541139e-02, 4.950141e-02, 1.304098e-02, 1.322994e-01, 2.927472e-02, 1.514350e-02, 5.931225e-02, -7.645873e-02, 2.138164e-01, 3.523160e-02, 8.512582e-02, 2.543238e-02, -3.872776e-02, -1.095295e-02, 1.040820e-02, -1.295206e-02, 5.989764e-02, 4.084029e-02, 1.350255e-01, 4.837200e-02, -5.411532e-02, -1.249018e-01, -2.683865e-02, -7.825681e-02, 6.000181e-02, -5.618311e-02, 3.386699e-02, 4.889043e-02, -6.822210e-02, 7.992145e-02, 5.710237e-02, 7.680427e-02, 5.331871e-02, 9.681626e-02, 2.241464e-02, -6.100523e-02, -2.168557e-02, 3.307666e-02, 3.112345e-03, 3.517077e-02, 4.608413e-02, -1.184579e-02, -1.572442e-01, -1.954837e-01, -3.002052e-02, -6.779297e-02, -6.949736e-02, -2.864020e-02, -1.202569e-02, -9.012099e-04, -3.227112e-02, 2.816596e-02, -4.493242e-02, -3.306765e-02, -7.018354e-02, 4.189301e-02, 1.205596e-01, -2.617833e-02, 2.087208e-02, -1.485650e-01, 1.762131e-01, 1.707943e-01, 2.499409e-02, -4.713601e-03, -1.119332e-01, -1.991341e-02, 3.212222e-02, 5.137853e-02, 3.900857e-03, 2.352578e-04, 1.435492e-01, 4.226776e-02, -6.476548e-02, -1.128786e-02, -7.348847e-02, -4.228611e-02, 5.424223e-02, 3.689105e-02, 1.141659e-01, -1.149934e-02, -3.964870e-02, -5.430413e-02},
{-2.334693e-01, 6.968500e-02, -9.906535e-03, 8.391529e-02, -1.032004e-02, -4.979013e-02, 5.975649e-02, 8.361761e-02, 6.200818e-02, 9.789951e-03, -5.651351e-02, -4.829358e-02, -8.814991e-03, 1.439681e-02, 3.443902e-03, -7.395320e-02, 3.303796e-02, 3.793585e-02, -6.110988e-02, -3.234811e-02, 4.788252e-02, -8.935842e-02, 3.833671e-02, -2.872246e-02, -2.276958e-02, 3.968514e-02, -8.154726e-02, 3.069253e-02, -1.189468e-02, -6.386636e-02, 1.614532e-02, -3.442405e-02, -1.161093e-01, -1.068416e-01, -1.264755e-02, -6.608430e-02, 1.167381e-01, 8.740104e-02, -3.742205e-02, -1.077361e-01, 2.755583e-02, -7.562283e-02, 2.861474e-03, -6.164539e-02, 1.436818e-02, -5.531270e-02, -9.147669e-02, -6.565239e-02, 1.265611e-01, 1.013969e-01, 7.243713e-02, 1.444275e-02, 2.403060e-02, 2.178004e-02, -3.103469e-02, 1.692018e-02, -9.507519e-02, 1.094857e-01, 8.447121e-03, -1.814850e-01, -2.969926e-02, -4.179353e-02, -6.843598e-02, 3.098468e-02, -2.326683e-02, 5.125302e-02, 1.929396e-02, -4.293563e-02, 4.721501e-02, 9.614723e-02, 8.401990e-02, -8.214624e-02, 8.206037e-02, -2.913177e-03, -2.108106e-03, -5.388388e-02, 2.112680e-02, 1.134702e-01, -1.037687e-01, 1.365560e-01, -2.819666e-02, -3.925994e-02, -8.704021e-05, 5.712549e-02, 5.014955e-02, 5.259766e-02, 2.411169e-02, -3.144874e-02, 2.455528e-02, 6.729808e-02, 9.051898e-03, 4.474822e-02, -5.463807e-02, 4.289743e-02, -3.987024e-02, 1.192242e-02, -3.117328e-02, -8.916559e-02, -5.093126e-03, -6.527729e-02, 9.366386e-02, -1.978409e-01, -5.660016e-02, -2.688499e-02, 2.933018e-02, 3.492475e-02, -3.819347e-02, 2.735306e-02, -9.114750e-03, -1.774695e-03, 8.692820e-02, 1.190499e-01, 7.697659e-02, -7.426459e-02, 7.245676e-02, -4.238503e-02, -6.080795e-02, -7.738731e-02, 6.672386e-02, -6.210052e-03, 5.810229e-02, -8.603941e-02, -8.658525e-02, 3.468988e-02, 1.055041e-01, -4.243072e-03, 4.476613e-02, 9.536691e-02, 4.768226e-02, -1.315590e-01, -4.327503e-02, -3.813985e-02, -2.519548e-02},
{-1.344335e-01, -2.845872e-02, 2.291754e-02, 1.134303e-01, -1.037860e-01, 6.475811e-02, -1.217751e-02, -4.303529e-02, -8.319195e-02, 6.700847e-02, -1.822940e-02, -6.097773e-02, 7.324412e-02, -5.947034e-02, -3.496360e-02, 3.948190e-02, 2.166383e-02, 2.777744e-02, -3.969309e-02, -1.520921e-02, 6.457774e-02, -9.956768e-02, 3.620370e-02, -4.288314e-02, -6.821136e-02, 9.366196e-02, 6.995577e-02, -9.135017e-02, 4.105859e-02, 3.870599e-02, 2.101084e-02, -8.323729e-02, -2.487895e-02, -3.985330e-02, -1.072418e-01, -2.169222e-02, -1.228673e-01, -1.195719e-01, -5.922221e-02, -7.053010e-02, 1.549954e-02, 3.301998e-03, 5.848474e-02, 1.439204e-01, -3.960782e-02, 2.397637e-02, -4.250612e-02, 1.169458e-03, 5.538228e-02, 1.108093e-02, 6.556983e-02, -2.159097e-02, -1.223505e-02, 4.259926e-02, -8.749783e-02, 6.707231e-02, 1.036250e-02, -1.335891e-02, 8.042625e-02, 1.543124e-01, -9.036377e-02, -6.991863e-02, 4.356830e-02, -2.494460e-03, 8.688837e-03, -9.025762e-02, -4.000791e-02, -8.705643e-03, 5.145522e-02, 7.848513e-02, -7.476460e-02, -5.993813e-02, -1.050771e-02, -2.630391e-02, 4.296819e-02, -8.609009e-03, 4.822038e-02, 6.504951e-02, -9.334306e-02, 1.672372e-02, 3.820513e-05, -8.603232e-02, 1.014173e-01, 1.430199e-02, 1.334620e-02, -4.862219e-02, -2.137383e-03, -6.680724e-02, 6.467152e-02, -8.812934e-02, 3.499163e-02, 6.545579e-02, -8.708773e-02, 4.628184e-02, 7.590710e-02, -3.965789e-02, 8.356538e-02, -1.116784e-01, 2.566098e-02, -9.968082e-02, 5.682405e-02, 6.184360e-02, -6.173172e-02, -3.480858e-02, -4.226240e-02, 3.273154e-02, 2.637397e-02, -9.441149e-03, -7.106481e-02, -4.912965e-02, 9.050716e-02, 2.078837e-02, 3.632427e-03, -7.843509e-02, -7.543132e-02, -5.604224e-02, 4.167487e-02, -2.745263e-02, 1.038969e-01, 9.530871e-02, -4.812986e-03, -6.028738e-02, -4.264539e-02, 6.074487e-03, 1.862061e-02, -7.967415e-02, -2.453123e-02, -5.888300e-03, 5.584915e-02, -6.404584e-02, 6.176902e-02, 3.759123e-02, 5.410454e-02},
{-1.089247e-01, 2.445007e-02, 2.786491e-02, -2.066174e-01, 1.135143e-01, 1.852656e-02, -7.760025e-02, 1.096993e-01, -9.278343e-02, 5.486633e-02, -6.838498e-02, -8.083267e-02, -1.727143e-02, -3.111540e-02, -3.028165e-02, 5.084406e-03, -1.038396e-01, 6.598705e-02, 7.010447e-02, -6.372657e-02, 7.005707e-02, -4.841322e-02, -6.885707e-03, -9.462954e-02, -6.742984e-02, -5.581015e-02, -1.119425e-03, 4.379622e-02, -1.023591e-01, 8.664140e-03, -3.001545e-02, 1.038197e-01, 7.307631e-02, -4.092221e-02, -1.378276e-01, -4.175613e-03, 6.545562e-02, 9.991255e-02, -7.777148e-02, -6.186042e-02, 1.810894e-02, 5.359204e-03, 2.120944e-01, 7.436002e-02, 1.020593e-01, -5.392122e-02, 4.816515e-02, 1.931887e-02, -8.576929e-03, 2.074202e-02, 4.597432e-02, -9.622735e-04, 8.244922e-02, 4.999575e-02, 3.797857e-02, 3.345765e-03, 2.091432e-02, -1.262342e-02, 2.164789e-03, 4.738875e-02, 2.322727e-03, -4.644893e-02, -1.046505e-01, -6.063091e-02, -6.769806e-02, 1.106128e-01, 2.104964e-02, 3.980684e-02, 8.984856e-02, -4.781825e-02, -2.871587e-02, -4.563528e-02, 1.026817e-02, 2.885289e-02, 4.311902e-02, 2.735780e-02, -7.721308e-03, 8.961399e-02, 1.739310e-02, 4.245142e-02, 1.126170e-01, -4.699321e-02, -4.091014e-02, 7.947699e-02, 1.785180e-02, 3.909304e-02, 7.450778e-02, 2.592898e-02, 1.336687e-02, 8.875182e-03, 3.548256e-02, 1.118417e-02, -1.874535e-02, -4.810558e-02, -5.806977e-02, -1.864859e-02, -1.107608e-02, -1.186477e-01, -2.047377e-02, 1.743824e-03, -4.698171e-02, -1.134355e-02, -7.622378e-02, 5.388227e-02, -1.493682e-01, 3.402013e-02, -9.297583e-02, 4.711719e-02, 3.499740e-03, 5.750365e-02, -1.779042e-01, -1.029631e-02, 6.606807e-02, 3.058724e-02, -8.738231e-03, 3.331022e-02, -2.681188e-02, -4.481031e-02, -2.174144e-02, 9.012184e-02, -3.255336e-02, -5.486944e-02, 2.741052e-02, 1.539433e-02, 1.127212e-01, -4.091066e-02, -5.169336e-02, 8.062909e-02, 9.794947e-03, -6.674938e-03, 1.458176e-02, -9.644536e-03, 5.439483e-02},
{6.945836e-02, 8.110429e-02, 3.883945e-03, 1.376914e-01, -2.236192e-01, 2.926268e-02, 4.968721e-02, -1.731777e-02, -6.534696e-02, 6.731053e-02, 5.153652e-02, -4.446355e-02, -5.313665e-02, 8.333813e-02, -1.080969e-01, 7.408382e-02, -5.386325e-02, 6.220398e-02, -4.461699e-03, 1.381173e-02, 1.733994e-02, -5.090523e-02, 7.674854e-02, 7.757964e-03, -1.649532e-02, 1.139390e-01, 6.284580e-02, 7.453526e-02, -7.488082e-02, -4.218296e-02, -1.098170e-02, -7.118169e-03, -1.032388e-01, -1.314693e-02, -9.849884e-02, 1.643070e-03, 3.527595e-02, 6.397802e-02, -5.749443e-03, 2.237729e-02, -2.187585e-02, 1.013300e-02, -1.027185e-01, 5.316627e-02, 1.316854e-03, -2.876186e-02, 7.359585e-03, 5.032732e-02, -6.123346e-02, -1.021042e-01, -7.606214e-02, 7.587507e-02, -6.275546e-02, 4.865154e-02, -1.088338e-03, -1.137676e-02, -3.649804e-02, -1.110209e-01, -2.917499e-02, 8.336470e-02, -8.611298e-04, -3.159705e-02, 4.347661e-02, -6.264376e-03, 1.056531e-02, -3.617569e-02, -2.353927e-02, 2.262621e-02, 3.301454e-02, 1.785325e-01, 9.786156e-02, 9.546641e-02, -7.043868e-02, -8.301293e-02, -7.476384e-02, -7.242721e-02, 7.838146e-02, -6.806572e-03, -4.702828e-02, -5.554815e-02, 1.462915e-02, 3.516328e-02, -3.267822e-02, 1.520286e-02, 6.260987e-02, -5.211939e-02, 3.307125e-02, 1.562097e-02, -2.381269e-02, 4.056744e-02, -7.038125e-02, -1.367249e-02, -5.073520e-02, 3.953486e-02, -7.830537e-02, 2.182345e-02, -2.269387e-02, -6.048117e-02, 7.160977e-02, -8.444556e-02, -6.024829e-02, -8.842372e-03, -2.715183e-02, 4.019466e-02, 6.469261e-02, -8.237468e-02, 8.024573e-02, -5.660877e-03, 2.357977e-03, 9.631675e-03, -1.510525e-02, -2.528384e-02, -2.277813e-01, 2.223268e-04, -6.799418e-04, 5.610496e-02, -1.058189e-02, 1.095026e-02, 2.633240e-02, 4.363750e-02, 2.715990e-02, 5.261671e-02, 4.112840e-02, -6.177158e-02, -8.038335e-02, -2.101492e-02, 2.645348e-02, -5.883294e-02, -5.732888e-02, 1.345467e-02, -4.097708e-03, -5.667994e-02, -5.597408e-02},
{4.095296e-02, -8.024736e-02, -7.006764e-02, -8.230195e-04, 3.443632e-01, -3.073055e-03, 1.705374e-03, -4.980041e-04, -4.283443e-02, 4.708545e-02, -2.648868e-02, 4.615435e-03, -3.736835e-02, 8.411273e-03, 2.799933e-02, -4.939652e-02, 2.324487e-02, 4.381787e-03, -7.931563e-02, -2.546874e-03, 9.593858e-02, -4.367228e-02, -7.441968e-03, 6.621271e-02, 9.572691e-03, -1.536372e-01, -5.270489e-02, -6.072089e-02, 5.395178e-03, 7.939217e-02, 6.810314e-02, 5.706755e-02, 6.876197e-02, 6.496889e-02, -4.669044e-02, 6.214195e-02, -5.735097e-02, 5.146360e-02, 4.344080e-02, 6.240533e-02, 4.173702e-02, 1.607024e-02, -2.216981e-01, -1.641851e-01, -1.050647e-01, -4.705182e-02, -9.191782e-02, 1.250160e-03, 1.396174e-01, 9.440352e-03, 2.380663e-02, 5.852731e-02, -1.137387e-01, -7.384375e-02, 3.933301e-02, -4.350397e-02, -1.485117e-02, 1.140440e-03, 7.362694e-02, -1.377992e-01, -4.787437e-02, -5.401134e-02, -2.321316e-02, -1.919788e-02, 3.417039e-02, -1.650294e-03, -6.065841e-02, -3.519278e-02, -1.180844e-02, -1.183903e-01, -4.340695e-02, 1.191996e-02, -3.875502e-05, 1.109161e-01, 4.449899e-02, 5.137097e-02, 5.717639e-02, 4.168200e-02, 5.019282e-02, 4.373299e-02, -1.157243e-01, 7.480887e-02, -3.642099e-02, -3.032920e-03, 2.043485e-02, -3.939186e-02, -1.659537e-02, -1.085659e-01, -4.023723e-02, 2.454302e-02, 9.250496e-02, -9.632068e-02, 1.475503e-01, 2.504366e-02, 5.648632e-02, -9.104362e-02, 3.963630e-02, 1.545017e-01, -1.012458e-01, 1.137075e-02, 3.602695e-02, -7.815152e-02, -7.583369e-02, -3.968308e-02, 1.191835e-01, 2.742239e-02, -9.570751e-02, -6.582423e-02, -2.259368e-03, -3.518288e-02, -3.928616e-02, -8.706308e-02, -4.976136e-02, 3.199081e-02, -7.039274e-02, 1.127817e-02, 4.136147e-02, 2.243968e-02, -2.999655e-02, -2.284486e-02, -4.875024e-02, -9.671918e-02, 1.023521e-01, 1.288631e-01, 3.522895e-02, -7.131502e-02, -8.599326e-02, 5.587951e-02, 1.636527e-02, -4.391020e-02, -4.136311e-02, -1.994321e-02, 5.588169e-02},
{-1.778225e-01, 6.396901e-02, -1.529167e-02, 1.043388e-01, -6.735874e-02, 8.259296e-02, -1.424473e-03, -3.336881e-02, -3.661305e-02, 2.834991e-02, 7.885268e-03, -3.479785e-02, 2.247167e-02, 3.445689e-02, -2.525344e-02, -1.061577e-02, -4.780167e-02, -6.500636e-02, -2.701472e-02, 3.746391e-02, -1.243561e-02, -5.967147e-03, -2.887730e-02, -2.403431e-02, 6.828159e-02, -3.012780e-02, -6.634220e-02, -4.462704e-02, 7.769752e-02, -3.106744e-02, -5.762820e-02, 6.922149e-02, -1.964433e-02, -1.119425e-01, 2.503330e-02, 4.939960e-02, -6.354140e-02, 5.067398e-02, -7.176267e-03, -1.006116e-01, -6.801591e-02, -5.065705e-02, 8.942858e-02, 1.493109e-01, 6.448872e-02, -3.437657e-02, 1.983321e-02, -2.516811e-02, 5.048968e-02, 1.184937e-01, 8.730052e-02, 1.327995e-02, -7.062148e-02, -8.612906e-03, -3.818651e-02, 1.146006e-01, -8.406185e-02, -1.267265e-04, 1.673733e-02, 7.655630e-02, -2.989395e-02, 3.050729e-03, -9.143994e-02, 1.237971e-02, 1.113702e-02, -1.422487e-02, 1.800562e-03, 4.846493e-02, 2.028561e-02, 4.202216e-02, 6.848182e-02, 5.542883e-02, -7.128103e-02, 6.420516e-03, -5.479950e-03, 6.270303e-02, -7.628199e-02, 4.443305e-02, 2.786384e-03, -3.888606e-02, 6.777149e-02, -7.213547e-02, 2.628073e-03, -6.187734e-02, -2.714904e-02, 5.158892e-02, 7.103261e-02, -7.407063e-02, 4.486210e-02, 1.077197e-01, -6.431127e-02, 1.186689e-01, -2.207603e-02, -3.548751e-02, -7.689191e-02, -4.732650e-02, -2.785101e-02, -7.764476e-02, 1.084441e-01, -4.575430e-02, 4.472694e-02, -4.347032e-02, -5.555066e-02, 1.101157e-01, -9.955265e-02, 2.692858e-02, -5.229277e-02, 5.786416e-02, 3.060296e-02, 1.088143e-02, -6.483339e-02, 1.016246e-01, 4.468616e-02, 7.944896e-03, 6.163222e-02, 9.344040e-02, -4.832309e-02, 3.612793e-02, -6.803495e-02, 1.096433e-02, -5.910270e-02, -4.998513e-02, -2.933558e-02, -3.566342e-02, -4.187653e-02, -3.632726e-02, -3.189887e-02, 1.032868e-01, 4.614220e-02, 6.482647e-02, 8.140660e-03, -9.345987e-03, 9.688309e-03},
{-1.708198e-01, -5.950902e-03, -7.380371e-03, 2.293210e-03, 4.291580e-02, -6.498940e-02, 9.539857e-03, 7.269989e-02, 3.895469e-02, -7.742693e-03, 2.192551e-02, -8.921346e-02, 7.289818e-02, 5.429393e-02, 9.345115e-02, -2.283739e-02, -4.972921e-03, 6.662410e-02, 2.758396e-02, 4.221180e-02, 6.889607e-02, 2.243577e-02, 7.649531e-02, 4.855986e-02, 6.478913e-02, -8.817352e-02, -9.783998e-02, 5.271481e-02, -5.558590e-02, 3.544667e-02, 3.836551e-02, 5.967018e-02, -3.108523e-02, 5.563932e-03, 3.263272e-02, -9.802712e-02, 5.215389e-02, 2.484901e-02, 9.051214e-03, 6.157926e-02, 4.556139e-02, 8.125389e-02, 1.947124e-02, 2.953112e-02, -7.280932e-03, 5.576441e-02, 6.216465e-02, -1.805097e-03, 4.122290e-02, 1.460381e-01, -6.250530e-02, -4.132070e-02, -2.241387e-02, -7.222918e-02, -6.212272e-02, -3.323482e-02, -1.579266e-02, 7.425099e-02, 3.646426e-02, -4.963933e-02, 6.991391e-02, -7.456264e-02, 2.352364e-02, 2.594125e-02, -9.792513e-02, -3.472383e-03, 7.997675e-02, 2.786873e-02, -9.343768e-02, 2.607116e-02, 2.904364e-02, 8.313689e-02, -3.235153e-02, -5.847657e-02, -1.493780e-02, 8.336874e-03, -9.097667e-02, 9.467465e-02, -9.350689e-02, 1.024762e-01, -2.512420e-02, -2.711295e-02, 5.480318e-02, -3.080659e-02, 4.100794e-02, -4.755298e-03, 7.401506e-02, -1.265237e-02, 1.303546e-02, -2.835404e-02, -5.673959e-03, 5.322499e-02, -8.218005e-02, -2.087758e-02, -1.178695e-02, -1.903260e-02, -1.605802e-03, 2.324769e-02, 2.905966e-02, -8.282943e-02, -4.661477e-02, -5.949958e-03, 6.365468e-02, -5.169601e-02, -6.850890e-02, 1.997849e-02, -8.332116e-02, 7.039259e-02, 4.909770e-03, -3.936098e-02, -9.330900e-03, 4.977899e-02, -1.890163e-02, 2.224048e-02, 2.466136e-02, -4.977082e-02, 6.694812e-03, 1.938038e-02, 1.127544e-02, 6.113844e-02, -2.165928e-02, 1.732039e-02, -4.509923e-02, -6.170729e-02, -3.393587e-02, 6.988353e-02, 6.670804e-02, 6.974012e-02, -5.215554e-03, -1.021177e-01, -3.572624e-02, 1.855371e-02, 6.950389e-02},
{2.353397e-01, -5.551916e-02, -3.031190e-02, 7.920165e-02, -3.399555e-02, 1.136003e-01, -7.435965e-02, 5.854507e-02, 5.882714e-02, 6.438443e-02, -4.226458e-02, 1.025393e-01, 1.435527e-03, -7.672743e-02, -2.315061e-02, 5.525520e-02, 1.167249e-01, -9.865873e-03, 1.060450e-02, 1.422821e-02, 8.644976e-03, 5.603807e-02, -1.416813e-02, 5.707914e-03, 7.548292e-02, 1.031709e-01, 1.799740e-02, -7.595912e-02, -4.623098e-02, 1.196043e-01, -1.991139e-02, -2.576793e-02, 5.194709e-02, 2.651215e-02, 2.235848e-02, 6.459942e-02, -1.213483e-01, -7.304056e-02, -7.521828e-02, -3.762160e-02, 4.148138e-02, 4.309640e-03, -4.151548e-02, -4.746466e-02, -9.198520e-02, 1.021544e-02, -3.788085e-02, -6.416789e-02, -1.499934e-02, -1.030362e-01, -1.182919e-01, 6.968237e-02, -6.058688e-02, -2.848606e-02, -1.601470e-02, 2.749546e-03, 4.555643e-02, -5.858357e-03, 3.855545e-02, 1.280118e-01, 1.387718e-02, -6.887770e-02, -5.209387e-03, 3.357284e-02, -8.856917e-03, 1.466386e-02, -7.505511e-02, -1.861519e-02, 1.220707e-02, 8.953687e-03, 9.907340e-03, -3.095753e-02, -8.724417e-02, -2.654819e-02, -3.512960e-03, 6.194480e-02, 1.482931e-01, -1.504914e-02, 1.780910e-02, -3.401803e-02, 6.379175e-02, 4.662809e-02, 2.347437e-02, -5.844302e-03, 3.243437e-03, 4.558828e-02, 2.509431e-02, 1.062278e-01, -7.647725e-02, -6.349330e-02, -4.628659e-02, -9.085231e-02, -1.288206e-02, 3.069986e-02, 7.099052e-02, -1.178456e-02, -4.268152e-02, -2.638265e-02, -7.362568e-02, 2.613753e-02, -4.329193e-02, 7.506884e-02, -4.839533e-02, -2.356221e-02, 2.747322e-02, -8.587469e-02, 8.464958e-02, 5.439738e-02, -5.487157e-02, 2.704721e-02, 4.236380e-02, -4.922853e-02, -4.728719e-02, 5.255201e-02, -8.112868e-02, 1.473130e-02, 3.399425e-02, -2.553553e-03, 5.503269e-02, -6.323548e-02, -6.187898e-02, 1.776930e-02, -7.933905e-03, 2.820976e-02, 5.846695e-02, 4.534721e-02, -1.492968e-03, -1.778513e-01, 3.955695e-02, 5.082935e-02, -5.840876e-02, 5.698249e-02, 6.308668e-02},
{3.424310e-02, -1.320345e-01, 7.813174e-02, 1.432826e-01, -2.157832e-01, -4.248805e-02, -2.958887e-02, -5.620893e-02, -6.118974e-02, -5.234747e-02, -2.611219e-02, -1.004273e-01, -1.310227e-01, -4.199495e-02, -1.154278e-01, 6.018155e-02, 2.988424e-02, -5.060453e-02, 1.155392e-02, -2.174329e-02, 4.842685e-02, 7.894497e-02, -5.578662e-02, 1.000664e-01, 1.608474e-01, -1.627188e-02, 7.651316e-03, 1.303504e-01, 8.652604e-02, -3.090255e-02, 2.247473e-02, -5.014339e-02, -1.736282e-01, 2.697047e-02, 1.924302e-01, 2.448330e-02, 1.224489e-01, -1.157252e-01, 1.692736e-01, 8.853950e-02, 5.632307e-02, 9.281161e-02, -1.191735e-01, -3.923286e-01, -6.228519e-02, -9.837031e-02, -2.356281e-02, -2.708155e-02, 1.574624e-01, 9.034061e-02, -1.425129e-01, 3.135589e-02, -1.103534e-01, -4.147625e-02, -8.539722e-02, -1.885867e-02, 8.677618e-02, -6.289817e-02, -5.969243e-02, -2.023907e-01, -7.071260e-03, -4.992541e-03, 1.330459e-02, -4.582686e-02, 3.875632e-02, 2.599818e-02, -6.337455e-02, 1.103216e-01, -3.855990e-02, -8.481937e-02, -5.685551e-02, 3.263066e-02, 1.051540e-01, -3.175808e-02, 4.186625e-02, -6.264360e-02, -3.146163e-02, -1.115244e-01, 7.915623e-02, -7.424681e-02, -1.004968e-01, -4.098760e-03, -5.342680e-02, -1.421944e-01, -1.161949e-02, -4.734721e-02, -1.052466e-01, 5.958892e-02, 1.904229e-02, 1.999649e-02, 7.689663e-02, -2.681988e-02, -9.331943e-02, 4.957825e-02, 7.635358e-02, -1.237103e-02, 9.982337e-02, -1.426009e-01, -1.534450e-03, 1.319377e-02, 9.317484e-02, 3.988901e-02, -9.997001e-02, -5.929182e-02, 1.732540e-02, 8.258576e-03, -7.923977e-02, -8.711880e-02, -5.711092e-03, -9.699411e-02, -5.141960e-02, -2.263038e-03, -1.560757e-01, -4.571113e-02, -4.216430e-02, 3.101691e-02, 6.375934e-02, -9.180124e-02, -1.676354e-01, -1.143890e-01, -5.604931e-02, 2.022319e-02, 8.970298e-03, 1.690244e-02, 1.489577e-02, 1.090441e-01, 3.206861e-02, 1.906316e-01, 2.601590e-02, -4.705986e-02, -4.667541e-02, -2.661547e-01, 1.212617e-02},
{1.407823e-01, 1.191799e-01, -1.088676e-01, -5.134290e-02, 2.682903e-01, -1.061580e-01, -4.466370e-03, 3.387726e-03, -2.297894e-02, -3.631131e-02, 8.610684e-02, -3.976255e-02, -1.349692e-01, 3.907913e-02, -3.008133e-02, -2.342594e-02, -4.686492e-02, 7.355305e-02, -6.465298e-02, -1.409922e-02, -9.859928e-02, 2.060668e-02, 6.983675e-03, -6.244400e-02, -4.175506e-02, 3.172318e-03, -7.022543e-02, -1.046337e-01, -9.718289e-03, -9.056756e-02, 4.774747e-02, -2.574919e-02, 1.200716e-03, 5.541468e-02, -1.569150e-01, -8.471076e-02, 5.509010e-02, 9.477257e-03, -1.267584e-01, -1.420346e-01, -6.697802e-02, 1.198943e-01, -7.608212e-02, 2.608678e-01, -5.815311e-02, -1.746896e-02, -9.996113e-02, -1.977896e-02, -1.460633e-01, -2.352227e-02, 3.054293e-02, -3.194983e-03, 3.106212e-02, 1.073894e-01, -2.993827e-02, 2.158117e-01, -1.156114e-01, 4.208482e-02, 2.194500e-02, 4.644329e-02, -1.758437e-02, -9.266330e-02, -5.136192e-02, -5.366299e-02, 3.515232e-02, 9.752578e-02, 5.096059e-02, -8.335794e-02, 4.669081e-02, 1.833822e-01, 4.991984e-02, 5.253214e-03, -1.162981e-01, -8.770375e-02, -5.551567e-02, 1.084726e-01, -2.161164e-01, 3.051089e-02, -1.337452e-01, -5.187971e-02, 1.257060e-01, 1.395529e-01, 3.989472e-02, 5.484223e-02, 4.258378e-02, -8.971225e-02, 1.465394e-01, 7.399639e-02, 1.565181e-01, 3.291051e-02, -3.926534e-02, 3.022785e-02, 9.287643e-02, 1.409718e-01, -8.822290e-02, 1.757552e-02, -7.477966e-03, 1.387903e-01, -9.679429e-03, -6.559175e-03, 7.675520e-02, -5.604232e-03, -7.728175e-02, -8.554620e-02, -6.633977e-02, 1.715489e-02, 1.091120e-01, 1.363381e-02, 1.338579e-02, 8.207111e-02, -1.695615e-02, 9.299112e-02, -3.903462e-02, -1.085483e-01, 6.906567e-02, 5.661824e-03, 7.556186e-02, -5.910085e-04, -1.691456e-02, 9.074955e-02, 9.195083e-02, 2.362707e-03, -2.395618e-02, -2.938800e-02, 5.877765e-02, -1.336797e-02, 7.027130e-02, -1.604492e-01, 6.256668e-02, 1.009853e-02, 6.317502e-02, 8.501310e-03, 9.122825e-02},
{2.946040e-01, 2.874883e-03, -7.527179e-02, 2.254662e-02, 1.378479e-01, -1.568544e-01, -7.518665e-03, -7.980353e-02, 6.757189e-02, -5.921787e-03, -1.076395e-01, -1.649603e-02, -2.592828e-01, 4.757912e-02, -9.563965e-02, 1.522259e-02, 7.181419e-02, -5.508346e-02, -1.045648e-01, -3.989766e-02, 2.450314e-01, -5.993118e-02, 2.814136e-01, 7.600077e-02, 1.626799e-01, 5.765451e-02, -2.746589e-01, 3.913443e-03, -2.978103e-02, -9.516875e-02, -6.018505e-02, -1.152637e-01, 1.163342e-01, 2.461840e-01, -1.173266e-01, -2.076070e-02, 9.894152e-02, 3.667969e-01, -1.477872e-04, -2.300648e-01, -1.537541e-01, -8.067383e-02, -1.682550e-01, 1.399550e-01, 2.230802e-02, 2.079543e-02, 6.884778e-02, 9.011225e-02, 2.440774e-02, -3.124576e-02, 1.232995e-01, 5.504553e-02, 8.022521e-02, -5.865887e-02, -4.129494e-02, 2.646480e-01, 1.287423e-01, -2.087707e-01, 8.422312e-02, -3.741770e-01, 6.314979e-02, 1.071070e-01, 8.515724e-02, -1.038865e-01, 1.353065e-01, -5.527329e-02, 3.464945e-02, 8.578297e-02, 1.267805e-01, 1.545762e-01, 3.206106e-01, -3.128514e-02, 2.973704e-02, 3.448417e-02, -5.476789e-02, -2.545270e-03, -5.177897e-01, 9.507836e-02, 4.445412e-02, -1.736073e-01, 9.508446e-02, -6.471250e-02, 3.657220e-02, 6.271830e-02, 1.218022e-01, -2.967353e-02, -7.832654e-02, 1.022158e-01, -6.957114e-02, 2.475103e-01, 3.081231e-02, -6.445988e-02, 3.215842e-02, 2.593222e-01, -1.554066e-01, -1.496620e-01, -1.543685e-01, 3.322579e-01, -3.066687e-02, 1.120325e-01, -3.827203e-02, -9.038328e-02, 6.597377e-02, -2.450909e-01, -1.064768e-01, -1.658800e-02, 3.406142e-02, -1.624185e-02, 1.868561e-02, -1.126904e-01, 2.518428e-01, -1.387556e-03, 2.199729e-02, -4.770074e-02, 4.924992e-02, -3.466397e-02, -4.275946e-02, 2.823768e-02, -4.191841e-02, -2.916834e-02, 8.154744e-02, -5.496966e-02, -3.330932e-01, 5.773588e-02, 5.745150e-02, 9.834024e-02, -1.256491e-02, -2.916667e-01, -1.705942e-02, -7.338682e-02, -9.613309e-02, -2.317387e-01, -4.187053e-03},
{-1.138561e-01, 1.575756e-02, 1.249170e-02, 6.399674e-02, 1.392173e-01, -4.020787e-02, -5.904343e-02, -1.264228e-01, 3.265957e-03, -1.256293e-02, -8.728082e-02, 2.506452e-02, 6.481703e-02, 4.867692e-02, 2.902775e-02, 6.891576e-02, -1.767763e-02, -6.063539e-02, -4.781466e-02, 1.836685e-02, -6.575639e-02, -9.427796e-02, 6.415777e-02, 1.571172e-01, -2.752883e-02, -1.313611e-01, 2.281751e-02, 5.142432e-02, 1.104490e-01, 3.445247e-02, 6.104710e-02, -3.822746e-02, 2.163465e-03, -1.615870e-02, 9.647732e-02, -6.872349e-02, 7.601052e-02, 7.564374e-02, 8.701449e-02, -1.161472e-01, 1.104299e-03, 2.303218e-03, -2.031121e-01, -3.600968e-02, -1.908620e-02, -1.084940e-02, 2.778885e-02, -8.171199e-02, 8.804374e-02, -2.218872e-02, -3.575178e-02, 7.056808e-02, -3.152278e-02, 2.789181e-02, 3.527856e-02, -4.906760e-02, -4.952388e-02, -8.890434e-02, 3.679836e-03, -2.091424e-01, -1.480638e-01, -9.042121e-03, 3.015986e-02, 8.821812e-02, 3.355004e-02, -6.564156e-02, -8.087047e-02, -2.383569e-02, 5.284607e-02, -9.934071e-02, -7.854552e-02, -6.062857e-02, -4.439076e-02, -5.523300e-02, 1.836501e-02, 5.313993e-02, -1.847908e-02, -5.681318e-02, 1.936617e-02, 1.209580e-03, 3.047918e-02, 2.335034e-02, -5.786405e-02, 4.523494e-02, -1.159410e-01, -6.683232e-02, 6.735592e-02, -6.686946e-02, 1.035793e-03, 4.978148e-02, -3.427509e-02, 1.923141e-02, -4.223613e-03, -3.843495e-02, 7.836523e-02, 1.355307e-02, 7.680753e-02, 7.897086e-02, -4.197957e-02, -9.614467e-02, 5.463983e-02, -9.849449e-02, -8.286110e-02, 7.341073e-02, 1.150593e-02, 7.365305e-02, 2.040458e-02, 5.755469e-02, 3.311902e-02, -6.205814e-02, 4.979426e-02, 8.680703e-02, 5.765353e-02, -5.207032e-02, -2.793764e-02, 3.666583e-02, 3.480974e-02, 9.144122e-02, 7.933284e-02, -7.945997e-02, 9.233019e-03, -7.267649e-02, -7.964816e-02, -6.300005e-02, -5.782134e-02, -1.387430e-02, 6.981599e-02, -1.216337e-02, -3.430533e-03, -2.944084e-02, -5.566511e-02, 4.962589e-02, -8.114665e-02},
{2.099380e-01, 1.826148e-02, 9.340759e-03, -1.208246e-01, -3.507269e-02, 1.586356e-02, 1.805467e-02, -6.915459e-02, -3.953499e-02, -7.536226e-02, -1.202528e-02, -6.985019e-03, -5.527914e-02, 2.764194e-02, -9.128867e-02, 8.194139e-03, 3.760530e-02, -5.780970e-02, -9.300752e-02, 3.600801e-03, -9.977947e-03, 1.142274e-01, 6.642904e-02, -9.952664e-02, -1.762431e-03, -1.940455e-02, -2.501504e-02, -3.844685e-02, 5.806511e-02, 9.645528e-02, 2.324329e-02, 4.152433e-03, 1.100932e-01, 8.136639e-02, 3.489362e-02, 1.756401e-02, -2.012004e-03, -5.583600e-02, 1.257955e-02, 6.482156e-02, -6.127070e-03, -7.765647e-02, -5.829133e-02, 2.173800e-02, -7.614875e-02, -6.594513e-02, 3.006052e-02, 3.589961e-03, 1.781660e-02, -4.721719e-02, -3.423556e-02, -3.484862e-02, 5.342219e-04, 5.475631e-02, 1.176164e-01, 3.733326e-02, -1.767378e-02, 4.190070e-02, -8.327287e-02, 1.283567e-01, 9.210526e-02, 1.785727e-02, 8.563271e-03, -1.201880e-02, 6.752387e-02, -1.012284e-01, 8.056543e-03, -4.428390e-02, 2.741811e-02, 1.178713e-01, -1.029657e-02, -8.092201e-03, 1.108378e-01, -7.710419e-03, -9.689385e-02, -9.013794e-02, -8.206593e-02, 2.002053e-02, -3.703292e-02, -6.133527e-02, -9.426194e-02, 3.983521e-02, -6.415009e-02, -6.440284e-02, -1.455230e-02, -2.568712e-02, -3.529558e-02, 5.940835e-02, -5.907292e-02, -9.304730e-02, 1.883562e-02, -1.276727e-01, 3.685056e-03, -2.265849e-02, -1.019068e-01, -3.255991e-02, -8.170594e-03, 7.998512e-02, -1.097879e-01, -3.830615e-02, 3.437289e-04, 4.737720e-02, 1.412270e-02, -7.065898e-02, -1.596097e-02, 2.306478e-02, 9.813329e-02, 4.974049e-02, -9.454984e-02, -4.102855e-02, -2.511797e-03, -8.472442e-03, -6.803645e-02, 6.276441e-02, -4.811228e-02, 1.225993e-03, 7.659684e-02, -5.639288e-02, -8.216914e-02, -5.862147e-02, -5.346522e-03, 1.227145e-01, -7.143997e-02, -4.649246e-02, -7.212058e-02, 4.712694e-02, -1.128388e-01, -4.345981e-02, 3.132673e-02, 3.874617e-02, -1.176214e-02, 4.966081e-02, -6.523104e-02},
{1.689062e-01, -8.805309e-03, -5.441034e-02, 3.963644e-02, -2.304722e-02, 5.936511e-02, 3.404614e-03, -1.010643e-02, -6.392930e-02, -8.308714e-02, -6.009848e-02, 3.596227e-02, -7.320125e-02, -5.793821e-02, -5.537807e-02, -4.178414e-02, -6.128331e-02, -1.658057e-02, 2.468408e-02, 2.909355e-02, -7.866195e-02, 8.318343e-02, -3.478581e-02, -7.389960e-02, 4.443695e-02, -1.113116e-02, 9.219247e-03, -1.745226e-02, -5.925253e-02, 1.010924e-01, -3.184450e-02, -4.313624e-02, -3.670885e-02, -1.244298e-04, 3.174280e-02, 2.703873e-02, 2.209416e-02, -7.115767e-03, -2.910448e-02, 7.757550e-02, -3.216607e-02, 2.098208e-02, -2.585439e-01, -1.065087e-01, -4.671001e-02, 5.694492e-02, 7.720483e-02, -5.088945e-02, -2.274426e-02, -5.518404e-02, -1.133233e-01, 6.435394e-02, 3.666057e-02, 2.608764e-02, 5.292878e-02, -1.607473e-02, -5.305965e-02, -1.142051e-01, 6.897839e-02, 6.415469e-02, -4.313430e-02, 1.865184e-03, 3.929957e-02, -9.382495e-02, -6.397497e-02, 5.646980e-02, -9.259538e-02, -4.478615e-02, 9.665745e-02, 1.365574e-02, 4.807447e-02, 2.649295e-02, -4.475804e-02, 6.006900e-02, -8.408810e-02, -8.502706e-04, 1.115712e-01, -2.174366e-02, 6.277770e-02, 1.079285e-02, -5.444920e-02, -7.820722e-02, -1.034214e-01, -1.198925e-02, 9.736331e-02, -3.179689e-03, -5.707927e-02, 7.142093e-02, 7.271317e-02, 5.309735e-02, 9.412288e-03, 2.006498e-03, 1.672230e-02, 8.630239e-02, 7.415452e-02, -1.162551e-01, -8.220999e-02, 1.517040e-02, 6.849527e-02, -2.557750e-03, 6.429544e-02, 9.139117e-03, -7.765690e-03, 4.012708e-02, 1.035913e-01, -7.687011e-02, 1.065000e-02, -8.241720e-02, -4.139406e-02, 5.258309e-02, -2.151337e-02, -5.551729e-02, -5.112077e-02, 6.063261e-02, 7.861505e-03, -1.894521e-02, -5.082222e-02, -6.916748e-02, -5.666257e-02, -7.696230e-02, -4.771041e-02, 8.667566e-02, 3.641454e-02, 3.083750e-02, 1.565414e-03, -6.892805e-02, 7.471687e-02, -1.968138e-02, -7.021407e-04, 2.146709e-02, -8.692573e-02, -8.585440e-02, -8.703533e-02},
{-2.131305e-01, -4.945792e-02, -1.769268e-03, 6.108579e-02, -1.465909e-03, 4.742123e-02, 2.115138e-02, -7.825173e-02, 5.023374e-02, 3.056113e-02, -9.229305e-02, -2.916298e-02, 4.875709e-02, -2.380035e-02, 8.881038e-02, 2.698203e-02, 3.750772e-02, -6.243637e-02, -9.872190e-03, -1.708456e-02, 7.813388e-02, 3.380903e-02, -6.628902e-02, 1.231877e-01, -5.980289e-02, 2.036229e-02, -8.577144e-02, -4.410909e-03, 1.636315e-02, -9.143456e-02, -4.444772e-02, 3.512166e-02, -1.628627e-02, -1.475764e-01, -6.238583e-03, 9.931938e-03, 1.030084e-01, -4.875235e-02, -6.637283e-02, -9.324597e-03, -6.077938e-02, -3.064342e-02, 3.803817e-03, 4.966962e-02, 5.271824e-02, 9.233009e-03, 3.995757e-02, 3.260009e-02, -8.817656e-02, 2.456275e-02, 1.366078e-01, -1.568204e-02, 7.241386e-02, -9.342571e-02, -7.182529e-02, -4.434780e-02, 1.299762e-02, 1.065610e-02, 8.293172e-03, -4.595863e-03, 5.854660e-02, 6.582553e-02, -1.213322e-01, 1.748543e-02, 5.420775e-02, -7.145320e-02, 2.424440e-03, 7.036680e-02, -9.926073e-02, -7.786463e-02, -5.285868e-02, -1.873746e-02, -3.252879e-02, 9.207063e-02, 3.928939e-02, -2.628665e-02, -1.728656e-02, -1.809043e-02, -3.711078e-02, -1.638117e-03, 6.694868e-02, -8.222784e-02, 1.540973e-02, -8.854977e-03, 2.357442e-02, 4.408100e-02, 2.920526e-02, -6.554415e-02, 1.082349e-01, 3.129036e-02, 3.306521e-02, 7.229350e-02, -1.014138e-01, 9.902716e-02, -5.942500e-02, 1.040157e-02, 6.207129e-02, -9.041483e-02, 4.842415e-03, 7.778968e-02, 4.137942e-02, 2.195086e-02, 5.557632e-02, -3.692879e-02, -4.143507e-02, -1.250068e-02, -6.681112e-03, 6.732897e-03, -2.356397e-02, -2.724770e-03, 3.552552e-02, 5.576484e-03, 6.722506e-02, -2.101032e-02, -5.925386e-02, -4.524543e-02, -4.393371e-02, -7.157689e-02, 5.376938e-02, 7.398923e-03, 6.087901e-02, -6.313933e-02, -1.341046e-02, 7.030538e-02, 7.868279e-02, -9.912279e-02, 8.440031e-02, 1.520424e-01, -5.577429e-02, -5.348081e-02, 9.582351e-02, 2.480037e-02, -1.232955e-02},
{1.993339e-01, 7.156063e-02, -4.284700e-02, -1.147705e-01, 1.464896e-01, -7.958817e-02, 1.179033e-03, -5.078338e-03, -8.736778e-02, -5.217087e-04, -4.260388e-03, -3.546642e-02, 2.215136e-02, -7.007437e-02, 2.168273e-02, 1.257726e-02, 7.487598e-03, -2.480276e-02, 1.070312e-02, -2.862003e-02, -1.508282e-01, 7.864591e-02, 1.897035e-02, -4.307252e-02, 9.042754e-02, 1.127884e-02, -4.923264e-02, 5.371481e-02, -6.523864e-02, -5.216844e-02, -2.326813e-02, -1.924090e-02, 2.621354e-02, 8.567563e-02, 1.687008e-02, -5.010448e-02, -1.678082e-02, 1.033096e-02, -2.910703e-03, 1.331093e-02, -4.901543e-02, -7.319305e-02, 7.380632e-02, 1.009873e-01, 2.932307e-02, -9.266327e-02, -1.179478e-03, 1.010370e-01, -1.462901e-02, -8.955695e-02, 2.830130e-03, -3.951719e-02, 2.708039e-02, 5.456507e-02, 1.109246e-01, 1.213254e-01, -7.779671e-03, -8.333901e-02, -7.182902e-02, -2.433359e-02, 4.817727e-03, 2.916255e-02, 4.819568e-02, 3.025992e-02, -5.916603e-02, 2.500971e-02, 1.819332e-02, 4.684367e-02, -5.970475e-02, 9.880259e-03, 9.398582e-02, -6.140213e-02, 6.828207e-02, 5.218533e-02, -9.746911e-02, 3.784803e-02, 2.465739e-03, 5.863867e-02, -9.096412e-02, -8.405589e-02, -5.616963e-02, 1.066462e-01, 6.608462e-02, -7.587150e-02, 3.894537e-02, 3.011514e-02, 8.001620e-02, 1.314273e-01, 1.222921e-02, 1.400049e-02, -6.104583e-02, -1.085600e-01, -7.994858e-03, -7.339760e-02, 4.001853e-02, -1.010710e-01, -5.687551e-02, 4.042399e-02, 2.529116e-02, -1.800842e-02, -1.475132e-02, -2.495007e-02, 6.947283e-02, 3.783676e-02, 4.699368e-02, -4.529435e-02, 2.695086e-02, 5.405628e-02, -2.778192e-02, -4.291091e-02, -3.043269e-02, 7.352325e-03, -8.947112e-02, 6.537429e-02, -8.290466e-02, -3.005859e-02, 3.406790e-02, 5.546923e-02, 6.763343e-03, 3.735783e-04, -6.979289e-03, 2.239194e-02, 3.169396e-03, 7.729746e-02, -5.116917e-02, 6.705626e-02, 7.247216e-02, -6.708714e-02, -3.855853e-02, 2.719568e-02, -9.224328e-02, 1.664177e-02, -5.292785e-02},
{1.078806e-01, 5.892859e-02, -1.168517e-01, 2.307902e-02, 1.625972e-01, 1.131723e-02, 5.643416e-03, -8.904400e-02, -7.423989e-02, -7.482769e-02, 7.635028e-02, -1.907373e-02, -8.672261e-02, 1.021499e-02, 6.147768e-03, 8.546986e-02, 1.088229e-01, 2.325618e-02, 6.878950e-03, -8.405582e-02, -1.925524e-02, -1.488958e-02, -1.615998e-02, -8.036715e-02, 6.780867e-02, -1.837819e-02, -3.334778e-02, 6.223334e-02, 2.090307e-02, -6.235972e-02, -1.014890e-02, 5.238701e-02, -1.473671e-02, 1.114617e-01, 1.004899e-01, -3.853561e-02, -1.038600e-02, 5.514620e-02, -9.061264e-02, -4.915448e-02, -3.535939e-02, -3.679779e-02, -1.907165e-01, -2.859230e-02, 5.926596e-03, 2.665746e-02, 2.661687e-02, 8.377566e-02, 9.790612e-03, -1.213579e-01, 3.536675e-02, 7.222123e-02, 8.449251e-02, -2.225076e-02, 9.394114e-02, 5.006883e-02, 7.339683e-02, 1.632217e-02, 6.184703e-02, -8.322479e-02, -9.759669e-03, 1.633133e-02, 1.135376e-01, 2.976721e-03, -8.032881e-02, -8.714902e-02, -4.458051e-02, -8.030342e-02, 2.459971e-02, -1.001239e-01, -4.014264e-03, 1.051798e-01, 1.006851e-01, -2.242468e-02, 6.950790e-02, -6.375681e-02, 1.568894e-01, 2.144702e-02, 6.244702e-02, -6.534231e-02, -3.781305e-02, 1.570278e-02, -6.163861e-02, 1.294894e-02, 9.349786e-02, 8.336211e-02, -2.678709e-02, -7.021700e-03, -9.443942e-02, 4.385347e-02, 7.295252e-02, 7.282747e-02, 1.452046e-02, -3.233932e-02, 8.022783e-03, -1.408326e-01, -1.958824e-02, -3.421807e-02, -5.790981e-02, -1.612165e-02, 3.049233e-02, -7.716727e-03, -2.445726e-02, 1.179745e-03, -3.525599e-02, -5.369645e-02, -3.815450e-02, 1.911835e-02, 9.845398e-02, 2.072550e-02, 1.015831e-01, -7.720972e-03, -1.159560e-01, 9.182390e-03, -8.252326e-02, -4.065293e-02, 7.907286e-02, -7.892091e-04, -8.431292e-02, 5.935744e-02, -3.351402e-02, 4.327959e-02, -4.715925e-02, 1.301486e-02, 2.232117e-02, -1.506113e-02, -2.631465e-02, -5.378634e-02, 5.422910e-02, -1.112022e-01, -2.047583e-02, -1.055570e-01, -8.741701e-02},
{1.628689e-02, 1.074418e-01, -2.079356e-03, 1.083993e-01, 9.386138e-02, 2.456002e-02, -8.248930e-02, -2.613747e-02, 7.935426e-02, -2.103508e-02, 1.613719e-02, -5.975579e-02, -1.597833e-02, -4.170012e-02, -7.422295e-02, -6.215591e-02, 4.122238e-02, 9.196637e-03, 1.910302e-02, -7.083281e-02, 6.657390e-02, -8.864957e-02, -1.835319e-02, 1.696088e-02, -2.862744e-03, 1.000457e-02, -7.040518e-02, 8.668697e-03, -7.817245e-02, 1.170389e-02, -4.017446e-02, -5.421012e-02, -5.313345e-03, 7.947725e-02, 2.864004e-02, 3.897253e-02, 1.452854e-02, -6.617267e-02, -9.470474e-02, 2.888275e-02, 1.715798e-02, 2.426546e-02, -1.575354e-02, 2.779946e-02, 8.357207e-02, -7.152469e-02, -8.973316e-02, -3.954161e-02, -1.105480e-02, 5.294925e-02, -2.791052e-02, -5.956051e-02, 7.453919e-02, -1.365968e-02, 2.082593e-02, -2.993129e-02, 7.744637e-02, 8.595460e-03, 8.541641e-02, 6.140200e-02, 3.376155e-02, 4.689502e-02, 3.852740e-02, -5.487313e-02, -7.724969e-02, -6.506660e-02, 4.776705e-02, -5.548853e-02, -3.424371e-02, 2.209967e-01, 5.569579e-02, -1.653182e-02, -6.866605e-02, -1.142653e-02, 4.116824e-02, 5.527856e-02, 4.688471e-02, -7.036126e-03, -5.382134e-02, -4.778475e-02, 6.157669e-02, 3.175205e-02, 3.457415e-02, 8.091781e-02, -6.488410e-02, 5.238066e-02, -1.355073e-02, 7.791074e-02, -5.989167e-02, 2.631504e-02, 3.380308e-02, -2.650535e-02, -3.779902e-02, 1.535541e-01, 5.726038e-02, -2.650779e-02, -3.790263e-02, 1.391498e-01, -2.071216e-02, -3.164777e-02, 3.422919e-02, -2.177485e-02, 1.769614e-02, -3.970532e-03, -1.310918e-02, -6.927008e-02, 1.896207e-02, -4.923623e-02, 4.170454e-02, -6.415550e-02, 1.534989e-02, 3.738575e-02, -1.089330e-01, -1.447030e-02, -1.082284e-02, 4.471228e-02, -5.679602e-02, -6.079810e-02, 6.776968e-02, -3.886605e-02, 2.928850e-02, -3.162859e-02, -1.785184e-02, 3.165384e-02, 8.172167e-02, 5.789440e-02, -2.296626e-02, -9.563260e-02, 5.549189e-02, -4.787895e-04, -1.435919e-02, -1.347727e-02, 6.347369e-03},
{8.379097e-02, -7.774927e-02, 2.059511e-02, 5.630350e-02, -8.810727e-03, 2.994001e-02, 8.436529e-02, 5.782227e-02, -3.227689e-02, 6.071150e-02, 5.000189e-02, -5.744883e-02, -5.413172e-02, -2.201615e-02, -1.302076e-02, 3.072598e-03, -2.691348e-02, -5.088397e-02, 8.149889e-03, 5.378439e-02, -5.190424e-02, 3.435400e-04, -9.872206e-03, -1.126891e-01, 5.902397e-02, 1.188473e-01, -1.082468e-01, -1.908516e-02, 8.618635e-02, -1.305271e-02, 4.690362e-02, -3.330175e-03, -9.958382e-02, 5.851951e-02, 6.975860e-02, 4.595464e-02, 1.220995e-01, 1.423221e-02, 1.098270e-01, -3.501123e-02, 2.606543e-02, 6.271359e-02, -2.381891e-01, -1.713969e-02, -8.673614e-02, 6.991757e-02, -9.858575e-02, -5.591885e-02, 6.397676e-03, -6.277834e-02, -5.124510e-02, -4.431006e-02, -3.849692e-02, 7.428053e-02, 1.654109e-02, 1.296839e-01, 6.145155e-02, -1.042642e-01, -8.748949e-02, 5.743456e-02, 4.662367e-02, 5.133427e-02, 6.771807e-02, 5.715714e-03, 1.004451e-01, 4.729599e-02, 4.285996e-02, 5.369999e-02, 9.295560e-02, 2.638963e-02, 5.898339e-02, -6.992015e-02, 4.255176e-02, -1.086678e-01, -3.890879e-02, 9.766828e-04, -8.809172e-03, 5.525088e-02, -7.707155e-02, -2.217785e-02, -1.264848e-01, -5.139774e-02, -2.191868e-02, -5.967059e-02, -4.596193e-02, -6.216509e-02, -8.792067e-02, -2.221525e-02, -2.516823e-02, -1.321546e-02, -5.735377e-02, -1.291051e-01, 1.463283e-03, 2.569795e-02, 4.008348e-02, -2.568067e-02, -5.050456e-02, 2.045758e-01, 6.387743e-02, -3.268811e-02, -2.770509e-02, -1.205284e-02, -7.121642e-02, -7.963304e-02, 3.367503e-03, 2.222970e-02, -2.235906e-02, 6.322920e-02, 2.157784e-02, 8.203549e-02, 7.967290e-02, -8.746582e-02, -2.942142e-02, 3.466205e-02, -5.142452e-02, -8.127355e-02, 8.700337e-02, 5.608780e-02, -8.962367e-03, -1.327190e-02, -4.870452e-02, 2.631108e-03, -7.954742e-02, 4.149992e-02, -3.342695e-02, 8.825563e-02, -8.124845e-02, 3.067468e-02, 3.000838e-03, -6.856546e-02, 1.468235e-02, -1.230581e-01, -7.067402e-02},
{8.785913e-02, -6.598084e-03, -1.418499e-02, -2.466292e-02, 1.000407e-01, -7.822560e-03, 6.605843e-02, -6.095831e-02, 5.601145e-02, -6.460758e-03, -8.751290e-02, 1.308338e-01, 5.202043e-02, 1.557480e-02, 1.736641e-02, -3.651091e-02, 5.182313e-02, 5.506796e-02, -8.867203e-02, 8.175327e-02, -9.516272e-02, -2.348930e-02, -4.413484e-02, 1.400706e-01, 1.833579e-02, -5.556381e-02, -5.849325e-02, 9.506210e-02, 1.142555e-01, -2.033079e-03, 8.162085e-02, -9.014636e-02, 3.493969e-02, -1.437359e-02, -8.855301e-03, 8.957441e-02, 2.363241e-02, 5.239619e-02, 1.002630e-01, -1.601732e-02, 8.493863e-02, -1.215904e-01, -4.605836e-02, -6.004767e-02, -4.005868e-02, -6.832100e-02, 4.447167e-02, 2.560469e-02, -8.798762e-02, -1.311765e-01, 2.218190e-02, -3.308944e-02, -9.300007e-03, 4.831948e-02, 2.434327e-02, -8.569928e-02, -4.032933e-02, -7.954033e-04, -1.425524e-02, -1.729096e-02, -4.289930e-02, 1.097096e-01, -1.661621e-03, -5.370838e-02, -3.511638e-02, 2.074165e-03, -8.539894e-02, -5.772826e-02, -5.525238e-02, -1.368992e-01, -6.676576e-02, -6.973797e-02, -8.933875e-02, -3.357163e-02, -1.029813e-01, -2.366605e-03, 8.106829e-02, -5.180675e-03, -1.338802e-02, 6.708778e-02, 1.238572e-01, -1.685848e-02, 5.699876e-02, -7.821427e-02, -2.412608e-02, -7.691349e-02, -6.986905e-02, 2.709061e-02, -1.666304e-02, -5.163899e-02, -5.051712e-02, 3.676733e-03, 7.026796e-02, -6.855324e-02, -2.453570e-02, -8.892906e-04, 8.272260e-02, -1.181447e-01, -8.995694e-03, 4.756172e-02, 1.046476e-02, 1.286355e-03, 2.144812e-02, 4.513924e-02, 1.296883e-01, 5.225285e-02, 1.601352e-02, 1.925323e-02, 2.270822e-02, -3.467833e-02, -1.069394e-01, -9.844713e-02, 1.544049e-02, -5.094086e-02, -4.440500e-02, -9.601499e-02, 3.712209e-02, 4.000350e-02, 1.631887e-03, -8.900543e-02, 4.515585e-02, 2.658978e-02, 8.832387e-02, 8.242196e-02, -9.729153e-02, 4.290592e-02, 6.522447e-02, 5.868214e-02, -1.068801e-02, 2.224759e-02, -3.535229e-02, -7.013329e-02, -5.209017e-02},
{1.400706e-01, 1.080164e-01, -3.064081e-02, -2.006887e-01, 6.950373e-02, 8.978879e-02, -1.146447e-02, -6.959464e-02, -5.370551e-02, -6.942699e-02, -8.083572e-02, 5.180027e-02, 4.831866e-02, 5.654347e-03, -3.038853e-02, 1.028522e-01, 2.444896e-02, -1.625408e-02, -2.478582e-02, -3.265715e-02, -1.539116e-01, -7.318892e-02, -3.243857e-02, -3.450320e-02, 6.534254e-02, -4.114666e-02, 1.560259e-01, 8.885887e-03, -6.409556e-02, -4.023129e-02, 1.393227e-01, -8.965218e-02, 9.005183e-02, -1.128191e-02, -9.926023e-02, 6.320003e-02, -1.173492e-01, 6.739122e-03, 8.890411e-02, -4.215455e-02, -5.484220e-02, 7.138046e-03, 3.173431e-01, 2.397232e-01, -1.106418e-01, 3.349937e-02, 2.011553e-02, -1.618502e-02, -2.029206e-01, -1.565404e-01, -2.156406e-02, -4.394543e-02, 6.076046e-02, -7.301743e-02, 4.020170e-02, 8.126482e-02, 1.007768e-01, -8.566099e-03, 4.886322e-02, 1.625548e-01, 1.133835e-01, -5.388126e-02, -1.138996e-01, -6.927659e-02, 2.411808e-02, 2.746906e-03, 6.561273e-02, 7.105909e-02, 1.270514e-01, 1.843179e-02, -1.435710e-02, -5.605822e-02, -1.607177e-01, 8.064800e-02, 4.179515e-02, 5.908174e-02, 3.556409e-02, 6.260806e-02, 1.065703e-01, 1.978675e-02, 2.335235e-01, 1.434468e-01, 1.164162e-01, -1.759392e-02, -2.410475e-02, -6.385117e-02, -3.004475e-02, 2.026036e-02, 5.164621e-02, -1.243055e-01, 2.204441e-03, 1.063822e-01, 1.509341e-01, -7.282643e-02, -1.378505e-03, 9.134767e-04, -1.628620e-02, -1.349971e-02, -3.906880e-02, -6.660172e-02, 1.591701e-02, -2.424257e-02, 1.088759e-01, 2.725216e-02, -5.330420e-02, -3.990155e-02, -2.879391e-02, -1.183406e-03, 6.332222e-02, 9.910808e-03, -2.228852e-01, 5.548111e-02, 1.074036e-01, 8.099766e-02, -8.115817e-02, -7.095751e-02, 6.599450e-03, -8.802966e-02, 6.892423e-02, -3.340451e-02, -1.190870e-01, 4.205592e-02, 1.155178e-01, -8.932605e-02, -3.648164e-02, -5.613444e-02, 3.819711e-02, -8.645637e-02, 7.396101e-02, 3.695911e-02, -7.864656e-02, 1.636202e-01, -2.323079e-02},
{-1.689791e-01, -4.798044e-02, 6.869378e-02, 6.719825e-02, -1.082385e-01, -5.430715e-04, 3.098819e-03, -7.037122e-02, 8.227142e-02, -3.253769e-02, 7.161431e-02, 2.447985e-02, 1.012622e-01, 2.650651e-02, 6.547923e-02, -4.535397e-02, -7.919323e-02, -3.660735e-02, 9.910189e-02, 2.489390e-02, 3.719023e-02, -7.482995e-02, -4.505711e-02, -8.411717e-03, -8.490837e-02, -6.095052e-02, -1.240945e-02, -2.318748e-02, -8.186433e-03, -8.679778e-02, -3.929624e-02, 7.255666e-02, 4.410334e-03, 1.629194e-02, -1.016798e-01, -5.303847e-02, -7.182171e-03, 4.302365e-02, 3.081980e-02, 1.566331e-02, -9.182205e-02, 8.404011e-02, 2.753254e-01, -5.365213e-03, -1.784691e-02, -1.606155e-02, -5.677063e-02, -2.953589e-03, -4.598887e-02, 9.717564e-02, -3.491888e-02, 6.213304e-02, -9.264728e-02, -3.031816e-02, -6.625250e-02, 3.916490e-02, -2.634022e-02, -8.717587e-03, 9.314046e-03, -7.104712e-02, -7.452382e-02, 6.572113e-02, -6.164908e-02, 8.938022e-03, 4.623694e-02, -5.159120e-02, 2.519054e-03, -4.971219e-02, 1.529439e-02, -1.226278e-03, 4.790500e-02, -9.641937e-03, -1.138589e-01, -4.300550e-02, 4.735205e-03, 5.357585e-03, -1.341318e-01, 4.937934e-02, -1.593038e-03, 1.889633e-02, 6.457039e-02, 3.406270e-02, -2.278750e-02, -3.559381e-03, 1.940182e-02, 3.364472e-03, 3.014152e-02, -8.227887e-02, 9.724254e-02, 8.122266e-02, 2.599380e-02, 4.977773e-02, -5.619388e-02, 1.093681e-01, -9.137992e-02, 5.177290e-02, 8.699400e-02, -1.739513e-01, 1.169826e-02, -8.008161e-02, -4.521825e-02, 5.336244e-02, -3.144376e-02, -6.022317e-02, -3.667632e-03, 2.361787e-02, -7.717438e-02, 6.521468e-02, -2.823988e-02, 6.396376e-02, -7.592800e-02, 4.311657e-03, 1.035910e-02, -9.317257e-02, 8.585847e-02, 1.739048e-02, -8.537310e-02, -7.276762e-02, -7.359798e-02, -3.413742e-03, -8.679290e-04, -1.379471e-02, 9.522633e-02, 7.846484e-02, -5.166033e-03, -5.413969e-02, 9.936793e-02, 9.217650e-02, 2.099540e-02, -1.290289e-02, -6.188963e-02, -3.311282e-02, 9.081898e-02},
{5.198431e-02, 1.648105e-02, -8.902857e-02, 3.302172e-02, 4.435439e-02, -4.821448e-02, -3.068572e-03, -4.372528e-02, -2.820882e-02, -4.956528e-02, 7.501449e-02, 1.150901e-02, 1.837200e-02, -1.104786e-02, -8.733602e-02, 1.330500e-02, -6.169568e-02, 4.149523e-02, 6.950147e-02, 1.260887e-02, -6.264392e-02, 3.947144e-02, -3.231478e-02, -2.867752e-02, -1.709848e-02, -5.238914e-02, 3.874634e-03, -4.248689e-02, 9.063712e-02, 1.155208e-01, -6.203322e-02, -7.458615e-02, 3.157806e-02, 1.564238e-02, -2.182538e-02, -3.963443e-02, 3.750757e-02, 2.459743e-02, -1.058966e-02, 7.376233e-02, -5.533599e-02, -6.333655e-02, -1.595820e-01, 6.147144e-02, 1.290332e-02, 2.985790e-02, 9.514619e-03, 5.203452e-02, -2.388066e-02, 9.735893e-02, -1.191746e-01, -4.892621e-02, -9.159648e-02, 7.195595e-02, -2.113076e-02, 2.507035e-02, -2.130944e-02, -3.904446e-02, -7.459647e-03, -1.054087e-02, -6.892581e-02, 7.748878e-02, 7.348455e-02, 1.339979e-03, -7.185142e-02, 2.925770e-02, 6.280956e-02, 2.456026e-02, -1.395701e-02, -4.530301e-02, 4.675334e-02, -3.806069e-02, -3.497855e-02, -4.244911e-02, 4.080611e-02, 5.256423e-02, 6.438646e-02, 1.527288e-02, -3.113356e-02, -6.724310e-02, -2.674483e-02, -3.385516e-02, 3.664342e-02, 5.789513e-02, -8.015718e-02, -4.663286e-02, 7.277172e-02, -2.501521e-02, 2.620078e-02, 3.848038e-02, -8.311491e-02, -2.360439e-03, 9.357680e-02, 1.709123e-01, 1.182348e-01, -9.197132e-02, -4.107697e-02, 3.337732e-02, 5.666885e-02, 1.931646e-02, -3.501191e-02, -1.018880e-01, 2.119487e-03, 7.207955e-02, -1.272825e-02, 2.418497e-02, -2.969085e-04, -9.258855e-02, 3.345282e-02, 1.642747e-03, 7.322947e-02, 1.581764e-02, -1.701142e-01, 1.659046e-02, 8.316819e-02, -7.181378e-02, 4.816641e-04, -8.418554e-03, -7.153089e-02, -2.448076e-02, -3.692217e-02, 6.544567e-02, -9.296520e-02, 3.765596e-02, -4.842929e-02, -6.940552e-02, -4.087238e-02, 1.465652e-03, 5.320714e-02, -1.279406e-02, -7.227807e-02, -6.175195e-02, -6.760572e-02},
{-1.801896e-01, 6.255872e-02, -2.438527e-02, 1.137946e-01, -1.597387e-01, -9.897620e-02, -1.076293e-01, -3.342242e-02, 5.336563e-02, -1.501336e-02, -1.138151e-01, 2.864151e-02, 8.629377e-02, 3.702433e-02, 7.100986e-02, 4.292201e-02, -1.141438e-02, 1.042262e-01, -3.995991e-03, -8.757762e-03, 1.725583e-02, 5.311444e-02, -3.103919e-02, 1.271495e-01, -3.145824e-02, 3.826726e-03, -2.294797e-02, 1.519290e-02, 5.788933e-03, 2.163521e-02, -7.035574e-02, -3.242458e-02, -8.174083e-02, 2.695197e-02, -4.871656e-02, 1.180211e-02, -1.526032e-02, 2.356354e-02, -4.486401e-02, -3.929625e-02, -1.129786e-03, 5.889824e-02, -1.263489e-01, -3.500340e-02, 1.054814e-01, 2.308336e-02, -4.178147e-02, -7.526081e-02, -1.588531e-02, 1.031547e-01, 1.074388e-02, -3.247281e-02, -5.826126e-02, 8.401061e-02, -5.805424e-03, -2.054088e-01, 3.334523e-02, 1.555913e-01, 7.269426e-02, -9.928541e-02, 2.795490e-02, 1.094532e-01, -1.333158e-01, -4.749587e-02, -2.461227e-02, 2.953530e-02, 1.236816e-02, 5.742668e-02, -5.643386e-03, -1.714786e-01, -5.125379e-02, 4.768680e-02, 5.457366e-02, 1.724843e-02, -6.157206e-02, 1.563739e-03, 9.592650e-02, 2.781879e-02, -9.204035e-02, 1.490704e-01, -2.845421e-02, -4.357411e-02, 7.278221e-02, -3.123449e-02, -5.943914e-02, -7.460734e-02, 3.415753e-02, -1.156038e-01, 7.201187e-02, 2.815672e-02, 6.804794e-02, -9.609164e-02, 7.483947e-02, 5.651343e-02, 5.926725e-02, 3.532470e-02, -3.183142e-02, 7.115944e-02, 5.945965e-02, 6.165524e-02, 4.812767e-02, -5.959423e-02, -1.862291e-02, 5.854907e-02, -8.769414e-03, -5.129257e-02, 1.339499e-02, -6.667904e-02, 1.269332e-02, -3.696146e-02, -6.706443e-02, 8.387356e-02, 1.305910e-01, -7.261330e-02, 5.939604e-02, -4.319415e-02, 2.505043e-02, -1.014164e-02, -9.745950e-02, -2.924104e-02, -3.402597e-02, -1.138369e-01, 2.166022e-02, 7.673444e-03, -2.262029e-02, -1.220799e-01, 1.122513e-01, 5.651197e-02, -7.950177e-02, -5.030033e-02, -7.921091e-02, 6.369805e-02, -7.223985e-02},
{1.272117e-01, 7.589845e-02, -1.118081e-01, -1.946135e-02, 2.386871e-02, -7.865998e-02, -5.370748e-03, 6.636973e-02, -8.995829e-03, 5.897569e-02, -2.085516e-02, -7.047396e-02, -1.244694e-01, -8.320796e-02, 2.843595e-02, 1.936385e-02, -7.130589e-02, -2.197025e-02, 2.524394e-03, -3.602980e-02, -1.108713e-01, 2.140190e-02, 2.669086e-02, -9.255148e-02, 6.630685e-02, 9.923367e-03, -8.786720e-02, -1.002959e-02, -5.382155e-03, -2.530540e-02, -1.579797e-02, -2.148681e-02, -1.383303e-03, 2.776649e-03, -1.521171e-01, -7.132062e-02, 1.857614e-02, -5.521744e-03, -8.045129e-02, -2.132199e-02, -8.317836e-02, -4.380149e-03, -4.528317e-02, 1.793973e-01, -3.275849e-02, 4.445213e-02, -4.154762e-02, -7.446079e-02, -1.231114e-01, -4.650853e-02, 9.026868e-02, 1.353558e-02, 3.839193e-02, 1.398686e-01, -4.046218e-02, 1.280366e-01, 4.062818e-02, -4.774817e-02, -2.090963e-02, 4.837864e-03, 1.662849e-03, -9.693202e-02, 6.291136e-02, -2.527668e-02, -2.160734e-02, -1.996065e-03, 1.263048e-02, -7.718492e-02, 4.195808e-02, 1.105213e-01, -1.432146e-02, -3.672837e-02, -4.143438e-02, -9.825963e-02, -5.265088e-02, -1.764876e-02, 5.297988e-02, 1.526893e-02, -3.825345e-02, 3.699520e-02, 1.023599e-01, -3.194291e-02, 5.873497e-03, -6.598848e-02, -5.151596e-02, -4.538807e-02, 6.209989e-02, -1.579630e-02, 1.004484e-01, 7.370171e-02, 6.355304e-02, -1.318459e-01, 3.680850e-02, 6.247947e-02, -8.353570e-03, 9.365939e-02, -1.263078e-01, 6.020645e-02, -7.694189e-02, -1.371781e-02, 7.341923e-02, 4.723817e-03, -2.692656e-02, 2.163107e-02, 4.107314e-02, -3.477046e-02, 4.743291e-02, -2.421379e-02, -7.082184e-02, 9.175869e-02, -2.452818e-02, 1.110922e-01, 9.605076e-02, -7.172198e-02, -5.741995e-02, -2.726079e-02, -3.026564e-02, 1.935202e-03, -2.439432e-02, -8.155049e-02, 5.514404e-02, -3.030740e-02, -5.126279e-02, -1.077517e-01, -4.523857e-03, -1.044040e-02, -2.722729e-02, -2.218478e-01, 5.044674e-02, -6.517696e-02, 7.441876e-03, 3.915551e-02, 2.868906e-02},
{3.093267e-01, 1.265576e-01, 1.073112e-03, 3.915901e-02, -4.494697e-01, 1.002128e-01, 7.247959e-02, -7.178208e-02, 1.141082e-01, -1.837136e-02, -9.765597e-02, 1.048626e-01, -4.733194e-03, -2.623165e-02, -7.438488e-02, 3.045223e-02, 6.361550e-02, 2.008199e-03, -4.554596e-02, -5.578206e-02, -2.248568e-01, 2.299456e-02, 6.290203e-02, -5.640966e-02, -3.299079e-02, -6.912935e-03, -1.386762e-02, -3.171526e-02, -3.366296e-02, 8.599727e-02, 2.344515e-02, 2.834847e-02, 1.855637e-01, -1.531970e-02, -1.823151e-01, -1.981716e-02, -2.524163e-01, -4.563276e-03, -3.571647e-02, -4.593704e-02, 1.644977e-01, -8.103950e-02, 1.129497e-01, 1.780889e-01, 4.146552e-02, -1.256530e-01, -3.856097e-02, -1.727233e-02, -8.289668e-02, 2.531302e-03, 1.644087e-01, -2.298394e-02, 5.835196e-02, 2.623374e-02, -3.069090e-02, 5.482742e-02, -2.571164e-02, -6.694134e-02, -9.541988e-02, 2.517757e-01, 6.912286e-02, 3.812762e-02, -5.505214e-02, 2.506601e-02, 3.809263e-03, -1.407960e-01, 1.210843e-01, 1.045374e-01, 6.939580e-02, 2.430364e-01, -4.405101e-02, -7.953038e-02, -2.021436e-01, 6.130348e-02, -5.204411e-03, -2.620348e-02, 9.095994e-02, 8.504544e-02, -1.569412e-02, -1.238986e-01, 6.501226e-02, 5.679845e-02, 1.129415e-01, -5.056293e-02, 1.265737e-01, 5.185668e-02, 6.158293e-02, 8.472099e-02, 9.885630e-02, -1.613358e-03, -7.251863e-02, 1.277241e-01, 1.497762e-01, -1.497293e-02, 1.277435e-01, -5.699909e-02, 9.888874e-02, -2.225084e-01, -6.483844e-03, 6.415422e-02, 1.756018e-02, -7.257418e-03, 1.887477e-02, 1.676434e-01, -5.727644e-02, -8.352797e-02, 4.610564e-03, 1.142168e-01, 1.765773e-01, 5.316081e-02, -2.857427e-01, -2.895652e-02, -6.606288e-02, -9.682876e-03, -2.315303e-02, -1.092277e-01, 4.729259e-02, 5.486482e-02, -6.200108e-02, 7.429957e-02, -4.155974e-02, -1.246035e-02, -7.404024e-03, -1.964594e-02, -6.949020e-02, 1.229515e-01, -7.969840e-02, -1.366923e-01, -4.753798e-02, 1.133391e-01, -3.131891e-02, 1.429654e-01, -8.506060e-02},
{1.745721e-01, 1.280914e-01, -9.610423e-02, 3.133226e-03, 1.631270e-01, -6.390365e-03, 6.810680e-02, -8.960844e-02, -1.150274e-02, 6.875189e-02, -3.750641e-02, -5.794815e-02, -1.240100e-01, 7.245011e-02, 3.529822e-04, -5.600899e-02, 4.045801e-02, -1.062019e-02, 2.820223e-03, -4.612353e-02, -1.361744e-02, 3.224533e-02, 6.440692e-02, -1.200705e-01, 1.360021e-02, 4.898871e-02, 8.854508e-03, 7.672132e-02, -5.496048e-02, 6.625567e-03, 6.426773e-02, -8.904169e-02, -9.922078e-02, 1.221698e-01, 2.018935e-02, -4.580018e-03, 2.301365e-02, -2.686935e-03, -1.885388e-02, -5.746413e-02, -2.389991e-02, 9.371857e-02, -1.171004e-01, 3.095670e-02, 2.882146e-02, -5.632872e-02, -4.265008e-02, -4.494702e-02, -8.761726e-02, -2.333440e-02, -3.964788e-02, -6.063455e-02, -1.292389e-02, 7.989135e-02, -4.300071e-02, 8.618101e-02, -3.185333e-02, -3.655155e-02, 9.363874e-03, -7.106528e-03, 3.857599e-02, -6.259255e-02, 3.317089e-02, 4.539600e-02, 2.756737e-02, -5.383969e-02, 1.184080e-02, 7.840837e-02, -7.248499e-02, 2.992028e-02, 1.120970e-02, 2.942591e-02, 1.073344e-01, 4.495347e-02, -3.295357e-02, 6.359511e-02, 1.392816e-02, 5.780045e-02, -4.126098e-02, -6.312092e-03, -3.824740e-02, 1.002056e-01, 3.926919e-02, 3.612196e-02, 2.621183e-02, -8.888761e-02, 6.207274e-02, 2.579744e-02, -1.016684e-03, -3.029558e-02, 6.095948e-02, 8.395840e-03, 8.465299e-02, -5.203965e-02, -2.285312e-02, -3.372650e-02, -9.899028e-02, -2.217859e-03, -7.270989e-02, 2.357315e-02, 3.356275e-02, -9.895517e-02, -6.262980e-02, -1.075516e-01, -1.180335e-02, -1.560696e-02, 9.416141e-02, 5.916007e-02, 9.117694e-03, 2.708733e-02, -1.087635e-03, -9.631058e-02, 1.302666e-02, 7.462941e-02, 4.961362e-02, 1.502511e-02, -6.520513e-02, -5.373540e-02, 4.947097e-02, -3.068865e-02, 4.481805e-02, -2.739170e-02, -4.991143e-02, -2.632265e-02, -8.392582e-02, 2.789490e-02, 6.017066e-02, -1.497151e-01, 6.680942e-02, -1.170155e-01, -9.145165e-03, -9.843369e-02, 3.612741e-02},
{-8.810539e-02, 4.862854e-02, -7.745729e-02, 1.339587e-01, 2.443797e-01, 5.108836e-02, 6.847944e-02, 4.644582e-02, -1.579501e-03, 3.918647e-03, 5.902683e-02, -4.209527e-02, -3.363475e-02, 6.597285e-03, -5.577848e-02, -5.604444e-02, 1.274514e-01, -1.535690e-02, 7.329679e-02, 7.705574e-02, -5.039828e-02, -5.866292e-02, 9.526902e-02, 9.170746e-02, -3.461709e-02, -4.890939e-03, -7.077603e-02, 2.469747e-02, -6.208904e-02, 1.620553e-02, 7.351116e-02, -1.126948e-02, 1.292075e-01, -7.905097e-02, -2.797029e-02, -8.929072e-02, -6.714378e-02, -4.933449e-02, -5.204682e-02, 1.884645e-02, 6.365699e-02, -3.349848e-02, 2.293410e-01, 2.332459e-01, -9.954386e-03, -8.162456e-03, 4.913732e-02, -7.264851e-02, 3.928587e-03, -3.534952e-02, 4.798821e-02, -7.880691e-02, -3.763980e-03, 9.461813e-02, 8.577577e-02, 2.643148e-02, -7.784221e-03, -7.897010e-02, 2.350864e-03, -1.040536e-02, -2.878760e-02, 3.327916e-02, 8.356169e-02, -7.239491e-02, 5.228609e-02, -1.045772e-01, -2.357558e-02, -2.115128e-02, 9.350908e-02, 1.872867e-01, 1.176325e-01, -5.599157e-02, -6.723401e-02, -1.719003e-02, -8.222150e-02, 3.138543e-02, -8.611440e-02, -1.129671e-02, 1.662296e-02, 6.488904e-02, 5.760965e-02, 7.218783e-02, 3.380778e-03, 1.627059e-02, -5.937766e-02, 8.469126e-02, 1.559477e-02, -6.059348e-02, 1.677581e-02, -3.114721e-02, -3.435300e-02, 3.265370e-02, 7.677541e-02, -1.119838e-02, -4.480315e-02, -1.043141e-01, 6.071079e-02, -6.875183e-02, 6.340657e-02, 4.560254e-02, -9.860109e-02, 4.894245e-02, 2.915392e-02, -3.096770e-02, -2.669442e-02, 9.304364e-02, 5.647796e-02, 3.017046e-02, 1.258382e-02, 7.356501e-02, -7.045976e-02, 7.879785e-02, 4.834367e-02, 5.690176e-02, -4.148615e-03, 1.918078e-02, -3.029939e-02, 1.401970e-02, -5.513162e-02, -3.502078e-02, 7.399733e-02, -6.566109e-02, 3.891066e-02, -7.753939e-02, -1.114694e-02, -1.089254e-02, -4.585966e-02, -8.428258e-02, -4.652280e-02, -6.118435e-02, 1.764324e-02, 6.333739e-02, -7.528432e-02},
{2.243472e-01, -4.446616e-02, 3.267711e-02, 6.949060e-02, -7.009508e-02, 8.011703e-02, -4.730642e-02, -4.526084e-02, -7.995215e-02, -3.563184e-02, 1.365352e-01, -4.209946e-02, 3.581303e-02, -3.407484e-02, -5.856907e-02, 3.845813e-02, 4.630864e-02, -1.406329e-03, -1.014112e-01, 2.510081e-02, -6.362133e-02, 6.020457e-03, 1.312011e-02, -5.263640e-02, 9.940424e-02, 1.302006e-01, -6.758680e-02, -3.042677e-02, -1.511694e-02, 7.469938e-02, -8.371174e-03, -6.063541e-03, 1.847828e-01, 6.595184e-02, -6.036806e-02, 1.316219e-02, 3.902590e-02, -3.447692e-02, 2.962474e-02, 7.774784e-02, -3.272779e-02, -5.206372e-02, 1.428478e-01, 1.818369e-02, 6.002438e-02, -3.670676e-02, 5.891981e-02, 1.172780e-01, 5.744739e-02, -1.203196e-01, 4.407463e-03, 4.649768e-02, 1.950054e-02, -5.859634e-02, 6.276529e-02, 5.373314e-02, -2.308598e-02, -4.815360e-02, -7.184886e-02, 1.424417e-01, 6.092903e-02, -6.153405e-02, 1.240396e-01, -8.146610e-03, 4.649960e-02, -9.791351e-02, 4.367495e-02, 7.302343e-03, 8.477456e-02, 1.237655e-01, 4.932087e-02, 9.201238e-03, -8.555336e-02, -8.762599e-02, -1.123292e-01, -9.001313e-02, -4.217023e-02, -1.181200e-01, 7.454071e-03, -7.348519e-03, -3.846107e-02, 7.512407e-02, -6.622411e-02, -1.069009e-01, -4.130705e-02, -9.908670e-03, -2.892666e-02, 5.456235e-04, -9.000530e-03, -3.912721e-02, -5.772617e-02, 3.998920e-02, 2.077814e-02, -9.692369e-02, -2.463241e-02, -1.979883e-02, -6.957753e-02, 9.370038e-02, 5.352876e-02, 9.309601e-02, -4.296445e-02, 1.179699e-01, 8.933307e-02, 3.185171e-02, -4.121592e-02, -9.033945e-02, 3.890465e-02, 7.984406e-04, -4.106291e-02, -1.868808e-02, 1.185853e-01, -6.690561e-02, -1.053705e-01, 6.038498e-02, -3.693025e-02, -2.550473e-03, 3.858431e-02, -8.037499e-02, -1.929256e-02, 3.412894e-03, -7.495697e-02, -4.569334e-02, -1.243794e-02, 6.322504e-02, 3.331107e-02, 8.999991e-02, -2.596141e-02, -1.193499e-01, -1.069725e-02, 4.330711e-02, 1.904037e-02, -3.512273e-02, 8.807943e-03},
{-1.206336e-01, 3.221840e-02, -6.124520e-02, 1.501278e-01, 7.083228e-02, 5.213752e-02, -9.639166e-02, -4.115729e-02, -6.579398e-02, 1.175823e-02, -1.331878e-02, -8.758874e-02, 4.524075e-02, 1.979649e-02, -6.677820e-02, 2.803199e-02, 1.660945e-02, 7.279485e-02, 6.309571e-03, -8.142804e-02, -9.991521e-02, -9.566152e-03, 8.312603e-03, -6.658073e-03, 7.608853e-03, -2.866141e-02, -6.227788e-03, 2.288683e-02, -1.838815e-02, 2.100340e-02, -2.011510e-02, 4.473938e-03, 1.919156e-01, -8.884094e-02, -1.731709e-01, 3.433904e-02, -5.706969e-02, 2.496899e-02, -1.071356e-01, -2.587249e-02, -5.790235e-02, 6.757966e-02, 1.675831e-01, 3.034665e-01, 1.008415e-01, 7.695917e-02, 6.648577e-03, 3.573578e-02, -5.065896e-02, -6.138547e-02, 7.857169e-04, -6.867272e-02, 8.533937e-02, 1.022650e-01, 4.859717e-02, 1.083214e-01, -6.154620e-02, -1.111505e-01, 9.768341e-02, -3.815309e-02, 7.382550e-02, -5.561938e-03, -4.955510e-02, 5.849470e-02, -3.388436e-02, -1.321360e-02, 4.643225e-02, 5.051938e-02, 5.887264e-02, -7.297321e-02, 9.549093e-03, 8.713634e-02, 1.757674e-02, 3.777559e-02, -7.452411e-02, -5.446773e-02, 8.123612e-02, 7.468944e-02, -9.338440e-02, 5.229910e-02, 1.613284e-01, -1.540138e-02, 5.379119e-02, -8.510740e-03, -2.210637e-02, 5.463777e-02, 2.405578e-02, -7.014260e-02, 3.912413e-02, 7.462225e-02, -4.724590e-02, 4.704341e-02, 1.767936e-02, 2.555302e-03, 5.584486e-02, 5.051016e-03, 5.185593e-02, 2.805080e-02, -5.560431e-02, -5.847424e-02, -8.296483e-02, -1.852665e-02, 6.747111e-02, 2.846748e-02, -4.944731e-03, 1.308416e-01, 1.015156e-01, -3.007393e-02, -5.068893e-02, 2.958215e-02, 1.066030e-01, -6.587803e-03, 2.031141e-02, -4.854833e-02, 7.081138e-02, -2.343124e-02, -7.469199e-03, 5.726823e-02, 9.424048e-02, -1.486320e-02, 3.785480e-02, -4.960326e-02, -8.505882e-02, 7.127212e-02, -4.989261e-02, 3.803712e-02, -3.636848e-02, -5.780081e-02, 5.533112e-02, 1.043131e-01, 6.074033e-02, -1.573431e-02, -3.961482e-02},
{2.517749e-01, -7.152125e-02, 2.342171e-02, 9.014024e-02, -1.613423e-03, 1.841688e-02, 5.485764e-04, 3.468713e-02, -4.718654e-02, 6.420580e-02, 4.773956e-02, 1.029393e-01, -6.689581e-02, -7.043328e-02, -9.907303e-02, -4.539962e-02, -3.702493e-02, 5.485411e-02, -3.202226e-02, 7.666227e-03, -2.995755e-02, -6.240653e-02, 2.482676e-02, 2.663089e-02, -4.836854e-03, 9.642301e-02, 1.345129e-01, 3.207692e-02, -7.634033e-02, 1.287201e-01, -1.780196e-02, 1.632587e-03, 7.026453e-02, -1.569494e-02, -6.596699e-03, 8.806791e-03, -6.624669e-02, -2.412729e-02, 4.434583e-02, 1.130783e-01, 5.633872e-02, 1.981170e-02, 1.071417e-01, -1.185107e-01, -2.291487e-03, 4.429412e-02, -7.285217e-02, -5.242100e-02, -6.917069e-02, -1.143392e-01, -9.575734e-02, 5.637983e-02, 2.031159e-02, 4.771645e-02, -2.663555e-02, -1.572320e-02, -1.838484e-02, -1.137551e-01, 3.681372e-02, 1.715865e-01, -6.342258e-02, -1.714284e-02, 1.081440e-01, -8.653803e-02, 9.912799e-02, -8.534427e-02, -1.048044e-02, -3.523377e-02, -1.447119e-02, -7.797218e-02, -4.597508e-03, 6.891086e-02, -1.051743e-01, -4.213272e-02, 2.364679e-02, 5.623837e-02, -5.161542e-02, 5.609117e-03, 6.190710e-02, -5.763893e-02, 1.246504e-02, 1.148791e-01, -3.628772e-02, 4.690865e-02, -5.104421e-02, 8.493388e-02, 7.809023e-02, 9.862249e-02, 2.648725e-02, -8.536457e-02, -5.967874e-02, -1.175664e-01, -3.265668e-02, -9.606575e-03, 3.914876e-02, 2.978498e-02, -9.624903e-03, 7.154636e-02, 5.196253e-02, -7.264089e-02, 7.621468e-03, 1.500951e-01, 8.225742e-02, 1.177855e-02, -5.136919e-02, 5.905461e-03, -1.429112e-02, -3.430413e-02, 3.343040e-02, -7.071107e-02, -1.993940e-02, -1.228530e-01, 5.407892e-02, 1.162337e-01, -6.683630e-02, -2.412541e-02, 1.084759e-02, 4.725300e-02, 6.009566e-02, -3.175534e-02, 3.656573e-03, 1.230162e-01, 7.411987e-02, 1.740544e-02, 2.868258e-02, -3.756758e-02, 3.517548e-02, -7.319725e-02, -4.588231e-02, 2.383680e-02, 3.346635e-02, 1.466942e-02, 3.330569e-02}


};
float Bias0_c[128] =
{
    -2.705489e-02, -2.739329e-02, -9.117573e-03, 2.794634e-02, -3.106661e-03, -1.454640e-01, -1.040052e-02, 5.156312e-02, 7.460409e-02, -3.134319e-02, 7.731233e-03, 8.297957e-02, 1.141196e-01, 7.283600e-02, 5.174325e-02, -5.816356e-02, 6.923357e-03, 7.689673e-03, -7.481094e-03, -7.518411e-02, 2.605302e-02, -4.924001e-02, -2.188082e-02, 1.151175e-01, -7.769698e-02, -2.342805e-02, 1.293381e-01, -3.155155e-02, -1.815818e-01, 1.092340e-01, 5.748237e-02, -1.085252e-01, -4.502869e-03, -1.535236e-02, 3.511880e-02, 1.633844e-01, -3.398864e-02, 5.542514e-03, -3.555923e-02, 2.084387e-02, 1.057592e-02, 6.156856e-02, -7.195447e-02, 1.073770e-01, 7.657758e-02, 5.759803e-02, -9.937879e-03, 5.724645e-02, -2.732089e-02, -1.032919e-01, -7.258165e-02, -9.691867e-02, -2.131983e-02, -2.961252e-03, -1.026652e-01, -1.403786e-01, 9.871603e-02, -1.047650e-01, 7.837160e-02, -1.408578e-01, 3.687192e-02, 5.017780e-04, -2.551816e-02, -2.709305e-02, 3.706693e-02, -6.469243e-02, 3.034513e-02, 1.052598e-01, 8.128290e-02, 9.980261e-02, 3.623931e-02, 1.641229e-01, 2.696461e-02, -8.203903e-02, 5.018244e-02, -7.834592e-02, -1.008410e-01, 1.934947e-02, 7.095727e-02, -6.732163e-02, 5.683891e-02, 4.483415e-02, -9.756607e-02, -4.290862e-03, 2.507905e-02, -2.547902e-02, 7.020077e-02, 7.915106e-02, -1.159221e-01, -4.324992e-03, -8.367790e-02, -5.562597e-02, 6.385176e-02, 7.746971e-03, 3.613943e-02, -8.189606e-02, -3.708314e-02, -7.423768e-03, 7.431611e-02, 2.572451e-02, 1.528247e-02, -9.475546e-02, -4.181724e-02, 8.122198e-03, 3.066338e-02, 4.207383e-02, -2.043717e-01, -1.384573e-01, -2.176648e-02, 1.512213e-02, 1.087433e-02, 3.461407e-03, 1.752793e-02, 8.584088e-02, -9.681471e-02, -5.157053e-03, -1.142382e-01, 4.746975e-03, -5.327262e-02, -5.165778e-02, -6.726892e-02, 2.186760e-02, 2.019193e-01, -2.353803e-02, 2.019930e-02, -2.199418e-02, -5.587799e-03, -3.060816e-02

};
float Weight0_o[128][5 + 128] =
{
    {8.201881e-02, -1.233338e-02, 1.583482e-03, 7.904751e-02, -1.012419e-01, -5.129601e-02, 6.327758e-03, -3.654190e-02, 6.250130e-02, -6.588544e-03, -6.982256e-02, -1.102844e-01, 1.112819e-01, 3.981358e-02, 8.920085e-02, -2.805783e-02, -6.935005e-02, -5.283844e-02, -1.217539e-02, -2.622016e-02, 5.495096e-02, -1.407070e-02, -1.324899e-02, -7.544009e-03, -9.757588e-02, -2.281841e-02, -2.484203e-02, 3.576137e-02, -8.323283e-02, -7.632390e-02, -5.116704e-02, -5.394518e-02, 5.871730e-02, 1.075821e-01, 4.295689e-02, 2.191040e-02, 5.652964e-02, -1.724478e-02, 5.367756e-02, 5.263253e-02, -1.083838e-01, -1.929647e-02, -2.079109e-01, -1.727027e-01, -3.566142e-02, 7.345641e-02, -9.427342e-03, -4.881776e-02, -1.898545e-02, 2.192822e-02, -5.357691e-02, -2.556826e-02, -5.718333e-02, 6.665304e-02, -7.939612e-02, 1.668777e-02, -1.107625e-02, 8.972887e-02, -1.305630e-02, -1.987261e-02, -4.082998e-02, -8.217308e-03, -5.637568e-02, -5.984171e-02, -1.332019e-02, 9.670949e-02, -5.675416e-02, -6.621480e-02, 5.444928e-02, 9.205615e-03, 2.746094e-02, -3.707721e-02, -5.460580e-02, -7.363845e-02, -5.884911e-04, -2.781527e-02, -1.420871e-01, -7.098886e-02, -1.530666e-02, 1.050204e-01, -5.754511e-02, -1.107495e-01, -2.123199e-02, 5.904810e-02, 3.196803e-02, -7.567795e-04, 7.378127e-02, -1.413683e-02, 2.244719e-02, -6.479799e-02, 6.752373e-02, -3.606346e-02, 1.229425e-01, 1.297761e-01, -3.825469e-02, -5.955413e-02, 1.364272e-02, -5.038986e-02, -1.716826e-02, -6.087313e-02, 5.319143e-02, -5.943386e-02, 1.749562e-02, -1.658758e-02, -3.866030e-02, -9.051254e-02, -1.760920e-02, 4.433288e-02, -8.459017e-02, -4.242621e-02, 6.180149e-02, 7.683074e-02, 8.684237e-02, 5.311805e-02, 3.999161e-02, -5.697541e-02, -8.819617e-02, -6.220766e-02, -6.587081e-02, 9.467154e-02, 1.004389e-02, -8.507785e-03, -1.149420e-01, -4.847803e-02, -4.143150e-02, 2.503378e-02, 8.011965e-02, -8.010530e-02, 5.405337e-03, -5.457901e-02, -5.679772e-02, 4.960305e-02, 4.157340e-02},
{7.152525e-02, 3.658616e-02, 5.977235e-02, -3.950747e-03, -1.366180e-01, -6.098251e-02, -3.031747e-02, 4.334010e-02, 6.743214e-02, -2.331010e-02, 4.601970e-02, 5.267108e-02, -5.192602e-02, -6.652573e-02, -4.084142e-02, 2.782591e-03, 8.573671e-02, 6.466619e-02, -3.278694e-02, -3.659288e-02, -2.506793e-02, -5.434152e-02, 1.104696e-01, -6.553541e-02, 2.393038e-02, -6.168076e-02, -8.790888e-02, 6.924523e-02, -5.370060e-02, 7.402556e-02, -8.182763e-02, 2.583726e-02, 2.081791e-02, 1.026532e-01, 1.698124e-02, 4.444113e-02, 7.614969e-02, 6.950469e-02, -4.729373e-02, -6.992295e-02, 9.131303e-02, 2.276374e-02, 2.586488e-02, 9.230684e-02, 4.958735e-02, 4.371145e-02, -2.582287e-02, 4.751445e-02, -1.144527e-01, -1.600772e-01, 3.142079e-02, -6.696587e-02, 9.068297e-02, 2.771262e-02, 8.797305e-02, -9.560621e-02, 3.403602e-02, -9.436956e-03, 3.047246e-02, 2.880834e-04, -6.023094e-02, 7.638867e-02, 3.480105e-02, 4.127769e-02, 9.603862e-02, 7.472330e-02, -1.627361e-02, 5.204962e-02, -8.286533e-03, -1.116645e-02, -6.879163e-03, 5.107969e-03, 3.114408e-02, -1.902047e-02, -7.503025e-02, -7.442439e-02, -6.102556e-02, -4.498092e-02, -8.819450e-02, 4.656084e-02, 5.403003e-02, 2.746627e-02, -4.692528e-02, -5.103467e-02, -1.949019e-02, 9.276782e-02, -7.141979e-02, 7.831073e-02, 1.036142e-02, -8.501674e-02, -8.054795e-03, 7.163911e-02, -6.299207e-03, -4.461550e-02, 4.955820e-02, 1.099372e-02, -3.168199e-02, 3.199125e-02, -2.294123e-02, 8.882636e-03, 9.385581e-02, 1.879137e-02, 4.840216e-02, -5.414970e-03, -1.515128e-03, 1.889130e-03, 1.003911e-01, -6.094417e-02, -3.710580e-02, -1.620433e-02, 7.977059e-02, -6.368475e-02, -8.530531e-02, 4.121006e-02, -5.747401e-03, -5.221270e-02, -4.400930e-02, -4.316289e-02, 1.565114e-02, 4.103028e-02, 6.299950e-02, -3.844828e-02, -1.956975e-02, 7.593907e-02, 7.659455e-02, -6.198231e-02, 6.091554e-02, -1.337444e-01, -6.463696e-02, 1.325246e-02, 5.973249e-02, -3.261997e-02, -3.761771e-02},
{-2.441283e-03, 9.530890e-02, 4.186717e-02, 2.535976e-02, -8.372613e-02, -3.249343e-02, 3.150487e-02, 6.403178e-02, 2.224261e-02, -8.572111e-03, -3.052298e-02, 9.548330e-02, -2.095471e-02, 7.917487e-02, -1.993419e-02, -8.807053e-03, -1.042503e-02, -1.927692e-02, 4.908892e-02, -1.523020e-02, -5.594304e-02, 3.043982e-02, -3.066798e-02, -1.643605e-01, -3.019547e-02, -8.237021e-02, 7.091681e-02, 2.671654e-03, 3.164851e-02, -3.139487e-02, -2.554817e-02, 1.542817e-02, 1.341699e-01, 2.176691e-02, -6.525701e-02, -7.222976e-02, 1.671431e-02, -2.564703e-02, 2.927752e-02, 6.815139e-02, -1.857425e-02, -2.313716e-02, 4.527063e-01, 1.054406e-01, -5.032872e-02, 1.914255e-03, 8.231026e-02, 5.719598e-02, 5.006968e-02, -1.986929e-01, 8.032078e-02, 1.605767e-02, 4.573658e-02, 8.486231e-02, -5.860895e-02, -1.200517e-01, -5.246239e-03, -1.211557e-01, 2.096126e-02, -8.682615e-02, -5.566253e-03, 4.894303e-02, -1.262118e-02, 8.359450e-02, -8.383339e-02, 3.912662e-02, -2.781706e-02, 3.228342e-02, 2.888364e-03, -3.056211e-01, 2.870829e-02, 4.983133e-02, -1.765353e-01, 8.679050e-02, -1.875549e-02, 5.266143e-02, 2.585532e-02, -1.386895e-01, 2.522893e-02, -8.904864e-02, 5.199310e-02, -2.495409e-02, -1.107272e-02, -3.210035e-02, -3.872840e-02, 6.048233e-02, -5.704216e-02, 2.035416e-02, 3.618048e-02, 1.047990e-01, -2.245892e-03, 7.490469e-02, -5.528394e-02, -6.127411e-02, 7.939547e-02, -1.049005e-01, -1.908917e-02, 1.114923e-01, 4.284362e-02, -5.513752e-02, -4.000974e-02, 2.683963e-01, -6.841811e-02, 2.882571e-02, 7.111426e-02, 8.366410e-02, 4.664155e-02, -7.786678e-02, -1.792641e-02, -5.418433e-02, -4.685610e-03, 1.734093e-02, 3.463542e-02, -1.063886e-01, -4.449783e-02, 7.131012e-02, -6.646294e-02, 2.520818e-02, -8.234440e-03, 1.396460e-02, -3.257816e-02, 5.126596e-03, -9.456872e-03, 1.339872e-01, -7.652079e-03, -1.919865e-02, -3.954502e-02, -8.510283e-02, 8.881035e-02, 5.294733e-02, 5.070614e-02, -3.916674e-02, -5.450395e-02},
{1.057880e-01, 3.274029e-02, 1.168286e-01, -1.023022e-01, -2.804732e-01, 9.127572e-02, -1.157438e-02, 3.452735e-02, 5.808489e-02, 2.215672e-02, 1.223487e-01, 8.230288e-02, -4.541999e-03, -4.240119e-02, -4.318143e-02, 4.482719e-02, -3.529320e-02, -4.293262e-02, 8.258349e-02, -2.804147e-02, 6.432249e-03, 6.702521e-02, 1.328572e-01, -1.053632e-01, -4.911271e-02, 7.159538e-02, -3.851435e-03, 7.700688e-02, 1.048046e-01, -2.801429e-02, 1.874573e-02, -7.751860e-02, -8.294652e-02, -3.628545e-02, 3.665166e-02, 6.336272e-02, -1.128399e-02, -5.203372e-02, 8.838293e-02, 5.307515e-02, 3.352986e-02, -2.296299e-02, -1.748114e-01, -2.336122e-01, 4.814927e-02, -2.099216e-02, -7.179387e-03, 3.250834e-02, 6.612294e-02, -6.813632e-02, -9.862910e-02, 3.052437e-02, -4.013720e-02, -8.800820e-02, 1.015206e-01, -4.760623e-02, 5.378028e-02, -5.372126e-02, 1.380799e-02, -1.480269e-01, -3.100166e-02, -5.668267e-02, -1.165626e-02, -1.253674e-03, 7.356016e-02, -9.558748e-03, 9.677095e-04, 5.597559e-02, 7.781131e-02, -2.544923e-01, 7.975807e-03, 5.458314e-02, 4.048371e-02, 8.646051e-02, -7.090952e-02, 2.240574e-03, 5.109092e-02, -1.510799e-01, 2.831829e-02, -8.224559e-02, -2.449252e-01, -1.796186e-01, -2.953820e-02, -1.068857e-01, 1.062863e-01, -2.060032e-02, -7.711432e-02, -6.142214e-02, -6.893584e-02, -4.698386e-02, -2.588759e-02, 2.027982e-02, -5.174139e-03, -2.575568e-04, -2.886206e-02, -9.786714e-03, 3.451100e-02, -6.452010e-02, 3.935469e-02, 8.460152e-02, 1.620200e-02, 1.064504e-01, -5.745888e-02, 2.698510e-02, 9.646035e-02, -2.212515e-04, -2.460893e-02, -1.167364e-02, 8.220077e-02, -1.093038e-01, 3.311124e-02, -2.629907e-02, -7.906569e-02, 1.891799e-02, -1.015554e-01, -1.654566e-02, -4.059036e-02, -8.030963e-02, -1.436888e-02, -3.169832e-02, -6.897427e-02, -3.385747e-02, 2.582856e-02, 2.797391e-02, -5.683722e-02, 4.582279e-02, -1.053715e-01, -2.913729e-02, -1.816106e-03, 5.625129e-02, 5.561359e-02, -3.809824e-02, -5.610425e-02},
{9.923474e-02, -6.475221e-02, 6.187815e-04, -6.031643e-02, -5.711449e-02, 9.397426e-02, -6.657308e-02, 6.936408e-02, -1.338854e-03, -5.770049e-02, 6.043102e-02, 1.011153e-01, 2.865412e-02, -3.978159e-02, -1.588533e-02, -4.894710e-02, 9.213574e-02, -3.599211e-02, 1.754494e-02, -6.281042e-02, -9.640227e-02, 6.120650e-02, -8.241890e-02, -3.401145e-02, -2.472383e-02, 4.525150e-02, -4.610313e-02, -6.887203e-02, -7.088692e-02, 2.601654e-02, -1.853163e-02, -4.989967e-03, -6.454155e-02, -4.838161e-02, 7.905517e-02, -2.661569e-02, -1.024163e-01, -1.126095e-01, 1.569020e-02, -4.699977e-02, 1.353348e-01, -6.901616e-02, 7.277393e-03, -5.397703e-02, 4.163718e-03, 1.271631e-02, -2.780785e-02, -1.241607e-02, -1.175632e-02, -3.536398e-02, -7.595279e-02, 4.796671e-02, -9.042761e-02, 2.683951e-02, -7.787574e-02, -9.870250e-02, -7.631682e-02, -6.371292e-02, 6.820968e-02, -6.805637e-02, -4.481036e-02, -2.384234e-03, -6.168624e-02, -1.694187e-02, 3.054189e-02, -6.807912e-02, 1.220328e-02, -7.991832e-02, 2.440353e-02, -1.346638e-01, 2.615137e-02, 5.967231e-03, 2.895757e-02, 1.908285e-02, -8.380979e-02, -3.345006e-02, 3.280164e-02, -1.184265e-01, -1.028270e-03, -5.739358e-02, -1.118813e-01, 1.935743e-02, -1.843134e-02, -4.787814e-02, 9.153529e-02, 4.555326e-03, 4.949762e-03, -1.663792e-02, 6.861196e-02, -2.080601e-02, 5.877527e-02, -1.852329e-02, 5.496800e-02, -1.536628e-03, -5.029250e-02, 3.838557e-02, 6.303557e-02, -8.701006e-02, 5.776402e-03, 5.738075e-02, -2.897480e-02, 9.927591e-03, 2.472490e-02, 3.874818e-02, 9.692774e-02, 2.980346e-02, -2.299726e-02, 7.050695e-03, 9.057812e-02, 7.480015e-02, 9.168292e-02, 7.227109e-02, 1.040035e-02, -4.897779e-03, -1.461069e-02, 4.290722e-02, -2.944563e-02, -6.142856e-03, -3.783881e-03, 4.088773e-02, -4.644741e-03, -5.745692e-02, -6.921875e-02, -5.575562e-02, -2.024175e-02, -4.524503e-02, -7.455275e-02, -6.773172e-02, -8.225736e-02, 1.404066e-02, -4.707808e-02, 6.375685e-02, 4.505236e-02},
{-3.974056e-02, -7.947448e-02, 9.410072e-02, -3.399436e-02, 1.118045e-01, 5.174715e-02, 1.058132e-01, 2.778345e-02, -9.026656e-02, -1.542289e-02, -1.250644e-01, 9.530273e-02, -5.906555e-02, 5.976545e-02, -7.557102e-02, 3.861873e-02, 6.224234e-02, 6.846949e-03, -7.120419e-02, -7.467660e-02, -1.560708e-02, 5.115413e-02, -3.097319e-03, -1.247170e-01, 1.155491e-02, -1.137256e-01, -6.033665e-02, 4.480658e-02, -4.167905e-02, -1.735580e-02, -7.019927e-02, -6.974294e-02, -1.166289e-01, 3.983421e-02, -3.206090e-02, -4.551052e-02, -1.816137e-02, 1.703937e-02, -1.167079e-01, -6.851691e-02, -1.503592e-02, -7.042081e-02, -8.308323e-02, -5.728818e-02, -5.353786e-02, 8.542632e-02, 7.032371e-02, 7.839426e-02, -2.433567e-02, 1.080684e-02, -2.877357e-02, -5.397366e-02, 7.251947e-02, -7.566372e-03, -1.631412e-02, 5.909895e-02, -6.572696e-02, -2.130146e-01, -7.275189e-02, -1.763992e-02, 8.913476e-02, -1.863602e-02, 3.756793e-02, 7.926111e-02, 6.092955e-02, 5.365352e-02, -2.526072e-03, 1.608934e-02, -2.695025e-02, -1.535986e-01, -3.209617e-02, -2.903930e-02, -1.059113e-01, -2.107420e-03, 2.873469e-02, 8.562139e-02, -2.759649e-02, 4.450171e-02, -1.641764e-02, -6.859274e-02, -1.567873e-04, 4.748543e-02, 2.695921e-02, 4.562999e-02, 4.919107e-02, -6.210802e-03, 8.577991e-02, -6.977011e-02, 7.421585e-02, 3.674908e-02, -1.085206e-02, 7.616201e-02, -1.414077e-01, -1.568656e-02, 3.787231e-02, 8.846837e-02, 6.719355e-02, 4.103589e-02, -7.934728e-02, 5.939668e-02, -5.989315e-02, 8.754655e-02, 1.575462e-02, -6.446204e-03, -2.040117e-02, 1.139338e-03, -5.518532e-02, 5.640291e-02, 7.005570e-03, 5.510941e-02, 9.155057e-02, 4.906267e-02, -1.155220e-01, 4.488371e-02, 2.809385e-02, 7.560312e-02, -5.780410e-02, -1.077622e-01, -6.807663e-02, 5.274449e-02, 1.055384e-02, -6.872261e-02, -7.648198e-02, 9.428990e-02, 2.451991e-02, 2.572427e-02, -1.116103e-01, -6.663331e-02, -4.668036e-02, 5.415815e-02, 4.094733e-02, 9.957907e-03, -8.465213e-02},
{1.158292e-01, 2.302689e-02, 8.871613e-02, -1.019089e-02, -1.924994e-01, -7.961116e-02, -6.140603e-02, -6.010232e-02, -3.855348e-02, -4.755552e-02, -2.782706e-02, 5.948223e-02, 8.647551e-02, 7.685783e-02, 7.502412e-02, 2.396634e-02, 8.764916e-03, -5.150078e-02, -5.932047e-02, 3.518539e-02, 3.737049e-02, 7.143725e-02, -8.819986e-02, -2.775127e-02, -3.264524e-02, -1.013675e-01, 4.641165e-02, -6.226430e-02, -3.953205e-02, 3.460705e-02, 7.745912e-02, -6.033900e-02, 6.242663e-02, 9.133049e-02, -1.210679e-01, 1.492155e-02, -2.931319e-02, -2.323366e-02, -5.954984e-02, 7.801643e-02, -7.677349e-02, 2.423097e-02, -1.263668e-01, 3.847989e-02, 7.691084e-02, 2.055490e-02, -1.497312e-02, -6.363952e-02, -1.245461e-01, -9.280853e-02, -6.677329e-02, -3.362562e-03, -6.939048e-02, 1.890598e-02, 4.372248e-02, -1.112380e-01, -2.257098e-02, -2.459077e-02, 7.221312e-02, -1.401948e-01, 3.839809e-02, -3.068092e-02, -6.234694e-02, 7.525451e-02, -9.649953e-02, 1.273611e-02, -6.574537e-02, 2.342124e-02, -4.383946e-02, -1.228700e-01, 2.908097e-02, 6.857209e-02, 5.318600e-02, -6.445588e-02, -3.703374e-02, 1.066614e-01, -1.526451e-01, 5.500097e-02, -1.920510e-03, -1.928418e-02, 1.037004e-01, 9.734299e-03, -3.902606e-02, 2.062377e-02, 1.952116e-02, 1.775743e-02, 3.098465e-03, -5.814942e-03, 8.373986e-02, -8.114314e-02, 6.101937e-02, 5.051092e-02, 6.434717e-02, 2.086969e-02, 9.189742e-02, 6.980424e-02, 9.512230e-03, -7.490778e-02, -8.444623e-04, -2.279367e-03, -1.093233e-02, 9.507477e-02, -2.445393e-02, 5.495049e-02, 1.171278e-02, 4.573158e-02, -7.479597e-02, -8.835047e-02, 7.144590e-02, 5.001814e-02, -2.988635e-02, -1.847828e-02, 6.254954e-02, 3.747827e-02, 7.851680e-02, -5.614487e-02, 5.360313e-02, 1.069247e-01, -8.980783e-02, -5.849589e-02, 9.776255e-02, -7.491555e-02, 7.726515e-02, -7.402483e-02, -1.902211e-02, 2.196513e-02, -5.289454e-02, -9.422555e-03, 9.447177e-02, -1.752546e-02, 8.701398e-02, -8.077864e-02, 2.451491e-02},
{3.666396e-02, 4.543813e-02, 7.166340e-02, -1.890239e-03, -2.217256e-02, 1.188569e-01, 5.367592e-02, -2.149553e-02, 1.335651e-01, 1.198558e-02, 8.383115e-03, 1.006544e-01, -2.140227e-02, -7.436734e-02, -8.044378e-02, 1.859918e-02, 2.742972e-01, -7.480239e-02, -9.233943e-02, -1.019139e-01, -1.188230e-01, -4.742950e-02, 1.322064e-01, -2.273205e-01, 4.493611e-02, 2.289534e-02, 6.886286e-02, 1.409905e-01, 8.393335e-02, 1.199150e-02, -1.520951e-02, -5.713228e-02, 1.784344e-01, -1.809801e-02, -1.153359e-01, 3.337469e-02, -2.901671e-01, 2.535773e-02, -5.057338e-02, -4.168186e-02, 1.848169e-01, -7.576603e-02, 2.869222e-02, 1.260257e-01, -1.310136e-01, -1.369708e-02, 4.891158e-02, 1.685867e-02, -1.045069e-01, -1.846555e-01, 7.410423e-02, 4.487956e-02, 1.243302e-01, -9.050515e-02, 1.580708e-01, 2.661427e-02, -4.066814e-02, -1.775288e-01, -1.928895e-02, 1.959133e-01, 6.730568e-02, -3.995581e-02, 7.118918e-03, 2.152045e-02, 3.544452e-02, -9.311957e-02, 4.009998e-02, 1.322424e-01, 1.410750e-01, 6.761481e-02, 2.368701e-01, 8.673879e-03, -2.876538e-01, -2.802849e-02, -9.489901e-02, 4.354681e-02, 3.119387e-02, 5.236985e-02, 5.126430e-02, -1.972404e-01, 5.080846e-02, -4.028244e-02, 9.430429e-02, 2.998026e-02, 7.433332e-02, 9.065902e-02, -9.104250e-02, 1.165132e-02, -9.852985e-02, -1.440530e-02, 1.385982e-01, 2.034498e-01, 3.234764e-02, 1.835977e-01, 2.208158e-01, -1.505329e-01, 9.530730e-02, -9.791383e-02, -1.808359e-01, -2.987103e-03, -2.615527e-02, 1.148897e-01, 1.621812e-01, 7.648083e-02, -1.526967e-01, -1.315352e-02, 4.071613e-02, 1.202679e-02, 5.539344e-02, -9.629853e-02, 2.371463e-01, -1.032874e-01, -1.742790e-01, 1.238249e-01, -1.057433e-01, -1.288610e-01, 6.113173e-02, -1.172816e-01, 4.791188e-03, 5.171606e-02, -1.236279e-01, 9.844333e-03, -2.850000e-01, 3.210066e-02, 2.830131e-02, 1.365048e-01, -1.738553e-02, -2.770381e-01, -1.484963e-01, 2.426115e-01, 1.105662e-02, 1.879540e-01, -8.230009e-02},
{6.439266e-02, -3.311177e-02, -1.256064e-02, -1.404762e-01, -3.993755e-02, 7.731645e-02, 1.213609e-02, -4.494971e-02, -9.046378e-02, 5.555909e-02, -5.435418e-02, 9.861549e-03, 3.115687e-02, 9.304337e-03, 8.186927e-02, 4.182775e-02, -8.727648e-02, 5.695587e-02, -7.753538e-02, -5.154363e-02, -4.238140e-02, 6.094968e-02, -6.379394e-02, -1.583917e-01, -7.984291e-02, -5.631749e-02, 2.861771e-02, -6.342337e-02, -5.659492e-02, -4.901968e-02, -2.790801e-02, -2.115842e-02, 6.705114e-02, 1.058099e-01, 1.354290e-01, 4.700921e-02, -6.326691e-02, -1.601035e-01, 9.419589e-02, 1.384898e-01, -2.252299e-03, -6.219299e-02, 2.134089e-01, -9.840337e-02, -7.741899e-02, 2.278759e-02, 4.328839e-02, -5.673103e-02, 7.136820e-02, -1.072781e-01, -1.810249e-02, 8.899800e-02, 3.636992e-02, -1.739330e-02, -1.079493e-03, -2.244393e-01, 7.666597e-02, -1.052978e-01, -5.104716e-02, 6.482882e-02, -5.914951e-02, 2.800655e-02, 2.132820e-02, -5.105375e-02, 6.377722e-02, -5.526520e-02, -2.979365e-02, -9.594707e-03, 8.994704e-02, -2.134444e-01, -5.280748e-02, -5.305348e-02, 8.155134e-02, 2.471528e-02, 4.158853e-02, 8.585902e-02, 1.132388e-02, -1.188850e-01, 6.173566e-03, 4.909021e-02, -3.014649e-02, -1.026534e-01, 7.066538e-02, -2.317057e-02, 4.234704e-02, -6.873984e-02, 4.194568e-02, 8.965097e-02, -7.840166e-02, -5.504321e-02, -5.164558e-02, 4.996634e-02, -1.261555e-01, -4.922742e-03, 4.223736e-02, -4.734468e-02, -6.418452e-02, -1.434395e-01, 3.273386e-02, 1.549656e-02, -8.400175e-05, 2.914352e-01, 2.535378e-02, -1.491609e-02, -6.532076e-02, -5.420808e-02, 6.230222e-02, 1.786808e-02, 5.581117e-02, 4.370159e-02, -3.654899e-02, -6.787514e-02, 4.185305e-02, 6.834033e-02, 1.459430e-02, -2.258701e-02, -7.929194e-02, 2.398172e-02, -9.126396e-02, 6.212644e-02, 8.258633e-02, -6.551044e-02, 9.519117e-02, 3.981235e-02, -8.177286e-02, 6.502797e-02, 2.144928e-02, -8.494024e-02, 8.339804e-02, 6.408980e-02, 5.716066e-03, -4.247979e-02, 8.859501e-02},
{9.200218e-02, -4.250282e-03, -1.774943e-02, 7.827746e-02, -2.511418e-01, 1.020777e-01, 9.420873e-02, -2.011400e-02, -3.657356e-02, -8.116552e-02, -2.038844e-02, 3.917651e-02, 2.797204e-02, -3.769229e-02, -9.352449e-02, 6.909307e-02, 1.131011e-02, -7.951435e-02, -8.162463e-02, 1.274369e-02, -1.290401e-01, 5.554776e-02, 9.978160e-02, -7.977758e-02, -3.710609e-02, -8.782578e-02, -7.579491e-02, 8.787820e-02, -1.802661e-02, 3.870313e-02, 5.532516e-02, -4.351186e-03, 2.243368e-01, 4.239019e-02, -1.146172e-01, -6.314664e-02, -5.275124e-02, -6.795678e-02, 6.174729e-02, 6.534268e-02, -1.963658e-02, 2.814776e-02, 9.689438e-02, 1.131182e-01, 8.013183e-03, 6.199259e-02, -4.721991e-05, 6.263929e-02, -1.273606e-01, -2.584684e-01, -7.591377e-02, 6.242432e-02, 6.073048e-02, -1.165350e-01, -2.076864e-02, -1.252243e-01, 4.369749e-02, -4.930824e-02, 4.446373e-02, 9.197783e-03, 7.101327e-02, -6.458747e-03, -6.068967e-03, 1.747353e-02, 1.173745e-01, 2.707705e-02, 1.133315e-02, 4.921522e-02, 1.023511e-01, -1.901493e-01, 3.245473e-02, -8.341428e-02, -3.687460e-02, -1.877149e-02, -1.122373e-01, -1.051343e-01, 2.805914e-02, 8.639692e-03, -2.080452e-02, 1.490004e-02, 1.365043e-01, -6.180208e-05, -2.684677e-02, 5.182859e-02, 1.147093e-01, 5.207507e-02, 2.383000e-02, 5.481744e-02, -1.962007e-02, -6.294007e-02, 1.175752e-01, 7.361207e-02, 1.319482e-03, -1.914149e-02, 7.457285e-02, 2.984243e-02, -3.204388e-03, 4.203907e-03, 5.116226e-02, 7.367507e-03, 5.665419e-02, 7.125079e-02, -4.503845e-02, 8.116346e-02, 7.762998e-02, 2.463913e-02, 2.731376e-02, -3.290141e-02, 4.275398e-02, -1.044794e-01, 5.548488e-02, -4.927092e-02, 1.165021e-03, -2.506043e-02, 3.904378e-02, -9.783631e-02, 9.589356e-02, -6.708711e-02, -1.062466e-01, -9.338608e-02, -5.014526e-02, 5.928032e-02, -7.884227e-02, -1.711252e-02, 5.921370e-02, -1.666507e-02, -1.165196e-01, -2.468450e-01, -3.368039e-02, -3.437185e-02, -5.795901e-03, -7.605444e-03, 4.734740e-02},
{2.290186e-02, -3.894148e-02, -3.547337e-02, -7.553089e-02, -7.788440e-02, -3.695353e-02, -8.719270e-02, 9.450500e-02, -5.060524e-02, 1.118094e-02, 8.150456e-02, 6.859215e-02, 9.764766e-02, 4.954287e-02, 7.968970e-03, -1.742757e-02, -9.266622e-02, -5.573627e-03, 5.520862e-02, -4.913271e-02, 4.137355e-02, 6.908695e-02, -3.189273e-02, -5.923017e-02, -7.157103e-02, 4.141127e-02, -1.126191e-02, -7.584421e-02, -9.770335e-03, 2.551887e-02, 8.337921e-03, -2.303853e-02, -5.554854e-02, -1.684540e-02, 1.642958e-03, -1.351503e-02, -5.850012e-02, 1.452041e-02, 5.682018e-02, -7.065391e-02, -6.965100e-02, 1.639066e-02, -1.115263e-01, -1.102943e-01, 2.075859e-02, 4.584586e-02, -4.924027e-02, -4.371968e-02, -7.153048e-02, -6.829109e-05, -7.784380e-02, 1.956200e-02, 5.360446e-02, 2.219733e-02, -3.906490e-02, -6.884157e-02, 2.222108e-03, -3.184529e-02, -6.769384e-02, -9.371969e-02, -3.263866e-03, -9.302896e-02, -7.533219e-02, -7.005616e-02, -5.114338e-02, 8.954546e-02, -4.692607e-02, 7.289312e-02, 1.784111e-02, 7.826034e-03, -5.104755e-02, 4.483495e-02, -2.295613e-02, -3.621875e-02, -2.246454e-02, -5.044211e-02, -2.256648e-02, 6.803422e-02, 7.866977e-02, -9.443499e-02, -5.802648e-02, -4.384698e-02, -2.469571e-02, -7.430273e-03, -4.984404e-02, 2.970611e-02, 3.176993e-02, 7.770742e-02, 7.190938e-02, 4.522654e-02, -9.088194e-02, 5.097889e-02, 3.680288e-02, 1.317111e-01, -4.707354e-03, -2.066450e-02, 8.713664e-04, 2.586065e-02, -5.034854e-02, 1.016587e-02, -1.471936e-02, -3.896449e-02, -9.072287e-02, 3.307873e-02, -4.330622e-03, 2.244202e-02, 8.855083e-02, -2.606984e-02, -6.395494e-03, -5.387200e-02, 4.060139e-02, 3.723865e-02, 2.420713e-02, 4.086804e-02, 5.303936e-02, -3.400541e-02, 7.527764e-02, 3.239018e-02, -8.901352e-02, -4.911881e-02, -6.953957e-02, -3.637590e-02, -2.079068e-02, 2.906096e-02, 8.843486e-03, 3.171001e-02, -8.781866e-02, -1.865227e-02, -6.285081e-02, -4.718088e-02, 4.103309e-02, -1.019880e-01, 7.536654e-02},
{1.181978e-01, 4.011520e-02, 2.764859e-02, 1.223026e-01, 1.206789e-01, 5.036205e-02, 1.146227e-02, 6.822025e-02, 1.388664e-02, -1.267198e-02, -1.042477e-01, -7.325178e-02, 2.119091e-02, 6.381227e-02, 4.829460e-02, -7.313497e-03, -3.141684e-02, 1.272843e-01, 2.105900e-02, 3.195801e-02, -1.680822e-01, -1.910696e-03, 1.205008e-01, -2.504764e-02, -5.505668e-02, -8.106922e-02, 2.218024e-02, -1.100178e-01, -1.249986e-01, -4.253551e-02, -9.220153e-02, 4.851613e-02, 2.595164e-02, -9.228899e-03, -2.029598e-01, 1.771408e-03, 1.059141e-01, -4.728323e-02, -3.319861e-02, 2.204383e-02, -3.527249e-02, 1.388670e-01, 3.153754e-01, 8.964711e-02, 3.692352e-02, -5.489320e-03, -2.114107e-02, -1.617032e-02, -6.213021e-02, -3.004838e-01, 7.279532e-02, -8.340359e-02, 1.275445e-02, 1.279923e-01, -1.010830e-01, -1.675679e-01, 2.176580e-02, -5.227406e-02, -8.477452e-03, -5.217250e-03, 6.009734e-02, -7.542633e-02, -5.455038e-02, 1.954929e-02, -4.444227e-02, 6.389055e-02, -5.663960e-02, -5.986841e-02, 4.596534e-02, -3.870034e-01, -6.593526e-03, -2.239020e-03, -1.873896e-01, -4.657228e-03, 1.104795e-01, 6.709810e-02, 9.548574e-02, -1.142037e-01, -5.983510e-02, -5.695799e-02, 1.838126e-01, -3.512406e-02, 4.323560e-02, -9.406992e-03, -1.353304e-02, -1.699460e-02, 6.797738e-02, -2.403917e-02, 1.234346e-01, -6.364114e-02, -2.689855e-02, 5.466913e-02, -7.260995e-02, 1.371516e-01, 7.835351e-02, -2.007559e-03, -1.187539e-01, -6.125718e-02, -3.741716e-02, -2.654513e-02, -6.167514e-02, 2.018483e-01, -1.194871e-01, -2.312135e-02, -4.034590e-03, 7.822256e-02, -1.418033e-02, -5.721715e-02, 5.063300e-03, 6.521218e-02, -9.549183e-02, 1.161918e-01, 8.949132e-02, -3.029641e-02, 3.613937e-02, 5.437134e-02, -9.608328e-02, -1.514236e-02, 2.726988e-02, 2.572632e-02, 1.207184e-01, 1.508231e-02, 2.342015e-02, 1.160079e-01, 8.171029e-02, -5.534427e-02, 4.182956e-02, -1.346954e-01, -3.746101e-02, 1.142080e-01, 6.882299e-02, 1.236502e-01, 5.969799e-02},
{5.356370e-02, -1.116416e-01, -9.441268e-03, -1.386316e-01, -4.883290e-03, 6.716491e-02, -5.206312e-02, -6.622168e-02, 6.015776e-02, -6.619053e-03, 1.031479e-02, 5.338613e-02, -7.797973e-02, 3.625957e-02, -9.305359e-02, 3.077474e-02, 7.040210e-02, 1.532178e-02, 4.346303e-02, -2.651540e-02, -1.787308e-01, -6.486879e-02, 5.052461e-02, -9.773471e-02, -5.679148e-02, -6.181820e-02, -1.213755e-02, -2.415835e-02, 4.763829e-02, -4.099575e-02, -5.429842e-02, -2.061141e-02, 5.510750e-02, -5.209674e-02, -1.326515e-01, -6.690775e-02, -5.679970e-02, -8.557867e-02, 3.167516e-02, 1.466660e-02, -1.143253e-02, 2.159653e-04, 1.170742e-01, 5.527791e-03, 2.006646e-02, -7.188703e-02, -4.449157e-02, 4.813467e-03, -5.147274e-02, -8.577261e-02, 2.024614e-02, -7.177514e-03, -3.358537e-02, 2.404540e-03, -5.425560e-02, -3.620579e-02, -1.386815e-02, -3.404308e-02, -7.340414e-02, -7.840730e-03, 1.568188e-02, -2.313233e-02, 6.244910e-02, -1.150011e-03, 7.174456e-03, -4.888457e-02, 6.069560e-02, 7.717204e-02, 6.608259e-02, -2.561096e-02, -9.235316e-02, -1.979391e-02, 2.982049e-02, 9.663831e-02, -4.074493e-02, -8.339202e-02, -3.751862e-02, -6.801099e-02, -2.824201e-02, -9.588346e-02, 6.527461e-02, -2.713365e-02, -3.181392e-02, -4.312302e-02, -5.510408e-02, 1.037099e-01, 3.865762e-02, -1.863409e-02, -3.024763e-02, -1.480664e-04, 8.015698e-02, -9.442778e-02, -3.436605e-02, -6.856185e-02, 1.516656e-02, -1.147388e-01, 6.439310e-02, 4.025212e-02, 4.199347e-03, 4.825251e-02, 7.031740e-03, 1.232152e-01, -3.827627e-02, -9.380206e-02, 4.722185e-02, 1.777097e-02, 7.608464e-02, 3.112083e-03, 7.301179e-02, -8.543110e-02, 1.368397e-02, 6.806576e-02, -3.557638e-02, -8.779800e-02, 5.904970e-02, -5.480280e-02, 7.118355e-02, -4.316356e-03, 3.914465e-02, 1.313692e-02, -8.022986e-02, 1.157446e-02, 9.688338e-02, 4.237081e-02, -8.294284e-02, 6.130300e-03, -3.029013e-02, -1.276403e-01, -9.056646e-02, 4.855774e-02, 6.710813e-02, 1.470105e-02, -8.234634e-02},
{6.324554e-02, -1.059970e-01, -1.281412e-02, -5.343964e-02, -1.333436e-01, 4.573861e-02, -4.700821e-03, -4.206721e-02, -3.425108e-02, 6.424063e-02, -2.330442e-03, -9.223162e-02, -4.290658e-03, -3.525197e-02, -8.781304e-02, 4.318316e-02, -7.463555e-02, -1.189313e-02, -6.732332e-02, -1.211008e-02, 1.113574e-02, -1.488539e-02, 8.074028e-02, -7.411475e-02, -6.314933e-02, 6.929771e-02, -8.161731e-02, 5.022297e-02, 8.119771e-03, -2.101820e-02, 2.590833e-03, 3.383751e-02, -4.461833e-02, -4.091664e-02, 1.175556e-02, -7.029436e-02, 1.675356e-02, -3.965152e-04, 5.506923e-02, -9.126406e-03, 6.709053e-02, 8.579923e-02, -9.030600e-02, -5.877678e-02, -5.731232e-04, 4.348328e-02, 3.049776e-02, -2.988955e-02, -2.639428e-03, -5.217534e-03, -8.601826e-03, -1.587952e-02, -3.421795e-02, 1.296631e-02, -3.695176e-02, 5.697936e-02, -8.041367e-02, -8.168311e-02, 6.159477e-02, -7.929114e-02, 8.100904e-03, -5.727369e-02, 3.715393e-02, 3.447935e-02, -7.665776e-02, 3.934800e-02, 4.564089e-02, -9.349500e-02, -3.876892e-02, -2.076302e-02, -1.312178e-02, 9.294268e-02, 2.413564e-04, -2.513984e-02, 4.068657e-02, 7.998484e-02, -3.110708e-02, 3.228928e-02, 5.627399e-03, 5.015856e-02, 4.191826e-03, 2.873274e-02, 7.000549e-02, 3.693807e-03, -8.668203e-02, -1.028724e-02, 5.647276e-02, -4.644877e-02, 6.037789e-02, 9.850679e-02, 4.270216e-02, -7.046264e-02, -9.998621e-02, -9.323960e-02, 1.285265e-02, 6.146513e-02, -1.648135e-03, -5.995015e-02, 2.246566e-03, 2.656779e-02, -3.220541e-02, -4.306940e-02, -8.384342e-02, -1.009879e-02, -4.544705e-02, 4.876946e-02, 2.383645e-02, 1.969252e-02, 1.159845e-02, 9.919253e-02, 1.382572e-01, 1.186562e-01, 8.784524e-03, -3.213884e-02, 9.242712e-02, 6.072498e-02, 1.791132e-02, 6.544638e-02, 5.794060e-04, -8.482961e-02, 7.856324e-02, 2.378746e-02, -8.344217e-02, 3.787938e-02, -7.682142e-02, 7.248303e-02, 8.233938e-02, -1.106808e-01, 7.631911e-04, -8.049685e-02, 1.043621e-01, 4.300586e-02, -5.592532e-02},
{-2.253729e-02, -2.240983e-02, -3.514482e-02, -3.186985e-02, -1.322230e-01, -6.152084e-02, 4.449068e-03, -4.440654e-03, 7.906896e-02, -1.452052e-02, -4.251137e-03, 6.290558e-03, 3.341670e-02, 6.766121e-02, -5.306194e-02, 9.087560e-02, 5.913368e-03, 2.574951e-02, -6.393547e-04, 5.281499e-02, -1.679148e-02, 7.283501e-02, 5.073593e-02, -5.462160e-02, 3.191262e-02, -8.649347e-02, -1.059212e-02, -5.377752e-02, 6.839115e-02, 1.294859e-02, 7.238335e-02, -6.188047e-02, 1.493424e-01, 6.131153e-02, -4.280746e-02, 3.745363e-02, 2.816833e-02, 6.969547e-03, 6.326142e-03, -3.654127e-02, -5.205899e-02, -4.530876e-02, 8.652014e-02, -5.729802e-02, 7.396986e-02, -8.832021e-02, 4.474802e-02, 1.852237e-02, -3.859963e-02, -2.780234e-02, 1.045980e-02, -1.981671e-02, 3.775771e-02, -6.432164e-03, 8.978678e-02, -6.780706e-02, -9.724823e-02, -4.731567e-02, -3.587755e-02, -4.522174e-02, -4.848399e-02, 1.737394e-02, -8.914203e-02, -1.930766e-02, -4.536914e-02, -7.667498e-03, -7.352263e-02, -3.227894e-02, -1.116583e-02, -1.883304e-01, -8.737600e-02, -6.879799e-02, -8.116475e-03, -1.527157e-02, -5.440263e-02, -8.636652e-02, -1.493119e-01, 2.544485e-02, 1.070464e-01, -1.207903e-01, 1.196444e-01, 6.640263e-02, 4.379760e-02, -7.381187e-02, -1.837663e-02, 2.860736e-02, -8.611503e-02, -7.396852e-03, -3.355773e-02, -6.983556e-02, 3.161419e-03, 5.298902e-02, -8.714873e-02, 5.882880e-02, -6.047065e-02, -8.655359e-02, -6.401837e-02, 1.165132e-01, -3.096602e-02, -3.419227e-02, 5.502159e-03, 2.604080e-02, -9.284846e-02, 1.771169e-02, 6.182025e-02, -6.863760e-02, 1.807750e-02, 9.154194e-02, -1.859332e-03, -2.534924e-02, 4.155323e-02, -5.601820e-03, -4.651733e-02, -2.746995e-03, -8.799323e-02, -1.010430e-01, 8.091430e-02, -1.477364e-02, 8.699912e-03, -8.088357e-03, -8.735532e-02, -2.231607e-02, -3.247607e-02, -9.306985e-03, 2.972784e-02, -1.192202e-02, -1.030068e-01, -1.966773e-01, -8.983918e-02, 6.594214e-02, -5.324313e-02, 7.628422e-03, -3.478229e-02},
{-2.703872e-01, 2.976246e-02, -1.255094e-01, 3.911267e-02, -2.593224e-01, 3.360290e-02, 9.564053e-02, 6.382425e-02, 1.265613e-01, -7.524349e-03, -7.170915e-02, 1.339452e-01, -2.713102e-01, 1.609973e-02, -2.570627e-02, -2.776135e-03, 2.281762e-01, 2.165109e-02, 3.370774e-03, -5.753901e-03, 1.638121e-01, 1.304931e-01, 1.370479e-01, -5.160375e-02, 9.711186e-02, 9.499588e-02, -5.455959e-02, 6.776697e-02, 7.959303e-02, -6.111724e-02, 5.128355e-02, -1.155231e-01, -8.815996e-02, -4.414782e-03, 3.230956e-01, 7.464004e-02, -1.699081e-01, 4.011329e-02, 1.869895e-01, -1.712000e-01, 2.806504e-01, -6.039900e-02, -4.036080e-01, -8.677185e-02, -3.843869e-02, 4.922623e-02, 7.013119e-02, 8.961274e-02, 3.394957e-01, 1.821721e-01, 3.963171e-02, 7.419381e-02, 2.571116e-01, -1.041768e-01, 2.362992e-03, 3.651851e-01, 9.266994e-02, -4.124137e-02, 1.815524e-02, -1.798709e-01, -1.527038e-01, 4.823598e-02, 2.138938e-01, -1.224247e-02, 4.596450e-02, -1.364067e-01, 8.349811e-02, -3.359095e-02, 3.679554e-02, -9.176693e-02, 8.324255e-02, 5.613191e-02, 9.803372e-02, 7.894809e-02, -9.620064e-02, 4.189918e-02, 4.220534e-01, 3.462680e-02, 7.379470e-02, -1.382156e-01, -2.561332e-01, 8.335841e-02, -2.619969e-02, 6.649683e-02, -7.841214e-02, 2.318828e-01, -9.927183e-02, 1.495252e-01, -3.261356e-01, 1.058547e-01, 9.099764e-02, 3.891577e-03, 1.696406e-01, 8.568650e-02, -5.882170e-02, -2.415088e-01, -1.014619e-01, -7.809867e-02, -1.980401e-02, 6.652231e-02, -9.773280e-02, -2.752304e-01, 1.681547e-01, 2.510615e-02, 1.798239e-01, -3.717323e-02, 9.149013e-02, 3.868303e-02, 2.383822e-01, -5.517045e-02, 2.441840e-01, -3.955079e-01, -4.202023e-01, 2.974661e-03, -7.255660e-02, 7.698153e-02, -1.843080e-03, -3.101201e-02, 2.245311e-01, -1.221423e-01, -1.747163e-01, 1.265621e-01, -3.213155e-01, -1.778050e-01, -1.117195e-01, 4.537637e-02, -2.057717e-01, 9.601092e-02, -5.459581e-02, 2.659072e-02, -1.373412e-01, 4.625736e-04, -1.563674e-01},
{-1.429958e-01, 1.654464e-02, 8.295591e-02, 2.376151e-01, -5.608729e-01, 1.001420e-01, 1.319330e-01, 1.494354e-02, 1.209883e-01, -1.180934e-02, 1.578018e-02, 3.387146e-02, 5.450552e-02, -1.424838e-02, -2.453293e-02, -1.925180e-02, 4.751711e-02, -7.492876e-02, 3.360048e-02, -3.441993e-02, 4.075153e-02, 4.927867e-02, 1.491272e-01, 3.358016e-02, -2.976464e-02, 1.994376e-02, -2.776874e-02, 3.692374e-02, 9.363622e-05, 2.948134e-02, -3.594192e-02, 3.505401e-02, 8.676323e-02, -5.239836e-02, -1.070169e-01, 6.139919e-02, -1.015599e-02, 2.702993e-02, 1.147626e-01, -2.439778e-02, -7.896190e-02, -1.291756e-01, -1.510615e-01, -1.467273e-02, 4.883015e-02, -7.863890e-02, 8.126350e-02, -3.707046e-02, -2.680334e-02, -7.567851e-02, -1.201727e-01, 8.802394e-02, -1.007748e-01, -1.641814e-01, 9.479700e-02, -5.368034e-02, -1.626007e-02, -9.607533e-02, 6.206895e-03, -1.299406e-01, 1.754299e-02, 7.177186e-02, -1.103063e-01, -1.613920e-02, -3.956068e-03, -1.069201e-01, 1.904659e-02, -4.754685e-03, 6.231908e-02, -2.108692e-01, 9.376531e-03, -6.518126e-02, -6.156559e-02, 3.879265e-02, 7.918548e-03, -9.490118e-02, -6.500804e-02, -4.291260e-02, 9.095372e-02, -1.280983e-01, 2.691593e-03, -7.422393e-02, 4.997331e-02, 4.518701e-02, -3.044878e-02, 6.650522e-02, -1.036424e-01, 7.142527e-02, -9.002264e-02, -9.114888e-03, 6.858399e-02, 6.028759e-02, -7.436220e-02, 1.044794e-01, -4.349388e-02, -1.318678e-01, 1.115089e-01, -5.664963e-02, -7.062887e-02, 1.662298e-02, 7.256124e-02, -1.466986e-02, -9.312692e-02, 2.636156e-02, -2.112585e-02, 3.933797e-02, -1.592922e-02, 1.947956e-02, 7.229087e-02, -5.890168e-02, 2.298297e-02, 1.166830e-01, -2.151412e-01, 6.144580e-02, -8.099435e-02, -5.603851e-02, 4.603731e-02, -3.020228e-02, -8.053508e-02, -7.899912e-02, -9.798809e-02, -9.038473e-03, 4.308551e-02, 4.644260e-03, 1.159229e-02, 3.607010e-02, -1.174991e-01, -9.779710e-02, 2.574331e-02, 4.266141e-04, 3.052892e-03, 3.077234e-02, -5.216352e-02},
{-1.858045e-03, -1.174231e-01, -1.321853e-01, -8.704603e-02, -1.704170e-01, 1.532989e-01, 6.633562e-02, -1.134567e-01, 4.306160e-02, -3.693812e-03, 1.526448e-02, -3.900199e-02, 1.122834e-02, 4.079397e-03, -5.543804e-02, -1.851951e-02, 1.333867e-01, 4.224118e-03, -2.022550e-02, -1.826689e-02, 1.965952e-02, -6.339148e-02, -9.844624e-03, 4.605500e-02, -3.203146e-02, -4.768887e-03, 6.793542e-03, -5.405156e-02, 9.327757e-02, 2.227972e-02, 8.056822e-02, 8.251552e-03, 7.533630e-02, -2.688966e-02, 8.020086e-02, 8.444834e-02, -1.936972e-01, -1.079335e-01, 2.809945e-01, 1.299822e-03, 3.497431e-01, 2.537035e-02, 2.144277e-01, 1.861877e-02, -2.549644e-02, 4.975102e-02, 3.772089e-02, 8.899135e-02, 3.199877e-01, 1.990294e-01, 3.919573e-02, 1.017082e-01, 2.037698e-02, -5.842124e-02, 5.301232e-02, -4.290165e-02, 4.282392e-03, -3.179266e-01, -9.493652e-02, 8.287122e-02, -5.881382e-02, 6.906039e-02, 8.928409e-03, -8.172463e-02, 1.189145e-01, -7.077084e-02, 3.527877e-02, 7.700716e-02, 1.236373e-01, -2.119647e-02, 6.839406e-02, 4.803221e-02, -2.127661e-01, -2.819002e-02, -5.994151e-02, -5.562224e-02, 1.206650e-01, 7.416838e-02, 1.576556e-01, -4.017117e-02, -7.334694e-02, 1.117372e-02, -9.332674e-02, -5.229937e-03, -4.939423e-02, 1.192903e-01, -6.231090e-02, 9.809090e-02, 7.292550e-02, -3.373777e-03, -3.709692e-02, 2.337383e-01, 1.615862e-01, -7.369410e-02, 1.591478e-01, 5.204877e-02, 2.574330e-02, -4.862133e-01, 1.609548e-02, 2.892950e-02, 1.242649e-01, -2.406464e-01, 3.295859e-02, 1.784426e-01, 1.455173e-01, -2.209146e-02, -3.171018e-02, 3.880190e-03, 3.060783e-02, 2.681383e-02, 4.879573e-02, -6.756683e-02, -1.267875e-01, 1.090521e-03, -9.413937e-03, 3.782525e-02, 3.809309e-02, -1.782424e-02, -8.576148e-02, 2.706706e-02, -8.703888e-02, 1.060362e-02, 5.742762e-03, 8.902382e-02, 1.023707e-01, 2.361659e-02, -5.647351e-02, 1.523730e-01, -4.497676e-02, 6.472411e-02, -6.569038e-02, 1.879751e-01, 3.411838e-02},
{-8.182820e-02, -5.715823e-02, -1.584703e-01, -8.342978e-02, -8.911787e-03, -3.193605e-02, 3.101830e-02, -7.432102e-02, -1.195164e-01, 3.558639e-03, 1.264863e-02, -3.515360e-02, -2.569145e-02, 5.018558e-02, 6.123872e-03, 5.367356e-02, -3.857271e-02, -1.173733e-01, -1.297964e-01, -4.480658e-02, 9.201476e-02, -5.529772e-02, -4.272665e-02, 2.303423e-01, 5.529791e-02, -1.035307e-01, 6.869744e-02, -3.682567e-02, 9.119797e-02, -1.354506e-01, -1.828027e-02, -8.513302e-03, -7.319366e-02, -6.195210e-03, -1.621694e-02, 1.881054e-02, -9.580243e-02, -1.281224e-02, -8.834577e-02, -1.246601e-02, 4.910914e-02, 7.992838e-02, -2.040182e-02, 3.802108e-02, -5.945834e-02, -6.090739e-02, -8.557029e-02, 6.148554e-02, -1.047867e-01, -7.007908e-02, 4.992114e-03, -6.932053e-02, -1.306494e-01, 6.835366e-02, -1.884407e-02, -1.036826e-01, 3.128998e-02, 5.044824e-02, 4.906676e-03, 1.300485e-01, -7.040314e-02, -5.357041e-03, -8.690296e-03, -9.057967e-02, -6.185533e-02, 1.104373e-01, -7.466333e-03, 4.810045e-02, 5.208005e-02, 3.226014e-01, -1.337567e-02, 3.202240e-02, -6.158282e-02, -1.587311e-01, -7.163326e-02, -4.133761e-02, 3.655466e-02, 5.992049e-02, -1.302933e-01, 5.552616e-02, 1.382885e-01, 1.804096e-01, 1.076232e-01, -7.653326e-02, 7.587782e-03, -1.030251e-01, -1.824208e-03, 2.366843e-02, 8.838511e-02, -1.860353e-02, -6.939082e-02, -9.968393e-02, 1.116684e-01, 3.820127e-02, 3.407019e-02, 4.338260e-02, 1.818524e-02, -1.630558e-01, -1.675801e-02, -1.000978e-01, 1.156436e-01, -5.906613e-03, 6.001343e-03, 7.066911e-02, 1.606687e-01, -1.218551e-01, 1.017602e-02, 1.403443e-02, 2.682099e-02, -6.614882e-02, -2.784313e-01, 1.506291e-01, -6.031214e-02, -1.468282e-02, 3.771076e-02, 6.137985e-02, -9.145414e-02, -5.311878e-02, -2.502352e-02, 7.392216e-02, 7.630956e-03, -1.874324e-03, 1.289952e-01, 6.958266e-02, -2.347187e-02, 1.146936e-01, 1.490518e-02, -6.615444e-02, 1.152159e-02, 1.554649e-02, -2.339332e-02, -1.152530e-03, -2.871852e-02},
{7.596385e-02, -1.287281e-02, 1.873465e-02, -4.153084e-02, -1.267323e-01, 8.619567e-02, 6.496423e-02, -6.145899e-02, 4.174947e-02, 6.993715e-02, -2.604347e-02, -7.280502e-02, -3.238541e-02, 2.468630e-02, -9.489547e-02, 9.683020e-03, 7.492591e-02, -2.320410e-02, 2.710604e-02, 7.529763e-02, -8.062547e-02, -6.919614e-02, 1.032786e-01, -1.217653e-01, -1.547841e-02, -3.316797e-02, -1.019293e-01, -2.307571e-03, -3.700401e-02, 9.057846e-02, -2.353122e-02, 5.240214e-02, 1.722332e-01, 6.389418e-03, 1.827230e-02, 1.094674e-02, -2.949143e-02, -5.124060e-02, 9.145384e-02, -3.475488e-02, -7.310947e-03, 4.005627e-02, 6.053759e-03, -4.135036e-02, 3.543526e-02, -2.497935e-02, 6.707501e-02, 6.991398e-02, -7.597477e-02, -1.077173e-01, -1.125969e-02, -2.256788e-02, 8.130572e-02, -5.110031e-03, -3.512738e-02, -1.178143e-01, -3.959177e-02, -1.415928e-01, -5.295132e-02, -1.599115e-01, 8.354189e-02, -5.951519e-03, 4.831759e-02, -1.266253e-02, -2.342711e-02, -8.595261e-02, 3.969814e-05, 3.693869e-03, -3.291855e-02, -1.085493e-01, 7.882429e-02, 8.796304e-02, -1.946939e-01, 6.270582e-02, 4.117383e-02, 5.335412e-03, 7.707607e-02, -3.417636e-02, 3.977292e-02, 2.986069e-02, -1.880218e-02, -8.817863e-02, -4.231616e-02, 2.895495e-04, 7.329305e-02, -8.817840e-02, 5.313937e-02, -7.562025e-03, -3.528631e-02, 2.505545e-02, -4.695975e-02, -4.363309e-02, -5.877368e-02, -5.302614e-02, 1.044023e-01, -1.084511e-01, 9.010670e-02, -1.855077e-01, -6.522028e-03, -2.526475e-02, -9.858329e-03, 1.135950e-01, 4.180444e-02, 8.236459e-03, -7.029389e-03, 4.669271e-03, -2.507197e-02, 5.971148e-03, -2.227848e-02, 8.576902e-02, 2.412968e-01, 9.766746e-02, 2.997508e-02, 2.679172e-02, 4.831078e-02, -2.289334e-03, 6.964085e-02, 2.170657e-02, -8.492302e-02, 1.925892e-02, -2.161452e-02, 5.234564e-02, -2.565143e-02, 2.654710e-02, 6.337439e-02, -5.866978e-02, -4.566969e-02, -1.687699e-01, -4.347357e-02, 8.755080e-02, 6.129323e-02, 3.062025e-02, 1.701653e-02},
{-1.748902e-01, -1.779127e-01, 4.533266e-02, -1.681601e-04, 2.474303e-02, 3.603129e-02, 8.756547e-02, 3.060339e-02, 1.146334e-01, 7.046489e-02, 5.701718e-02, 6.544605e-02, -4.191615e-02, -7.692952e-02, 1.314868e-03, -5.166855e-02, 1.084388e-01, 7.617616e-02, -7.955451e-02, -4.627584e-02, 4.099255e-02, 3.726041e-02, -4.957065e-02, 5.981247e-02, -1.425140e-03, -7.525306e-03, -6.806266e-02, 2.595133e-02, 9.831387e-02, 1.929331e-03, -6.015808e-02, -8.073737e-02, -1.232856e-02, -5.341281e-02, 1.023885e-01, 3.325844e-02, 9.014170e-03, -8.314339e-02, -3.206017e-02, -3.395040e-02, 9.809331e-02, -1.053436e-01, 2.711162e-03, 8.153695e-02, -8.376829e-02, 1.750665e-02, 3.423116e-02, 1.499431e-02, -9.324152e-04, 5.025645e-02, 7.460709e-02, -8.800402e-02, -5.343402e-04, -1.013722e-01, -3.165276e-02, 1.017695e-01, -2.989186e-02, -8.123148e-02, 4.605736e-02, 4.109509e-02, -1.236785e-02, 3.728582e-02, 7.479402e-02, 1.475328e-02, 9.508101e-02, -2.810870e-02, -4.679725e-02, -2.284729e-02, 7.678282e-02, 3.614122e-02, -7.062558e-02, -1.845331e-02, -3.332341e-02, -7.562657e-02, -6.252806e-02, -5.090659e-02, 4.869641e-02, 3.520303e-02, 7.693867e-02, -8.899159e-02, 3.456749e-03, 1.623759e-02, -4.303203e-02, -7.489851e-02, 5.810650e-02, 2.178104e-02, -6.185469e-02, 1.170995e-01, 4.131429e-02, 1.691772e-02, 7.587003e-03, 1.239268e-01, 6.137233e-02, 4.040011e-02, -1.974191e-02, 8.190668e-02, 2.861286e-02, -3.038544e-02, 6.353444e-02, 7.948238e-02, -2.642534e-02, 7.539832e-02, -4.684322e-02, 4.940807e-02, -6.800993e-02, 6.871531e-03, 7.929365e-03, -2.896625e-02, 8.294370e-02, 6.134625e-02, -8.307654e-03, -1.178865e-01, -1.426396e-01, -1.551696e-02, -1.176957e-01, 2.000341e-02, 1.424879e-02, -2.712335e-02, 8.577117e-02, -6.971837e-02, -1.008513e-01, -1.065348e-02, -1.482330e-02, 6.813889e-02, 4.898189e-02, 4.309776e-02, 6.101761e-03, 1.262489e-01, -6.930350e-03, 6.020775e-03, -1.872084e-02, -1.360834e-02, -1.114873e-01},
{1.225811e-01, 9.064414e-02, -1.170659e-02, 1.355791e-01, -3.208882e-03, 3.118100e-03, -3.011807e-02, 1.884374e-02, 2.212496e-02, -4.770443e-02, -3.049751e-02, -6.956698e-05, -9.906860e-02, 6.998607e-02, 3.490362e-02, -9.589343e-03, 3.353589e-02, 7.603134e-02, -5.314220e-02, 6.524945e-02, 1.771978e-01, -1.230666e-01, 2.688439e-02, -1.439261e-01, -1.104817e-01, 1.781255e-01, -1.761637e-01, 4.168876e-02, -7.965913e-02, -5.204410e-02, -7.437336e-02, -4.100394e-02, -4.180541e-02, -7.217483e-02, 1.989140e-01, 5.152405e-02, 1.082559e-01, 3.655565e-02, 4.858496e-02, -5.100326e-02, -8.236687e-02, 1.180302e-01, -5.079163e-01, -2.261186e-01, 1.013330e-01, 3.363596e-02, 1.672426e-02, -3.335639e-02, 2.192664e-01, 2.547055e-01, -5.829304e-02, -3.243073e-02, 9.147137e-02, 1.584867e-01, -2.729496e-02, 2.008697e-01, 1.584725e-02, 1.002356e-03, 5.659020e-02, -2.189653e-01, -5.392177e-02, 7.468374e-02, 1.378211e-01, 9.236344e-03, 4.193859e-02, 6.861938e-02, 7.771406e-02, -5.656382e-02, -2.787515e-02, -2.899262e-02, 5.519527e-02, 3.942767e-02, 1.048259e-01, 2.416874e-03, -2.341368e-02, 7.489343e-02, 2.019531e-01, 3.162450e-03, -9.996297e-02, 1.231335e-01, -1.547233e-01, -4.462928e-02, -1.080256e-02, -2.393545e-02, 6.242964e-02, -7.410375e-02, 4.446359e-02, -1.570557e-01, 5.895511e-02, 9.885810e-02, 5.717845e-02, -5.427781e-02, -1.541590e-01, 2.137645e-02, -1.051431e-01, -6.033956e-02, 5.044096e-02, 1.115243e-01, -2.572522e-02, 1.463986e-02, -2.232964e-02, -2.092813e-01, -5.261851e-02, -5.644610e-02, 4.284129e-02, 3.313603e-02, -1.489974e-02, 5.500113e-02, 1.286113e-03, 6.511422e-03, 3.261889e-01, -1.375018e-01, -1.638644e-01, 1.141352e-01, 1.650394e-02, 1.620665e-01, 1.738263e-02, 2.204991e-02, 5.333452e-02, 6.134929e-03, 1.856727e-02, -8.048261e-03, -2.450702e-01, -1.258584e-01, 2.474079e-03, -1.933210e-02, 9.075431e-02, 4.393805e-02, 1.007737e-01, -1.656720e-01, 1.119032e-02, -2.852038e-02, -1.768934e-02},
{5.403949e-02, -1.029527e-01, -1.935036e-02, 4.632195e-03, -1.064476e-01, -5.136586e-02, 1.263781e-02, 6.911825e-02, 6.281508e-02, 1.728296e-02, 3.998538e-02, 9.854172e-02, -3.991708e-02, -6.778172e-02, -1.404139e-03, 3.839798e-03, -4.825982e-02, -9.563043e-02, -6.814313e-02, -8.412319e-02, -2.571249e-02, 4.963332e-02, 1.292167e-01, 9.055884e-03, -1.065945e-02, -7.171627e-02, -1.211989e-03, 4.772515e-02, -1.478398e-02, 3.615277e-02, -1.045839e-02, 4.097413e-02, 9.644087e-02, 4.300260e-02, -5.392511e-02, -3.294063e-02, -1.793713e-03, -1.016475e-01, 2.066616e-02, 8.317443e-02, 3.489539e-02, -7.171270e-02, 1.238056e-01, 5.830991e-02, 5.358800e-02, -6.891213e-02, -1.940408e-02, -3.902432e-02, -5.101348e-02, -1.739206e-01, -8.083098e-02, -2.997196e-02, -7.023447e-02, -1.086473e-02, 3.248789e-02, -7.893095e-02, -4.386734e-02, 9.401051e-03, 3.865439e-02, 1.475245e-02, -7.494888e-02, -5.347952e-02, 3.807086e-02, 8.530352e-02, 4.611954e-02, 6.837477e-02, 6.566133e-02, -2.756944e-02, 1.733852e-02, -6.014269e-02, -6.772525e-02, 4.804173e-02, -1.436120e-01, 6.266829e-02, -2.336519e-02, 8.791018e-02, -4.535406e-02, 6.346714e-02, -7.841600e-02, -3.140677e-02, -1.273648e-02, -8.944634e-02, 4.592246e-02, 5.219362e-02, -5.135243e-02, -6.521263e-03, -1.182593e-03, -3.527565e-02, -5.920175e-02, -7.371193e-02, 3.662468e-02, -4.561631e-02, 2.314719e-02, 1.813195e-01, 1.074193e-01, -4.901601e-02, -2.361284e-02, -3.751770e-02, 6.178552e-03, -1.123626e-02, -2.818394e-02, 1.320832e-01, 9.540752e-02, -4.663090e-02, -1.525478e-03, -2.368441e-02, -2.551213e-02, 9.698215e-02, -5.700206e-02, 6.072538e-02, 3.708873e-02, 7.640121e-02, -9.086145e-02, 8.227947e-04, -6.009394e-02, -7.663311e-03, -7.355962e-02, -4.274885e-02, -2.133099e-02, -1.687674e-02, -4.658772e-02, -5.511735e-02, -1.156301e-01, 8.498702e-02, -4.328770e-02, -2.592185e-02, 3.680257e-02, -7.762533e-02, 8.744421e-02, 5.190689e-02, 1.932386e-02, 2.165971e-02, 8.625422e-02},
{1.082697e-01, -6.248970e-02, 2.876900e-02, -5.580776e-02, -1.418943e-01, -6.772059e-02, -5.101299e-02, -3.368388e-02, 4.018545e-02, 1.118241e-02, 1.038132e-01, -5.153160e-03, -5.689396e-02, 4.361255e-02, 7.245097e-02, -1.689839e-02, 3.341485e-02, 6.552751e-02, -2.198371e-02, 3.124227e-02, -2.757513e-02, 1.322424e-02, 1.025962e-01, 2.035309e-03, -2.264640e-03, -5.591836e-02, 5.130983e-02, -2.244023e-02, -8.646127e-02, 7.591400e-02, 5.731136e-02, 3.253997e-02, 1.158825e-02, 1.707655e-02, -9.709576e-02, -8.035009e-03, 1.627354e-02, -3.499622e-02, -6.110202e-02, 9.296668e-02, 1.964528e-02, -1.550509e-02, 1.171107e-01, 2.788875e-02, 1.046821e-02, -4.651191e-02, -4.444047e-02, -1.795813e-02, -4.944425e-02, -1.830020e-01, 8.367914e-03, -3.145535e-02, -8.961129e-02, 1.406155e-02, 6.858585e-02, -1.140256e-01, 2.406185e-02, 3.328757e-02, -3.060551e-02, 1.726956e-02, 6.678347e-02, 3.402592e-02, 5.654636e-02, -7.757597e-02, -5.229497e-02, -2.178193e-02, -3.785847e-02, 7.959423e-02, -6.198478e-02, -6.644253e-02, 2.016211e-02, 2.171402e-02, 3.478192e-02, 5.811855e-02, 7.314057e-02, 8.442310e-03, -1.523410e-01, -7.172116e-03, 2.636982e-03, -7.604646e-02, 1.130377e-01, -4.951277e-03, 4.848558e-02, -6.103315e-02, -4.001027e-02, -8.270828e-02, 7.761564e-02, 4.699902e-02, -7.786976e-02, 4.007377e-02, 4.123343e-03, -2.125317e-02, -4.092599e-02, -4.141107e-02, -4.809607e-02, -4.462314e-02, 5.845392e-03, -1.108340e-01, 2.577304e-02, 6.295653e-02, -1.193293e-02, 1.082494e-01, 9.834169e-03, -3.797942e-02, -8.414608e-02, 3.234438e-02, -2.261250e-02, 4.184861e-03, 1.906227e-03, 6.347101e-02, 6.486934e-02, -3.777001e-02, 9.439752e-04, -8.462960e-02, -1.110645e-02, -3.608811e-02, 7.398140e-02, 2.482539e-02, -7.123013e-02, -2.736943e-02, -6.956081e-02, -7.643142e-02, -2.051529e-02, 8.760682e-02, 7.181926e-02, 4.532988e-02, -5.092387e-02, -1.974397e-01, -1.748668e-02, -3.273169e-03, -3.345646e-02, 5.491921e-02, 1.446748e-02},
{-9.172568e-02, -9.426631e-02, 2.475276e-02, 1.519291e-01, -3.227423e-01, -3.625441e-02, -2.665222e-02, -2.065892e-02, 3.643567e-02, -4.357160e-02, -3.892102e-02, 3.468262e-02, -4.709403e-02, 5.201187e-02, 8.786706e-02, 6.890799e-02, -4.872826e-02, -7.390816e-02, -7.051188e-02, 2.515161e-02, 3.506276e-02, 2.950193e-02, 2.649353e-02, -5.710261e-02, -1.186870e-02, 7.244106e-02, -7.620111e-02, 8.137868e-02, -9.363742e-02, 2.566357e-02, -9.114749e-02, -2.630469e-02, -3.887375e-02, -5.036306e-02, 7.310258e-02, -8.471914e-03, -5.665360e-03, -1.807480e-02, 1.579090e-01, 4.335476e-02, -7.310136e-02, 8.587804e-02, -3.088025e-01, 4.593447e-03, -2.020609e-02, 1.724773e-02, -5.796225e-02, -1.703303e-02, -4.244200e-02, -3.267953e-02, 2.960701e-02, 6.632417e-02, -4.146281e-02, 2.676170e-02, -3.789000e-02, 1.670369e-01, 4.956943e-02, 5.201835e-03, 4.734543e-02, -7.689323e-02, -1.727128e-02, 6.371940e-03, -2.141299e-02, -3.533983e-02, 5.236214e-02, 2.426666e-02, -4.653260e-02, 1.106248e-01, -2.205151e-02, -4.289392e-02, 9.050188e-02, -3.996937e-02, -4.461867e-02, -9.917578e-03, -9.290802e-02, -1.858648e-02, -2.383749e-02, 1.563306e-02, -1.167710e-01, -5.100195e-02, -1.224518e-02, 6.654767e-03, 5.932888e-02, -3.371881e-02, -3.352522e-02, 6.147871e-02, 4.955809e-02, 1.027047e-01, -4.551259e-02, -1.233532e-01, -7.478115e-02, -9.352690e-02, 3.093606e-02, 2.683260e-01, 2.591573e-02, 6.013169e-02, 4.730825e-02, -5.936188e-02, 4.348049e-02, -8.698878e-02, 6.117932e-02, -9.448415e-02, -8.401366e-02, 6.364323e-03, -5.297900e-02, 2.807266e-02, -4.266222e-03, -8.869807e-02, 3.273829e-03, 5.079970e-02, -1.359858e-02, 9.563847e-02, -1.623192e-01, 7.323968e-02, -6.193331e-02, 4.977608e-02, 4.360829e-02, -6.693827e-03, 6.274214e-02, 7.052670e-02, 3.332200e-02, 8.206902e-02, 4.229262e-03, -4.756722e-02, 6.637649e-02, -4.257914e-02, 2.564407e-02, -5.740921e-02, -1.835937e-02, 2.727846e-02, 7.084602e-02, 8.105105e-04, 1.283251e-02},
{-7.340118e-02, 9.873933e-02, -3.797707e-02, -1.209779e-02, -1.004499e-01, 1.536464e-02, -9.344683e-03, -7.805189e-02, 3.409950e-02, 6.091042e-02, -8.886501e-02, 1.122502e-02, -9.263709e-02, 5.063447e-02, 8.409426e-02, -1.254698e-02, -4.730245e-02, 5.554430e-02, -7.745453e-02, -5.212612e-02, -2.883499e-02, 4.821524e-02, -1.243411e-02, 5.025193e-02, 8.054675e-02, -5.848286e-02, 7.750462e-02, 2.689963e-02, 5.499450e-02, -7.243163e-02, 2.154133e-02, 4.076428e-02, -2.383150e-02, -5.250726e-02, 1.107981e-01, 2.503336e-02, 4.265317e-02, -8.807217e-02, 1.751861e-01, 3.800243e-02, -4.108192e-02, 6.079766e-03, -2.499376e-01, -1.901924e-02, -4.967778e-02, 3.605945e-02, -9.765488e-02, -7.860847e-02, -3.158861e-02, 2.993224e-02, -5.703222e-02, -1.572008e-02, 2.106947e-02, 8.022697e-02, 3.797622e-02, 1.358675e-01, 5.814299e-02, 2.512952e-02, -6.292465e-02, -3.048996e-02, 7.621967e-02, -1.007920e-02, 3.175372e-02, -5.078630e-02, -8.301963e-03, 9.510859e-02, 2.103321e-02, -3.718970e-02, -5.080726e-02, -2.368042e-02, -6.938189e-02, 6.731088e-02, 2.456522e-02, -7.500741e-02, -8.648564e-02, 1.162446e-02, 5.222434e-02, -3.594704e-02, -6.706825e-02, -3.807553e-03, 2.809120e-02, -4.166938e-02, 6.524767e-02, -2.844599e-02, -5.319474e-02, -1.457325e-02, -6.525557e-02, -2.571704e-02, -7.029622e-02, -5.381598e-02, 5.791343e-02, -2.403653e-03, 5.695869e-02, -1.084282e-02, 2.135638e-02, -1.058280e-02, -1.110926e-02, -4.424215e-02, -4.320234e-02, -6.213235e-02, -3.539005e-02, 4.235495e-02, 4.503342e-02, 7.371232e-02, -9.268541e-02, -6.638954e-02, 9.702551e-02, -7.152160e-02, 7.062379e-02, -5.041932e-03, -1.591646e-02, 8.293511e-02, 7.109105e-02, 8.196598e-02, -1.026354e-02, 8.804124e-02, 6.145076e-02, -8.848866e-03, -7.776150e-02, 8.377527e-02, 1.030155e-02, 3.926824e-02, 3.365472e-02, -1.071001e-01, 1.188936e-02, 2.394625e-02, -6.166805e-02, -7.464221e-02, 8.726691e-02, -8.214039e-02, -3.642309e-02, -6.191400e-02, -4.257864e-03},
{2.510818e-02, -4.646432e-02, -1.961304e-02, 1.642993e-02, -1.521330e-02, -4.497858e-02, -9.022518e-02, -6.784359e-02, 3.877062e-02, -6.626863e-02, 8.296242e-02, 4.494317e-02, 2.740414e-02, 1.799458e-02, -3.700221e-02, 6.099619e-02, -6.590749e-02, 4.979508e-02, -7.769443e-02, 4.964105e-02, 8.396902e-02, 5.560812e-02, -3.197347e-02, -6.726316e-02, -9.041626e-02, 1.261503e-02, 7.379988e-03, -7.741492e-02, 6.304947e-02, -1.619310e-03, -4.252722e-03, 7.323456e-02, -1.177886e-01, 3.105568e-02, 3.267143e-02, 5.135258e-02, -9.343681e-02, 2.333004e-02, -4.006928e-02, -4.531131e-02, 1.709935e-01, -1.979884e-02, -1.545096e-02, 6.734198e-03, 4.545110e-02, 2.610187e-02, -6.929043e-03, -2.966210e-02, -5.316147e-02, -1.561809e-02, -7.790439e-02, -7.061370e-02, 5.529213e-02, 7.501647e-02, -8.387198e-02, 3.750781e-02, 8.806285e-02, 2.888634e-02, 8.124384e-02, 1.188633e-01, -4.570394e-02, -1.004492e-01, 6.536862e-02, 8.270106e-02, -4.101693e-02, 6.897660e-02, 9.345227e-03, 2.269268e-02, -8.044254e-02, 1.166049e-02, 1.786825e-02, 1.741408e-02, -5.774789e-02, 2.921027e-02, 4.111310e-02, -4.131306e-02, 9.522222e-02, -2.564722e-02, -4.614206e-02, -1.600987e-02, -1.715213e-02, 4.681446e-02, 5.073497e-02, -2.093773e-02, -3.924007e-02, 2.918778e-02, -3.573307e-02, -2.673615e-02, 5.087663e-02, -1.031356e-02, 6.533816e-02, -1.002671e-01, 8.827377e-02, 1.179810e-01, -6.591739e-02, 7.677657e-02, -2.646445e-03, -2.490540e-01, -6.365500e-02, -4.867367e-03, -1.527368e-02, 4.732034e-02, -5.227792e-02, -9.956507e-02, 4.304847e-02, -8.153500e-02, 4.217948e-02, 2.837621e-02, -8.777537e-02, 8.866328e-04, 2.474495e-02, 2.590975e-02, -7.666409e-02, -8.557857e-02, -7.029217e-02, -3.161100e-02, -2.927337e-02, -4.300293e-02, 5.492996e-02, 3.404169e-02, 9.180412e-02, -5.643569e-02, 5.534561e-02, 8.225866e-02, -1.822698e-02, 8.077244e-02, 8.515497e-02, 1.519170e-02, -2.567954e-02, 4.239742e-02, 1.582561e-02, -7.757530e-02, 6.070858e-02},
{4.089823e-02, 3.278736e-02, 3.422128e-02, 1.512235e-01, 5.882775e-02, -7.286287e-02, -1.577128e-01, -2.084377e-02, -2.173643e-01, 7.782809e-02, -5.506921e-02, -3.652334e-02, 1.306211e-01, 7.767178e-02, 2.913249e-02, -4.957819e-02, 1.384274e-02, 5.586619e-02, 5.410686e-02, 1.307905e-01, 1.446916e-01, -5.668782e-02, 4.851689e-02, -5.335075e-02, -1.041452e-01, 7.161600e-02, -9.744572e-02, -8.878216e-02, -5.328417e-02, 5.517573e-02, -5.297138e-02, 4.540763e-02, -7.547865e-02, -1.203529e-01, 9.147563e-02, -6.506559e-02, 1.161002e-01, 4.163655e-02, 6.224223e-02, -3.497816e-02, 4.675370e-02, 3.226403e-01, -2.055020e-01, -1.506257e-01, 2.175045e-01, 1.171707e-01, -1.049697e-01, -1.293661e-01, 2.097652e-01, 1.044347e-01, -1.522745e-02, -6.186488e-02, 8.464029e-02, 3.049450e-01, -1.728032e-02, -1.257688e-01, -7.615753e-02, -1.157284e-01, 2.816133e-02, -1.599361e-01, -7.306857e-02, 7.542643e-03, 1.274996e-02, 7.451046e-02, -9.585609e-02, 1.514343e-01, 8.323753e-02, -6.634595e-02, -7.464945e-02, -3.808618e-01, -3.762966e-02, 1.732339e-02, -5.090476e-02, 6.395067e-02, 1.104184e-01, 2.528302e-02, -9.017529e-02, 1.189721e-01, -1.131565e-01, 1.453967e-01, -1.233265e-01, -1.642427e-01, -5.819799e-02, 7.825007e-02, -6.383279e-04, -2.055147e-01, 1.533949e-01, -1.227328e-01, 2.993587e-01, 4.462801e-02, -1.057358e-01, -1.623716e-01, -1.373044e-01, 1.405070e-01, 1.301880e-02, -3.925634e-02, -1.686809e-01, -1.013983e-01, 1.284352e-01, -2.178437e-01, -3.276562e-02, 1.649669e-02, -9.492876e-02, -4.137554e-02, -2.632791e-02, -3.162006e-02, -9.391113e-02, -9.496547e-03, -4.130931e-03, 7.119444e-02, 1.797069e-01, 1.391085e-01, 6.507535e-02, -7.799183e-02, 1.106960e-01, 6.430852e-02, -1.667677e-01, 2.039645e-01, -6.686044e-02, -6.121503e-02, 1.500408e-01, 1.421669e-02, 3.689467e-02, 4.040518e-02, 5.726438e-02, -5.183364e-02, 2.760852e-01, 2.775930e-02, 2.144531e-01, 5.806691e-02, 9.855977e-02, -1.749570e-02, 1.992051e-01},
{2.558411e-01, -1.125489e-01, -5.678071e-02, -3.826789e-02, -1.742641e-02, -1.449564e-02, -5.651293e-02, 3.968176e-04, -1.269292e-01, 3.469833e-02, 2.234736e-02, -4.073478e-02, -7.518189e-02, 2.666513e-03, 2.784805e-02, -1.998149e-02, 8.339425e-02, -3.184682e-02, 2.156634e-02, 4.498640e-02, 2.802121e-02, -7.352170e-02, 3.811458e-02, -2.596598e-02, -6.469258e-02, 6.703020e-02, -1.084193e-01, -1.194812e-01, -2.252462e-02, -7.789256e-02, 2.847370e-02, 3.594165e-03, -1.382027e-01, 1.517373e-01, 1.423972e-01, 3.980484e-03, -3.473156e-02, 9.468233e-02, 9.792016e-02, -4.727250e-02, 9.411973e-03, 1.696989e-01, -1.057619e-01, -6.427202e-02, -5.186098e-03, -4.569291e-02, -9.871574e-02, -7.116056e-02, 5.112808e-04, 4.394452e-02, -6.349543e-02, 5.740045e-02, 8.431116e-02, 1.147019e-01, 4.991172e-02, -3.587740e-02, 1.473355e-01, 1.380491e-01, -7.941260e-03, 2.565433e-02, -1.126478e-01, -2.365739e-02, 4.283448e-02, 7.656094e-02, -7.246172e-02, 4.453178e-02, -1.173752e-02, 7.220000e-02, 3.027556e-02, 1.542557e-01, -4.388862e-02, -1.402189e-02, 2.541641e-02, -7.328660e-02, -1.918026e-02, 9.655703e-03, 1.776756e-01, -6.484228e-02, -5.930237e-02, 1.684089e-01, -3.663923e-02, 6.600614e-02, -3.616123e-03, 3.853901e-02, -2.718950e-02, -1.194099e-01, 1.390085e-02, -1.713068e-02, 1.162861e-01, 7.234534e-02, -4.492132e-02, -8.560447e-02, 1.807772e-01, -1.470551e-01, -4.471768e-02, -5.821749e-02, -1.567802e-01, -6.344915e-01, -6.912105e-02, -6.829311e-02, -3.663036e-02, -2.035486e-01, 8.803792e-02, 3.416868e-03, -1.638263e-01, -5.399261e-02, 6.975102e-02, -7.590629e-03, -1.645921e-01, 1.911342e-02, 1.882150e-01, 7.811547e-02, -1.395054e-01, 6.002150e-03, -2.331701e-03, 4.604712e-02, -6.766932e-02, 5.236156e-03, -5.900055e-02, -6.037612e-02, -5.528264e-02, 8.858437e-02, -1.002499e-01, -7.955942e-02, 8.021488e-02, -3.014490e-02, 5.323619e-02, 7.722441e-02, 1.162269e-02, -8.157930e-02, 4.562581e-02, -3.810279e-02, 6.530325e-02},
{-2.975421e-02, -3.291607e-01, -1.292586e-01, 2.222369e-02, -1.138665e-01, 6.699291e-02, 1.572693e-01, -6.928068e-02, -1.616298e-03, 8.318791e-04, -1.234161e-01, 1.040814e-02, 1.313059e-01, 2.050435e-01, 1.465485e-02, -6.492364e-04, 2.921603e-01, -6.312526e-02, -1.266362e-02, -1.294129e-01, 4.888269e-02, 1.097398e-01, -1.292713e-01, -1.061126e-01, -9.423064e-02, 1.144190e-01, 1.502077e-02, -5.892915e-02, -1.354378e-02, -2.665336e-02, -7.892248e-02, 1.716404e-01, 3.420968e-02, -2.241037e-02, 2.461655e-01, 1.232901e-01, -1.314789e-01, -5.210095e-02, 1.340719e-01, 1.210888e-01, 3.361157e-01, -1.290479e-02, 1.324753e-01, -2.315795e-01, -8.825500e-02, 6.690453e-03, 6.192946e-02, 5.091326e-02, 5.416595e-01, 1.775266e-01, -2.861571e-02, 8.490831e-02, 2.110706e-01, 8.739880e-03, 4.942948e-02, -2.075990e-01, -2.072648e-02, -4.368894e-01, 1.862887e-02, 5.760444e-02, 1.310940e-01, -7.614412e-02, -6.220093e-02, -5.556629e-02, 4.275960e-02, -9.857983e-02, 1.108119e-01, -1.923340e-02, 1.150246e-01, -1.022456e-01, -2.363515e-02, -6.418090e-02, -1.164488e-01, -3.365385e-02, 5.717154e-02, -6.167626e-02, 2.052393e-01, 8.261447e-02, 1.059847e-01, 3.102932e-03, -1.282756e-01, -1.937975e-01, -4.995034e-02, 6.035779e-02, -2.855692e-03, 2.102832e-01, 1.257253e-01, 1.975592e-02, -1.088685e-01, -5.927599e-02, 8.264530e-03, 1.677896e-01, 1.371485e-01, 8.167874e-03, -2.206401e-01, -5.459353e-03, -2.738203e-01, -4.615136e-01, 2.003253e-01, -1.012281e-01, 1.193081e-01, -6.073593e-02, 1.177576e-01, 1.148149e-01, -3.361722e-02, -1.229183e-03, 6.205385e-02, 1.128257e-01, -1.591428e-01, 5.283381e-02, 1.670692e-01, -1.694669e-01, -1.851037e-01, -3.019522e-02, -1.477468e-01, 2.654737e-02, 9.504121e-02, -1.007562e-01, 9.416314e-03, -1.336534e-01, -9.116379e-02, 9.783638e-02, 9.708715e-02, 1.369884e-01, 3.016297e-02, -1.810959e-02, -7.141335e-02, 2.819535e-01, -2.536722e-02, 2.731073e-01, -9.627575e-02, -5.081598e-02, 4.481715e-02},
{5.196876e-02, -2.114158e-01, 2.671604e-02, -9.190579e-03, -2.941941e-01, -5.476633e-02, -2.145137e-02, -6.746734e-02, 2.334552e-02, -7.212260e-02, 9.156556e-02, -6.383570e-02, 7.068619e-02, -3.999454e-02, -7.030895e-03, -7.878007e-03, 3.741385e-02, -3.335539e-02, 5.252581e-02, 5.660448e-02, -1.833262e-02, -3.276225e-02, -4.152595e-03, -1.038271e-01, 8.979961e-02, 8.779746e-02, -1.269118e-02, -2.278340e-02, -5.389859e-02, 9.216734e-02, -3.476693e-02, 4.393028e-02, -5.660585e-02, 9.496640e-02, -7.792360e-02, -6.687084e-02, -2.692549e-02, -1.374926e-01, 1.177326e-01, 4.095228e-02, 1.893559e-01, -3.713036e-03, 7.760435e-02, 2.658189e-02, -7.341351e-02, -6.235151e-02, -1.403024e-02, 7.749318e-02, 7.639005e-02, -3.675742e-02, -7.105544e-02, -5.018573e-03, 8.720610e-02, -3.798234e-02, -4.142382e-02, -1.540450e-01, 7.021985e-02, 2.169470e-02, -7.606936e-02, -1.622279e-03, 7.325218e-02, -3.945606e-02, -8.311565e-02, -2.932138e-02, -4.739220e-02, 2.995935e-02, 5.285754e-02, -6.231509e-02, 2.211329e-02, 2.076667e-02, -3.553252e-02, 3.408966e-02, -2.998528e-02, -4.207099e-02, -9.108679e-03, -2.474240e-02, -1.555287e-01, -9.961560e-02, -4.608720e-02, -6.560608e-02, 3.072948e-03, -1.467488e-01, 1.646334e-02, 3.742378e-02, -5.979169e-03, 1.063733e-01, 5.115153e-02, 5.649123e-02, 5.581020e-02, -1.096461e-01, 4.577241e-02, -5.684916e-03, -9.566743e-02, 1.728084e-01, 1.348141e-02, 1.406469e-02, -6.819726e-03, -3.253404e-01, -9.489848e-02, 8.069649e-02, 9.375203e-02, 1.503161e-01, 2.727319e-02, 4.456310e-04, 1.025335e-02, -4.400055e-02, 2.015896e-02, -6.197073e-02, -6.383139e-02, 5.536848e-02, 8.586782e-02, 1.042060e-01, -7.294668e-02, -9.895638e-02, -2.550017e-02, -1.035546e-01, 1.067191e-02, -6.595392e-02, -1.224188e-01, -6.461206e-02, 2.704491e-02, 1.023216e-01, -3.890860e-03, -2.427518e-02, 2.303050e-02, -4.745994e-02, -1.392644e-02, -3.281000e-02, 1.156717e-02, -4.910065e-02, 8.858280e-02, -1.433984e-02, 6.766961e-02},
{7.074066e-02, 2.991323e-01, 6.368338e-02, 4.700989e-02, -2.157515e-02, -7.055354e-02, -2.165986e-01, 8.947378e-02, -2.423759e-01, 2.282260e-01, -1.704598e-01, -1.012653e-01, 2.811755e-01, 1.745926e-01, 1.998538e-01, -2.015588e-01, -8.834043e-02, 2.264948e-01, 1.255400e-01, 2.030985e-01, -1.984779e-03, -1.395062e-01, -1.073169e-01, 2.065095e-02, -2.102059e-01, -2.350092e-01, -5.770222e-02, -1.511501e-01, -1.772335e-01, -9.516603e-02, -1.290150e-01, 1.211651e-01, 2.617739e-02, -1.491560e-01, -2.286777e-01, -1.372240e-01, 1.232148e-01, -1.222555e-01, 2.229552e-01, 1.106470e-01, -1.620645e-01, 1.391205e-01, -4.531204e-02, -7.405715e-02, 1.032115e-01, 1.213503e-01, -1.901186e-01, -1.667445e-01, -1.343697e-02, -3.035432e-01, 1.187144e-01, -2.004950e-01, 6.282525e-02, 1.995849e-01, -1.142252e-01, -3.667598e-01, -1.153463e-01, -1.853618e-01, 1.363585e-01, -4.380899e-02, -6.150304e-03, -8.679097e-02, -2.691915e-01, 7.127754e-02, -1.917528e-01, 9.331053e-02, 7.306086e-02, -1.529407e-01, -1.741053e-01, -5.653929e-01, -1.835355e-02, -2.534657e-02, -3.255888e-01, 9.203313e-02, 2.183424e-01, 7.937801e-02, 1.915816e-01, 3.147608e-02, -2.019478e-01, 1.305466e-01, 1.048876e-01, -1.313389e-01, -4.659162e-02, 2.340996e-01, -1.720723e-01, -1.816773e-01, 1.684473e-01, -1.526010e-01, 1.496906e-01, 6.611896e-04, -1.684458e-01, 5.784683e-02, -1.989957e-01, 4.667686e-02, -1.457262e-02, 8.970917e-02, -9.623765e-02, -4.222615e-01, 2.706524e-01, -2.599106e-01, -1.007388e-03, 5.524235e-02, -2.401096e-01, 2.910586e-02, 6.873598e-02, 6.621507e-02, -1.016916e-01, -8.082989e-02, -1.118204e-01, 2.580619e-01, 5.492010e-02, 2.024030e-01, 1.992266e-01, -7.728782e-02, 6.440138e-02, 1.689242e-01, -1.789250e-01, 2.302764e-01, -4.057075e-02, 8.911193e-02, 2.092833e-01, -2.637871e-01, 8.629651e-02, 6.705534e-02, 1.063451e-01, -1.741582e-01, 3.089550e-01, -2.058450e-01, 1.661314e-01, 3.595531e-02, 1.704748e-01, 6.332305e-02, 2.032777e-01},
{-1.260582e-01, -1.371251e-01, -1.453230e-01, -7.487490e-02, -4.464040e-02, 7.446811e-02, 9.902550e-02, -1.587483e-01, 7.777569e-02, -8.267344e-02, -4.978491e-02, 4.962603e-02, -7.160050e-02, -7.868510e-02, 2.161463e-02, -2.256919e-02, 1.508918e-01, -6.733318e-02, 5.575329e-02, -1.025109e-01, 7.365357e-02, 6.112677e-02, -2.039523e-02, -4.824456e-03, -1.971118e-02, 1.105325e-01, -8.759861e-02, -5.929809e-02, 7.193199e-02, 3.222813e-02, 2.766769e-02, -6.275784e-03, 7.549384e-02, -7.999688e-02, 1.257915e-01, -5.482223e-02, -1.182059e-01, 1.685242e-02, 2.435205e-01, 4.072365e-03, 2.050081e-01, 5.737729e-04, -2.954223e-01, -1.863246e-01, -1.164831e-01, 5.165971e-02, -2.982722e-02, 3.607490e-02, 3.303060e-01, 1.546388e-01, 7.360733e-02, 8.777291e-02, -3.945143e-02, 3.048233e-02, 1.178126e-01, 3.697985e-01, -1.245336e-01, -2.292643e-01, -1.552595e-02, 1.902202e-01, 6.237458e-02, 9.297303e-02, -6.318443e-02, 1.849052e-03, -5.174034e-02, 2.337189e-02, 9.519336e-03, 9.864669e-02, 1.113703e-03, -9.078868e-03, -3.736556e-02, 1.558287e-02, -1.746478e-01, -2.950696e-02, -1.318726e-01, 2.523281e-02, 4.292379e-01, -2.981312e-02, 1.391569e-01, -3.269187e-02, -2.103540e-01, 1.733883e-01, -5.645297e-02, -2.553403e-02, -6.267563e-02, 8.772908e-02, 4.884432e-02, 1.481316e-01, -5.944716e-02, 9.027014e-03, -4.749175e-02, 1.458522e-01, 5.663234e-02, 3.327395e-02, 8.253656e-02, 1.172824e-02, 5.184794e-02, -3.921269e-01, 8.992513e-02, -1.136194e-01, 3.620419e-02, -3.190056e-01, 3.760991e-02, 1.342045e-01, 6.067304e-02, -1.016045e-02, 9.814353e-03, -6.022312e-02, 9.888756e-02, 2.418725e-02, -3.835474e-02, 3.544393e-03, -3.312022e-01, -4.897878e-03, -1.216226e-01, 6.992183e-02, 1.159771e-01, 3.166034e-02, 6.271448e-03, -9.837399e-02, -7.450920e-02, 1.244882e-01, -1.641088e-01, 3.861988e-02, 2.986508e-02, 4.278690e-03, -5.327251e-03, 2.054982e-03, 2.768259e-02, 9.730371e-02, 7.307098e-05, 1.266087e-01, 2.347237e-02},
{-1.691130e-02, -3.781315e-02, -1.516236e-01, -1.877527e-01, -1.735689e-01, 2.121677e-01, 1.698398e-01, -6.541502e-02, -7.112080e-02, 4.657903e-02, 6.510878e-02, 2.910514e-01, 1.720270e-02, 3.341823e-02, -5.281466e-02, 1.917750e-01, 2.147623e-01, 1.614883e-02, -1.576320e-01, -9.079380e-02, -1.263826e-01, 3.723006e-02, -2.166692e-01, 1.061343e-01, 2.740184e-02, 1.083339e-01, 1.042843e-01, 1.486212e-01, 1.125044e-01, 1.874050e-02, 1.474234e-01, -9.355118e-03, 2.895001e-02, -6.003902e-02, 1.383098e-01, 1.801338e-01, -2.440468e-01, -2.837045e-01, 2.350700e-01, 1.035787e-01, 3.167619e-01, -5.929660e-02, 1.197638e-01, -1.579069e-02, -5.810261e-02, -6.999765e-02, 2.209296e-01, 1.579709e-01, -2.382318e-02, -3.206621e-02, -1.493940e-02, 2.226622e-01, 1.148145e-01, -1.063006e-01, 1.938392e-01, -1.290919e-02, -4.415585e-02, 1.951152e-02, -9.213497e-02, 2.609430e-01, -3.866921e-02, -3.939940e-02, -1.033907e-01, -1.077900e-01, 1.595066e-01, -1.696460e-01, 7.254694e-02, -4.888858e-02, 9.385882e-02, 2.325123e-01, -1.726733e-01, -7.660489e-03, -2.674800e-02, 3.418667e-02, -9.017021e-02, -3.365039e-02, 4.074932e-01, -1.701114e-01, 1.309478e-01, -3.117390e-02, 1.640868e-01, 1.710330e-01, 9.092581e-02, 6.722111e-02, 6.614849e-03, -4.393216e-02, -5.403542e-02, 2.588637e-01, -6.664982e-02, -8.933566e-02, 1.057479e-01, 2.844772e-02, 2.023742e-01, -4.306503e-01, 1.143690e-02, 9.958352e-02, -8.362431e-03, -6.328725e-01, 8.849359e-02, -6.772072e-02, 3.378764e-02, 1.536600e-01, 9.060851e-02, 3.418012e-02, 1.827193e-01, -4.225162e-02, -2.083003e-02, 1.667476e-01, 1.099576e-01, -9.382728e-02, -2.320918e-01, -2.551928e-02, -1.314299e-01, -3.029432e-02, -2.110966e-02, 1.696435e-02, 4.169682e-02, -1.035779e-01, 1.388927e-02, 8.539627e-02, -8.881204e-02, 1.099899e-01, 2.268967e-01, -6.632517e-04, -2.308128e-02, 7.497283e-03, -1.318131e-01, 1.601038e-01, -9.869713e-02, 6.170000e-02, -1.855271e-01, 9.288630e-02, -1.058217e-01},
{-8.030539e-02, -5.153420e-02, -1.855633e-02, 2.302714e-02, -6.712399e-02, 3.137822e-02, -3.441197e-02, 1.782169e-02, 1.231863e-02, 6.478301e-02, 1.228247e-01, 1.834765e-02, -1.388432e-02, 6.953651e-02, -7.675851e-02, -4.533225e-02, 9.614424e-03, 6.750474e-03, -6.047541e-02, -4.200611e-02, 6.968134e-02, 1.411065e-02, -8.791389e-03, 4.431654e-02, -3.559434e-02, -2.731605e-02, -3.883155e-02, 4.639468e-02, 6.189513e-02, 2.453079e-02, -5.354552e-02, -1.543348e-02, 3.471193e-03, 7.586784e-03, 6.506532e-02, -6.953171e-02, -5.359672e-03, -1.200548e-01, -1.173537e-03, 2.342968e-02, 4.757557e-03, 2.858953e-03, -2.752461e-01, -1.982093e-02, 3.673176e-02, -5.272819e-02, 3.101233e-02, 3.624794e-02, -8.752505e-02, 3.065330e-02, -7.223341e-02, 2.017373e-02, -7.958448e-02, 4.318669e-02, -7.603807e-02, 1.540579e-01, -8.322191e-02, 1.133539e-01, 1.464712e-02, 7.576696e-02, 3.988374e-02, -1.065563e-02, 6.194645e-02, 9.817121e-04, 6.361552e-02, 5.916092e-02, 6.064764e-02, -6.784660e-02, -8.810112e-02, 1.743280e-01, 3.469227e-02, 3.354419e-02, 6.988653e-02, -2.606994e-02, -5.649174e-02, -4.387410e-02, -8.338171e-02, -7.020182e-02, -2.284735e-02, -3.377512e-02, -2.268620e-02, 3.720307e-03, 2.066773e-02, -6.076000e-02, -7.550013e-02, -2.054285e-02, -2.869068e-02, 1.029026e-01, 4.409403e-02, -2.926484e-03, -7.272092e-02, 1.503093e-03, 9.406058e-02, 2.753316e-02, 3.405007e-02, -4.969573e-02, 6.890339e-02, 9.556298e-03, 9.651385e-02, -6.057267e-02, 6.268419e-02, -5.128690e-02, -2.059853e-02, -7.461227e-02, -1.166891e-01, 5.701322e-02, 6.747748e-03, 4.496800e-02, -1.381437e-01, 9.847284e-02, -2.647196e-02, -1.844795e-02, -1.337153e-01, 2.305620e-02, -7.020115e-02, -2.174775e-02, 4.770742e-03, 1.584212e-02, 2.745571e-02, 1.068934e-02, -3.794398e-02, 6.016315e-02, 1.629444e-02, -8.163507e-02, -1.324720e-02, -3.807990e-04, -5.372756e-03, 6.372557e-02, -3.680968e-02, -3.819674e-02, -2.094727e-02, 2.425799e-02, 4.424947e-02},
{-7.319849e-02, 4.797402e-02, 1.697683e-01, -1.644062e-03, -8.216227e-01, -1.400989e-01, 2.384418e-02, -7.370482e-02, 7.133236e-02, -2.298409e-02, -2.999932e-02, -4.184517e-04, -1.134710e-02, -1.136714e-02, 1.253509e-01, -8.723187e-02, 6.808306e-02, -9.996156e-02, 7.871693e-02, 4.788576e-02, 2.143278e-02, 5.179766e-02, -7.225116e-02, 1.116121e-01, 4.082658e-02, -1.550719e-01, -5.398556e-02, 1.518350e-02, 1.964482e-01, -9.114988e-02, -1.452837e-01, 6.213092e-02, 2.853668e-02, -1.078842e-01, 2.363420e-01, 3.923186e-02, -1.805056e-02, -1.447943e-01, 2.638238e-01, -4.825232e-02, 3.161506e-01, -7.193790e-02, -4.041254e-02, -4.267617e-01, -5.925706e-02, -1.985421e-02, 6.713538e-02, 4.555576e-02, 4.537179e-01, 4.292323e-01, 3.524143e-02, 1.055582e-01, -1.540053e-01, 1.251704e-02, -4.665108e-02, 6.092953e-02, -1.964664e-01, -5.752962e-02, -2.281872e-02, -2.811885e-01, 3.641174e-02, -5.068174e-03, -1.301782e-01, 5.034139e-03, -9.764788e-02, 4.530257e-02, 5.222442e-02, 4.928442e-03, 8.795387e-02, -1.844962e-01, -2.495490e-02, -4.843147e-02, 2.599656e-01, 3.920128e-02, 2.431948e-02, -7.612963e-02, 2.864767e-01, 1.346276e-01, 7.383289e-02, 1.101645e-01, -4.611479e-01, -5.667830e-02, -3.189992e-03, 5.294326e-02, 3.094802e-02, -8.206582e-02, -6.636857e-02, -7.536533e-03, 5.780912e-02, 2.324146e-01, -6.268431e-02, 1.267177e-01, 2.102773e-02, -1.378096e-01, -3.984318e-02, -3.710392e-02, -3.833948e-02, -3.273379e-01, 1.289069e-01, 5.909727e-02, -3.909928e-02, -1.274991e-01, 2.606530e-02, 1.257226e-01, 3.336127e-02, 2.315494e-01, -8.291574e-02, -2.026782e-02, 2.305531e-01, 8.563769e-02, 2.087590e-02, 1.700903e-01, -1.315727e-01, -1.002508e-01, 1.050476e-02, 4.369641e-03, 2.965661e-02, 7.889107e-03, -7.999182e-03, 1.372540e-01, -1.271488e-02, -6.175790e-02, -1.478535e-02, 9.247538e-02, 1.014657e-01, 3.264589e-02, 3.946496e-02, 2.408590e-01, 9.705552e-02, -1.868457e-01, -7.652590e-02, -1.745254e-01, 2.480754e-02},
{6.870742e-02, -3.874530e-02, 1.325095e-01, -3.531014e-02, -1.343578e-01, 6.812555e-02, 1.452988e-02, -7.487299e-02, -1.623697e-02, -1.604980e-02, 4.229243e-02, -3.645201e-02, 5.338446e-02, -6.300336e-02, -7.503667e-04, 9.543949e-04, -4.452096e-02, -2.227641e-02, 5.639097e-02, 8.523059e-02, -7.536115e-02, -4.852506e-02, 4.746895e-02, -3.337745e-02, 3.412616e-02, -8.878356e-02, 5.602799e-02, 1.361618e-03, -2.198815e-03, 6.838176e-02, 3.055382e-02, -8.027473e-02, 2.176217e-01, 5.962159e-03, -8.355119e-02, -2.893263e-02, 8.120444e-02, 1.316584e-02, 4.959516e-02, -1.810008e-03, 6.599719e-02, -7.144526e-02, 7.474424e-02, 1.260356e-01, 9.118786e-02, -5.459337e-03, 4.334226e-02, 8.007085e-02, -1.314216e-01, -5.152231e-02, -3.988522e-02, -1.627560e-02, -5.623213e-02, -2.015248e-02, -5.860884e-02, -9.209148e-02, -4.949604e-02, -1.327547e-01, 7.549125e-03, -1.355377e-01, -3.170612e-02, -6.887674e-02, 4.395235e-02, 7.878888e-02, -2.098116e-02, -4.853445e-02, -5.209851e-02, 6.203984e-02, 6.492270e-02, -1.839598e-01, -6.572130e-02, 1.361351e-02, -1.828904e-01, 7.833232e-02, 4.665324e-02, 3.620554e-03, -1.921619e-01, -4.538194e-02, 4.443415e-02, 6.692188e-02, 6.673052e-02, -6.625634e-02, 4.894843e-02, -5.074488e-02, -6.302503e-03, 3.480533e-02, -7.043023e-02, -5.494153e-02, 5.409387e-02, -9.813851e-03, -7.174210e-02, -3.137170e-02, -3.780853e-03, 1.321649e-01, 9.236730e-02, -9.576966e-02, 3.360662e-02, -2.920720e-02, 2.559459e-02, 6.933215e-02, 9.032530e-02, 8.016737e-02, 3.117051e-04, 3.876772e-02, 4.497738e-02, 8.481720e-02, 5.342528e-02, 7.529277e-02, 9.051119e-03, -2.206128e-02, 1.795041e-01, 1.103242e-02, 3.536818e-02, 3.840685e-02, 4.552266e-02, -2.447207e-02, 9.111322e-03, -5.062579e-02, -9.921395e-02, -6.152925e-02, 5.604010e-02, 1.584999e-02, 1.480752e-02, 1.415198e-01, 6.831290e-02, 8.329179e-02, 7.973894e-03, -1.013053e-01, 1.010425e-02, 1.030602e-01, 2.035451e-02, -2.997493e-03, 5.109683e-02},
{-2.876634e-01, -9.563117e-02, 2.741122e-02, -7.380883e-02, -6.984162e-01, -9.537376e-02, 1.208894e-02, -1.234025e-01, 2.890446e-01, 3.600972e-02, 2.811205e-01, -3.338700e-01, -3.920101e-01, 1.006638e-01, -1.010255e-01, -1.282638e-01, 3.510175e-01, -7.829956e-02, 7.214070e-02, -1.337103e-01, 2.388593e-01, 1.709411e-01, 2.628944e-01, 5.977100e-02, 6.138308e-02, 2.768424e-01, -5.813131e-01, -2.260937e-02, 2.046811e-01, -3.436868e-01, -4.662705e-01, -9.349873e-02, -3.155917e-01, 6.741629e-02, 2.527096e-01, 5.389569e-02, 3.305785e-01, 2.045379e-01, 9.968936e-02, -2.564275e-01, 2.828896e-01, 4.878263e-02, -7.604574e-01, -4.063587e-01, -3.695564e-02, 2.337939e-01, -2.253625e-02, -8.697043e-02, 3.473379e-01, 2.415039e-01, 3.711846e-03, -7.784771e-02, 1.163085e-01, -9.043261e-02, -6.928926e-02, 3.481435e-01, -1.779273e-02, 2.205563e-01, 9.397886e-02, -7.540318e-01, -1.628800e-01, 8.473890e-02, 3.590629e-01, 2.711936e-01, -8.694836e-02, 9.881647e-03, 1.822612e-01, 1.145886e-01, -6.080537e-02, -9.100245e-02, 5.602360e-01, 5.370805e-02, 5.384709e-01, -1.232314e-01, -8.233257e-02, 7.531156e-02, 4.061503e-01, 3.452377e-02, -1.840897e-01, 1.835951e-01, -4.853780e-01, -4.646069e-01, -2.845129e-01, 3.394407e-02, 1.534520e-01, 3.351092e-02, -2.565562e-01, -4.882100e-02, -1.866354e-01, 2.969935e-01, 1.435057e-01, -4.176027e-02, 2.027092e-01, 4.514773e-01, 1.361842e-01, -1.767720e-01, 1.281668e-01, 1.214199e-01, 1.192498e-01, 1.490566e-01, -1.101459e-01, -4.009131e-01, 1.141082e-01, 3.383675e-02, -2.671342e-01, 6.172736e-02, 1.486496e-01, -7.837024e-02, 1.597240e-01, 1.237827e-01, 6.546888e-01, -5.077558e-01, -4.729516e-01, 2.140320e-02, -1.726623e-01, 3.100101e-01, -8.495098e-02, -1.256534e-01, 9.584100e-02, -6.826852e-02, 1.303887e-01, 1.946964e-01, -8.153808e-01, -2.699178e-01, 1.194130e-01, 2.323169e-01, -1.171016e-01, 1.216214e-01, -1.631394e-01, -4.187351e-01, -1.137739e-01, -1.630364e-01, -1.260673e-01},
{-7.471362e-02, -4.263661e-01, -1.965429e-01, 1.739674e-01, -3.963472e-01, -2.911936e-02, 2.355756e-02, -1.277971e-01, 2.448699e-01, 6.995863e-03, -1.128230e-01, -7.134648e-02, -1.290408e-01, 5.251189e-02, -4.607685e-02, -1.372447e-02, 2.922673e-01, -5.580809e-03, -4.440090e-02, -1.436750e-01, -1.961879e-01, 1.917759e-01, 5.743505e-02, -1.417484e-01, 9.454541e-02, 9.395507e-02, -1.898986e-01, 1.404009e-02, 2.368276e-01, -9.729245e-02, -1.535035e-01, 5.602184e-02, -6.512149e-02, 4.083527e-02, 4.380779e-01, 6.408651e-02, 1.217612e-02, -8.220176e-02, 2.045258e-01, -1.687791e-01, 3.770854e-01, -6.986693e-02, -3.079725e-01, -1.310127e-01, -4.847839e-02, -9.826917e-03, 7.102162e-02, 6.772908e-02, 4.763997e-01, 2.986191e-01, 1.449774e-01, 9.664530e-02, 5.483581e-02, -1.683933e-02, 4.015066e-02, 1.648596e-01, -7.595614e-02, -1.798886e-01, 4.255025e-02, -7.441952e-02, 2.119625e-02, 2.152792e-02, 1.019770e-01, 8.460019e-02, -5.113460e-03, 3.939734e-03, 2.095394e-02, 6.232880e-02, 1.745615e-01, 5.878734e-03, 1.844084e-01, 5.432072e-02, 1.373924e-01, 8.944353e-03, 7.778123e-03, 7.188416e-02, 3.270786e-01, 7.436492e-02, -1.835689e-01, -1.507855e-02, -4.047484e-01, -2.139978e-01, -8.079929e-02, -8.889868e-02, -1.752723e-02, 2.433563e-01, -2.025576e-02, 2.652879e-02, -1.188371e-01, 1.632771e-01, 1.150399e-01, 2.296926e-01, 1.789088e-01, 1.875402e-01, -2.184300e-02, -3.542647e-01, -1.089730e-01, -2.696055e-01, -3.269919e-02, 4.396777e-02, 4.674214e-02, -2.747340e-01, 1.615382e-01, 2.590964e-01, -1.295076e-01, 4.581203e-02, 1.734385e-01, -2.710122e-02, -2.274149e-02, 2.694154e-02, 2.707585e-01, -2.048516e-01, -1.317721e-01, 6.594990e-02, -1.259871e-01, 6.768565e-03, 6.251989e-02, -1.638422e-01, -1.263356e-02, -5.599340e-02, -6.684050e-02, 3.737386e-02, -4.339682e-01, 4.511463e-03, 6.030969e-02, 4.910323e-02, -6.144409e-02, 2.003245e-01, -1.444944e-01, 1.073977e-01, -4.856470e-02, 3.437423e-02, 3.384433e-02},
{1.116505e-01, -5.468673e-02, -2.444368e-02, 5.172722e-02, -1.417683e-01, -1.723819e-03, -6.972384e-02, -5.651255e-02, 4.123139e-02, -3.347189e-02, -1.927071e-02, -5.541518e-02, 1.952220e-02, 4.633844e-02, -2.479724e-03, 2.780210e-02, -7.992021e-02, -2.333448e-02, 8.912050e-02, -5.055043e-02, -7.828218e-02, -5.427946e-02, 6.475850e-02, -7.518347e-02, -2.628278e-02, 5.345090e-02, 1.927599e-02, 7.523758e-02, -6.468741e-02, -1.114567e-02, 7.936426e-02, 3.834602e-02, 4.304221e-02, -3.623836e-02, -8.202611e-02, -6.344189e-02, 2.119621e-02, -7.503758e-02, -4.186858e-02, -4.069640e-02, -1.110041e-02, 8.187368e-02, 1.357334e-01, 5.490223e-02, -6.855071e-02, -1.012319e-01, 6.591175e-02, -7.770763e-02, -1.032022e-01, -1.974805e-01, 5.645638e-02, 8.093354e-03, 8.936733e-02, -3.732869e-02, 3.057310e-02, -4.296475e-02, -1.890613e-02, 1.033510e-02, -4.133234e-02, -2.403720e-02, 6.505584e-02, 2.125944e-02, -5.339273e-02, -1.064006e-02, 8.944028e-02, -8.642019e-02, 2.729564e-02, 4.004391e-02, 7.710656e-02, -1.057726e-01, -5.814364e-02, -2.258762e-02, -2.718196e-02, -7.139417e-02, 3.159841e-02, 7.678179e-02, -1.089901e-01, 2.877116e-03, 3.024184e-02, 4.485558e-02, -4.682548e-02, 8.353054e-03, -2.307122e-02, -1.644833e-02, -2.391639e-02, 8.064643e-02, 7.400090e-02, 6.429813e-02, -4.796707e-02, 1.198041e-02, -3.374692e-02, -3.898871e-02, -5.814597e-02, -2.500315e-02, 8.440898e-02, -1.030512e-02, -7.571853e-02, 4.172724e-02, -1.438896e-02, -5.564085e-02, -1.860224e-02, 6.837900e-02, 6.426330e-02, -7.953507e-02, -7.587380e-02, -9.201200e-02, 2.851867e-02, 2.561677e-02, 6.896866e-02, 8.144255e-02, 2.034466e-02, 8.270166e-02, 9.955203e-02, 7.932319e-02, 6.529079e-02, -1.431627e-02, 7.437409e-03, 1.196829e-02, 7.806218e-03, 1.065731e-03, -2.252573e-02, 9.538749e-03, -8.987834e-02, 1.123473e-01, -1.935767e-02, -5.876871e-02, 7.174051e-02, -1.958946e-01, 7.885385e-02, 5.911418e-02, -3.328656e-02, 9.475192e-02, 1.320145e-02},
{2.326789e-03, -8.742592e-02, -1.317943e-01, 2.536853e-02, -1.647993e-01, 1.064018e-01, -6.130691e-02, -3.733716e-03, -5.846650e-02, -1.758914e-02, -6.683602e-02, -6.677242e-02, -6.933258e-02, -4.109819e-02, -8.219389e-02, -9.892736e-03, 9.980930e-03, -1.700238e-02, 6.522278e-02, 5.970331e-02, -4.559834e-02, 8.065956e-02, -6.760728e-03, -5.934200e-03, 8.263407e-02, 5.921836e-03, -4.176170e-02, 7.377122e-04, 6.647918e-02, -3.211330e-02, 2.705205e-02, -1.886310e-02, -1.388101e-02, -1.459263e-02, -9.062596e-02, 2.268565e-02, -9.629239e-02, -1.633714e-02, 1.030555e-01, 5.474762e-02, 1.030735e-01, -4.785956e-02, 8.930930e-02, 3.020950e-02, -7.979988e-02, 2.836502e-02, 2.139695e-02, 3.786181e-02, -8.468235e-02, -1.537596e-01, -6.907935e-02, -1.215786e-02, -1.537361e-03, -8.976480e-02, -1.842015e-02, -1.746836e-01, 7.834613e-02, -4.677767e-02, 3.871148e-02, -5.450932e-02, -6.237628e-02, -6.837601e-02, 5.095833e-03, 6.673878e-03, 3.624404e-02, 1.940976e-02, -8.603936e-02, 6.660021e-02, -5.807050e-02, -1.395172e-01, -7.505364e-02, -4.202224e-02, -1.969705e-02, -1.083906e-02, -3.403571e-02, -2.613456e-02, 1.001627e-03, -4.617261e-02, 3.484233e-02, 3.145057e-02, 9.710753e-02, -3.470819e-02, -6.224474e-02, -6.217004e-02, 9.568530e-02, -5.074973e-02, -1.337322e-03, 5.105248e-02, 6.089479e-02, 4.879263e-02, -1.857212e-02, 1.642307e-02, -7.659525e-02, 7.995189e-02, -3.449494e-02, -8.723447e-02, 9.043712e-02, -5.095099e-02, -1.843245e-02, 4.959726e-02, -4.785257e-02, 9.786204e-02, -3.089988e-02, -4.933516e-02, -6.832416e-02, 1.947676e-02, -9.857117e-03, 1.681661e-02, -3.520093e-02, 5.998471e-02, 1.120537e-02, 2.274994e-02, -1.599496e-02, -5.965900e-03, 6.735468e-02, 4.633687e-02, 8.124737e-02, 6.232780e-02, -1.039701e-01, -1.258109e-02, 3.312912e-02, 7.311617e-02, 7.980626e-02, 5.464697e-02, 7.216569e-02, -6.376514e-03, 7.209555e-02, -1.594329e-01, -5.708735e-02, -4.363893e-02, 7.783303e-02, -3.697727e-03, -6.849788e-02},
{-1.686629e-03, -7.746513e-02, 2.455394e-02, -5.773985e-02, -9.888441e-02, -1.179760e-02, -5.908878e-02, -7.457636e-02, -5.952796e-02, 6.181816e-02, 3.623190e-02, -9.579768e-03, 6.303997e-02, 6.090287e-02, 8.662328e-02, 7.805941e-03, -1.428258e-02, 2.519464e-02, -1.960775e-02, -6.539699e-02, 3.371110e-04, 3.863772e-02, -7.065611e-03, -7.904834e-02, -3.032813e-02, -1.131752e-01, -4.319603e-02, 6.582321e-02, -8.539911e-02, -8.775157e-02, 3.890132e-02, 5.663101e-02, 3.548826e-03, 1.630327e-02, -7.985561e-02, -1.089002e-01, 4.035201e-02, -7.357445e-02, 3.044363e-02, 8.218776e-02, 1.782829e-02, 1.034143e-01, 8.283783e-02, 5.117732e-02, -7.780209e-02, -6.061569e-02, -7.664037e-02, -9.516891e-02, -1.265495e-01, -2.285383e-01, 2.667054e-02, -3.970790e-02, 1.412962e-02, 4.102070e-02, 3.431360e-02, -5.945108e-02, 4.249074e-02, 5.103828e-02, 8.472808e-03, 2.231722e-02, 3.397239e-02, -1.126243e-01, -2.203722e-02, 2.074516e-02, -8.636086e-02, 6.227602e-02, -6.729466e-02, 1.043483e-01, 5.706330e-02, 8.343117e-02, 1.080769e-01, 1.509349e-02, 4.505688e-02, 1.735707e-02, -6.272500e-04, 2.574535e-02, -1.866591e-01, -9.384687e-02, -7.997120e-02, -1.686553e-02, 5.430366e-02, 4.245647e-02, 1.058823e-01, 5.011242e-02, -2.907278e-02, 1.135046e-02, 9.479006e-02, -4.643708e-02, -5.026541e-02, -4.845539e-02, 4.545892e-02, 8.721101e-02, 7.893186e-02, 5.762742e-03, -1.089134e-02, -5.104467e-02, -9.977884e-04, -5.758525e-02, -7.156982e-02, 8.320123e-02, -5.472563e-02, 5.481274e-02, -4.699066e-02, -6.959813e-02, -1.159156e-01, -2.510151e-02, 3.115104e-02, 2.301876e-02, -3.594331e-02, -8.072772e-02, -4.274997e-02, 1.205668e-01, 9.637250e-04, 1.357894e-02, 6.313491e-02, -1.010924e-01, 6.280613e-02, -1.858497e-02, -2.901744e-02, 7.330439e-02, 5.076090e-02, -9.771645e-02, -6.051774e-02, 6.255989e-02, -1.168821e-02, -4.707295e-02, 5.308255e-02, -1.283791e-01, 1.800850e-02, -7.902598e-02, -1.903318e-02, -5.691825e-03, 5.819138e-02},
{1.361759e-01, 5.108599e-02, -4.931804e-02, -7.779489e-02, -1.170677e-01, -1.947074e-02, 2.475989e-02, 1.253838e-03, 5.789862e-02, -6.068256e-02, -4.889167e-02, 9.258611e-03, -1.003632e-01, -7.820840e-02, 5.072830e-02, 1.265998e-02, -1.640468e-02, 3.329138e-02, 6.201026e-02, -1.087570e-02, -1.036139e-01, -1.912531e-02, 1.263627e-02, -1.081033e-01, 5.948380e-02, -2.711419e-02, 4.587037e-02, 3.378015e-03, -5.132181e-02, -1.214118e-02, 1.050036e-01, 6.316227e-02, 4.813115e-02, -2.234746e-02, -3.150605e-02, -2.935234e-02, -5.403635e-02, -8.731670e-02, -3.349562e-02, 4.011649e-02, 2.420367e-02, 3.647490e-02, 1.020917e-01, -8.008998e-02, 2.457476e-02, -6.351186e-03, 6.462211e-02, 3.222884e-02, -1.034040e-01, -1.910541e-01, 2.712482e-02, -7.058236e-02, 4.973016e-02, -4.876527e-02, -4.773450e-02, -8.997153e-02, 2.922503e-02, 1.999677e-02, -3.546299e-03, 1.241820e-01, -5.692233e-02, -5.348893e-02, 2.420215e-02, -4.728322e-02, 4.651982e-02, -2.634774e-02, -8.005880e-02, -1.147603e-02, -1.046004e-02, -3.038314e-02, 1.037007e-02, -7.426832e-02, -8.932392e-02, -2.268853e-03, 6.075976e-02, 6.253963e-02, -1.058228e-02, -3.566396e-02, 4.166951e-02, -4.797705e-02, 2.255542e-02, 8.210371e-02, 5.652879e-02, -2.962613e-02, 5.356391e-02, -8.592709e-03, 7.837500e-02, 4.370199e-02, -8.499726e-02, -1.534560e-02, 3.624678e-02, 1.093142e-02, 5.340888e-02, 1.414143e-02, 7.470885e-03, -1.085452e-01, -1.192620e-02, 5.431414e-02, -9.843398e-03, -4.039674e-02, 7.633193e-02, -2.915828e-03, 3.675400e-02, -4.547900e-02, 3.083698e-03, -5.615150e-03, 2.686720e-02, 5.734678e-02, 1.959303e-02, -8.206171e-02, 1.425127e-02, -4.748315e-03, -8.174401e-02, 4.261510e-02, 1.190519e-02, -5.039731e-02, -2.752808e-02, -2.178057e-02, -2.814842e-02, -6.325506e-02, -6.561697e-03, 1.047443e-01, 4.935224e-02, 3.088765e-03, -2.857876e-02, 1.288902e-02, -2.154246e-02, -1.537235e-01, -1.302714e-02, 3.341360e-02, 4.289117e-02, -3.641719e-02, 5.870542e-02},
{-7.937964e-02, -3.133345e-02, -2.239424e-01, -1.617263e-01, -1.745430e-01, 5.004593e-02, 2.309930e-03, -1.759731e-02, 7.729360e-02, -2.880183e-02, 2.249578e-02, -5.777681e-02, -7.765651e-02, -1.817998e-02, -9.254949e-02, 8.420925e-02, 7.307447e-02, -5.848023e-02, 3.720115e-02, -1.253509e-02, -3.581377e-02, 7.893243e-03, -1.653390e-01, 2.694460e-02, 2.038707e-02, 1.065665e-01, -3.067974e-02, -2.547005e-02, 9.130177e-02, -1.859228e-03, -2.318040e-02, -3.614265e-02, -3.112560e-01, 2.999006e-02, 6.543661e-01, 9.898221e-02, 6.609678e-02, -3.628631e-02, 3.739058e-01, 1.803628e-02, 3.277303e-01, 5.279893e-02, -1.194461e-01, -4.556368e-01, -9.907232e-02, -7.722002e-02, 1.039431e-01, 9.828039e-02, 4.705118e-01, 3.596234e-01, -6.321124e-02, 1.993154e-02, 1.144295e-01, 1.182869e-01, 5.982995e-03, 1.436359e-01, -9.125680e-02, -6.291956e-02, 3.475557e-02, -2.231495e-01, -1.007554e-01, -7.419054e-02, 1.708240e-01, 1.108701e-01, 2.869717e-02, -3.072534e-02, 4.161323e-02, -6.167396e-03, 4.682201e-02, -5.249380e-02, -9.125827e-02, -2.794078e-02, 3.331701e-01, -6.710884e-02, -8.207644e-03, -4.045115e-02, 2.172416e-01, -1.141953e-01, -5.178547e-02, 7.892016e-02, -4.382177e-01, -1.339787e-01, -1.063284e-01, -4.628932e-02, 3.709412e-02, 4.980113e-02, -3.662456e-02, 2.980082e-02, 1.828588e-02, 2.837942e-02, 4.375282e-02, -1.196327e-01, 3.731269e-02, -1.527507e-01, -1.934827e-01, 4.409618e-02, -5.259675e-02, -4.738326e-01, 1.339404e-01, 6.790789e-02, -2.417549e-02, -1.163556e-01, -4.804473e-02, -8.354021e-03, 4.796645e-02, -8.599474e-02, 1.086055e-01, 1.145578e-02, 3.311902e-02, 2.395580e-02, 2.568688e-01, -1.031101e-01, -1.715807e-01, -9.534274e-02, 3.671946e-02, -1.197923e-02, -8.003578e-02, -4.695984e-02, -5.546964e-02, -7.935444e-02, 2.244573e-02, 1.069816e-01, 3.446682e-02, -3.152598e-02, -5.337329e-02, 3.774770e-02, 3.097395e-02, 1.238159e-01, 3.653368e-02, -1.518876e-01, -1.863476e-02, -1.494056e-01, -8.844367e-02},
{1.910890e-01, 1.540646e-01, 6.378860e-03, 2.991363e-01, 7.011835e-01, 7.142948e-03, -9.775917e-02, 1.400073e-01, -1.493745e-01, 1.900454e-01, -2.296423e-01, -1.331907e-01, 2.091240e-01, 3.215383e-01, 1.666875e-01, -2.113998e-01, -5.809999e-02, 1.897989e-01, 3.551369e-01, 2.504985e-01, 1.539793e-01, -2.751685e-01, -4.094794e-02, -5.527819e-02, -3.230644e-01, -1.610108e-01, -9.076970e-02, -2.431743e-01, -1.830118e-01, -1.596085e-01, -7.417805e-02, 1.056742e-01, -9.785856e-03, -3.605779e-01, 2.790850e-01, -1.468503e-01, 1.108118e-01, 4.252116e-02, 9.330634e-02, -2.119855e-01, 1.475113e-01, 2.425770e-01, 1.875082e-01, -4.908596e-02, 2.424972e-01, 1.581391e-01, -5.985107e-02, -1.317974e-01, 3.865732e-01, 1.334838e-01, 2.848642e-01, -1.800027e-01, 3.729646e-02, 2.440018e-01, -1.996697e-01, 9.799024e-02, -2.139501e-01, -4.514078e-01, 3.133539e-01, -1.514750e-01, -1.721832e-01, -9.394956e-02, -1.292852e-01, 3.216522e-01, -3.088187e-01, 2.033753e-01, 1.574995e-01, -3.455639e-01, -1.178448e-01, -3.717037e-01, 5.865432e-02, 5.495234e-02, -2.071134e-01, 2.495130e-01, 2.303371e-01, 2.050200e-01, -2.028998e-02, 1.684841e-01, -5.118666e-02, 2.852253e-01, -4.006581e-02, -2.279917e-01, 8.369143e-02, 2.729617e-01, -1.312059e-01, -8.515720e-02, 2.439589e-01, -2.669994e-01, 2.549523e-01, 2.444261e-01, -2.517048e-01, 2.532461e-01, -1.865104e-01, 1.900340e-01, 2.915981e-02, 3.169027e-02, -3.825404e-01, -3.005176e-01, 1.641128e-01, -3.436379e-01, -8.868024e-02, -1.712575e-01, -1.142717e-01, 7.238046e-02, 1.041780e-02, 1.696785e-01, -1.250349e-01, -9.042334e-02, -2.008474e-02, 2.490357e-01, 3.282481e-01, 1.015878e-01, 7.173246e-02, -1.832378e-01, 1.437922e-01, 3.026231e-01, -2.207175e-01, 1.879928e-01, 2.268903e-01, -2.219808e-02, 2.972660e-01, -2.242911e-01, -6.250174e-02, 2.187842e-02, 2.203674e-01, -2.015903e-01, 2.015286e-01, 1.725134e-01, 2.328942e-01, 2.625025e-01, 2.711702e-01, 2.037477e-01, 1.982387e-01},
{-6.275845e-02, -2.329270e-01, -3.320478e-02, 1.483811e-01, -1.304929e-01, 2.478644e-02, -3.826335e-02, 3.853822e-02, -1.874098e-02, 4.399921e-02, 3.685870e-02, -1.145928e-01, -7.363163e-02, 7.369728e-02, -5.499439e-02, -7.392401e-02, 8.601909e-02, 3.748534e-02, 1.172848e-02, -5.778189e-02, 1.661653e-01, 6.845298e-04, 1.329361e-01, 6.429621e-02, 4.160884e-02, 6.239203e-02, -4.863910e-03, -8.496884e-02, 9.358092e-02, -6.350254e-02, -5.479878e-02, 9.687376e-02, -2.621306e-02, -8.843356e-02, 3.685774e-03, -9.318273e-02, -1.156451e-02, -1.633041e-02, 5.399971e-02, -7.945876e-02, 4.196019e-03, 5.040620e-02, -2.799529e-01, 4.631506e-02, 1.061876e-02, 7.857613e-02, -7.690875e-02, 3.810059e-02, 2.801093e-01, 1.780036e-01, -5.386670e-02, -8.070742e-02, 9.005854e-02, -6.059803e-02, 7.354335e-03, 9.851597e-02, -5.247654e-02, 1.202094e-02, 4.910172e-03, 2.361662e-02, -9.934859e-03, -5.871171e-02, 6.539340e-02, -6.049806e-02, 6.283187e-02, 8.683581e-02, 6.626922e-03, -6.358750e-02, 5.946577e-02, 1.296937e-02, 1.094942e-01, -4.582572e-02, 7.839833e-03, 5.850090e-02, -4.326213e-02, -3.170881e-03, 5.603733e-03, 1.542676e-01, -4.680517e-02, -4.019580e-02, -1.272685e-01, 5.726087e-02, -3.621855e-02, -5.525500e-02, 5.325054e-02, -1.107108e-02, 8.463912e-02, 4.838560e-02, -2.427782e-02, 7.825489e-02, 2.578368e-02, 1.305060e-01, 1.475314e-01, 3.454245e-01, -4.480226e-02, -6.751997e-02, -6.194007e-02, -2.286000e-02, 8.265460e-02, 2.573677e-02, 4.826474e-02, -1.543438e-01, -1.595405e-03, 9.523653e-02, 1.651470e-02, -1.905319e-03, -6.746600e-02, 7.888325e-02, -1.475931e-02, -4.901297e-02, 1.305003e-01, -1.668179e-03, 1.643068e-04, 6.327689e-02, -5.762538e-02, 7.079829e-02, 2.760336e-03, -1.028257e-01, -7.995700e-02, -9.113737e-02, -2.963189e-02, 7.826777e-02, -1.007320e-01, 3.963828e-02, -2.776707e-02, 2.149757e-02, 1.464606e-02, 6.179671e-02, -1.208800e-02, 8.998284e-02, -3.265061e-02, 1.007729e-02, 3.737447e-02},
{1.029464e-01, -8.045372e-02, -8.462965e-02, 6.791794e-02, -3.961933e-02, -4.449493e-02, 3.253340e-02, 7.355183e-02, 9.569373e-02, -4.451226e-02, 6.380769e-02, 6.413004e-02, 9.924476e-03, -7.856539e-02, 3.950852e-02, -2.000766e-02, 6.964311e-02, -2.620237e-02, -3.337782e-02, 2.279027e-02, -1.507629e-01, 2.521121e-02, 6.942756e-02, -5.679547e-02, 5.842996e-02, 3.290148e-03, -7.687183e-02, -3.698609e-02, 7.181445e-02, 7.722324e-02, 6.826752e-02, 7.652537e-02, -2.192426e-02, -3.643472e-02, -2.627019e-02, -7.755038e-03, -5.428774e-02, 2.581473e-02, 1.563411e-01, -4.411861e-02, 3.161269e-02, -4.262751e-02, 1.334964e-01, 8.181838e-02, 1.078459e-02, -5.376798e-02, -1.072159e-03, 5.988315e-02, -4.871166e-02, -1.118324e-01, 9.164589e-03, 6.424100e-02, 8.432917e-02, -7.062831e-02, -2.006387e-02, -2.439989e-02, 9.825009e-02, 5.687946e-02, -4.091102e-02, -1.615561e-02, -3.546807e-02, -8.327596e-02, -5.266367e-03, 2.453885e-02, 9.704869e-03, 4.705983e-02, -1.363339e-02, 5.019075e-02, -1.855736e-03, 8.324911e-02, 3.031895e-02, -2.397566e-02, 9.300456e-02, -5.697117e-02, -5.698214e-02, 2.238591e-04, 7.598805e-02, 1.631949e-02, -5.565000e-02, -1.129872e-01, -6.964892e-02, 2.259370e-02, 7.008862e-02, -5.350330e-03, 7.020449e-02, -1.565474e-02, 2.550667e-02, 4.705977e-02, -1.558181e-02, -4.690764e-02, -6.517492e-02, 4.256838e-02, 9.198929e-02, -3.216058e-02, -4.013113e-02, -3.822127e-02, -7.787757e-02, 2.700641e-02, 7.969601e-02, 4.665915e-02, -5.952800e-02, -2.240342e-02, 3.882421e-02, 1.948981e-02, 3.917817e-02, 3.307377e-02, 4.474271e-02, -6.199018e-02, -3.804408e-02, -8.303607e-04, -5.114148e-03, 4.255582e-02, -2.181141e-02, 4.256072e-02, -1.419890e-02, -8.457757e-02, -5.307068e-02, -5.193039e-02, -7.200422e-02, 3.033098e-02, -6.238816e-02, -4.718589e-02, -4.877039e-02, 4.437426e-02, -3.526838e-02, 4.266834e-02, 4.942654e-02, -9.424958e-02, 7.544267e-02, 7.821101e-02, -7.399584e-02, -1.700111e-02, -9.537807e-02},
{-3.659373e-02, -1.624770e-02, 5.620021e-02, -4.307315e-02, -4.030828e-03, 6.632938e-02, 1.589922e-02, 4.908443e-02, 7.010385e-02, -5.683438e-02, 1.176649e-01, 6.050803e-02, 3.457843e-02, -3.039141e-02, -4.763607e-02, 2.351212e-02, -4.970551e-02, -2.164976e-02, -4.640406e-02, 3.707890e-02, 7.063708e-02, 8.732206e-02, 4.520973e-02, 3.270341e-02, 8.955103e-03, 6.467726e-02, 2.995226e-02, -2.043698e-02, -1.127439e-02, 8.625737e-02, 2.997610e-02, -7.359361e-02, -2.262410e-02, 1.114597e-02, 7.688604e-02, -6.406249e-02, -2.971444e-02, 2.674977e-02, -1.728407e-02, 6.526407e-02, 3.799941e-02, -7.904758e-02, 4.098028e-02, -2.623984e-02, 7.917516e-02, -6.419078e-02, 1.827037e-02, 7.539935e-02, 4.577156e-03, -6.625737e-02, -9.015113e-02, -3.532170e-02, -6.634904e-02, 4.899536e-02, -4.442305e-02, 2.291897e-02, -5.634509e-02, -1.263270e-01, 3.935998e-02, -5.199274e-02, -7.535746e-03, 3.512232e-02, -2.347498e-02, 3.981473e-02, 8.909326e-02, -6.593874e-02, 8.567691e-02, 4.412876e-02, -6.380824e-02, 7.799524e-03, -2.576096e-02, -8.308107e-02, -5.065481e-02, -7.745972e-03, -4.870567e-02, 7.191046e-02, -6.842206e-02, 1.800902e-02, -7.727503e-02, -2.621142e-02, 1.727450e-03, 3.150569e-02, 2.697352e-02, -9.038687e-02, -7.937446e-02, 7.478664e-02, 4.860658e-02, 8.108374e-03, 2.431638e-02, 2.700492e-02, 5.357532e-02, -3.853801e-04, -7.502329e-02, -5.765156e-02, -4.151314e-02, 8.662438e-03, 4.719320e-02, -1.070619e-01, -7.297327e-02, -6.706651e-02, -1.873757e-02, -3.532485e-02, -4.348799e-02, 3.455258e-03, -2.334991e-02, -8.905921e-02, 7.882854e-02, -5.993367e-02, 6.627101e-02, -8.187282e-02, -6.442501e-02, -8.072448e-02, -1.158394e-01, -5.111596e-02, -8.471465e-02, 8.574431e-02, 5.806533e-02, 8.085082e-02, 3.793056e-02, 5.814581e-02, -7.018520e-02, 3.631552e-02, -3.846228e-02, -3.749916e-02, -1.617328e-02, -8.629210e-03, 3.824064e-02, 1.175300e-01, 4.287858e-02, 3.178922e-02, 8.452030e-02, 4.585003e-03, 5.555534e-02},
{1.942142e-02, -2.019933e-02, 5.825295e-02, 1.120447e-02, -1.988738e-01, -7.562577e-02, -1.609715e-02, 7.099488e-02, 2.189815e-02, 3.766544e-02, -4.761305e-02, -4.946169e-02, 7.312829e-02, 4.572770e-03, 6.651447e-02, 2.837117e-02, -1.369878e-01, 2.301121e-02, 1.059740e-01, 1.004932e-01, -9.380889e-02, -8.083770e-02, 9.143256e-02, -5.684112e-02, 6.358843e-03, -1.260685e-02, 6.598093e-02, -9.048291e-02, -2.407964e-02, -3.170179e-02, 8.355047e-03, 1.020002e-01, 6.038338e-02, -4.063793e-02, -1.504963e-01, -2.116246e-02, 2.082922e-02, -2.945248e-02, -5.799331e-02, -5.915843e-02, -1.200882e-01, 8.844925e-02, 1.627908e-01, 1.098549e-01, 8.479162e-02, 6.822813e-02, -9.955460e-03, -6.162577e-02, -1.486213e-01, -2.451261e-01, 4.687135e-02, -6.250466e-02, -7.396873e-02, 1.375789e-01, -9.899665e-02, -3.026570e-01, 2.290577e-02, -2.039706e-02, 1.251474e-01, 3.348574e-02, -1.091426e-01, -1.009915e-01, -1.232277e-01, 1.169776e-01, -5.137387e-02, 9.386044e-02, 1.376885e-02, 1.702604e-02, -1.508008e-02, -1.602868e-01, 6.430192e-02, -8.697139e-02, -1.418922e-01, -3.650755e-02, 1.043507e-01, 5.770903e-02, -1.399417e-01, 5.782837e-03, -1.020734e-01, 5.077605e-02, 2.071788e-01, -8.938464e-02, -6.736037e-02, -2.260396e-02, -4.833601e-02, -1.512744e-01, 5.423314e-03, 2.275585e-02, 5.221489e-02, -2.894389e-02, 4.531964e-02, -1.120785e-01, -5.386990e-02, 1.160415e-01, 6.756924e-02, 1.098178e-02, 6.710261e-03, -5.995300e-02, 9.205852e-02, -6.760691e-02, -6.900979e-04, 5.423701e-02, 3.841935e-02, -3.874189e-02, 1.359210e-02, -7.862289e-02, 1.269963e-02, -7.628998e-02, -6.827171e-03, 7.945508e-02, -2.171000e-02, 1.736013e-01, 1.059938e-01, -2.654863e-02, 1.339081e-01, -2.335111e-02, -1.280003e-01, -3.348397e-02, -7.912979e-02, 7.732683e-02, 1.226260e-03, 9.331701e-03, 8.497672e-02, 6.698989e-03, 1.710268e-02, 8.422331e-03, 1.364454e-01, -1.454228e-01, 1.364916e-01, -2.836890e-02, 8.447549e-02, -2.316938e-02, 1.036411e-01},
{9.826847e-02, -9.399327e-02, 2.232866e-02, -4.498965e-02, -4.635182e-02, -1.045828e-02, 6.391432e-02, -3.897249e-02, 3.170676e-02, -1.480574e-02, -9.466370e-03, 5.368514e-02, 1.144906e-02, -4.282771e-02, -1.503915e-02, 7.136853e-02, -5.267818e-02, 8.298634e-02, 8.347312e-02, -1.282593e-03, -4.161466e-03, 4.953786e-02, -5.982332e-02, 4.017299e-02, -4.507249e-02, 7.140474e-02, 8.574586e-02, 4.348304e-03, 7.066051e-03, 4.817221e-04, -2.544909e-02, -5.767076e-02, 1.926862e-03, 8.903188e-03, 1.097585e-01, -2.315958e-02, 7.740875e-02, -8.883821e-02, 1.108553e-01, 5.369322e-02, -5.295179e-03, -6.864059e-02, -4.391976e-02, -1.427384e-01, 5.870550e-02, 4.718623e-02, -7.649580e-02, 8.141161e-03, 3.280282e-02, -2.693873e-02, -1.957995e-02, -4.192102e-02, 3.300600e-02, -2.822895e-02, -7.295197e-02, -7.938834e-02, 4.260518e-02, -2.433954e-03, 7.585120e-02, 3.207220e-02, 9.075119e-02, -7.045437e-02, 1.013308e-02, -7.030734e-02, 7.867356e-02, 8.396590e-03, -3.053176e-02, -4.798197e-04, -8.158422e-02, 2.073935e-02, 4.257354e-02, 1.761834e-02, -1.037884e-01, -4.404576e-02, 2.015306e-02, 5.760330e-02, -2.792845e-02, 4.234280e-02, 6.094585e-02, 6.032793e-02, -1.058127e-01, -4.444970e-02, 6.343353e-02, -7.707024e-02, 7.885541e-02, 1.748395e-02, 2.702959e-04, -3.023412e-02, 7.860919e-03, 4.749939e-02, 5.126790e-02, -1.380933e-02, 4.722903e-03, 2.048892e-02, 5.254325e-02, -2.782970e-02, -7.242911e-02, -3.980588e-02, -2.095610e-02, 7.112571e-02, 7.620741e-02, -5.770305e-03, 3.961625e-02, -8.001691e-02, -4.326127e-03, -9.504519e-02, -5.151966e-02, 3.348689e-02, 2.331866e-03, 6.457461e-02, -6.990913e-02, -7.520758e-02, 1.138649e-02, 7.327920e-03, -5.870394e-02, -1.829273e-02, 5.761902e-02, -2.175630e-02, -8.239030e-02, 6.356688e-02, 4.837864e-02, -2.511130e-02, 3.925707e-02, 8.349763e-02, -2.007340e-02, 1.036691e-02, 5.903126e-02, -1.404888e-01, 6.382713e-02, -2.548228e-02, 2.494084e-02, 7.519423e-03, 6.418451e-02},
{-2.843447e-01, 2.738187e-01, 2.804442e-02, -2.562264e-01, -2.271634e-01, 8.500624e-02, 4.666313e-02, -9.871623e-02, 1.289975e-01, 2.696724e-02, 1.250072e-01, 3.890099e-02, -1.882994e-01, -1.836927e-01, -1.355023e-01, 3.517513e-02, 5.200621e-02, -4.452403e-02, -3.025707e-02, -5.741560e-02, -1.224783e-01, 7.191281e-02, 2.835878e-02, 1.170847e-01, 2.694168e-02, 1.732544e-01, 2.800029e-02, 1.613645e-01, 1.330338e-01, 8.589913e-02, 1.252175e-01, -1.152665e-01, -1.103656e-01, 1.297264e-01, 1.359338e-02, 1.937500e-01, 1.425302e-01, -4.169950e-02, -5.142665e-02, -1.645903e-02, -6.827342e-03, -1.773623e-01, -3.747229e-01, -7.586958e-02, -6.294399e-02, 5.244800e-02, 4.020864e-02, 1.219796e-02, 1.964468e-03, 9.549042e-02, -7.207268e-02, -1.761459e-03, -6.151997e-02, -1.306988e-01, 1.077118e-01, 2.933794e-01, 1.892561e-02, 1.050944e-01, -1.628335e-01, -7.371747e-02, 7.798619e-03, 2.811274e-02, 7.241066e-02, -4.632305e-02, 1.238406e-01, -1.816774e-01, 5.281322e-02, 1.019714e-01, -9.792967e-04, 8.462873e-02, 8.140682e-02, 2.257516e-02, -7.984333e-02, -5.762889e-02, -1.153516e-01, -1.280786e-01, 2.495341e-01, -2.865528e-02, 2.459848e-01, -1.069973e-01, -2.830580e-02, 2.488762e-01, 1.109969e-02, -1.163088e-02, -6.894667e-02, 1.137712e-01, -1.344941e-01, 2.288675e-01, -1.034349e-01, -8.086178e-02, 1.316850e-01, -9.624395e-02, 4.340547e-03, 1.346314e-01, 5.872594e-02, -4.919984e-02, 9.371307e-02, 1.827990e-01, -1.155119e-01, 8.704671e-02, 5.864015e-02, -1.446764e-01, 8.493715e-02, -5.549601e-02, 3.197701e-02, 1.943437e-03, 9.683721e-02, 7.627165e-02, 8.898030e-02, 2.553647e-02, -3.012288e-02, -1.068246e-01, -2.987224e-01, -1.822385e-02, -8.039751e-02, -4.525376e-02, 6.073471e-02, -9.586083e-02, 2.370770e-02, 9.634023e-02, -1.269822e-01, 1.748406e-01, -1.010151e-01, -8.738687e-02, -9.007978e-02, 1.184793e-01, -1.593535e-01, -5.740272e-02, -1.655058e-01, -1.157863e-02, -9.568972e-02, 1.079738e-02, -1.774419e-01},
{6.353308e-02, -4.452562e-02, -6.815846e-02, -1.441514e-01, -5.337412e-02, -5.913765e-02, 4.386155e-02, 2.195642e-02, -7.220866e-02, 1.676142e-02, 1.403060e-02, -1.240770e-02, -1.170838e-01, -6.392242e-02, 3.154588e-02, -9.816415e-02, -7.293729e-02, 4.617032e-02, -3.206225e-03, -2.313093e-02, -1.810030e-02, -1.113332e-02, -4.880677e-02, -6.993073e-02, 7.367005e-02, 5.291218e-02, -8.248142e-02, 6.085709e-02, -3.006920e-02, -1.683708e-02, -7.308428e-02, 1.338668e-02, -1.264808e-01, 3.227394e-02, 1.034919e-01, -7.157322e-02, 5.102934e-02, -1.035673e-01, 2.639636e-02, -8.067223e-02, 1.127407e-01, 9.603374e-02, 3.944822e-02, 2.630811e-02, -2.916010e-03, 7.009760e-02, -4.969720e-02, -3.399479e-02, -7.374781e-02, -6.948470e-02, -8.935347e-02, 1.236092e-02, 8.709360e-02, 1.299490e-01, -7.496609e-02, -7.696718e-03, 4.828348e-02, 1.821050e-01, 1.311790e-02, -6.094607e-02, 6.000429e-02, 3.991774e-02, 5.589581e-02, -4.641019e-02, 5.500532e-02, 5.256407e-02, 4.553979e-02, 6.585795e-02, 4.326082e-02, -7.779994e-02, -4.208883e-02, 6.614430e-02, 4.238077e-02, 5.764856e-02, -2.434895e-02, 9.078974e-02, 2.079699e-03, -3.183722e-02, 3.166463e-02, -4.967764e-02, 1.253051e-02, -4.207569e-02, 1.679914e-02, 6.896764e-02, -1.543463e-02, 4.356966e-02, 3.112363e-02, 7.244168e-02, 6.244797e-02, 9.094041e-02, -6.908309e-02, -6.623320e-02, 7.110990e-02, -1.603303e-01, -6.034663e-02, 1.025280e-02, -1.727941e-02, -2.901102e-01, 2.032023e-02, -5.447735e-02, 6.466295e-02, -5.218738e-02, 2.698149e-03, -7.259155e-02, 3.967376e-03, -5.812142e-02, -5.111120e-02, -2.216065e-03, -1.091598e-01, 3.118919e-02, 8.778259e-02, 2.254939e-02, 4.443590e-02, -7.556411e-03, -5.975806e-02, 9.978070e-02, -7.513563e-02, -5.685033e-02, 1.910494e-02, -6.704058e-02, 8.179983e-02, -2.893018e-02, -4.367506e-02, -7.697672e-02, -7.258109e-02, 3.629374e-02, 9.962532e-02, -4.149160e-02, 3.204847e-02, -4.576622e-02, 8.123334e-02, -5.551429e-02, 6.284510e-02},
{-1.124016e-01, 1.615251e-01, 2.605177e-01, 3.207622e-01, -2.550570e-01, 5.479431e-03, -1.853652e-02, 1.017650e-01, -1.230734e-02, 7.311251e-03, -1.801669e-01, 1.448059e-02, 1.871060e-01, 9.865155e-02, 1.180867e-01, -2.565895e-02, -7.533829e-02, 6.807427e-02, 5.338585e-02, 1.004870e-01, -2.948422e-02, -5.770393e-02, 1.950675e-02, -8.278342e-03, -3.114579e-02, -1.101707e-01, -5.274608e-02, -1.202862e-01, -5.874751e-02, 3.425004e-02, -1.059857e-01, 5.166722e-02, -4.520309e-02, -4.888149e-03, -2.321201e-01, -9.380759e-02, 1.446792e-01, 1.102558e-01, -2.632177e-01, 3.441366e-02, -1.117366e-01, 4.067917e-03, -1.051318e-01, -1.544749e-02, 5.747550e-02, -3.636734e-02, -1.084390e-01, -2.742431e-03, -1.014524e-01, -2.161878e-01, 1.399878e-01, -7.556073e-02, 5.020753e-02, 1.258383e-01, -8.639365e-02, -2.444992e-02, 1.745263e-02, -4.349200e-02, 5.713036e-02, -1.167346e-01, -2.687444e-02, -1.363230e-01, -1.846209e-01, 4.612655e-02, -1.116242e-01, 6.568501e-02, -3.408093e-05, 6.964822e-03, 6.947082e-02, -1.836862e-01, 1.722041e-01, 3.694407e-02, -2.192879e-01, -4.767823e-02, -1.418109e-02, 7.229455e-02, -5.158134e-02, 4.197491e-02, -1.169961e-02, 1.260583e-01, 2.066831e-01, -1.467829e-02, 7.804840e-02, -9.787095e-03, -6.432950e-02, -8.128291e-02, 3.845146e-02, -2.068637e-01, 6.058986e-03, 8.026314e-02, -5.729112e-02, 1.490653e-01, -3.978815e-02, 2.477014e-01, -6.203635e-02, 1.041741e-01, -9.139400e-02, 1.505868e-01, 9.632302e-02, -5.621272e-02, 2.891897e-02, -3.957053e-02, -6.870660e-02, -3.219767e-02, -2.762977e-02, -6.131698e-02, -7.143405e-02, -8.049677e-02, -9.881835e-02, -4.137978e-03, 1.739721e-01, 1.817885e-01, 1.216153e-01, -2.317468e-02, 1.189110e-01, 2.856458e-02, -3.270061e-02, 1.244804e-01, -8.707952e-02, 1.393808e-01, 1.251967e-01, -1.870234e-01, -1.220567e-02, 6.694751e-02, 6.622307e-02, -1.419584e-01, 1.508742e-02, -6.193361e-02, 9.943071e-02, -9.452729e-02, 4.125433e-02, -2.533842e-02, 1.435232e-01},
{7.623267e-02, -2.259387e-02, -2.195549e-02, 2.734201e-02, -2.442146e-01, -8.513938e-02, 9.860970e-02, -3.260931e-02, -9.531588e-03, 2.583983e-02, 7.704809e-02, 1.113743e-01, 1.597696e-03, 6.908707e-02, -5.300429e-02, -5.201402e-02, 5.479138e-02, -1.016737e-03, -6.347508e-03, -8.014682e-02, -1.512340e-02, -2.393789e-02, -5.869608e-02, -1.034782e-01, -2.161853e-02, 4.341507e-02, 4.096460e-02, 8.848779e-02, -2.215794e-02, -5.868471e-02, 4.637292e-02, 1.018929e-01, 3.483673e-02, 4.922812e-02, 4.877548e-02, 2.163262e-02, -4.380295e-02, -1.504347e-02, 2.978935e-02, 1.167610e-01, -1.821362e-02, -4.873120e-03, 6.150874e-03, -6.644586e-02, -1.585914e-02, 1.371851e-02, 5.283922e-02, 9.145717e-02, -1.640759e-02, -3.658429e-02, -1.301217e-01, 1.063901e-02, 6.002948e-02, 7.421015e-04, -1.277659e-02, -7.858790e-02, -3.202128e-02, -2.420806e-02, -1.053560e-01, -3.456404e-04, -7.891308e-02, 1.567262e-02, 1.816665e-02, 8.071302e-03, 3.432842e-02, 6.764856e-02, 4.985431e-03, 3.693707e-02, 5.499325e-02, -8.048633e-02, 3.522444e-02, -5.655555e-02, 1.222870e-02, -6.222574e-02, -6.134255e-02, 5.813484e-02, -3.100188e-02, -8.372876e-03, 9.613616e-02, -2.199593e-02, -6.413908e-02, 4.423686e-04, 6.522549e-02, 5.667103e-03, -2.150895e-02, -4.734115e-02, -9.005725e-02, -3.023591e-03, 3.017564e-02, -7.999770e-02, 2.851158e-02, 5.291332e-02, -1.016012e-01, 3.290233e-02, -8.189076e-02, -6.604303e-03, -2.603082e-02, 7.056643e-02, 9.546649e-04, 8.002626e-02, 9.596827e-03, 3.046602e-02, -2.473124e-02, -5.090759e-02, 1.710581e-02, -1.065319e-01, -4.546338e-02, 6.307518e-02, -7.119282e-02, 5.923419e-02, -3.267314e-02, -5.226935e-02, -1.487780e-01, -8.454448e-02, 5.188235e-02, -5.253481e-02, -7.050294e-02, -7.487673e-02, -4.041522e-02, -9.254552e-02, 6.558699e-02, 8.756941e-02, 5.443538e-03, -5.998772e-02, 4.881229e-03, 6.021909e-02, -5.392933e-02, -1.328630e-01, -7.297083e-03, 7.375689e-02, -3.204739e-02, -1.627377e-02, 1.504642e-02},
{2.124942e-01, 1.643177e-01, -1.791106e-01, 1.528291e-01, -1.058268e-01, -8.783808e-02, -2.843443e-01, 6.541159e-02, -1.996552e-01, 9.408907e-02, 9.593523e-02, -2.648098e-01, 1.804796e-01, 7.588638e-02, 2.087966e-01, -2.059129e-01, -6.431366e-02, 1.819013e-01, 2.598628e-01, 2.481653e-01, 1.193767e-01, -1.770543e-01, -1.969543e-01, 8.125167e-02, -2.464020e-01, -3.933259e-02, -2.547126e-01, -2.662660e-01, -2.101725e-01, -1.657469e-01, -1.909839e-01, 9.159191e-02, -1.073167e-01, -1.723835e-01, 2.422557e-01, -2.250767e-01, 1.748780e-01, -1.343416e-01, 2.485293e-01, -9.281337e-02, 6.412122e-02, 3.777719e-01, -6.624457e-01, -3.810504e-01, 3.298689e-01, 2.508164e-01, -2.788045e-01, -1.656102e-01, 2.745666e-01, 2.148069e-01, 1.137410e-01, -5.290087e-02, 6.795164e-02, 3.454285e-01, -2.320402e-01, -2.487032e-02, -9.938405e-02, 1.290984e-03, 1.817494e-01, -2.926199e-01, -8.832241e-02, -1.722787e-01, -1.212980e-01, 9.821384e-02, -1.641631e-01, 3.163905e-01, 1.316338e-01, -1.990157e-01, -1.679755e-01, -3.481630e-01, -1.179012e-01, -1.033266e-01, 7.969359e-02, 1.499208e-01, 2.364803e-01, 1.428324e-01, 3.855130e-01, 8.142783e-02, -3.052220e-01, 4.165983e-01, -3.645587e-01, -1.797525e-01, -1.106797e-01, 1.964744e-01, -4.827252e-02, -2.398558e-01, 1.636256e-01, -3.076157e-01, 2.756878e-01, 7.146668e-02, -2.311174e-01, -1.829594e-01, 9.952316e-02, 2.215020e-01, 3.013591e-03, 1.388861e-01, -1.736661e-01, -4.530158e-01, 2.111710e-01, -4.270568e-01, -1.277394e-01, -1.240473e-01, -2.275959e-01, 6.971203e-03, -6.905947e-04, 1.335628e-01, -9.082965e-02, -1.714270e-01, -6.132505e-02, 2.253490e-01, 2.670097e-01, 7.506255e-02, -1.096553e-01, -6.319142e-02, 1.445528e-01, 2.155973e-01, -1.615241e-01, 1.736379e-01, 6.033764e-02, 2.917417e-02, 9.236472e-02, -2.318844e-01, -1.609301e-01, -6.429739e-02, 1.152887e-01, -2.230171e-02, 3.950651e-01, 4.900720e-02, 3.768368e-01, -1.210916e-01, 1.330141e-01, 5.203287e-03, 3.073508e-01},
{4.383837e-02, -1.536296e-01, -1.880265e-01, 7.920866e-02, -1.126226e-01, 2.667013e-02, -5.473010e-02, 2.127869e-02, 6.754788e-02, -5.546635e-02, 6.408285e-02, 6.706394e-02, 4.399651e-03, -1.619771e-02, -5.248440e-02, 4.175184e-02, 2.872664e-02, 3.262542e-02, 1.207007e-02, -1.283621e-03, -5.333434e-02, 1.965122e-02, 8.063798e-02, -3.034916e-02, 2.303926e-02, 9.692178e-02, -7.093576e-02, -2.950064e-02, -3.535095e-02, 2.831360e-02, -9.141898e-04, 3.176373e-03, -4.647813e-02, 8.028512e-03, 1.233760e-02, -1.483075e-02, 7.587630e-02, 5.406007e-02, -6.897293e-02, -3.206101e-03, 5.837095e-03, 4.616979e-02, -1.502117e-01, 7.268794e-02, -2.393487e-02, 6.821457e-02, -1.549460e-02, 5.341288e-02, 6.699838e-02, -1.633903e-01, -3.446093e-02, 2.526953e-02, -3.484968e-02, -6.567299e-02, -2.824383e-02, -4.895037e-02, 3.068292e-02, -5.080325e-02, -8.404648e-02, -9.212370e-02, 3.498028e-02, -7.269277e-02, 6.218245e-02, 8.319659e-04, 1.181581e-01, 1.116441e-02, 2.402856e-02, -6.637989e-02, 8.521850e-03, -2.718106e-02, -9.945228e-02, 1.918698e-02, -1.460224e-03, -9.232313e-02, -1.058998e-01, -9.712919e-02, 1.281602e-01, 1.187718e-01, 8.282360e-02, -7.322711e-02, -2.936810e-02, 3.767701e-02, 1.417777e-02, -3.720586e-02, -5.668700e-02, 6.065786e-02, -8.749092e-02, 2.577569e-02, -1.101193e-01, -5.102837e-02, 6.129516e-02, -3.647796e-02, -2.773144e-02, 1.097176e-01, 4.543623e-02, 5.230941e-02, -1.160615e-02, -3.143127e-02, -1.631927e-02, 1.055785e-01, 2.186130e-02, -6.779308e-02, -8.256583e-02, 6.844816e-02, 4.447038e-02, 5.805131e-02, -3.299015e-02, 8.698937e-02, -1.615302e-02, 2.714657e-02, 1.006773e-03, 1.412302e-04, 1.370220e-02, -3.601302e-02, 1.653598e-02, -8.087603e-02, -1.792178e-02, 2.980429e-02, -9.638615e-03, -2.611721e-02, -4.181756e-02, 2.042601e-02, -8.853420e-02, -3.065318e-02, -1.795804e-02, 1.752783e-03, -6.123572e-02, -7.844427e-02, -7.258940e-02, -6.348552e-03, -4.965534e-02, -1.741631e-02, 6.096195e-02},
{8.663137e-02, -3.120201e-02, 5.294089e-02, -1.079042e-01, 4.895909e-02, 3.438310e-02, 8.869787e-02, -6.829794e-02, 8.060180e-02, 1.369326e-02, 8.255406e-02, -8.298453e-03, -6.294271e-02, 8.253992e-03, -8.509830e-02, -1.754213e-02, -5.166700e-02, 2.504060e-02, -6.807772e-02, -5.000568e-02, -8.169979e-02, 3.610898e-02, -3.214765e-02, 1.813031e-02, -4.878687e-02, 9.983882e-02, 3.237169e-02, -6.915542e-02, 4.082738e-02, -5.966202e-02, 7.155497e-02, 8.263204e-02, 6.358603e-02, -1.481575e-02, -9.517133e-02, 7.664707e-02, 6.884167e-02, 4.016638e-02, 9.323766e-03, 3.913618e-02, 9.608062e-02, -8.456483e-02, -1.174963e-02, 4.517734e-02, 7.103585e-02, 7.259984e-02, -7.912854e-02, 5.895561e-02, -1.026647e-01, -1.327191e-01, 3.899534e-02, 4.958003e-03, 7.799692e-02, -9.406496e-02, -2.583969e-02, -3.201729e-02, 5.994450e-02, -7.223855e-02, -5.789909e-02, 6.220588e-02, -2.852232e-02, -9.467357e-02, -9.540789e-02, 7.614682e-02, 6.175304e-02, -9.812069e-03, 3.929264e-02, 8.436581e-02, -3.476052e-03, 2.977462e-02, 7.467975e-02, -6.386895e-02, -1.702746e-02, -4.454021e-03, -1.650717e-03, 7.157751e-02, -5.744661e-02, -1.760408e-02, 1.112690e-02, 8.330669e-03, -1.833132e-02, -2.509055e-02, 2.844959e-03, -6.520727e-02, 8.876549e-02, -3.663138e-02, -5.314898e-02, 7.375036e-02, -2.136233e-02, -5.631326e-03, -2.978257e-02, 3.572937e-02, 2.978673e-03, 8.544111e-02, 2.479810e-02, 5.334108e-02, -6.403776e-02, -5.758025e-02, 3.311211e-02, -3.939720e-02, -6.128968e-02, 1.234831e-01, -2.370912e-02, -6.918377e-02, -3.855073e-02, -1.708494e-03, -1.024116e-02, -4.196567e-02, -6.244967e-02, 2.673697e-02, 2.136646e-02, 1.619563e-02, -8.489440e-02, 2.559714e-02, 2.263023e-02, 7.253543e-02, 2.480461e-02, 2.827988e-02, 5.193866e-02, 4.151797e-02, 5.704796e-02, -2.690041e-02, 4.591523e-02, -7.109293e-02, 5.279237e-02, 1.173137e-03, -5.620290e-02, 1.160898e-02, -5.738579e-03, 2.135122e-02, -5.673007e-02, 7.966661e-02, -1.469929e-02},
{8.048285e-02, -2.527207e-01, 2.909897e-02, 1.406032e-02, -4.677115e-02, -8.334614e-02, 7.837599e-02, 4.513520e-02, 1.668428e-01, -9.515459e-02, 9.966097e-02, 2.009120e-02, -7.417945e-02, 9.477980e-02, 5.326068e-02, -6.549659e-02, 1.669058e-01, -1.311564e-02, 1.752714e-02, 1.925168e-02, 7.351794e-02, 1.078867e-01, 1.226956e-01, -7.893511e-02, 4.839648e-02, -1.411420e-02, -1.184522e-01, 4.003266e-02, 5.493721e-02, -1.226465e-01, -2.261213e-01, 7.264139e-02, -1.130270e-01, 1.924442e-02, 9.974536e-02, -3.739250e-02, -8.092771e-02, -4.928518e-02, 7.851904e-02, 2.393510e-02, 1.600496e-01, -9.876721e-02, -3.567372e-01, -1.722412e-01, 4.961001e-02, 9.839178e-02, 6.741124e-02, -4.555987e-02, 2.093529e-01, -3.489671e-03, 1.172489e-01, -4.096104e-02, 4.717810e-02, -9.429876e-02, 2.369814e-02, 2.513106e-02, -7.981681e-02, 1.898875e-04, 6.693777e-02, -9.499802e-02, 6.341992e-02, -1.646408e-02, 7.488016e-02, -2.285201e-02, 3.052926e-02, -3.766086e-02, 1.206143e-01, -4.249856e-02, 2.257960e-02, 2.535038e-01, 8.825585e-02, -4.314209e-02, 1.123985e-04, -1.031815e-01, -8.887488e-02, 7.573950e-02, -7.860134e-02, 2.822425e-04, -5.055650e-02, -6.948677e-02, -2.308322e-01, -1.588009e-01, -1.107027e-01, -8.436011e-02, 2.027009e-02, 3.620473e-02, -2.371172e-03, -5.783944e-02, -2.098161e-03, 1.700059e-02, -5.623456e-02, 1.521067e-01, 2.599592e-02, 1.812424e-01, 7.317262e-02, -3.465787e-02, -3.151604e-02, -1.597565e-01, 1.011084e-01, 1.064987e-01, 5.529421e-02, -1.449016e-01, 3.354439e-02, -1.186015e-03, -2.297119e-01, -8.924840e-02, 1.516218e-01, -2.883701e-02, 1.032045e-01, 6.894550e-02, 1.683139e-01, -4.138761e-02, -7.206495e-02, 4.513685e-02, 4.721909e-02, 1.017157e-01, 1.018461e-01, -1.437345e-01, 1.479101e-02, -5.016542e-02, -5.585049e-02, -5.257593e-02, -2.509199e-01, -5.896224e-02, -1.061389e-05, -1.468489e-03, -1.120645e-01, 5.150034e-03, -6.153379e-02, -1.372801e-01, 3.425414e-03, -7.642980e-02, -1.298779e-02},
{3.739574e-02, 5.857965e-03, 3.250249e-02, 8.808440e-02, -6.320257e-02, -8.399202e-02, -7.200651e-02, 7.593933e-02, -6.563485e-02, -3.739115e-02, 6.457335e-02, 3.692644e-02, -2.581139e-02, 7.682353e-02, -8.863089e-02, -4.921740e-02, 3.026716e-02, 8.593195e-02, 6.772166e-02, 6.960448e-02, -1.242411e-01, -3.900012e-02, 3.275893e-03, -1.193428e-01, 7.051710e-02, 2.661984e-02, -2.855583e-03, 5.050131e-02, 2.431999e-02, 2.157582e-02, 3.534650e-02, -4.387705e-02, 3.904808e-03, -2.536848e-02, -4.845697e-02, -8.087162e-02, 2.231382e-02, -7.991072e-02, 7.810325e-03, 7.201927e-02, 8.520187e-02, 9.598838e-02, 1.142246e-01, 3.257775e-02, -2.111542e-02, -7.055903e-03, -5.782663e-02, 7.318410e-02, -3.344180e-02, -6.685066e-02, -5.341996e-02, 2.099644e-02, 7.834350e-02, 4.572576e-02, 4.232122e-03, -4.082336e-02, -3.115759e-02, -9.681351e-02, 2.245952e-02, -2.361943e-02, 2.272514e-02, -8.635002e-02, 2.254244e-02, -7.921400e-04, 7.220039e-02, -2.593459e-02, 6.684651e-02, 2.004548e-02, -2.609028e-02, -6.692828e-02, -1.442501e-02, 2.208819e-02, -1.939328e-02, 8.070218e-02, -6.934371e-02, 7.348540e-02, -6.897040e-02, 1.937933e-02, 6.881563e-02, 3.664386e-03, -2.904332e-02, 5.419798e-02, 3.839134e-02, -5.019340e-02, -2.314174e-02, -4.851781e-02, -6.501029e-02, 3.691360e-02, -3.272513e-02, 2.744215e-02, 6.659006e-02, -7.749435e-02, -9.614580e-02, -9.839980e-02, 2.054468e-03, 5.164912e-02, -4.943438e-02, -1.176989e-01, -6.515679e-02, 1.978321e-02, 6.477530e-02, 1.051361e-01, -7.440666e-02, -4.520126e-02, -7.122269e-02, 9.491295e-03, 2.856603e-02, -3.560238e-02, -2.463895e-02, 6.240013e-02, 1.038767e-01, 2.813410e-02, 9.877608e-03, 2.879419e-02, 9.846585e-02, 3.333014e-02, -6.984551e-02, 5.750952e-02, 8.481983e-02, -2.501281e-03, 5.419394e-02, -8.473334e-02, 7.824136e-02, 3.936934e-02, -2.285013e-03, 4.159740e-02, -4.867772e-02, -6.495906e-02, -6.827734e-02, -5.051563e-02, -1.437719e-02, 1.911589e-03, 2.080574e-02},
{1.724575e-01, -4.461303e-03, -2.273092e-02, -7.314163e-02, -4.066353e-02, -5.271232e-02, -1.007473e-02, -1.144528e-02, 6.102476e-02, -2.173847e-02, 2.841038e-02, 1.023101e-01, -1.174087e-02, 3.913704e-02, 2.310833e-02, -3.765467e-02, 7.548746e-02, -5.647362e-02, -7.104157e-02, 5.472595e-02, -7.768832e-02, 6.369583e-02, 2.111109e-02, 1.059079e-02, -3.610302e-02, -4.605511e-02, -6.958303e-02, 1.811192e-02, 4.475304e-03, 4.177500e-03, -6.413631e-02, 5.050050e-03, 4.480254e-02, -4.647621e-02, 1.585067e-02, -3.608629e-02, 3.673207e-02, 2.097816e-02, -1.723941e-02, 5.502074e-02, 1.143275e-01, -6.965879e-02, -1.013850e-02, -8.284178e-03, -1.013973e-01, 1.740352e-02, -9.274713e-02, -6.428123e-02, -4.232770e-02, -1.395480e-01, -1.294183e-02, 6.245416e-02, -9.953866e-03, 1.723418e-02, 8.897239e-02, -1.162876e-01, 8.062184e-02, -1.278249e-01, 2.029248e-02, 7.680070e-02, -9.973513e-03, -3.094942e-02, 1.478735e-02, 4.089313e-02, -1.298381e-03, -8.298057e-02, 5.429631e-02, -3.685304e-02, 7.563613e-02, -6.682394e-02, -2.885973e-02, -4.751667e-02, 3.743388e-02, -9.944832e-02, -6.639525e-02, 8.235057e-02, -7.756688e-02, 3.926689e-02, 5.129671e-02, -1.018385e-01, -3.295466e-02, 5.757881e-03, -7.037289e-02, 5.777265e-02, -5.942544e-02, 4.642025e-02, 7.097208e-02, 1.104864e-02, 8.150335e-02, -1.786042e-03, 4.205891e-02, 3.900664e-02, 9.785265e-02, 5.817432e-02, -6.906421e-03, -3.647919e-02, 3.982802e-02, 3.033275e-02, -2.350091e-02, 5.306015e-02, -3.563768e-02, 7.427049e-02, -5.553177e-02, 5.114431e-02, 5.722173e-03, -3.638121e-02, 1.533661e-02, 8.712387e-02, 1.186546e-01, 7.296187e-02, -2.755868e-02, -5.632687e-02, -1.163041e-01, 6.442888e-02, 7.002936e-02, 3.499869e-02, -3.222907e-02, 6.830379e-02, -4.489312e-02, 1.669402e-02, -8.444531e-02, 7.197337e-02, 6.097368e-02, 8.232834e-02, 7.639381e-02, 3.746224e-02, -5.418736e-02, -2.024599e-01, 1.738117e-02, -5.885483e-02, 7.284127e-04, 5.885592e-02, -9.121287e-02},
{1.285070e-01, -6.886405e-02, -9.924410e-03, -6.917299e-02, -1.195955e-02, -9.197818e-02, -8.187090e-02, 9.160321e-02, -5.899725e-02, 4.124149e-02, -8.061741e-02, 4.013234e-02, 3.135256e-02, 8.830370e-02, -6.307711e-02, -6.820929e-02, -4.286962e-04, 6.843197e-02, 8.881470e-02, 2.477033e-02, -3.258240e-02, 8.821012e-03, 4.822161e-03, 5.634513e-02, 2.917247e-02, -1.302992e-02, 6.523772e-02, -3.545801e-02, -4.989389e-02, -5.637478e-02, -7.410496e-02, -6.234791e-02, 3.715310e-02, 5.648422e-02, 7.388026e-02, -1.071853e-01, 6.149368e-02, -5.269889e-02, 9.935576e-02, 7.045174e-02, -3.180561e-02, 1.629266e-02, 8.252752e-02, -7.252370e-02, 9.598494e-02, -7.493893e-02, -1.131748e-01, 6.789068e-02, -3.060991e-02, -1.789303e-01, -3.230251e-02, 1.395097e-03, -7.311224e-02, 3.269893e-02, 4.463188e-02, -1.848114e-01, -5.175517e-02, 2.498424e-02, 3.459611e-03, -7.028733e-02, 1.586734e-02, -3.267375e-02, -6.156828e-02, 7.414339e-02, -9.666197e-02, 1.056124e-01, 1.208583e-02, -7.930252e-02, -8.228806e-02, -8.352243e-03, 4.300061e-03, -4.313934e-02, -3.798781e-02, -6.013648e-02, -4.330373e-02, 8.425767e-02, -7.639859e-02, 2.239917e-02, 4.335484e-02, -5.332454e-02, 4.942840e-02, 4.579108e-02, -6.686972e-04, 7.404882e-02, 8.763153e-02, -9.957262e-02, -4.634433e-02, -5.894948e-02, 2.030226e-02, -3.749228e-02, -9.134342e-03, 6.033234e-02, -7.782523e-02, 9.532204e-02, -4.227560e-02, -4.247678e-02, -6.672914e-02, -7.583977e-02, 2.825483e-02, 1.238208e-02, -7.028528e-02, 1.146648e-01, -7.696684e-02, -6.766884e-02, -6.415367e-02, -1.050526e-01, -7.076030e-02, -9.632880e-02, 4.656813e-02, -3.485234e-02, -4.651906e-02, 1.426477e-01, 6.629720e-02, -7.595962e-02, 6.915193e-02, 4.401616e-02, -4.749927e-02, 1.048363e-01, -4.050504e-02, 5.292627e-02, 1.723210e-02, 5.488055e-03, 1.029885e-01, 8.957379e-02, -2.993940e-02, 2.798479e-02, -3.616030e-02, -1.365081e-01, -4.100600e-02, 9.027048e-03, 6.577379e-02, -5.806103e-02, -3.952547e-02},
{7.767230e-02, -6.960770e-02, -2.669311e-02, 5.326586e-02, 1.724407e-02, 7.679011e-03, -9.003365e-02, -2.518827e-02, -4.269247e-02, 2.947727e-02, 1.057887e-01, 2.181008e-02, -9.219605e-02, -4.735661e-02, -2.034853e-02, 2.754333e-02, 6.719860e-02, 6.554475e-02, 6.057984e-02, -6.064164e-02, -8.756983e-02, 8.847465e-03, 4.471621e-02, -1.651871e-03, 6.729375e-02, -2.143445e-02, -2.459370e-04, 4.150897e-04, -6.400282e-02, -5.321162e-02, 5.738366e-02, -2.652850e-02, -5.209875e-02, 9.713854e-02, 1.006665e-01, -8.742771e-02, -2.787263e-02, 4.373772e-02, 3.174207e-03, -5.741833e-02, 7.250669e-02, 1.586928e-02, 7.791541e-02, 6.193038e-02, -7.794825e-02, 4.128485e-02, -1.581609e-02, 7.018770e-02, 2.368644e-02, 1.019891e-01, 3.627922e-02, -2.133964e-02, 1.756722e-02, -1.238089e-02, 1.303451e-02, -8.511227e-02, -4.423632e-02, -3.721523e-03, 3.373077e-02, 1.081055e-01, -2.966973e-02, -7.696705e-02, 4.130256e-02, -6.360828e-02, 7.403074e-02, 4.774978e-02, 3.384845e-02, -5.571818e-02, 1.682875e-02, -9.143569e-02, 4.803947e-02, 5.122726e-02, -5.102279e-02, -2.169343e-02, -6.109836e-02, -3.002630e-02, -7.320913e-02, -5.572498e-03, -5.507307e-02, 5.503224e-02, 2.284101e-02, -8.503636e-02, 7.884250e-02, 2.351765e-02, 5.076192e-02, 9.558259e-02, 6.176458e-02, 1.281919e-01, 3.872310e-02, -4.486346e-02, -7.057332e-02, -1.139824e-01, 5.161103e-02, -8.960450e-02, -8.987004e-02, -4.094073e-02, 5.758758e-02, 7.446117e-03, -5.512255e-02, 4.018854e-02, -4.350665e-03, 5.456747e-02, -7.710014e-02, -1.876284e-02, 1.807598e-02, -4.301345e-02, -5.229431e-03, -8.442578e-02, -1.996111e-02, 4.501355e-03, 4.012080e-02, 7.053585e-02, 7.120914e-03, 3.707575e-02, 7.148363e-02, -1.451772e-02, 1.951233e-02, -6.546941e-02, 3.440452e-02, -8.409247e-02, 4.931638e-02, -6.908961e-02, 3.165751e-02, 2.738684e-02, -6.778999e-02, -4.405553e-02, 7.571017e-02, 2.091314e-02, 6.243921e-03, -5.120771e-04, 7.698554e-02, 3.996991e-02, -5.909165e-02},
{-2.310818e-02, -4.749190e-02, -5.524551e-02, -6.001802e-02, -8.164012e-02, -4.396693e-02, -7.351451e-02, 5.287059e-03, 9.013325e-02, -7.492461e-02, 7.852075e-02, -5.595355e-03, 5.572788e-02, 4.115823e-02, -7.611273e-02, 7.699609e-02, -5.746989e-03, 6.109855e-02, -6.103521e-02, 3.192398e-02, -9.634120e-02, 4.861727e-02, -7.794455e-02, -9.099372e-03, 8.430594e-02, 5.738803e-03, 2.654629e-02, -5.772637e-03, 1.839513e-02, 1.636668e-02, -5.366713e-02, -4.175699e-02, -1.062606e-02, -2.464359e-02, 4.515988e-02, -5.565896e-02, -4.483742e-02, -1.081540e-01, 7.654303e-02, 2.380917e-02, 1.417560e-01, -1.041003e-02, 2.909223e-01, 8.020121e-02, 6.626771e-02, 6.458345e-02, 7.166129e-02, 6.469353e-02, -1.351699e-02, -6.645766e-02, 3.744357e-02, -2.639676e-02, 7.982527e-03, -9.428284e-02, 4.548241e-02, -1.016819e-01, -5.701213e-02, -1.154339e-01, 3.426056e-02, -4.369782e-02, 4.039587e-02, -5.005893e-02, -9.249750e-02, 4.414782e-02, 2.493587e-02, 6.537244e-02, 8.323030e-02, -6.339991e-02, 7.386906e-02, -9.836309e-02, -6.173846e-02, -5.165295e-02, -9.406303e-02, -8.043380e-03, -5.265532e-02, 1.014170e-02, -2.609529e-02, 5.259360e-02, 5.443848e-02, -9.856794e-02, -8.310258e-02, 3.094299e-02, 7.193255e-02, 6.422698e-02, 8.202784e-02, -6.420052e-02, -5.668857e-02, 1.362091e-01, -7.530899e-02, -5.935543e-02, 2.612074e-02, 7.909552e-02, -3.489391e-02, -8.364539e-02, 3.898723e-02, -7.453416e-03, 6.368804e-02, 6.486282e-03, 4.692925e-02, 4.867087e-03, 8.709945e-02, 6.040733e-02, -6.583309e-02, 6.176741e-02, -2.915571e-02, -2.785596e-03, 4.582987e-02, 3.440722e-02, 1.371970e-02, 5.426209e-02, 1.172250e-02, 9.378950e-02, 4.854155e-02, 3.926307e-02, 2.994096e-02, 4.291977e-02, -6.846390e-02, 6.874578e-02, 8.059882e-02, 6.468167e-02, -2.542993e-02, 4.966298e-02, -2.526298e-02, 1.329760e-02, 3.513588e-03, -2.946831e-02, 7.454278e-03, -3.415359e-02, -8.865155e-02, -1.754441e-02, -5.955584e-02, 3.681633e-03, 4.061114e-02},
{3.011660e-02, -4.234817e-02, -1.119943e-02, -6.222773e-02, -1.299867e-01, 3.689534e-03, -4.052738e-02, 2.089111e-02, -7.785793e-02, 1.210102e-03, 8.426112e-02, -5.560391e-02, 2.815113e-02, -5.233745e-02, -4.055486e-02, -1.578377e-02, -2.776067e-02, 3.594998e-02, -8.898241e-03, -2.289421e-02, 2.308748e-02, -4.061867e-02, 5.810996e-02, 5.847580e-02, -5.052241e-02, -5.774920e-02, -1.806341e-02, -2.066695e-02, 8.651078e-02, -1.711576e-02, 6.292374e-02, -7.852872e-02, -4.992403e-02, 6.197489e-02, -1.036889e-02, -8.304676e-02, 4.039691e-02, 1.768559e-02, 5.161282e-02, 7.548537e-03, -1.582665e-02, -5.820981e-02, -1.885974e-01, -6.871592e-02, -7.026667e-02, -9.442031e-02, -6.951922e-03, -2.729665e-03, -7.428887e-02, -3.437980e-02, -3.557264e-02, 1.668339e-02, -6.273718e-02, -7.934539e-02, 4.910586e-02, 1.216798e-02, 1.000181e-02, -1.854231e-01, -8.960319e-02, -6.768689e-02, 6.851505e-02, -6.294658e-03, -4.587533e-02, 3.824450e-02, -3.753116e-02, 3.400485e-02, 8.189103e-03, 6.529610e-02, -7.658009e-02, -1.237621e-01, 4.362845e-02, 5.845514e-02, -4.650414e-02, 5.254513e-02, -1.099926e-02, 8.557258e-02, -7.751646e-02, -2.623753e-02, -2.075702e-02, -7.370694e-02, -8.693922e-02, -3.938720e-02, -9.404156e-02, 6.436248e-03, -5.004794e-02, -4.267288e-02, 3.788169e-02, 4.277392e-02, 3.187686e-03, 5.760465e-02, 8.293151e-02, -4.465918e-02, -5.077022e-02, 1.240304e-01, -1.386448e-02, 2.117342e-02, -1.180100e-02, -2.042023e-02, 2.424424e-03, -7.232845e-02, -2.440914e-03, -1.677110e-02, -9.789228e-02, 6.796282e-02, 3.370268e-02, 1.662069e-02, 7.354417e-02, -6.785233e-02, -1.377651e-02, 6.455962e-02, -9.049632e-02, 6.964546e-02, -6.114941e-02, 3.541735e-03, -6.016752e-02, -2.379318e-02, -6.805226e-02, -7.191020e-02, -4.373128e-02, -4.643610e-02, 6.195506e-02, -4.177157e-02, 9.617868e-02, -2.879671e-02, -4.889293e-02, -5.884816e-03, -8.865759e-02, -1.057322e-01, -9.128852e-02, -5.144176e-02, 3.760462e-02, 7.662673e-02, -6.229565e-02},
{1.027767e-01, -1.438511e-01, 5.366258e-02, 1.231972e-02, 5.543579e-01, -7.893144e-02, -1.587844e-01, 3.513050e-02, -3.311532e-02, 5.042666e-02, -2.759204e-01, -3.413664e-01, 1.327274e-02, 4.443115e-02, 1.538843e-01, -1.301256e-01, 1.617154e-01, 7.064418e-02, 1.745857e-01, 1.576120e-01, 1.790441e-01, -1.778182e-01, 2.892352e-01, -1.914529e-01, -3.427416e-02, -2.106835e-02, -2.019828e-01, -2.441172e-01, -2.151990e-01, -3.100458e-01, -1.991941e-01, -6.927479e-02, 2.266847e-02, -9.116883e-02, -5.117536e-02, -2.652670e-01, -1.004494e-01, 2.629646e-01, -9.626687e-02, -7.705566e-02, -2.111696e-01, 3.846409e-01, -2.435105e-01, 3.885334e-02, 2.027334e-01, 2.088940e-01, -2.419317e-01, -1.734839e-01, 1.143455e-01, -2.298971e-01, 2.371955e-01, -1.204522e-01, 3.493924e-01, 3.970217e-01, -1.401685e-01, 1.280856e-01, 1.642225e-02, -1.473576e-01, 1.902693e-01, -5.144290e-02, -3.886864e-02, -1.163926e-01, -2.561796e-02, 2.856749e-01, -1.635401e-01, 2.386143e-01, 5.217771e-02, -1.091407e-01, -1.768364e-02, -2.248350e-01, 2.401176e-01, 8.405114e-02, -1.986949e-01, -6.525034e-02, 1.763938e-01, 2.526279e-01, 5.573105e-02, 9.559172e-02, -2.754526e-01, 1.731945e-01, 5.280643e-02, -2.742972e-02, -1.322558e-01, -2.988567e-03, -6.579119e-03, -1.652144e-02, 1.426932e-01, -1.684438e-01, 3.096447e-01, 5.865594e-03, -8.336169e-02, 7.840884e-02, 2.682943e-01, 3.260548e-01, 2.954240e-02, 7.181406e-02, -3.194878e-01, 2.925141e-01, 1.103712e-01, -2.777540e-01, -7.236195e-02, -7.986514e-02, 1.037581e-02, 5.796827e-02, -2.385611e-01, -1.274424e-01, 4.331642e-02, -7.684183e-02, -2.218586e-02, 1.221118e-01, 3.246262e-01, 2.147891e-01, 7.051984e-02, 1.297997e-01, -3.795949e-02, 1.730209e-01, 3.171934e-03, 1.107102e-01, 1.130386e-01, 3.302408e-03, 2.199297e-01, -8.001473e-02, -3.521884e-01, -6.514744e-02, 2.520235e-01, -9.707649e-02, 2.955526e-01, -4.793597e-01, 2.624533e-01, 8.351000e-02, 8.742888e-02, 1.333793e-01, 1.813746e-01},
{-1.457599e-01, -2.023575e-02, -1.109007e-01, -7.034085e-02, -3.021134e-01, 5.422861e-02, 6.977942e-02, 9.819362e-03, -1.578850e-02, 7.256567e-02, 3.127017e-02, -3.085595e-02, -1.025627e-01, 4.405759e-02, -4.586728e-02, -3.042180e-02, 1.198495e-01, 3.916293e-02, 2.431636e-02, 3.891602e-02, -8.847804e-02, -3.926372e-02, -5.441159e-02, 1.211022e-01, 1.475602e-02, 3.625035e-02, 1.388355e-02, 3.041192e-02, 3.093373e-02, -8.784885e-02, -6.308233e-02, 8.079165e-02, -1.412332e-02, 2.617539e-02, 1.532252e-01, -6.430376e-02, -1.711192e-01, -2.384246e-02, 2.328222e-01, 3.059602e-02, 2.446447e-01, 5.902292e-02, -6.070533e-01, -1.987225e-01, -9.646063e-02, -3.130899e-02, -1.844957e-02, -8.225073e-03, 2.263833e-01, 2.268204e-01, -4.799600e-02, 8.690321e-02, 8.668524e-02, 5.634768e-02, -3.548559e-02, 1.893999e-01, 6.509037e-02, 1.057068e-01, 5.651977e-02, 3.297042e-02, -8.700347e-02, 6.524466e-02, 2.673100e-02, -4.863917e-02, 4.807545e-03, -3.889481e-03, -2.389120e-02, 4.351635e-02, -8.959696e-02, 1.970584e-01, -3.619582e-02, -6.077559e-02, -6.681897e-02, -1.304479e-01, -1.159051e-01, -6.246863e-02, 4.123923e-01, 2.016533e-03, 5.788924e-02, 3.855563e-02, -9.243936e-02, 3.255614e-02, 3.673008e-02, -5.582765e-02, -8.626585e-02, 2.623345e-02, -2.700922e-02, 2.105303e-01, -4.429310e-02, -9.914371e-02, 4.481467e-02, -7.781299e-02, 2.572757e-01, 4.714913e-02, 3.938280e-02, -5.896774e-02, 2.773982e-02, -1.493914e-01, 2.135154e-02, -5.558131e-02, -7.963890e-03, -2.026266e-01, 5.039398e-02, 5.704340e-02, -8.085782e-02, -8.114246e-02, -7.044484e-02, 5.226265e-02, -1.159467e-02, -3.583590e-03, 3.103320e-02, -1.108964e-01, -4.253253e-01, 4.233523e-02, -5.883430e-02, 3.442470e-02, -6.200188e-02, 3.166572e-02, 2.576901e-02, -3.246504e-02, -7.738689e-02, 5.305150e-02, -1.600130e-01, 2.342713e-02, 8.318245e-02, 1.957461e-01, 6.029512e-02, 2.581296e-01, -3.266255e-02, 3.911562e-02, 9.424943e-03, 1.382433e-01, -1.352807e-02},
{2.725315e-03, 1.941737e-02, -6.308447e-02, -4.932027e-02, -8.230504e-02, -6.795341e-02, 1.764554e-02, 6.825902e-02, 2.687035e-02, -8.258901e-02, -6.295509e-02, 2.802817e-02, 4.653670e-02, 3.171648e-02, -7.130298e-02, -4.553202e-02, 3.336408e-02, -4.333436e-03, -7.174980e-02, -2.578770e-02, 6.747302e-02, 5.731824e-04, 9.015701e-03, -1.800562e-02, -2.771128e-02, -3.179485e-02, 8.284576e-02, 6.783865e-02, 7.551128e-03, -2.226802e-02, -3.235255e-02, 4.158171e-02, 7.376652e-02, 2.408500e-02, 4.006730e-02, -3.777962e-02, -4.961372e-02, 1.035302e-02, -7.743353e-02, -4.403245e-02, 7.818971e-03, 3.925695e-02, -1.076821e-01, -3.872206e-02, 2.030653e-02, -3.379552e-02, -8.528493e-02, 3.725745e-02, 7.449296e-02, -1.298941e-01, -4.817432e-02, 5.013586e-02, -2.798251e-02, -4.288630e-02, -3.756400e-02, 9.312148e-03, -6.562270e-02, -6.018351e-03, -3.918771e-02, 1.441346e-03, -2.527552e-02, -4.277920e-02, 1.126010e-01, 2.613322e-02, -3.867177e-02, -8.862510e-02, 4.396734e-02, 2.059419e-02, -3.148642e-03, 9.348138e-02, -2.628973e-02, 6.119718e-02, -3.099106e-02, -6.064143e-03, -4.181201e-02, 3.762486e-02, -4.092013e-02, -6.062031e-02, 3.029568e-02, -1.167315e-01, -7.826474e-02, -8.292384e-02, 1.686120e-02, -6.985232e-02, 4.227977e-02, -3.896083e-02, 1.369281e-02, 8.567633e-02, -9.186760e-03, -7.016795e-02, -7.984465e-02, 7.807387e-02, 9.867134e-02, 1.199489e-01, 6.964359e-02, -6.576344e-02, 3.712477e-02, -9.667312e-02, -7.942247e-02, 6.276811e-03, -3.538245e-02, 8.404826e-02, -1.604226e-02, 2.223336e-02, -5.851397e-02, 6.021278e-03, -2.421400e-02, -4.626898e-02, -9.301311e-02, 6.788521e-02, -7.662274e-02, -5.762262e-02, -6.926406e-02, 8.203160e-02, 6.634513e-02, 6.577870e-02, 1.689319e-02, 6.806125e-02, 2.504303e-02, -2.518491e-02, 7.915189e-02, 6.213235e-02, -3.349853e-02, 2.168205e-02, 7.002221e-02, -3.605082e-02, -2.989883e-02, -1.545528e-01, 5.069049e-02, 7.722903e-02, -4.079328e-02, 5.823380e-02, -6.381177e-02},
{-1.064020e-01, -2.726073e-01, 3.853136e-04, 6.851318e-02, 3.551671e-02, -9.742470e-02, -1.423997e-02, -3.270118e-02, 6.639443e-02, 4.213985e-02, -1.594598e-02, -5.974302e-02, -3.168631e-02, -5.585216e-03, 7.598746e-02, -1.520144e-01, 1.462197e-01, 8.553433e-02, -6.460464e-03, -6.123837e-02, 1.054266e-01, -1.066574e-01, 6.386432e-02, -8.326443e-02, -1.153257e-02, 4.905953e-02, -2.077483e-01, -1.043296e-01, -8.395448e-03, -9.935024e-02, -1.952910e-01, 5.817745e-02, -1.116903e-01, -7.402045e-02, 1.891314e-01, -4.659043e-02, 1.332550e-01, 1.128365e-01, 8.255505e-02, -9.042338e-02, 5.846121e-02, 7.125042e-02, -2.452459e-01, -2.247141e-01, 3.968148e-02, 2.234329e-02, -2.677375e-02, -1.429260e-02, 3.779593e-01, 8.006465e-02, 2.892133e-02, -1.002657e-01, 6.065020e-02, 9.769976e-02, -6.431002e-02, 4.616022e-02, 1.019987e-02, -2.242691e-02, 1.475073e-02, -1.339897e-01, -1.124267e-01, -2.370402e-02, -2.141844e-02, 3.750170e-02, -8.701551e-03, 2.934241e-02, 7.672254e-03, -3.315770e-02, 2.972991e-02, -3.778575e-02, 1.734650e-01, -5.297006e-02, 1.017014e-01, -6.226314e-02, 9.738293e-02, 1.498663e-01, -1.355055e-02, 1.784983e-01, -8.396675e-02, -2.065123e-02, -2.124737e-01, -2.347807e-01, -4.323381e-02, 5.863945e-02, 1.557211e-02, -9.514309e-02, -4.486488e-03, -2.897301e-02, 1.295710e-01, 5.356022e-02, -3.014422e-02, -2.103744e-02, 2.584568e-02, 2.290540e-01, -7.563540e-02, 4.405573e-02, -1.761709e-02, -1.393686e-01, 2.640464e-02, -5.207398e-02, -3.543117e-02, -1.950452e-01, 4.202700e-02, 4.010691e-02, -1.852787e-01, 4.913071e-02, -1.741155e-02, -2.606374e-02, -2.595396e-02, 8.488482e-02, 3.274621e-01, -7.725671e-02, 4.948318e-02, -2.030758e-02, -9.485267e-02, 1.191364e-02, 6.678241e-02, -4.109441e-02, 3.605701e-02, 5.915688e-02, 2.039039e-02, 2.838491e-02, -1.110327e-01, 6.393332e-02, 4.321456e-02, 1.018509e-02, 3.970021e-02, 4.308347e-03, -3.340790e-02, -2.759534e-02, 3.132918e-02, -1.429258e-01, 8.324681e-02},
{8.723060e-02, -1.691925e-01, -2.544219e-02, 4.041830e-02, 2.471436e-02, -8.071184e-03, 3.976601e-02, -1.902596e-02, -4.156144e-03, -2.629045e-02, 4.436418e-02, -3.158250e-02, -3.824423e-02, -3.935547e-02, -9.438440e-02, 1.365457e-03, -1.111777e-02, -9.052890e-03, -2.107457e-03, -4.622611e-02, -8.165316e-02, 1.591097e-02, 1.067588e-01, -8.465011e-02, 7.394710e-02, -6.277415e-03, -6.185655e-02, 3.665696e-02, -5.029506e-02, -4.776699e-02, -4.963856e-03, 7.656169e-02, -7.054786e-02, -3.127268e-03, -1.603542e-02, 1.124421e-02, 2.193464e-02, -5.257827e-02, -4.235791e-02, -7.101651e-02, 7.483662e-03, 4.765036e-02, 1.756771e-02, -5.115274e-02, 1.888723e-02, -3.219313e-02, -7.605013e-02, 8.514778e-02, 9.936815e-02, -7.208196e-02, -7.008078e-02, -7.928858e-02, -3.482928e-02, 9.482280e-02, 7.839920e-02, -1.069601e-01, 5.538555e-02, 8.690586e-02, 5.480289e-02, -1.538701e-02, -3.273693e-02, 5.325118e-02, -1.924436e-02, -5.877221e-02, 3.154257e-02, -1.842995e-02, 1.884400e-02, -7.343450e-02, -3.398768e-04, 7.148274e-02, -3.361528e-02, -6.107670e-02, 1.317783e-01, -7.692158e-02, -5.411329e-02, -4.254083e-02, -1.615924e-01, -8.295085e-02, -1.182909e-01, -7.446402e-02, -5.585235e-02, -2.412666e-02, 5.695341e-02, 1.322625e-02, -9.522073e-03, -6.056203e-02, -1.786113e-02, 1.276955e-01, -7.240834e-02, -8.055528e-03, -8.470552e-02, -3.680268e-02, 1.847618e-02, 2.371175e-01, -4.257298e-02, -3.246765e-02, 6.650700e-02, 2.392118e-02, 7.011417e-02, 8.254666e-02, 3.913555e-03, -9.478325e-03, 2.878065e-02, -4.861513e-02, 2.088230e-02, -6.167263e-02, 7.827727e-02, -3.178364e-02, -5.167874e-02, 5.324619e-02, 6.703637e-02, -3.800059e-02, -1.266650e-01, -5.519211e-02, -2.279053e-02, -3.273348e-03, 2.680294e-02, -2.110383e-02, 4.956421e-03, 2.211598e-02, 9.750607e-03, 1.058345e-01, -1.971899e-02, -3.026236e-02, -3.242496e-02, -4.193890e-02, 1.310358e-03, -2.084935e-01, -6.896169e-02, -1.606476e-02, 1.023396e-02, -3.630105e-02, 3.607238e-02},
{1.774217e-01, 1.503223e-02, -3.896832e-02, 6.578410e-03, 9.074766e-03, -6.379994e-02, -3.069722e-02, 6.322868e-02, -1.014518e-01, 4.033847e-02, -4.080395e-02, 7.765292e-02, 3.044388e-02, 4.569791e-02, -8.028580e-02, -1.911375e-02, -2.188360e-02, -6.047706e-02, -3.652802e-02, 7.843545e-02, -1.489052e-01, 2.535064e-03, -3.724866e-02, -5.526341e-02, 2.654729e-02, -4.372437e-02, -1.306399e-02, 3.730398e-02, -9.332913e-03, 3.337207e-02, 2.864115e-02, 5.577975e-02, 4.744180e-03, 6.227424e-02, -9.315807e-02, -7.446127e-02, 7.068048e-02, -6.418919e-02, 1.533101e-01, 4.875181e-03, -1.096177e-02, -2.432067e-02, 1.329044e-01, -6.779834e-02, -3.963571e-02, -5.840563e-02, 2.361248e-02, -6.263274e-02, -3.844467e-02, -1.336422e-01, -5.126960e-02, 6.084877e-02, -1.233914e-02, 5.066228e-03, 4.200558e-02, -1.140793e-01, 2.704288e-02, -1.527261e-01, 4.525749e-02, 4.239353e-02, -5.905243e-02, -5.412357e-02, 6.293816e-02, -1.508147e-02, 8.750241e-02, -3.037555e-02, -9.293105e-02, 4.313367e-02, 7.081942e-02, -4.731549e-02, -6.656866e-02, -5.707284e-02, -4.207189e-02, 1.861518e-02, -5.995058e-02, 5.226694e-03, -3.309257e-02, 4.806223e-02, -2.183497e-02, 6.695873e-02, -4.440092e-02, 8.252099e-03, -5.482347e-02, -5.717142e-03, -4.980573e-02, 7.935797e-03, 5.779678e-02, 2.904766e-02, -5.200865e-02, 7.591804e-03, -6.374866e-03, 4.234295e-02, 2.425257e-02, -3.438850e-02, 4.886758e-02, 3.626290e-02, 4.792677e-02, -7.728559e-02, 2.201469e-02, -7.099828e-02, 1.772111e-02, 1.246606e-01, -8.682796e-02, 6.758946e-03, 7.073839e-03, -7.930889e-02, -4.389384e-03, -3.994329e-02, 8.501597e-02, 7.039936e-02, 3.857744e-02, 5.355113e-02, -3.280271e-02, -1.836528e-02, -7.272221e-02, 4.155416e-02, 8.409160e-02, 8.287521e-02, -9.338738e-02, 3.033283e-02, -1.990767e-02, -4.996514e-02, 3.144398e-02, 3.085460e-02, 7.009210e-02, 5.885838e-02, 1.696127e-02, -1.222997e-01, -5.942520e-02, 1.903128e-02, 1.063880e-02, 5.797980e-03, 6.227214e-02},
{1.339656e-02, -9.456810e-02, -2.473383e-02, 1.041897e-02, -7.274693e-02, -8.901984e-03, -6.792987e-03, -7.677320e-02, 7.282435e-02, 4.752649e-02, 5.347031e-02, -3.596712e-02, 7.696070e-03, -3.972055e-02, -2.155828e-02, 2.895593e-02, 6.718873e-02, 3.132118e-02, -6.154293e-02, -1.160556e-02, -1.302472e-01, -3.845504e-02, 3.806727e-02, -7.581346e-03, 5.003465e-02, -6.628366e-02, -2.239527e-02, 7.003686e-02, 4.790437e-02, 4.344535e-02, 8.683147e-02, -3.725937e-02, 5.621950e-02, 1.025442e-01, 3.115036e-02, -6.190499e-02, -3.586226e-02, 5.941894e-02, 8.679312e-02, 9.303804e-02, 7.316351e-02, 4.048977e-02, 1.801928e-01, -1.273942e-02, -2.531219e-03, -5.337886e-02, 5.190285e-02, 6.590676e-02, -6.645397e-02, -1.052953e-01, 2.219150e-03, -7.624110e-02, -5.550107e-03, -4.846364e-02, 3.872303e-02, 5.263420e-02, -1.721142e-02, -9.784158e-02, 3.856862e-02, -1.764082e-02, 5.983858e-02, 7.056951e-02, 6.904693e-02, 2.389476e-02, 5.258955e-02, -3.674927e-02, -5.818813e-02, -2.055875e-03, 7.782295e-02, -4.961955e-04, 3.699511e-02, -6.737035e-03, -6.509890e-02, -3.830026e-02, 9.122732e-02, 1.074483e-02, -8.061700e-02, -5.107099e-03, -5.905427e-02, -6.388665e-02, 6.710588e-02, 1.279359e-02, 2.350921e-02, -1.043434e-02, 1.498553e-02, -4.793061e-02, 6.967798e-02, -2.468678e-03, -2.727741e-02, -3.898457e-02, 6.405920e-02, 2.260512e-02, 8.137180e-02, 1.712860e-01, 5.619284e-02, -6.754809e-03, 8.378432e-03, 1.125890e-02, 4.864409e-02, 3.506587e-02, -4.489541e-03, 9.519003e-02, 4.954334e-02, -3.906810e-02, -3.447429e-02, 4.132599e-02, -3.277854e-02, 2.995756e-02, -8.081519e-02, 6.275858e-02, -5.894230e-04, 5.517094e-02, -6.148739e-02, 7.346120e-02, 4.372517e-02, -1.157263e-02, 6.894465e-02, -3.274305e-02, -5.025309e-02, 1.583565e-02, 3.138842e-02, 7.014637e-02, -6.509718e-02, 8.258718e-02, 5.847427e-02, -7.486589e-02, -6.762639e-02, -5.337927e-02, 1.232222e-02, -3.584561e-02, 7.694623e-02, -2.442990e-02, -1.493862e-02},
{2.184479e-01, 2.901539e-01, 1.691315e-01, 1.222294e-01, -2.461693e-01, -4.819382e-01, -2.572760e-01, 1.734124e-01, -1.916523e-01, 3.403276e-01, -2.916174e-01, -4.064031e-01, 3.235442e-01, 3.443983e-01, 4.398935e-01, -3.764601e-01, -2.432703e-01, 3.675195e-01, 3.381103e-01, 3.924513e-01, -1.408744e-01, -2.427995e-01, 2.867978e-02, -6.169859e-02, -3.070278e-01, -3.660516e-01, -3.875030e-01, -2.988333e-01, -2.277662e-01, 1.544014e-02, 2.531098e-02, 2.459862e-01, -2.113916e-01, -3.478472e-01, 2.229654e-01, -3.786350e-01, 2.507805e-01, -2.515612e-01, 4.864201e-01, -3.109916e-01, 2.764796e-01, 2.959593e-01, -5.477152e-01, -1.155715e-01, 4.417567e-01, 9.846237e-02, -1.135128e-01, -4.571343e-01, 3.623248e-01, -1.247542e-02, 1.254445e-01, -2.623291e-01, 1.420436e-01, 2.344732e-01, -4.555257e-01, -2.076519e-02, -1.858808e-01, -1.831225e-01, 3.421950e-01, -6.671626e-01, -3.225090e-01, -3.417170e-01, -4.549119e-01, 3.218519e-01, -4.323945e-01, 4.337636e-01, 3.684043e-01, -3.321337e-01, -2.163575e-01, -7.847791e-01, 2.567385e-02, 4.555706e-01, -1.295595e-01, 3.798649e-01, 4.800072e-01, 4.063579e-01, 2.400494e-01, -1.540239e-01, -3.678125e-01, 3.886937e-01, -2.045762e-02, -2.376902e-01, 1.277358e-01, 3.552475e-01, -1.623994e-01, -2.006431e-01, 2.431417e-01, -2.922275e-01, 2.680135e-01, 3.523198e-01, -3.667432e-01, 1.126376e-01, -9.199990e-02, -2.794524e-02, 2.688473e-01, -3.025915e-01, -2.947796e-01, -5.313880e-01, 2.974999e-01, -3.779953e-01, -2.663721e-01, 6.369609e-03, -2.662021e-01, -1.649430e-01, 1.792969e-01, 3.328741e-01, -3.657638e-01, -3.617073e-01, 3.430975e-01, 3.753195e-01, 2.158971e-01, 2.100317e-01, 4.690547e-01, -2.154374e-01, 5.968921e-01, 3.696148e-01, -3.404395e-01, 2.996224e-01, 2.771679e-01, 3.056334e-01, 4.625596e-01, -4.407926e-01, -3.777355e-01, -1.319508e-01, -1.589692e-02, -4.583804e-01, 4.124074e-01, 2.891698e-01, 4.907183e-01, -1.159482e-01, 3.528722e-01, 1.304342e-01, 4.627202e-01},
{-8.443374e-02, -1.108945e-01, -7.299111e-02, -1.616022e-01, -1.387961e-01, 8.142041e-03, 3.882309e-02, -3.298803e-03, 1.972324e-03, -1.042040e-01, 6.374355e-02, 4.748012e-02, -1.996294e-02, 3.261197e-02, -9.576754e-02, 1.207752e-01, 1.579384e-01, -1.273673e-02, -1.450437e-01, 1.503755e-02, 1.193256e-01, 6.569733e-04, -4.293453e-02, 5.976816e-02, 2.668017e-02, 1.444128e-01, -7.781745e-02, 1.247394e-01, 4.303165e-02, -3.388359e-02, -4.478241e-02, -8.331654e-02, 7.902228e-03, -4.131823e-02, 5.346138e-02, 1.184327e-01, -1.104643e-01, 6.072287e-02, 1.733694e-01, -7.234084e-02, 2.266620e-01, -7.617269e-02, -1.115976e-01, -2.182650e-01, -8.845080e-02, -4.622249e-02, -1.511768e-02, 6.111646e-02, 1.948261e-01, 5.909564e-02, -5.190065e-02, 1.013979e-01, 9.134653e-02, -1.032000e-01, 1.356676e-01, 1.400043e-01, 7.497863e-02, -8.747434e-03, -4.251839e-02, 6.476125e-02, -6.161864e-02, 4.730965e-02, 1.634825e-01, -9.022670e-02, 6.059666e-02, -5.365932e-02, -5.837782e-02, 4.078853e-02, 1.028356e-01, -2.617699e-02, 2.284043e-02, -9.034873e-02, 5.484128e-02, -6.299999e-02, -2.345119e-02, -8.311424e-02, 2.241116e-01, 5.147212e-02, 1.491803e-01, -1.881463e-01, -6.255285e-02, 1.235463e-01, -2.933017e-02, -9.513349e-03, 5.258898e-02, 1.002706e-01, -5.374473e-02, 1.629041e-01, -7.671376e-02, -1.107098e-01, 3.516692e-02, -8.496106e-02, 1.844512e-01, 2.832051e-02, 1.344799e-02, 4.088281e-02, 6.738787e-02, -6.226357e-02, -6.349134e-02, -1.734999e-02, 5.351656e-02, -3.350767e-02, 3.696924e-02, 1.470415e-02, 9.730127e-02, -1.317581e-02, 1.271796e-01, 4.245900e-02, 1.066802e-01, 4.546798e-02, -6.853414e-02, -1.393953e-01, -2.730808e-01, -8.136733e-03, 1.712747e-03, -3.520452e-02, 7.513193e-03, -3.092354e-02, -3.920012e-02, -4.142255e-02, -6.628326e-02, 1.580338e-01, -1.747197e-03, -5.486229e-02, 6.985252e-02, 9.294757e-03, -2.390546e-02, 4.797712e-02, -1.708559e-01, -9.227405e-03, -1.396526e-01, 9.163173e-02, -7.647421e-02},
{1.563371e-02, 2.341549e-02, 1.408933e-01, -1.068975e-03, -1.035069e-01, -9.976842e-02, 3.513935e-02, 6.022395e-02, -3.797791e-02, 4.970674e-02, 1.538506e-02, -9.324342e-02, 1.513158e-01, -1.372168e-02, 5.216603e-02, -1.170955e-01, 3.530494e-02, 8.758138e-02, 1.068257e-01, 1.769150e-02, 6.191107e-02, -8.690841e-02, 1.413204e-01, 5.522234e-03, -1.123844e-01, -2.054981e-02, -1.069229e-01, -3.817025e-02, -4.738645e-02, -5.901168e-02, -3.825792e-02, 1.863950e-02, 3.819729e-02, 2.937950e-02, -1.069527e-01, -9.650098e-02, 1.221454e-01, 3.669429e-02, -3.195271e-02, -7.645177e-02, 1.531849e-02, 2.622413e-02, -1.096908e-01, 7.179366e-02, -3.684105e-02, -4.021429e-02, -1.135676e-01, -6.215048e-02, 7.137481e-03, -1.542504e-01, 1.169918e-02, 2.895684e-02, 8.032826e-02, 1.331224e-01, 4.274660e-02, -1.638682e-01, 9.795272e-02, 2.895941e-02, 3.710746e-02, 9.811347e-03, 3.211871e-02, -1.243774e-01, -8.241230e-02, 4.406532e-02, -6.211309e-02, -3.862559e-02, 6.744368e-02, 1.836857e-02, 5.124171e-02, -1.075111e-01, 2.635277e-02, 3.258827e-02, 1.672632e-02, -8.875919e-02, 1.124984e-01, -2.717185e-02, -8.762689e-02, 8.670735e-02, -1.012245e-01, 2.334094e-02, 1.256407e-02, -1.244590e-01, -4.732586e-02, 7.084376e-02, -4.253198e-02, 3.542953e-02, 3.136976e-02, -8.395507e-02, 9.718313e-02, -4.238903e-02, 5.313525e-02, 1.225297e-01, -1.338613e-02, 1.743309e-01, 7.636836e-02, 5.599623e-02, -1.159130e-01, 1.169383e-01, 1.547038e-02, -6.002223e-02, -1.718524e-02, 4.596060e-02, 6.482011e-02, 2.625382e-02, -5.209873e-02, 2.153309e-02, -5.637854e-02, 4.170353e-03, -6.830050e-02, 3.350335e-02, 3.156333e-03, 6.572001e-02, 1.159156e-01, -3.499433e-02, -1.053290e-02, 7.023076e-03, 3.743242e-03, 2.341060e-02, -6.726398e-02, 6.836905e-02, -6.329725e-04, -2.546425e-02, -9.169671e-02, 8.915068e-02, 8.863308e-02, 1.380467e-02, 1.952388e-02, -7.908647e-02, 7.108469e-02, -5.139809e-02, 1.933390e-02, 1.782220e-02, 9.084714e-02},
{2.926573e-01, 6.432974e-02, -1.086081e-01, 1.794434e-01, -4.200653e-01, 6.311553e-02, 4.366954e-03, 7.738087e-02, 9.672786e-04, 2.420460e-02, -1.392055e-01, -9.783800e-02, 1.064228e-01, 1.394183e-02, 1.014641e-01, 8.025584e-02, 3.439622e-02, -2.826031e-02, 1.010366e-01, 6.559507e-02, -1.449512e-01, -4.175308e-02, 2.322704e-02, -1.608064e-01, -7.846360e-02, -4.311016e-02, 8.131414e-02, -1.038401e-01, 1.837977e-02, 7.931698e-02, -2.380338e-02, 1.245010e-01, 2.896825e-02, -8.726075e-02, -2.118466e-01, 1.442820e-02, 4.892911e-02, 4.753551e-02, -1.046933e-01, 4.004193e-02, -1.969119e-02, 3.659574e-03, 2.111993e-02, 1.661633e-01, 5.466137e-02, 4.308491e-02, -1.062193e-01, -3.849174e-03, -1.901846e-01, -1.844571e-01, 9.332444e-02, -1.131146e-02, -7.192349e-02, 8.422092e-02, -1.056485e-01, 2.013254e-02, -1.495434e-01, -3.339563e-01, 9.524506e-02, 3.363502e-02, 1.024839e-01, -3.999574e-02, -8.242891e-02, 1.211874e-01, -6.866819e-02, -5.874796e-02, 5.844003e-02, -5.409962e-04, 3.971617e-02, -9.735931e-02, 4.066089e-02, -1.669712e-02, -2.904500e-01, 6.895865e-02, -7.156800e-03, 1.739309e-02, -1.858611e-01, 1.142767e-01, 3.307229e-02, 7.309423e-02, 1.893428e-01, -4.012121e-02, 9.575210e-02, -6.301947e-02, 2.115134e-02, -1.957075e-02, 1.015127e-01, -1.631650e-02, 2.373606e-02, -8.452563e-02, 3.428876e-02, 2.326233e-01, -5.379261e-04, 1.637958e-01, -3.527606e-02, -3.819676e-02, -1.022989e-01, 3.808178e-02, 2.421496e-04, -1.330754e-02, 7.346390e-02, 4.881519e-03, -1.159776e-01, 5.345308e-02, 5.487503e-02, -6.601161e-02, 3.213415e-02, -6.357028e-02, 3.740047e-02, -1.570698e-02, 1.642790e-02, 2.252461e-01, -3.117861e-02, 1.933523e-02, 3.790509e-02, 6.845148e-02, 5.107008e-02, 8.067803e-02, -9.291094e-02, -1.098050e-02, 9.092230e-02, -2.203056e-02, 1.528719e-01, 1.250271e-01, 8.537165e-02, 3.293871e-02, 1.092234e-01, -2.009581e-01, 2.172696e-02, 7.372370e-02, 2.550621e-02, 1.359376e-01, 7.227181e-02},
{-2.463044e-01, -1.243914e-01, -4.557282e-02, -5.486062e-02, -1.572041e-01, -9.421015e-02, -1.745664e-02, -1.564656e-01, 1.762221e-01, -8.087568e-02, 4.069890e-02, -1.228068e-01, -1.979949e-01, 8.704751e-02, -4.738131e-03, -1.470289e-02, 1.015493e-01, 1.826454e-02, -1.354267e-01, -8.641618e-02, 3.710982e-02, 1.267595e-01, -1.472200e-02, -1.468415e-02, 1.106960e-01, 1.627723e-01, -1.535690e-01, 8.576305e-02, 1.763781e-01, -3.763607e-02, -1.159302e-01, -8.903410e-02, -3.371202e-01, 2.514342e-02, 2.833982e-01, 1.027654e-01, 4.600213e-02, -9.789501e-02, 2.686757e-01, 2.643545e-03, 3.581834e-01, -5.068203e-02, -2.084546e-01, -4.327322e-01, -2.753407e-02, -9.576170e-03, -1.241252e-02, 1.070426e-01, 3.658289e-01, 2.434349e-01, -9.086256e-02, 6.813113e-02, 7.475370e-02, 2.327774e-02, -6.830539e-02, 1.294801e-01, 1.888756e-02, 1.214055e-01, 4.191817e-02, -3.419886e-01, -2.607420e-02, 8.748992e-02, 4.615496e-02, -4.282011e-03, 1.139868e-01, -7.457557e-02, 1.253805e-01, 1.241401e-02, 1.778476e-02, 7.992075e-02, -1.891502e-02, 2.782438e-02, 1.221168e-01, -3.050669e-02, -1.147392e-01, -2.528862e-02, -1.425586e-02, -1.613734e-02, 3.625496e-02, -8.244722e-02, -2.417828e-01, -1.944541e-01, -1.129030e-01, -3.759274e-02, 8.303277e-02, 7.624612e-02, -3.654468e-02, 6.771236e-02, -1.255633e-01, 2.385562e-02, 8.159149e-02, 1.137993e-02, 8.350355e-02, -1.095833e-01, -1.226084e-01, -2.258809e-01, 6.713769e-02, -5.245962e-01, -3.375432e-02, 6.362923e-02, 5.174922e-02, -2.652762e-01, 6.054854e-02, 2.096334e-02, 3.650945e-02, -8.304297e-02, 7.090478e-02, 4.164331e-02, 7.852324e-02, -2.615378e-02, 3.939675e-01, -2.719010e-01, -2.476813e-01, 9.798974e-02, -8.049767e-02, 4.360949e-02, 2.255544e-02, -8.797267e-02, -8.427074e-03, 2.382287e-02, 2.750814e-02, 1.168813e-01, -2.070275e-01, -7.415517e-02, -5.172690e-02, 1.227634e-01, -4.272430e-02, 2.476690e-01, -7.109699e-02, -2.039036e-01, -1.072811e-01, -1.435106e-01, -1.229547e-01},
{1.143965e-01, 1.631119e-01, -1.196123e-02, -1.664988e-01, 1.950104e-01, -1.404032e-01, -5.321868e-02, 1.264228e-01, -1.599333e-01, -1.669257e-02, -2.409899e-03, -1.271770e-01, 1.760911e-02, 1.263445e-01, 1.653813e-01, -4.852281e-02, -1.558446e-01, 1.035786e-01, 1.312727e-01, 7.549012e-02, -1.017362e-02, -2.641420e-03, -2.000138e-01, 4.010795e-02, -3.485424e-02, -3.702793e-02, -2.936366e-02, -4.084302e-02, -1.099317e-01, -4.429484e-02, -7.201336e-02, -7.299578e-02, -1.141022e-01, 6.149371e-02, 3.019733e-01, -8.024725e-02, 8.819260e-02, -1.766614e-02, 4.880275e-01, 1.784177e-02, 8.033807e-02, 7.386660e-02, -1.562424e-01, -3.299642e-01, 1.333544e-01, -1.251917e-02, -5.924357e-02, -2.294962e-02, 2.862658e-01, 8.335599e-02, 5.486377e-02, 3.445248e-02, 8.119938e-02, 1.088955e-01, -1.635034e-01, -1.475588e-01, -7.258310e-04, 7.094764e-02, 1.123322e-01, -1.663620e-01, 9.958386e-03, -9.374087e-04, 7.486585e-02, 5.450741e-02, -1.157614e-01, 5.895539e-02, 5.269666e-03, -9.973513e-02, 1.506170e-02, -1.720491e-01, -8.321713e-02, 9.011083e-02, 3.599784e-02, 1.198625e-01, 7.190632e-02, -7.938465e-02, 3.272650e-01, -1.475924e-01, -1.244941e-01, 1.899306e-01, -2.357951e-01, -1.935802e-01, -8.195978e-02, 1.163261e-01, -1.094305e-02, -2.484345e-01, -7.660965e-03, -8.394270e-02, 9.843215e-02, 5.243332e-03, -7.927394e-02, -7.249623e-02, -5.690916e-02, -2.546306e-01, -2.451692e-02, 1.723639e-01, -1.808823e-02, -4.370692e-01, 9.188523e-02, -6.502958e-02, -8.541474e-02, 9.114355e-02, -1.164170e-02, -1.020558e-01, 1.136357e-01, -1.119923e-02, -4.185767e-02, -1.771792e-01, 7.921778e-02, 9.129458e-02, 1.975643e-01, 5.516737e-02, 7.963046e-02, -3.830664e-02, 7.491978e-02, 8.765433e-02, -1.570598e-01, 6.839796e-02, -2.362293e-02, 6.598616e-02, 1.148896e-01, -7.867129e-02, 1.981222e-02, -5.994997e-02, 3.177753e-02, -1.191431e-01, 1.517435e-01, 8.309273e-02, 7.209523e-02, -1.748811e-01, 7.146090e-02, -1.791214e-01, 1.339868e-01},
{-1.821440e-02, 3.986205e-02, -6.812257e-02, 2.420756e-02, -1.081185e-01, 2.341940e-02, 5.943321e-02, -1.329089e-02, 4.893196e-02, -6.046399e-02, -7.408007e-03, 4.262419e-02, -9.926797e-02, -2.729246e-02, -5.418156e-02, -7.447585e-02, 1.872266e-02, 4.507161e-03, 8.118089e-02, 4.391457e-02, -6.511161e-02, -1.020483e-02, -2.371475e-02, 5.185945e-02, 7.709023e-02, -1.117740e-02, 3.510274e-02, -5.324846e-02, -7.202855e-02, 6.811418e-02, 6.854909e-02, 8.078685e-02, -3.282580e-02, 7.493833e-02, 1.529064e-01, -2.951063e-02, -5.338963e-02, -7.632189e-02, 1.209987e-01, 2.251654e-02, 6.746475e-04, -5.135545e-02, -2.278250e-01, -5.696312e-02, -2.906687e-02, -8.172994e-02, 6.606746e-02, 1.598600e-02, 6.459403e-02, 5.407200e-02, -1.213001e-01, 2.456857e-02, 7.813879e-02, 1.917544e-02, -8.497718e-02, 3.086139e-02, 7.651322e-02, 5.543937e-02, 6.247068e-02, 7.821266e-02, 1.040710e-02, 3.904975e-02, -3.120778e-02, -7.357544e-03, -8.178831e-02, -4.125293e-02, -3.379465e-02, 1.365467e-02, -1.484482e-03, -3.826857e-02, 2.192223e-02, -6.867869e-02, -4.013586e-02, 5.252999e-02, 6.507076e-02, -8.022359e-02, 1.338525e-01, -2.591982e-02, -1.412774e-02, 2.487508e-02, -1.258707e-01, 4.710227e-02, -8.260801e-02, -3.853975e-02, 5.735601e-02, 4.912762e-02, -9.172020e-03, 1.003024e-02, 5.548473e-02, -2.951062e-02, -4.808842e-02, 5.172914e-02, 5.463005e-02, 8.609616e-02, -1.002844e-01, -7.852895e-02, 4.369897e-02, 1.861666e-02, -4.779651e-02, 2.620343e-02, -3.013237e-02, -1.971239e-02, 7.456521e-02, -5.814711e-02, 6.649671e-02, -2.514391e-02, -4.740302e-02, 5.205862e-02, -2.565156e-02, -5.874206e-02, -3.609056e-02, -1.140474e-01, -1.228535e-01, 4.634824e-02, -1.726089e-02, 3.098828e-02, 3.347604e-02, 7.790376e-02, 7.504511e-02, 7.814024e-02, -2.727766e-02, 4.561767e-02, -9.720163e-02, -7.022957e-02, 4.384127e-02, -4.594011e-02, 1.194804e-02, -6.538802e-02, 6.170960e-02, -8.481575e-02, 7.753374e-02, 4.346723e-02, -9.196679e-03},
{-2.322006e-02, -3.809983e-02, -8.892545e-02, -6.781695e-02, -5.473601e-02, -6.615654e-02, -3.239406e-02, -5.342756e-02, -5.171180e-02, 2.948101e-02, 4.029397e-02, -6.408186e-02, 4.657861e-02, -6.525866e-02, -5.655129e-03, -7.561905e-02, -7.711302e-02, -7.759413e-02, -8.173012e-02, -2.124212e-02, -1.423276e-01, -7.642403e-03, 2.831376e-02, -9.464536e-02, 6.493909e-02, 2.775274e-02, -1.384388e-02, -3.105892e-02, -4.386105e-02, 5.717047e-02, 5.855356e-02, 8.774412e-02, 2.024895e-02, 1.948028e-02, 3.560010e-02, 4.533396e-02, -6.045015e-02, -9.379479e-02, 3.020327e-02, -6.538480e-02, 1.009384e-01, -2.483020e-03, 6.132914e-02, -2.031591e-02, 3.319359e-02, -7.570895e-02, 4.750272e-02, 7.811054e-02, 6.201188e-02, -1.024697e-01, 4.634971e-03, 8.722755e-02, -1.781966e-02, -4.430396e-02, -7.649706e-02, 5.416631e-02, 5.365653e-02, -6.426694e-02, -6.630614e-02, 1.178710e-01, 7.469412e-02, -9.103610e-02, 3.786210e-02, -3.054136e-02, -5.138230e-02, 4.723204e-02, 4.186098e-02, 8.736251e-02, 3.244529e-02, -1.266064e-02, -8.737681e-03, 7.989045e-02, 2.309688e-02, 5.188439e-02, 2.900563e-02, -4.866876e-02, 6.867424e-02, -1.147002e-02, 1.990257e-03, -8.424687e-02, 2.881967e-02, -6.621332e-02, 6.037257e-02, -3.870125e-02, -2.858541e-02, -4.206540e-02, 7.483882e-02, -4.075260e-02, -8.878727e-02, 8.155267e-02, 6.285930e-02, 7.521921e-02, 2.762547e-02, 2.517809e-02, -3.176171e-02, 7.152578e-02, 7.410654e-02, -2.382360e-02, -4.258799e-02, -1.992295e-02, 6.666795e-02, 6.823710e-02, 2.165640e-02, -4.372561e-02, 8.811591e-02, 5.896872e-02, 5.190309e-02, 4.756772e-02, -5.638972e-02, 6.103694e-02, -7.255949e-02, -7.003643e-02, -5.588689e-02, -1.599271e-02, -5.059892e-02, 7.514527e-02, -3.703251e-02, 5.442092e-02, 1.825124e-02, -3.381995e-02, 4.500626e-02, -3.461204e-02, 7.090142e-02, 9.408787e-03, -4.381053e-02, 5.584993e-02, 2.582767e-02, 1.707365e-02, -3.066671e-02, 7.256529e-02, -7.125442e-02, 9.192897e-02, 4.810177e-02},
{-1.448164e-02, -7.477910e-02, 4.534046e-03, -3.966165e-02, 1.328017e-02, 5.444337e-02, -2.361728e-02, -2.944988e-02, 1.263303e-02, 8.153921e-02, 3.207286e-02, 1.036465e-02, 3.706542e-02, 8.502480e-02, -9.935132e-02, 5.386271e-02, -2.127853e-02, -6.504663e-02, -8.955852e-03, -2.256229e-02, 3.266358e-02, 4.203004e-02, -6.442090e-02, -4.648549e-02, -7.724737e-02, -1.090963e-02, 6.186298e-02, 7.784234e-02, 5.993442e-02, -5.403290e-02, -1.975006e-02, -2.191038e-02, -2.567190e-02, 4.861211e-02, -7.752942e-02, 3.967390e-02, -4.882170e-02, 5.730533e-03, 5.042793e-02, -5.556118e-02, 1.441101e-01, -2.451109e-02, 5.110295e-02, -2.599423e-02, -9.909665e-02, 4.907519e-02, 8.431993e-02, 2.322091e-02, -4.149523e-02, -8.065399e-04, 7.091332e-02, 4.229152e-02, -1.336931e-02, -2.831074e-02, -5.550591e-02, 7.957516e-02, -3.178398e-02, -5.701960e-02, -2.385441e-02, 4.631419e-02, 7.357841e-02, 5.534090e-02, 8.975881e-02, -3.938326e-02, -5.441870e-02, -6.464465e-02, -6.388265e-02, 3.995391e-02, -5.587140e-03, 1.033841e-01, -4.081670e-02, 5.919100e-02, -3.121444e-03, 5.504180e-02, 2.485775e-03, -3.372144e-02, 9.689174e-02, -8.110413e-02, 6.647170e-02, -2.953848e-02, -4.791389e-02, 4.487579e-02, 3.836812e-02, 2.300609e-02, 3.949896e-02, 2.012709e-02, -8.134017e-02, 1.107754e-01, 6.007570e-02, 2.614876e-02, 4.119808e-02, -7.641941e-02, 5.019984e-02, 3.447830e-02, 4.307797e-03, -1.754075e-02, -4.268118e-02, -1.251369e-01, 6.483832e-02, 6.339694e-02, -3.012601e-02, -7.396685e-02, 5.559740e-02, -3.693005e-02, 3.790912e-02, 6.668779e-02, 1.312919e-02, -4.291534e-02, -3.174355e-02, -2.875736e-02, 8.523793e-02, -4.508770e-02, -1.647538e-01, 4.547406e-02, -8.070781e-02, 2.575131e-02, -6.794111e-02, -4.128499e-02, -7.619340e-02, 7.047855e-02, 7.002605e-02, 9.621495e-02, -4.886046e-02, 5.734610e-02, -6.079556e-02, -6.962529e-02, -2.008267e-02, -5.642398e-02, -2.369911e-02, 1.082960e-02, -5.053944e-02, -7.487422e-02, 3.913332e-02},
{6.650398e-02, -6.589615e-02, 3.098966e-02, 6.367208e-02, -1.700483e-01, -1.656355e-02, -1.495579e-02, -6.983997e-02, -2.584795e-02, 5.067611e-02, 3.232771e-02, 3.438022e-02, 2.394289e-02, 5.586446e-02, -6.814689e-02, 6.539125e-02, -7.940156e-02, 5.579208e-02, 6.391075e-02, -2.539093e-03, -7.082732e-03, -4.237514e-02, 1.052044e-01, -1.156112e-01, 9.253952e-02, -1.017114e-01, -8.194228e-02, -3.804942e-02, -2.769739e-02, 2.147125e-02, -3.886981e-02, 2.087369e-02, 1.888319e-01, 8.017180e-03, -2.172757e-01, 6.558587e-02, -1.744131e-02, 1.184676e-01, -7.661338e-02, 8.082461e-02, -8.999016e-02, -7.294773e-02, -9.202330e-02, -9.588776e-02, 2.936749e-02, 4.205650e-02, 1.149909e-01, 8.654685e-02, -1.237607e-01, -1.033083e-01, -1.421782e-02, 8.445640e-02, 4.188420e-02, 1.095874e-02, -5.341731e-02, -2.843120e-01, -9.475814e-03, -2.517619e-01, 3.793809e-02, -1.456974e-01, 7.408550e-02, 4.295552e-02, -1.109486e-01, -7.992641e-03, -4.403474e-02, -8.734284e-02, 5.838550e-02, 4.423367e-02, 1.122436e-01, -3.086787e-01, 5.964410e-02, 2.252364e-02, -1.551306e-01, -6.833574e-02, -3.525752e-02, -3.966037e-02, -5.811378e-02, -3.788785e-03, 1.065525e-01, -1.806606e-02, 1.436487e-01, -1.964346e-01, -1.084070e-01, -8.550148e-02, 2.142201e-02, 5.998175e-02, -8.474903e-02, 4.755823e-02, -6.253357e-03, -1.432497e-02, -4.077612e-02, 5.294450e-02, -3.866710e-02, -2.146107e-02, 1.084603e-02, -4.432727e-02, 8.866898e-02, 3.445604e-02, 6.651660e-03, -3.219244e-02, 5.775127e-02, 1.822580e-01, 5.086672e-02, 5.927363e-02, 1.264073e-01, 8.803296e-02, 2.464303e-02, 3.623784e-02, 8.135081e-03, -5.987113e-02, 9.247250e-03, 1.138679e-01, -3.393441e-03, 8.427446e-02, -5.279192e-02, -1.150727e-01, 6.608934e-02, -4.870499e-03, -1.574302e-01, -4.571107e-02, 1.328141e-02, -6.932891e-03, -2.457925e-02, 1.103902e-01, 5.658305e-02, -4.894361e-02, 3.672101e-03, -1.143383e-01, 3.144905e-02, 1.141162e-01, -2.903273e-02, 9.838656e-02, -4.163370e-02},
{-2.043724e-02, -1.783111e-02, -1.763309e-03, -9.193730e-03, -2.304529e-01, 7.246372e-02, -7.120783e-02, -6.153469e-02, 5.128008e-02, -7.753885e-02, 5.904988e-02, -7.224022e-02, 4.753225e-02, 4.052096e-02, -8.629312e-02, -1.897446e-02, 8.129681e-03, 2.905410e-02, -4.643958e-02, -5.863216e-02, 9.971672e-03, -8.037379e-02, 2.047960e-01, -4.432867e-02, -1.908326e-02, 3.504799e-02, -4.804410e-02, 3.991603e-02, -2.493951e-02, 5.628824e-03, -2.459332e-02, 4.047801e-02, 2.137306e-02, 6.548668e-02, -7.027619e-02, -4.594535e-02, 2.717752e-02, -6.057229e-02, 7.610951e-02, -7.170762e-02, -3.217066e-02, 7.670471e-02, -1.629709e-03, 7.178462e-02, 4.353692e-02, 5.480978e-02, -8.475037e-02, 9.214806e-03, 4.405495e-04, -1.607873e-01, 8.665353e-02, 8.540890e-03, -2.450341e-02, -6.472162e-02, 7.718192e-03, -1.524226e-01, -6.450690e-02, -1.036290e-01, -2.377019e-02, -1.078039e-01, 3.284488e-02, 1.086668e-03, 8.849404e-02, 3.564656e-02, 6.412663e-02, -3.570943e-02, 4.302866e-02, -4.248938e-02, -7.943183e-02, -1.296907e-01, -2.583296e-02, 4.429977e-02, -1.247777e-02, 5.603401e-02, 1.024924e-01, -4.607451e-02, -2.753902e-02, -9.926670e-02, -3.432241e-02, 2.323475e-02, 9.996876e-03, -1.115955e-01, 3.546737e-02, 6.712149e-02, 8.101182e-02, -2.645444e-02, -5.423638e-02, -4.007066e-02, 2.880419e-02, 8.577062e-02, 5.582988e-02, 4.420212e-02, -8.782007e-02, 2.376367e-01, 3.038374e-02, -9.081085e-02, -5.784588e-02, -6.537120e-03, -9.143568e-02, -6.070329e-02, -1.370654e-02, 2.536672e-02, 2.117851e-02, -5.409493e-02, -1.245591e-01, -5.622715e-02, 7.625248e-02, -1.528205e-02, 3.352576e-02, 1.279568e-02, 1.746415e-01, 1.457722e-02, 1.411370e-02, -6.251418e-03, 6.241517e-02, 8.665997e-03, 2.261509e-02, -5.576041e-02, 2.106334e-02, -7.469214e-02, 3.670617e-02, 3.540503e-02, -1.181705e-01, 6.473480e-02, -4.589931e-02, 6.312047e-02, 1.058272e-02, -1.450924e-01, 8.307239e-02, -7.351498e-02, 9.817304e-02, 2.841966e-02, 2.458747e-02},
{1.698746e-01, 1.733006e-01, 3.470692e-02, -9.227905e-03, -4.000966e-01, -1.057806e-01, -2.172810e-03, 8.921914e-03, -1.159190e-01, 2.395971e-02, -2.173457e-01, -8.947728e-02, 1.690107e-01, 8.937939e-02, 6.398603e-02, -1.164842e-01, 4.918387e-02, 1.287196e-01, 1.616805e-01, -2.158912e-02, -6.249855e-02, 4.044008e-02, 1.501352e-01, -8.079939e-02, -3.397560e-02, -9.139521e-02, -6.940112e-02, -4.756781e-02, -1.036434e-01, -9.490168e-02, -1.082860e-01, 6.467170e-02, -7.520736e-02, -1.539764e-01, -7.059420e-02, -1.590404e-01, -8.132455e-02, -1.285518e-01, 5.245143e-01, 2.847627e-03, 8.094946e-03, 1.766190e-01, 1.590694e-02, -1.087083e-01, 4.974010e-02, -2.704806e-02, 5.825127e-03, -1.084907e-01, 8.968375e-02, -2.031226e-01, 1.671841e-01, -8.299611e-02, -5.110578e-03, -2.154329e-02, -9.866589e-02, -2.806590e-01, -1.352919e-01, -3.931649e-01, 5.630560e-02, -6.070944e-02, -5.564428e-03, -1.402982e-01, -1.524113e-01, 1.823872e-01, -1.254448e-01, 8.932713e-02, 2.696201e-02, -1.647003e-01, -6.814319e-02, -5.816260e-01, -2.724730e-02, 4.661815e-02, -7.230013e-02, 2.402919e-01, 8.435024e-02, -1.143575e-02, 1.687648e-01, 1.137791e-01, -6.272200e-02, -3.388733e-02, 5.135532e-02, -6.439534e-02, -1.209730e-02, 7.412920e-02, -2.760935e-02, 5.879001e-03, 2.961156e-02, 5.258716e-02, 6.578624e-02, 1.342803e-01, -4.684395e-02, 9.538520e-02, -4.832515e-02, 2.002410e-01, 9.120630e-02, -5.040193e-03, 2.075998e-02, -6.341986e-02, 5.871218e-02, -7.749953e-02, 1.700079e-02, 1.095110e-01, 2.997867e-02, 6.550480e-03, 8.735023e-02, 1.914231e-02, -1.706889e-02, 1.119216e-03, 1.103761e-01, 7.549420e-03, 9.389991e-02, 7.645236e-02, -2.821230e-02, -9.086131e-02, 2.313269e-02, 1.244712e-01, -1.050954e-01, 2.452810e-02, -2.054010e-01, -1.927594e-02, 5.565844e-02, -1.163907e-01, -2.542170e-01, 3.345536e-01, -8.013590e-03, -1.346319e-01, 9.547707e-02, -4.193709e-01, 1.217654e-01, -3.545437e-02, 1.622274e-01, -3.794240e-02, 1.962849e-01},
{-7.829335e-02, -1.412652e-01, 1.289082e-02, 2.132531e-01, -4.091947e-01, -6.532030e-02, -7.821234e-02, 6.260281e-02, 8.157375e-02, -1.455598e-03, -3.864622e-02, -9.209667e-02, -3.073274e-03, -1.311737e-02, -9.937220e-02, 5.916420e-02, -1.541343e-02, -9.173250e-02, 6.064404e-02, 3.040685e-02, 4.319210e-02, -5.271328e-02, 1.195097e-02, -1.657469e-01, -3.999956e-02, 8.486575e-02, -1.178653e-01, 4.469302e-02, 1.662144e-02, -7.938411e-02, -5.377954e-02, -3.008231e-02, -9.489072e-02, 1.079536e-01, -2.206209e-02, 1.867086e-02, 1.135433e-01, 2.417803e-04, 9.590678e-02, -2.269018e-02, 1.257073e-01, -2.191861e-02, -1.504791e-01, -4.643147e-02, 2.410224e-03, 8.433530e-02, -2.989653e-02, -7.763236e-02, 7.498340e-02, 1.124746e-01, -4.406160e-02, 4.060710e-02, -8.171599e-03, 9.458892e-02, -7.063673e-02, -5.937120e-02, 1.232223e-02, -3.273640e-02, 7.925731e-02, -2.134951e-02, 2.758787e-02, 3.662448e-02, 8.428188e-02, -5.065437e-02, 6.873150e-02, 7.079020e-02, -4.237979e-02, -2.640407e-02, -4.205982e-02, 4.775690e-02, -3.286136e-02, 2.255226e-02, -5.581409e-02, -1.377428e-01, 4.813749e-02, 2.925375e-02, 1.382608e-01, 2.951101e-02, -8.738913e-02, 2.033644e-02, -1.730568e-01, -1.130068e-01, 1.204191e-02, 2.068401e-02, -5.181522e-02, 7.919548e-02, -5.659636e-02, 8.426941e-02, 7.709835e-02, 7.546088e-03, 2.501073e-02, 9.581333e-02, -1.094298e-01, 1.551232e-01, 4.127048e-02, -7.334828e-03, 1.329723e-01, -2.782612e-01, 1.140499e-02, -9.027546e-02, 6.454973e-02, 1.686978e-02, 2.098476e-02, -3.695302e-03, -8.627655e-02, -5.409124e-02, -2.509179e-02, 8.471669e-03, 2.419002e-02, 1.004855e-02, 5.344297e-03, 7.091112e-04, -2.875735e-01, -3.223022e-02, 1.582399e-02, 4.401765e-02, -7.195859e-02, 3.348607e-03, -1.060720e-01, -1.689373e-02, 4.710780e-03, -5.656566e-02, -6.377666e-02, 7.457703e-03, -4.397052e-02, 3.239273e-02, 8.655611e-02, 1.101438e-01, 6.132048e-02, -7.788832e-02, 4.583409e-03, 2.949757e-02, 3.112257e-02},
{1.515422e-01, -2.904472e-02, -2.108490e-02, 2.010288e-01, -6.709810e-02, 1.348179e-02, 2.252814e-02, 1.702618e-02, 6.698499e-03, -1.887585e-02, 1.171483e-01, 3.022861e-03, -1.739798e-02, 1.053939e-02, 1.732982e-02, -1.194419e-01, -2.706956e-02, -5.839081e-02, 9.017843e-02, -1.852423e-02, 3.282601e-02, -2.789643e-03, -5.385299e-02, -2.235640e-02, -5.894649e-02, 1.268630e-01, -3.562872e-02, 1.601913e-02, -5.059967e-02, -3.544895e-02, 1.961990e-02, 8.355568e-02, -3.964639e-02, -8.036557e-02, 4.818648e-02, -1.190367e-01, 1.101402e-02, -8.404108e-03, 6.772202e-02, 5.443296e-02, -1.507339e-01, 1.778255e-01, -4.107918e-01, -1.220913e-01, 1.326059e-01, 4.351368e-02, -8.222114e-02, 1.190039e-02, 1.837307e-02, 1.930279e-01, 2.693984e-02, -1.745097e-02, -1.144360e-02, 1.885513e-01, -1.208457e-01, 8.631365e-02, 7.145225e-02, 2.081325e-01, -2.806672e-02, -1.513820e-01, -9.724120e-02, 7.228707e-02, 3.207104e-02, 4.711713e-02, -1.123391e-01, 7.914045e-02, 9.906890e-02, -3.597318e-03, 1.790222e-02, 7.754759e-03, 9.436378e-04, 2.535939e-02, 1.542481e-01, 8.987942e-03, -6.560168e-02, 6.910633e-03, -1.979194e-02, 5.420269e-02, -1.750607e-01, 1.707346e-01, -7.703447e-02, -5.810325e-02, 2.577438e-03, 3.215229e-02, 3.938839e-02, -1.500645e-01, -7.473041e-03, -6.834807e-02, 1.509917e-01, 1.536013e-02, -1.075528e-01, -9.143689e-02, -8.976797e-02, -1.421255e-01, -9.953148e-02, 1.336794e-01, 2.849313e-02, -1.632642e-01, 8.334421e-02, -1.135972e-01, -6.942207e-06, -5.864585e-02, -4.459826e-02, -2.915994e-02, -9.472704e-02, -3.677055e-02, -1.022948e-02, -1.004505e-01, -9.460732e-02, 5.289665e-02, 9.979034e-02, 2.389679e-02, -5.902040e-02, 2.494701e-02, 7.984161e-02, 1.284163e-01, -3.707962e-02, 8.508202e-02, -2.820893e-02, 3.997508e-02, 4.592240e-02, -7.566243e-02, 6.001727e-02, -8.083950e-02, 5.747879e-02, 3.901297e-02, 1.897963e-01, 1.558253e-01, 6.277673e-02, -9.916124e-02, 1.069887e-02, 1.222153e-02, -2.709925e-03},
{-1.540659e-02, -1.166947e-01, -1.029603e-01, 3.145357e-03, -4.297265e-02, 5.601120e-02, 1.179710e-02, 5.840841e-02, 2.877029e-02, -2.891874e-02, 7.607426e-02, -4.866276e-02, 4.485340e-02, -7.284155e-02, -5.228984e-02, 5.931729e-02, -6.615922e-02, -2.470635e-02, 2.926281e-02, -2.195294e-02, 1.206963e-02, 8.362876e-02, 1.520349e-02, -8.620253e-02, -9.167639e-03, 5.843257e-02, 1.922527e-02, 1.207079e-02, -7.902932e-02, -5.703456e-02, -2.206462e-02, -6.177072e-02, 1.381370e-01, 6.165475e-02, -3.438234e-02, 6.072540e-02, -8.320355e-02, -6.102685e-02, 4.484048e-02, 4.304042e-02, 2.648359e-02, -3.091758e-02, -8.486585e-02, 7.654029e-02, 7.929764e-02, -1.184818e-02, 6.667074e-02, 4.527172e-02, -3.227914e-02, -1.478475e-01, -6.744932e-02, 8.327133e-02, 7.724862e-02, 7.068097e-02, -4.281487e-02, 3.231207e-02, -4.907939e-02, -1.228471e-01, 2.572753e-02, 3.285747e-02, -7.694620e-02, 3.390127e-02, -4.578565e-02, -2.046974e-02, 3.879237e-02, 6.883455e-03, 7.855467e-02, 3.761168e-03, 4.577484e-02, -1.434161e-01, 1.111832e-01, -7.156428e-02, -1.111344e-01, 7.314938e-03, 1.801184e-02, -6.303759e-03, 5.724340e-02, -3.094576e-02, -7.372535e-03, -8.023068e-02, -6.461018e-02, -7.226024e-02, 3.550718e-02, -1.537555e-02, 8.441324e-03, 3.603020e-02, 3.210578e-02, -6.501824e-02, -5.208205e-03, -3.305820e-02, 6.303518e-02, 2.340410e-02, -2.105495e-02, 9.730913e-02, 5.089681e-02, -8.105099e-03, -1.257055e-02, -2.737909e-02, -5.289634e-02, -1.237585e-02, 8.953553e-02, 8.332971e-02, 1.351293e-02, 5.061714e-02, -6.118198e-02, 2.427352e-04, -4.459884e-03, 9.854692e-03, 1.424870e-02, -5.985561e-02, 2.935004e-02, 6.507996e-02, 6.109556e-02, -2.859158e-02, -4.697431e-02, 4.232252e-02, -7.754788e-02, -3.206081e-02, 4.577063e-02, 1.291238e-02, 8.008123e-02, 7.592401e-02, 9.115772e-03, 4.349069e-02, 2.165241e-03, 8.176887e-02, -1.386371e-02, -1.410275e-01, -3.632378e-03, 1.971139e-02, -2.260454e-02, -6.535751e-02, -4.804091e-02},
{-2.291101e-02, -1.873209e-01, 1.100750e-01, 6.331232e-02, -1.017265e-02, 1.020715e-01, 5.901100e-02, -1.109192e-01, 2.179337e-02, -7.187543e-02, -1.059554e-01, 5.599060e-02, -8.959480e-03, 7.385056e-02, -7.306040e-02, -6.363010e-02, -7.355993e-02, -5.441368e-02, 1.122686e-01, -7.498173e-02, -1.427865e-02, -7.371000e-02, 1.965076e-02, 1.875609e-02, -5.445242e-02, -1.158890e-01, 1.461752e-02, -2.754624e-02, -3.254519e-02, 7.899753e-03, -3.233718e-04, -6.161629e-02, 1.813237e-02, 3.099428e-03, -8.288360e-02, -1.512344e-02, 1.714465e-01, 4.007151e-02, -2.301178e-03, -6.193953e-02, -8.239694e-02, 7.273295e-02, 1.180474e-01, -1.002980e-01, -8.341514e-02, 5.042752e-02, -6.185405e-02, -9.755021e-02, -7.212170e-02, -8.051644e-02, -2.688269e-02, -6.993055e-02, -4.639051e-02, -8.701838e-02, 1.624331e-02, -7.140116e-02, -5.922604e-02, -1.697436e-01, 8.132377e-02, 1.456578e-02, -5.440492e-02, -4.193234e-02, -7.083706e-02, 1.806979e-02, -7.018904e-02, -7.489157e-02, -9.043515e-03, -3.555111e-02, 5.334023e-02, -1.291784e-01, -2.818871e-02, 1.033009e-01, -1.324208e-01, 5.270860e-03, -3.619412e-02, 9.509863e-02, -9.891504e-02, 6.193580e-02, -4.386015e-02, 2.817038e-02, 2.716409e-02, -1.047630e-01, -6.606991e-02, -3.882095e-02, 8.520706e-02, 3.026693e-02, 9.176679e-03, -8.221816e-02, 9.289587e-02, 7.403169e-02, -3.367198e-02, 1.491873e-02, -7.923632e-02, 1.692888e-01, -1.661230e-02, 4.277165e-03, 8.498417e-02, 5.255329e-03, -8.411889e-04, -7.532754e-02, 4.712705e-02, 8.046308e-03, 6.127572e-02, 1.113313e-01, -2.034863e-02, 2.348056e-02, -5.905771e-02, -2.481792e-03, 7.018375e-02, 7.352363e-02, 1.006965e-01, 3.253909e-02, 1.474968e-01, 4.947631e-02, 7.036766e-02, -3.625968e-02, -7.983522e-03, 3.504515e-02, -1.786110e-02, 9.621020e-02, 7.207645e-02, -1.918820e-03, -3.720913e-02, 1.042190e-01, -2.922355e-02, -8.723498e-02, -7.991474e-02, -1.256884e-01, 4.097221e-02, 1.760335e-02, 3.308960e-03, -4.532304e-02, -1.710600e-02},
{6.588494e-02, 6.111166e-02, 6.188906e-02, -3.042684e-01, 1.400155e-02, -5.443882e-02, 1.741545e-02, -2.587321e-02, -1.806949e-01, 1.071927e-01, -1.076822e-01, -1.359841e-01, 1.827965e-01, -1.284767e-03, 1.300209e-01, -1.198004e-01, 4.914954e-03, 3.065441e-02, 1.030641e-01, 1.155918e-01, -9.173513e-02, -1.681249e-01, -1.573234e-01, -1.732136e-01, -2.748039e-02, -1.387133e-01, 3.276226e-02, 1.897937e-03, -1.349943e-01, 5.719521e-02, -1.131777e-02, 1.057503e-01, 7.476772e-02, -1.137056e-01, -1.435505e-01, -1.564481e-01, 1.547442e-01, -1.781258e-01, -2.411482e-02, 2.994462e-02, -1.307532e-01, 6.690255e-02, 3.142235e-01, 2.661633e-02, 7.674479e-02, 3.472048e-02, -1.236008e-02, -5.271632e-03, -4.448882e-02, -3.676971e-01, -4.844509e-03, -1.223500e-02, 8.201601e-02, 1.520378e-01, -1.517300e-01, -3.117709e-01, -1.838130e-02, -1.133075e-02, 5.721829e-02, -4.380292e-02, 1.008050e-02, -8.927265e-02, -2.361963e-01, 4.122809e-02, -2.772213e-02, 3.485720e-02, 1.060127e-01, -8.653881e-02, -8.294369e-02, -5.396807e-01, -3.532781e-02, 6.843013e-02, -1.158708e-01, 5.949539e-02, 3.628595e-02, 1.250338e-01, 5.337205e-02, -1.528776e-01, -2.013082e-02, 1.109558e-01, 1.311982e-01, -5.210950e-02, -1.192674e-01, -4.544105e-02, -1.135836e-01, -6.349882e-02, 8.186382e-02, -1.513262e-01, 2.181326e-01, 2.676780e-02, -7.743441e-02, 7.366143e-03, -3.478200e-02, -8.273460e-02, -6.866052e-02, 9.642472e-02, 3.011314e-03, -5.753126e-01, 1.300456e-01, -1.507199e-01, 2.972133e-02, 2.410237e-01, -3.701806e-02, -9.195248e-02, -6.762955e-02, 3.296200e-02, -1.476409e-01, -6.897016e-03, 1.495859e-02, 1.084484e-01, -5.444076e-02, 1.636345e-01, 1.850860e-01, -9.424679e-02, 4.232232e-02, -8.916550e-03, -5.766282e-02, 1.520280e-01, -1.579223e-01, 1.599642e-02, 7.936814e-02, -1.729481e-01, 1.188498e-01, 1.129895e-01, 1.133688e-01, -2.862969e-02, 7.341939e-02, -2.344128e-01, 1.852576e-01, 9.718775e-04, 1.649184e-01, -5.432941e-02, 7.227101e-02},
{-4.132919e-01, 2.417584e-01, -9.324085e-02, -1.829311e-01, -4.480604e-01, 9.654398e-02, -4.990109e-02, -1.950634e-01, 3.314790e-01, 1.802598e-02, 1.988627e-01, 1.730844e-01, -2.803589e-01, -3.049997e-01, 2.036068e-02, 1.902420e-01, 2.723638e-01, -2.130737e-01, -4.102993e-02, -1.406614e-01, -1.603679e-01, 2.243698e-01, -2.795663e-01, 3.776683e-01, 1.213946e-01, 1.095574e-01, -9.710596e-02, 1.423372e-01, 1.724035e-01, 8.688265e-02, 1.127015e-01, -1.056779e-01, -8.952480e-03, -7.498191e-02, 2.245523e-01, 2.649060e-01, -3.792375e-01, -2.952500e-01, 4.566553e-01, -1.592975e-01, 4.441412e-01, -2.200638e-01, -4.644940e-01, -3.738018e-01, -1.448338e-01, -4.016990e-02, 2.186492e-01, 1.087143e-02, 2.441734e-01, 2.206422e-01, -2.544887e-01, 1.144792e-01, 6.039643e-03, -1.943555e-01, 4.407271e-02, 4.410289e-01, -4.038914e-02, 1.269654e-01, -2.028017e-01, 2.266455e-01, -1.459491e-02, 1.697962e-01, 3.347278e-01, -5.440049e-02, -5.598627e-02, -2.752388e-01, 4.987663e-02, 1.086099e-01, -9.630392e-02, 4.077852e-01, -2.569239e-01, -8.852348e-02, 1.543888e-02, -1.602696e-01, -1.361508e-01, -1.956568e-01, 6.074507e-01, -1.216564e-01, 2.726004e-01, -8.164199e-02, -3.385921e-01, 2.814611e-01, -1.756503e-01, -6.651661e-02, -4.014362e-02, 1.332819e-02, -2.239985e-01, 4.530543e-01, -2.935953e-01, 2.020344e-02, 8.170969e-02, -8.703736e-02, 5.034236e-01, -7.469874e-02, 4.099555e-01, -1.142351e-01, 3.217886e-01, -3.914900e-01, -4.690161e-02, 1.493120e-01, 1.953630e-02, -3.542761e-01, 4.683174e-01, 1.480938e-01, 1.624983e-01, -6.729598e-02, 1.810016e-02, -7.643544e-02, 3.788178e-01, -3.165457e-02, 1.889821e-01, -3.008870e-01, -3.250768e-01, 2.209120e-02, -1.130976e-01, 2.192134e-02, 4.891625e-02, -1.596700e-01, 1.440764e-01, -8.788137e-02, -1.348031e-01, 2.498275e-01, -3.482029e-01, -6.518931e-02, -1.477504e-01, 4.618445e-01, -9.981948e-03, 1.286361e-01, -6.923702e-02, -1.736605e-01, -2.960018e-01, 5.745873e-02, -2.177003e-01},
{-1.727317e-01, 1.032189e-01, 7.779095e-02, -2.063116e-01, -2.913263e-01, -5.126221e-02, -5.471623e-02, 7.867555e-02, -5.701822e-02, -1.370058e-03, -6.443717e-02, -8.946156e-02, 2.104031e-01, 8.691514e-02, 1.152501e-01, 3.398285e-02, 1.076220e-02, 1.174236e-01, 7.485785e-02, 1.150794e-01, -1.164548e-01, -9.041059e-02, -5.718224e-02, -2.644202e-01, -1.437712e-01, -2.692396e-02, -5.477675e-02, 5.152423e-02, -2.775997e-02, 7.633105e-02, -1.034199e-01, -3.218919e-02, 1.508164e-02, -1.432949e-01, 7.944649e-02, -3.286272e-02, 7.026421e-02, -1.382936e-01, 2.758005e-01, 3.397143e-02, -7.107574e-02, 9.823984e-02, 4.255400e-01, -4.061829e-02, -1.012151e-02, -6.469951e-02, 1.135445e-01, -5.133844e-02, -2.193451e-02, -4.167694e-01, 8.243455e-02, -8.139264e-03, 1.148299e-01, -5.404420e-02, 5.555072e-02, -3.684814e-01, -1.137262e-01, -7.140873e-02, -4.672987e-02, -1.030859e-01, -5.158001e-02, -2.472527e-02, -2.274910e-01, 3.948809e-02, -8.249856e-03, 7.519373e-02, 4.163603e-02, -1.214657e-01, -6.231707e-02, -4.891793e-01, -1.087946e-01, 5.442878e-02, -1.005169e-01, 8.281622e-02, 1.381535e-01, -1.657297e-02, 3.065507e-02, -9.291127e-02, -4.955919e-02, 3.170923e-03, 1.347832e-01, -2.201286e-01, -2.155006e-03, -3.137450e-02, 5.078062e-02, -7.607851e-02, -7.437388e-02, -6.227450e-02, 7.530929e-02, 2.860391e-02, -1.247454e-01, 6.000265e-02, -1.674909e-01, -2.244345e-01, 5.746482e-02, 1.502938e-02, -8.395083e-02, -3.108404e-01, 2.100099e-02, 1.553275e-02, -9.531305e-02, 4.622410e-01, 5.916371e-02, -3.067934e-02, -3.359135e-02, 1.387435e-01, 2.286875e-03, 1.262335e-02, -4.197356e-02, -8.290591e-02, 4.811021e-02, 1.541256e-01, 2.426013e-01, -3.918093e-02, 1.253835e-01, -7.951903e-02, -5.561356e-02, -1.030134e-02, -1.189994e-02, 2.628818e-02, 4.949215e-02, -1.484823e-02, 1.321224e-01, 2.085032e-01, 7.324588e-02, -8.700466e-02, 2.054732e-02, -3.167573e-02, 7.343224e-02, 2.194996e-03, 9.247433e-02, 2.402405e-03, 5.303242e-03},
{-7.101175e-02, 1.154278e-01, -8.168662e-02, 3.046718e-02, -4.622894e-02, 2.051583e-02, -1.610865e-02, 2.153492e-02, 2.597149e-02, -3.570739e-02, -7.182667e-02, 1.246978e-02, -1.237068e-02, -8.381791e-02, 5.235457e-02, 9.546877e-03, -1.880640e-02, -7.693523e-02, 6.659788e-02, -3.273481e-02, -7.511648e-02, 3.855751e-02, 3.641028e-02, -1.046157e-01, 5.483771e-03, -7.244594e-02, 2.020753e-02, -6.169369e-05, -4.906021e-02, 1.051784e-01, 6.671090e-02, 4.287882e-02, 1.495430e-01, -3.691974e-02, -1.111672e-01, 9.126184e-02, -8.336268e-02, 6.245831e-02, -4.165831e-02, 6.665684e-02, -3.241931e-02, -8.082154e-02, 4.318472e-01, 8.124962e-02, -7.527877e-02, -6.903831e-02, -1.260219e-02, 5.042553e-02, -1.143810e-01, -3.075319e-01, -2.457341e-02, 1.154219e-01, -1.541754e-02, -1.156709e-02, 6.210140e-02, -1.595610e-01, -1.114524e-02, -7.264965e-02, -3.818274e-02, 1.451716e-02, -4.349599e-02, 5.259590e-02, -5.642989e-03, 1.256759e-02, -4.025557e-02, -1.023342e-03, -5.367832e-02, -1.468673e-02, -2.974496e-02, -2.805746e-01, -6.018518e-02, -1.598128e-02, -1.449385e-01, -4.501912e-02, -5.302280e-02, -4.832789e-02, 1.495076e-01, -1.079561e-01, 4.208897e-02, -4.529108e-02, 1.853274e-01, -5.500785e-02, 1.758311e-02, -7.684691e-02, -2.447090e-02, 6.358378e-02, 5.606435e-02, -8.060393e-02, 1.110042e-02, 1.360564e-02, 3.575585e-02, 8.515006e-02, 3.266863e-02, 8.550034e-02, -1.841749e-02, -1.214672e-01, 2.010437e-02, -8.717738e-02, -2.859862e-02, 3.451869e-02, 2.860137e-02, 3.424491e-01, 1.184946e-01, 5.529224e-02, 3.289180e-02, -4.379435e-03, 4.828906e-02, 9.649489e-02, 9.454408e-02, -9.215433e-02, 3.881160e-02, 9.239890e-02, 3.523448e-02, -3.590930e-02, 2.341642e-02, -7.804888e-02, 5.145336e-02, -9.818354e-02, -4.168422e-03, -5.618700e-02, -7.788425e-02, 6.624917e-02, 1.168090e-01, 1.032147e-01, -4.324112e-02, -6.584195e-02, -9.818605e-02, -1.888614e-01, -1.069425e-01, 2.190777e-01, 1.496384e-02, 1.868199e-01, -1.053532e-01},
{2.195560e-02, -1.160581e-02, -1.349912e-02, 9.863687e-02, -1.177209e-01, 4.232884e-02, 3.775835e-02, -8.580495e-02, -6.463169e-04, 5.862719e-02, -2.572870e-02, -3.040136e-02, 1.158522e-01, 5.423050e-03, -5.189544e-02, -1.796837e-02, -3.354481e-03, 8.403557e-02, 5.521263e-03, 8.741789e-02, -2.445101e-02, -3.001545e-02, -6.569327e-02, 8.067506e-03, 6.005879e-02, 6.570946e-02, -3.871718e-02, -3.748767e-02, -4.775364e-02, -4.593908e-02, -2.920570e-02, 3.517424e-02, 4.646974e-02, 6.780225e-03, -2.338025e-02, 1.313532e-02, 1.702324e-02, -8.852225e-02, 1.873840e-02, -2.038054e-02, -3.272576e-03, -1.117248e-02, 3.409605e-01, 3.160794e-02, -4.706929e-03, 2.519496e-02, -6.377007e-02, -5.270431e-02, 4.948925e-02, -1.647422e-01, -8.625925e-02, -1.133270e-03, -5.509594e-02, 4.823887e-02, 6.722166e-02, -1.799783e-01, 6.151281e-02, 1.649246e-02, 1.861850e-02, -5.100339e-02, -2.600194e-03, 8.819457e-03, 3.492491e-02, -5.400744e-02, 2.837067e-02, -8.480315e-02, -5.820968e-02, 1.591060e-02, 2.353037e-03, -1.307586e-01, -3.678489e-02, 1.854553e-02, -1.511990e-01, 1.330713e-02, 2.596442e-02, 4.136316e-02, -1.426295e-01, -1.551240e-02, 3.841223e-02, 6.786931e-02, 6.622659e-02, -3.369498e-03, -6.959507e-02, 7.067171e-02, -4.646342e-02, -9.304339e-03, -2.307367e-02, 6.963880e-02, -2.110291e-02, -7.295641e-02, 1.982641e-02, 8.661328e-02, -2.960196e-02, -6.246442e-02, -1.985571e-02, 5.137839e-02, 9.241728e-02, -3.683976e-03, 9.569853e-02, 5.818020e-02, 1.839998e-02, 7.343917e-02, 3.967326e-02, -4.356000e-02, 9.411558e-03, 5.216396e-02, -1.044557e-01, 3.902243e-02, 1.308841e-03, -3.078881e-02, 5.328283e-02, 1.051474e-01, -2.283899e-02, -4.909288e-03, 6.876402e-02, 3.405262e-02, -8.689123e-02, 2.871599e-02, 4.848219e-02, 2.150394e-02, -4.543247e-02, -1.067261e-01, 7.669408e-02, 7.788054e-04, 3.722322e-02, -2.218503e-02, -3.352033e-02, -1.029155e-01, 7.271629e-02, 9.463807e-02, -3.260759e-02, 8.558908e-03, -4.243662e-02},
{-4.283877e-01, 2.705723e-01, -2.452329e-01, -3.024235e-01, 4.204518e-02, 2.297070e-01, -7.835522e-02, -1.314469e-01, 2.589394e-02, 4.930327e-02, -1.472104e-02, 4.741123e-02, 2.519064e-02, -1.080620e-01, 2.146256e-02, 4.887037e-02, 2.658508e-01, 6.879997e-03, -2.998850e-02, -1.262899e-02, -3.615293e-02, -1.151520e-02, -3.717800e-01, 3.026889e-01, -5.690967e-02, -8.929158e-03, -6.101383e-02, -6.556718e-02, 9.511384e-02, -6.114127e-02, 1.161490e-01, -2.129475e-02, 2.813443e-01, -2.413931e-02, 3.940750e-01, 1.101769e-01, -5.596081e-01, -4.399720e-01, 5.109583e-01, -2.621676e-02, 4.740205e-01, -4.150936e-02, -7.578510e-02, -4.745103e-01, -3.512960e-02, 1.304977e-01, 1.280774e-01, -2.491217e-02, 6.642697e-01, 4.258212e-01, -3.000167e-03, 1.040897e-01, 3.105964e-02, -3.028922e-02, 5.183331e-02, 6.588653e-02, 3.509272e-02, -1.092725e-01, -9.696703e-02, 5.524650e-01, -5.289777e-02, -9.773278e-03, -5.781873e-02, -6.225131e-03, -1.139117e-01, -2.210851e-02, -4.052053e-02, -3.501140e-02, 7.389182e-02, 4.076560e-01, -1.483803e-01, -7.194347e-02, -4.212947e-03, -1.072709e-01, -5.551834e-02, -2.354661e-03, 8.418240e-01, 1.283571e-02, 1.626828e-01, -2.760743e-02, -5.430049e-01, 2.500971e-01, -4.073606e-02, 6.099783e-02, -1.010018e-01, -1.217140e-01, -4.859837e-02, 4.204392e-01, 5.284258e-02, -6.138220e-02, -9.803513e-02, 1.493626e-01, 5.835519e-01, -9.256338e-02, 4.555779e-01, 8.042415e-02, 6.776940e-02, -6.044635e-01, 1.084921e-01, -3.838846e-02, 4.824668e-02, -4.331918e-01, 2.674942e-02, 2.972053e-01, 9.723198e-02, -6.791509e-02, 8.164224e-02, 3.856895e-02, 3.824603e-01, 7.428613e-02, -8.044150e-02, -7.361523e-02, -5.494356e-01, -1.392423e-02, -2.323766e-01, 7.877381e-02, -1.195015e-01, 3.534110e-02, 1.595729e-01, 6.794632e-02, -1.262734e-01, 3.172038e-02, -1.881587e-02, 1.647963e-01, 1.647684e-01, 1.528563e-01, -2.801764e-02, 4.118187e-01, 3.940508e-03, 1.438678e-01, -2.258117e-01, 3.042324e-01, -3.643855e-02},
{5.654095e-02, -6.341087e-02, -7.522798e-02, 5.615479e-03, -1.062283e-01, -6.416422e-03, -6.400698e-02, -7.372215e-02, -1.275814e-02, 5.148313e-02, -3.907698e-02, -6.110472e-02, 1.803545e-02, 2.763580e-03, -8.495689e-02, 8.512928e-02, -2.320569e-02, 7.406465e-02, -5.766036e-03, 3.379048e-02, -9.118575e-02, 9.932985e-03, -1.061019e-01, -8.049884e-02, 9.033167e-02, -7.364738e-02, 2.032613e-02, 2.913688e-02, 7.472228e-02, 9.308269e-02, 1.101424e-01, 9.216433e-03, -2.506178e-02, -1.234987e-02, 2.163111e-01, -3.844375e-02, -6.106884e-02, -5.830152e-02, 2.272513e-01, 3.647352e-02, 1.510382e-01, 6.965704e-02, 2.882191e-01, -8.897463e-02, -2.224592e-02, -1.013922e-01, 4.477636e-02, -5.889136e-02, 3.264357e-02, -2.347191e-02, 4.151602e-02, 1.057478e-01, -5.159017e-02, 4.812493e-03, -5.673167e-02, -7.398949e-02, 2.009712e-02, -5.728619e-02, -9.661847e-02, 1.027486e-01, 3.597515e-02, 7.889232e-02, -2.972240e-02, 6.875934e-02, 9.089267e-02, -8.830556e-02, 1.547841e-02, -4.670976e-02, 7.408137e-02, -8.226186e-02, -4.463106e-03, 7.980511e-02, -1.033412e-01, 5.986645e-02, -6.355076e-02, -4.656833e-02, -1.527388e-02, -3.112692e-02, 1.113028e-01, -8.732961e-04, -3.083174e-02, -2.255582e-02, -6.297635e-02, 6.098270e-03, -6.710865e-02, 8.895034e-02, -4.208040e-03, 1.137094e-03, 4.205123e-02, -1.975257e-02, 8.082980e-02, 3.427874e-02, -2.527920e-02, -1.066992e-01, 7.556050e-02, -1.048814e-01, -1.708756e-02, -1.797464e-01, 1.653790e-02, -2.551817e-02, 2.424209e-02, 1.860636e-01, -4.140086e-02, -1.961264e-02, -3.694889e-02, -2.192617e-02, 9.169130e-02, -3.091800e-02, 9.940375e-02, -5.315940e-02, -2.580066e-02, -1.038620e-01, -3.405346e-02, -3.817299e-02, -6.257326e-02, 4.850255e-02, -3.228176e-02, -6.927837e-02, -3.529095e-02, -6.497531e-02, -8.440255e-02, 7.586674e-02, -2.617643e-02, 1.778994e-02, -3.122461e-02, -8.374381e-02, -6.701019e-02, -1.014559e-01, 6.551930e-02, 5.183161e-02, -4.466742e-02, -4.611880e-02, 6.645454e-02},
{5.296048e-02, -4.805734e-02, -4.524608e-02, -6.669249e-02, -1.691335e-01, 5.454912e-02, 2.325562e-03, -6.932002e-02, -2.023226e-02, -5.300051e-02, 7.970420e-04, 2.636268e-02, -1.751386e-02, 7.919710e-03, 1.708948e-02, 5.758792e-02, 5.577312e-02, 4.057991e-02, 5.285234e-02, -6.892672e-02, -1.076047e-01, 2.664100e-02, 1.060566e-01, -1.286540e-01, 8.240578e-02, 5.162600e-02, -2.915514e-02, -6.085771e-02, -9.160751e-02, 4.729744e-02, 4.569254e-02, 9.865893e-03, 6.215303e-02, -3.439152e-02, -3.046341e-02, 2.518793e-04, -5.017262e-02, -5.752317e-02, -2.319082e-04, 3.692089e-03, 1.280676e-02, 9.940211e-02, 3.902636e-02, -9.897127e-02, -8.022647e-02, 5.402330e-02, -5.457325e-02, -7.004895e-02, -1.323000e-02, -6.962662e-02, -2.672854e-02, -3.501985e-02, 7.329500e-02, -8.481958e-03, 2.447507e-02, -1.465900e-01, -5.098477e-02, -7.215475e-02, 4.043875e-02, 6.208249e-02, 5.115592e-02, -8.911803e-02, -1.513382e-02, 9.373812e-02, 7.593849e-02, -6.019680e-02, -3.002844e-02, -5.179122e-02, -3.779208e-02, -3.136571e-02, 1.042444e-01, -2.593040e-02, -1.168746e-01, -7.148515e-02, -7.544207e-02, 4.643611e-02, 6.987973e-02, -8.399796e-02, 2.201588e-02, -3.708815e-03, 4.515456e-02, -2.926587e-02, 5.641848e-02, -5.288513e-02, -2.439132e-02, -5.492457e-02, 2.206106e-02, 8.725441e-02, -2.243750e-02, 8.436587e-02, 3.507233e-02, -7.086884e-02, -5.531308e-02, 4.102148e-02, 1.166575e-01, -4.366329e-02, -4.119186e-02, -2.086694e-01, 7.250700e-03, 2.111383e-02, 8.045933e-02, 5.748677e-02, -8.684115e-03, 2.055091e-02, 5.198829e-02, -3.014606e-02, 1.666413e-02, 9.309307e-02, 1.108327e-01, -5.065904e-03, 3.341495e-02, 1.017698e-01, -7.262657e-02, -6.378548e-02, 3.808992e-02, 6.562983e-03, 9.086563e-02, -4.106377e-02, 2.456889e-02, -7.330038e-02, -7.023711e-02, -3.964045e-02, -6.583230e-03, 1.483101e-01, -2.531710e-02, 4.785578e-02, -3.953105e-02, -6.013174e-02, -5.438314e-02, -1.833327e-02, 1.755619e-02, 2.531429e-02, 8.890263e-02},
{-6.058759e-02, 2.562741e-02, 7.993681e-02, 2.566348e-02, 1.240177e-02, 5.242322e-02, -2.468623e-02, -2.929473e-02, -4.004383e-02, -5.953149e-02, -1.392480e-03, -3.920963e-02, -4.773994e-02, -8.508318e-02, -3.013255e-02, -2.123510e-02, 4.419116e-02, -8.314646e-02, -7.969676e-04, 6.074857e-02, -1.366498e-02, -3.370525e-02, -1.356775e-02, 5.048334e-03, 3.143363e-03, 3.280416e-02, 6.282275e-02, 4.931013e-02, 8.730212e-02, 2.754030e-03, 4.194420e-02, 2.131375e-02, 6.351612e-02, 9.563907e-02, -4.102036e-02, 6.689283e-02, -1.301145e-01, -9.252507e-02, 9.413916e-02, 9.164924e-02, 5.308045e-02, -5.421422e-03, 1.446686e-01, 1.874463e-02, -2.894989e-03, -1.132558e-01, -5.312284e-02, -6.006115e-02, -1.847019e-02, 1.913701e-03, 1.370293e-04, -1.536612e-02, 3.436267e-02, 3.804241e-03, -4.362603e-02, -7.505905e-02, -5.467682e-02, -9.462368e-02, -6.247737e-02, -7.103241e-02, -4.045809e-02, 7.762254e-03, -7.205276e-02, -1.773266e-02, -4.714174e-03, 1.276524e-03, -4.487227e-02, 7.365429e-02, 5.947096e-02, -1.763428e-02, 7.225087e-02, -3.184146e-02, 2.368344e-02, 2.530037e-02, -3.725345e-02, -8.515554e-02, 5.581787e-02, -2.251411e-02, -6.982626e-03, -7.155715e-02, -1.545989e-02, -6.093154e-02, 1.644265e-02, 3.941268e-02, -2.252882e-02, 7.291316e-02, -1.567784e-02, 1.567565e-02, 4.585101e-02, -1.255696e-02, -1.114677e-02, 6.116672e-02, -3.234002e-02, -2.568903e-02, 9.579090e-02, -3.017903e-02, 4.028191e-02, 8.744447e-02, -2.924468e-02, -4.117198e-02, 2.218019e-02, 1.377468e-01, 3.177814e-02, 4.939823e-02, 7.074153e-02, 4.812365e-02, 1.366953e-02, -4.800475e-02, 3.083310e-02, 6.472129e-02, -1.018504e-02, -1.260525e-02, -1.386234e-01, -1.850774e-02, -4.103183e-02, -5.267170e-02, 7.927147e-02, -1.189365e-02, 1.631936e-02, 3.867624e-02, 5.912061e-02, -1.639166e-02, -5.608492e-02, 1.160799e-01, -1.083854e-01, -1.423029e-02, -6.851906e-02, -4.824419e-02, -6.977949e-02, 2.504355e-02, 5.637315e-02, 5.379763e-02, -2.911258e-02},
{-1.206170e-01, -1.921689e-02, 7.373987e-03, -7.677711e-02, -3.350238e-01, 1.004387e-01, -6.846225e-02, 2.870213e-03, 1.491992e-01, 1.454654e-02, 1.361612e-01, -2.126317e-02, -2.804360e-01, -9.508462e-02, -7.302225e-02, 6.613872e-02, 8.945004e-02, -7.873980e-02, 5.460600e-02, -9.543287e-02, 9.315459e-02, 1.575844e-01, 1.450518e-02, -2.598953e-02, 1.166473e-01, 8.959005e-02, -1.822579e-01, 7.384871e-02, 5.175523e-02, -1.002563e-01, -5.956001e-02, -4.074991e-02, -8.604319e-02, 2.632192e-02, 2.084991e-01, 1.306351e-01, 1.813700e-01, 9.755796e-02, -1.844846e-02, 4.406400e-02, 1.550989e-01, 2.015885e-02, -4.625332e-01, -4.250384e-01, -4.164334e-04, 5.013575e-02, -1.910752e-02, 1.479250e-02, 1.168885e-01, 1.746257e-02, -1.039963e-01, -5.644513e-03, 7.437658e-02, -1.429057e-01, 1.365020e-02, 2.037611e-01, 6.915955e-02, 1.375567e-01, -7.309227e-02, -1.773579e-01, 1.829773e-02, 6.203265e-02, 1.253133e-01, 6.347308e-02, -1.423067e-02, -5.930723e-03, 4.932242e-02, 1.003143e-01, -9.450311e-02, 7.908960e-02, 1.065120e-01, -2.097274e-02, 1.250045e-01, -1.037485e-03, 1.287008e-02, 5.009757e-02, 3.556733e-01, -4.887695e-03, 8.913621e-02, 4.468992e-02, -2.661182e-01, -2.656090e-02, -1.894009e-02, -3.926293e-02, 9.639230e-02, 3.224016e-02, -1.819729e-01, 7.010837e-02, -1.703926e-01, 2.401499e-02, 1.352290e-01, -2.181046e-01, 9.233177e-02, -1.958262e-02, 9.516895e-02, -1.248061e-01, 2.396894e-02, 4.147615e-01, -1.783620e-01, 5.242237e-02, 3.755999e-02, -1.219799e-01, 6.955849e-02, -6.506869e-02, 2.692328e-02, -2.840264e-03, 4.580190e-03, -9.885694e-02, -2.493946e-02, 6.956287e-02, 1.386300e-01, -3.262616e-01, -3.038677e-01, 1.640146e-02, -3.142362e-02, 1.653329e-01, 6.824238e-02, -8.322278e-02, 1.271896e-01, 2.315668e-02, 1.408776e-02, 1.444183e-01, -7.058074e-02, -1.844883e-01, -6.867138e-02, 1.867415e-01, -5.536630e-02, -1.340122e-01, -6.806705e-02, -6.328668e-02, 9.319076e-03, -1.357534e-02, -4.904454e-02},
{5.357303e-02, -3.452629e-02, 7.791124e-02, -6.771614e-02, 1.648862e-03, 2.219345e-02, -5.058097e-02, -8.541269e-02, -1.182875e-01, 1.232989e-02, 3.660397e-02, 2.210405e-02, 1.171031e-01, 4.202146e-02, 4.481501e-02, 2.860246e-02, 4.391352e-02, 9.799301e-03, -5.406446e-02, 1.352032e-02, -1.663237e-01, 1.104850e-02, 2.893498e-02, -4.212121e-02, -9.652357e-02, 1.427970e-02, -2.589158e-02, 1.864845e-02, -8.671965e-02, 5.674693e-02, 1.557804e-03, 5.272965e-02, -7.149289e-02, 1.448597e-02, -2.216313e-03, 9.303121e-03, 8.165644e-02, -1.096528e-01, -3.846405e-02, 7.632551e-02, 2.301741e-02, -5.373770e-02, 2.252239e-01, 2.066679e-02, -7.586836e-04, 7.940707e-02, 5.932795e-03, -5.393917e-02, -8.703141e-02, -1.787018e-01, -3.730041e-02, 6.183073e-02, 4.139905e-02, -3.257124e-02, -6.026642e-02, -1.342236e-01, -6.553876e-02, -9.939363e-02, -4.330070e-02, -7.388134e-03, -9.689785e-02, 3.369426e-02, -3.906136e-02, -1.652532e-02, -3.611732e-02, -6.857716e-02, 6.612852e-02, -4.831512e-03, 4.320596e-03, -1.415126e-01, -6.927832e-03, -3.208731e-02, -6.811281e-02, 6.897765e-02, 6.229421e-02, 1.670513e-02, -1.335176e-01, -1.342908e-01, -4.252844e-02, -1.328309e-02, 1.127063e-01, 2.369408e-02, 6.672492e-02, -5.462237e-02, 6.931110e-02, -9.265804e-02, -4.077873e-02, -4.319860e-02, -1.303172e-02, -9.835185e-03, -3.732179e-02, 5.016466e-02, 5.146263e-02, -5.505395e-03, 1.922590e-02, -4.100898e-02, 2.072760e-02, -1.015673e-01, -5.320838e-02, -3.304907e-02, 2.394215e-02, 1.657265e-01, -2.463770e-03, 3.263920e-02, 9.985589e-02, 6.134895e-02, -2.653121e-02, 1.652577e-02, -7.491180e-03, -9.610732e-03, -5.467042e-02, -1.627495e-02, 1.294797e-01, -4.324819e-02, 5.961068e-02, -7.857086e-02, -2.585046e-03, -5.913896e-02, -6.148421e-02, 8.991896e-02, 7.449751e-02, 4.989692e-02, -1.984000e-02, 1.300175e-01, -5.079811e-02, 4.006749e-02, 3.101051e-02, 4.813708e-02, 6.995189e-02, 5.470230e-02, 5.779874e-02, 9.614516e-02, 1.141205e-01},
{4.200725e-02, -1.016914e-01, -6.122966e-03, 9.001157e-02, -1.043066e-01, 9.360383e-02, 6.473284e-02, 4.512188e-02, 5.905236e-02, -4.158922e-02, 5.887153e-02, 5.851783e-02, 4.474965e-02, -3.811400e-02, -2.197582e-02, 3.670347e-02, -7.302855e-03, 4.789125e-03, 2.540758e-02, -9.472617e-02, 4.710700e-02, 6.166638e-03, -1.110782e-01, 1.055190e-01, 1.234868e-02, -9.751359e-02, -6.385799e-02, 7.975274e-02, -1.870356e-02, 4.342921e-02, -2.512875e-02, -5.158455e-02, 7.360511e-02, 2.827983e-02, 1.620351e-02, 3.349907e-02, 5.680234e-02, -8.523237e-02, 9.483570e-02, -1.373656e-02, -5.403733e-02, -9.802757e-03, -4.944000e-03, -1.400205e-01, -5.087394e-03, 6.941564e-02, 3.781232e-02, -7.959349e-02, -3.575620e-02, -1.008018e-01, -2.705765e-02, 7.145410e-02, 1.050309e-02, -4.906249e-02, -8.445164e-02, -1.074295e-01, 6.672512e-02, 3.131302e-02, -6.548481e-02, -2.264274e-02, 6.639285e-02, -8.319421e-02, 5.194591e-02, 6.675288e-02, 4.621175e-03, -8.212199e-02, -2.731385e-02, 1.221123e-02, -8.521162e-02, 2.466459e-02, -2.455646e-02, 3.593019e-02, -7.165659e-04, -6.219078e-02, 2.597684e-02, -1.200533e-02, -1.396551e-01, -8.221748e-02, 1.877006e-02, -2.080332e-02, 7.871490e-02, -5.021304e-02, -8.933457e-02, -5.249185e-02, 6.448139e-02, 2.494336e-03, 5.387488e-02, 3.595347e-02, -3.231639e-02, -4.022112e-02, 8.121992e-02, -3.316415e-02, 1.161334e-01, 1.966421e-02, -3.203949e-02, 9.456641e-04, -6.490068e-02, -1.747434e-01, 8.060383e-02, -5.358739e-02, 8.961597e-02, 2.990497e-02, -8.640967e-02, -1.130001e-02, -4.747204e-02, -1.768774e-02, -8.050114e-02, -1.469544e-02, -4.963448e-02, -4.466343e-02, 4.869716e-02, 8.635839e-02, -2.620113e-02, 2.862386e-02, 4.539454e-02, 8.115467e-02, 5.556280e-02, 8.303702e-02, 4.463453e-02, 6.786683e-02, -1.358415e-02, 4.620266e-02, 8.248125e-02, 1.236594e-02, 5.158313e-02, -3.660688e-02, -1.476847e-02, 3.429610e-02, 3.328899e-02, 3.934843e-02, -4.418230e-03, 3.039562e-02, 1.000366e-01},
{-4.397974e-02, -5.367285e-02, -1.243266e-02, 6.313574e-02, -2.498760e-01, -8.150770e-02, -9.825450e-02, -4.489491e-02, -6.795328e-02, -2.568034e-02, 9.845582e-02, -7.802644e-02, 1.931790e-02, 1.024385e-02, -2.925721e-02, -2.683657e-02, -2.831325e-02, -7.631492e-02, 5.245642e-02, 2.471205e-02, 1.465638e-02, -8.392440e-02, -9.116574e-02, -4.603772e-02, -1.051624e-03, -9.304999e-02, -2.066839e-02, -3.118244e-02, -5.116212e-02, -6.707665e-02, 3.074740e-02, 7.080636e-02, 1.738583e-01, -4.440393e-02, -7.063320e-02, 3.843539e-02, 4.431829e-02, -1.078085e-01, 9.078506e-02, 5.008078e-02, -1.185720e-01, 1.245102e-01, -1.396516e-01, 1.562035e-01, 2.618193e-02, -5.175098e-02, -6.221679e-02, -5.282691e-02, -1.960342e-02, -3.391994e-02, -8.588186e-02, 4.184626e-02, 1.316895e-02, 9.656015e-02, -7.457452e-02, -1.219828e-01, 3.348151e-02, 2.088987e-02, -2.589426e-03, -1.485202e-01, -7.345103e-02, 3.018099e-02, -1.392496e-01, -4.620698e-02, 4.360145e-02, 1.387672e-01, -8.339596e-02, -4.795527e-02, 8.231930e-02, -1.198102e-02, -4.781350e-03, 3.528637e-02, 4.039053e-02, -6.275246e-02, -5.922500e-02, -3.888494e-02, -1.411455e-01, -3.910233e-02, 1.296124e-02, 6.799795e-03, 1.127086e-01, 2.698287e-02, -2.047024e-02, -9.010748e-02, 3.363758e-03, -3.753299e-02, 8.674730e-02, 1.160145e-02, -8.072942e-03, -9.204320e-02, 8.897972e-03, -1.943688e-02, 1.572182e-01, 1.105149e-01, 1.161456e-01, 4.064438e-02, -1.284045e-01, -2.671283e-01, 1.624142e-02, -1.647258e-02, 8.478025e-02, -1.003922e-01, 4.640755e-04, -1.495925e-02, -2.265160e-02, -3.427567e-02, -3.832477e-02, 9.923593e-03, -3.079788e-02, 5.572034e-02, -2.128441e-02, 3.105483e-01, 2.015832e-01, 7.705662e-02, 8.827452e-02, -5.240434e-02, -4.177032e-02, 3.570307e-02, 4.282440e-02, 2.490111e-02, -3.841064e-04, 1.819499e-02, 6.944251e-03, 8.440432e-02, 1.292533e-01, 9.644384e-02, 1.654418e-01, -3.651842e-02, 1.151292e-01, -4.154979e-02, 8.258608e-02, 5.012450e-02, 3.152157e-02},
{6.745145e-02, -1.502884e-02, -7.082521e-02, -5.924716e-02, 2.146240e-02, 1.574631e-03, -5.467909e-02, -5.039291e-02, -2.610251e-02, -3.802289e-02, 6.082937e-02, -5.027266e-04, 1.954387e-02, -1.819627e-02, 9.105027e-02, -4.993186e-02, -7.228144e-02, 1.013542e-01, 9.927446e-02, 9.571205e-02, 4.496659e-02, -1.204271e-01, -5.764322e-02, -4.745009e-02, -1.050126e-02, 5.164924e-02, 3.230653e-02, 3.655042e-02, -1.169859e-02, 1.315302e-02, 2.469447e-02, 4.491463e-02, -1.361975e-02, 2.433564e-02, -1.697022e-01, 2.943199e-03, 6.112629e-03, 5.544490e-02, -1.945667e-02, -6.204950e-02, -1.741198e-01, 2.009478e-01, -1.453890e-01, -2.509044e-02, 2.759815e-02, 4.366734e-02, -5.762587e-02, 3.437589e-03, -7.395194e-02, -2.145767e-01, -3.569894e-02, -8.900302e-02, -8.202215e-02, 1.737744e-01, 2.401680e-02, 1.153119e-01, 1.259390e-02, 1.253864e-01, -4.943450e-02, 4.317132e-02, 7.267464e-03, -8.161493e-02, -2.688336e-02, 4.172054e-02, -8.643686e-02, 1.050178e-01, 5.026795e-02, -1.157580e-02, -5.177206e-02, 3.927376e-03, 6.318294e-02, -3.427831e-02, 6.903306e-02, -4.936115e-02, 3.742095e-02, -4.310014e-02, -1.633978e-01, -5.355658e-02, -6.607929e-02, 1.554621e-03, 4.331626e-02, 6.754998e-02, 6.857266e-02, -1.956352e-02, 5.166358e-02, -4.768592e-02, 6.068058e-02, -6.334114e-03, 1.404991e-01, -7.656139e-02, 4.247278e-02, -1.730104e-01, -5.494456e-02, 8.660307e-02, 8.435095e-02, -5.134585e-03, -5.855495e-02, -2.770205e-01, 1.024447e-02, -3.871989e-02, -7.269114e-02, -4.867349e-02, -9.031694e-02, -3.256196e-02, -4.858543e-02, 8.880586e-04, 4.839744e-02, 5.869080e-02, -7.625364e-02, -3.793319e-02, 7.889460e-02, 2.503352e-01, 7.680706e-02, 1.210255e-02, -7.182866e-02, 1.223635e-01, 2.673406e-02, 9.698176e-02, 4.476754e-02, -9.220701e-02, -2.889831e-02, 6.261746e-02, 1.900148e-02, -6.187952e-02, 1.223329e-01, -3.466062e-02, 1.800050e-01, -1.764187e-01, 3.583995e-02, 9.852325e-05, -6.336475e-02, 5.707058e-02, 7.369055e-02},
{2.499670e-01, -1.335965e-01, -2.688075e-02, -5.652423e-02, -1.005449e-02, -7.865717e-02, -6.271201e-02, 6.629115e-02, -1.624907e-01, -1.843752e-02, 1.014454e-01, -1.010797e-01, -5.505968e-03, -7.082972e-02, 2.179899e-03, -3.857278e-02, -2.064601e-02, -3.786762e-02, 8.596459e-02, -6.112540e-02, 1.738278e-02, 4.385920e-03, 2.013086e-02, 2.327819e-02, -7.968753e-02, 7.964344e-02, 4.514166e-02, -2.315594e-02, 4.855908e-02, -1.372140e-02, 2.409826e-02, 1.341451e-02, -8.065408e-02, 6.670033e-02, 6.034900e-02, 5.507847e-03, 4.609993e-02, -3.557084e-02, 5.346372e-02, 7.628460e-02, 9.193960e-02, 1.236792e-01, -3.032935e-01, -5.273822e-02, 1.281827e-01, 1.427591e-02, -7.678077e-02, -3.673231e-02, 8.418126e-04, 1.494470e-01, -2.860033e-02, -4.735701e-02, -5.440434e-02, 1.028289e-01, -1.024910e-01, 1.574481e-01, -2.923536e-02, 6.257123e-02, 7.823882e-02, 1.611830e-02, -1.904397e-02, -5.709590e-02, 7.990293e-02, -1.175011e-02, -1.196353e-01, 1.135335e-01, -3.202826e-02, 5.511386e-02, -4.520804e-02, 1.885684e-01, 7.636127e-02, -7.166002e-03, 7.344032e-02, -7.260567e-02, -4.725746e-02, 7.312055e-02, -5.799694e-02, -6.415814e-02, -1.811178e-02, 1.480268e-01, 4.882453e-02, 9.084418e-02, -1.915695e-02, -1.321965e-02, -4.556919e-02, -5.496782e-02, -6.316038e-03, 7.524180e-02, 1.485340e-01, -3.738857e-02, -6.577336e-02, -2.867469e-01, -8.025347e-02, -4.973282e-02, -8.899102e-02, 1.966162e-02, -1.211126e-01, -2.364507e-01, -4.787293e-02, -1.130366e-01, 4.188893e-02, -9.287414e-02, -5.094753e-02, 2.558059e-02, 6.772582e-02, 2.441512e-02, -5.495154e-02, -2.099706e-02, -9.449064e-02, 7.278892e-02, -1.277762e-01, -3.291995e-02, -1.102772e-01, 1.024214e-02, -6.038005e-02, 3.059741e-02, -8.689736e-03, -4.655024e-03, -7.790412e-02, -7.591516e-02, 5.368017e-02, -5.207461e-02, -5.102094e-04, -8.401804e-02, -2.823689e-02, 1.313149e-02, 6.084257e-02, 4.196196e-02, -1.469068e-02, -1.318142e-02, 9.153662e-02, 9.587066e-03, 7.931773e-02},
{1.232499e-01, -8.852001e-02, 3.438469e-02, -2.000465e-02, -1.446221e-01, -5.784330e-02, 3.971762e-02, 5.123395e-02, 4.372743e-02, -9.173416e-02, 1.417309e-02, 7.449101e-02, 4.073840e-02, -2.458704e-02, 7.168519e-02, -3.147072e-02, 3.164080e-02, 2.045891e-02, -2.471734e-02, 7.041005e-02, 1.633073e-02, -4.834891e-02, 3.387970e-02, 6.852380e-02, 3.050070e-02, -5.521825e-02, -6.278412e-02, -2.617880e-02, 5.027049e-02, 9.021901e-02, -3.136986e-02, 5.745356e-03, -4.583513e-02, 1.114604e-01, -8.258712e-02, 2.231603e-02, 4.770738e-02, 5.664449e-02, 2.465301e-02, -2.280642e-02, -9.139507e-03, 1.047068e-03, -3.961551e-02, -6.115476e-02, 6.728148e-02, -3.590746e-02, 1.775959e-02, 6.753600e-03, -6.321120e-02, -5.349248e-02, -8.053699e-02, -6.758242e-02, -7.413182e-02, 9.341386e-02, -2.899376e-02, -9.694434e-02, 5.753705e-02, -7.776003e-02, 5.551594e-02, -1.727077e-02, -3.900646e-02, -7.630660e-02, 9.139385e-02, 7.105044e-02, -7.588794e-02, -3.671464e-02, -2.925737e-02, -3.257084e-02, 2.107673e-02, -7.660160e-02, 7.499231e-02, 6.656568e-02, 6.164896e-02, 1.571764e-02, -3.946958e-02, -3.282246e-02, 8.963823e-03, -6.723411e-03, 1.393208e-02, 3.777397e-02, -2.379147e-02, -8.702840e-02, -1.546749e-02, -8.406531e-02, -6.923074e-02, -6.323026e-02, 6.411243e-02, 6.659883e-02, -3.922990e-02, 2.929329e-02, 2.287917e-02, 7.356896e-02, 7.849516e-02, 8.054399e-02, 8.860300e-02, 3.245768e-02, -3.925659e-02, -1.212155e-02, -7.217616e-02, -1.291510e-02, 7.171264e-02, 4.113385e-02, -7.670517e-02, 6.283399e-02, 6.283254e-02, -7.887951e-02, -5.541451e-02, -8.291683e-02, 2.589086e-02, -7.555423e-02, 1.060579e-01, -9.196814e-02, -3.507401e-02, 6.890849e-02, 6.363915e-02, -1.461994e-02, 6.935511e-04, -4.277138e-02, -8.481852e-02, 5.782108e-02, -6.257525e-03, -3.974209e-03, 6.818897e-02, 4.320347e-02, 6.420504e-03, 5.015098e-02, 7.489824e-02, -7.416724e-02, -3.997776e-02, 7.359784e-02, -4.459757e-02, -2.229910e-02, 5.165830e-02},
{-9.389793e-02, 6.385139e-02, 1.842034e-02, -1.932954e-01, -8.295611e-02, -1.106773e-02, -4.056081e-02, 1.349635e-02, -2.719601e-02, -4.283964e-02, -1.559752e-01, 7.568027e-02, 1.973262e-02, 1.479914e-02, 1.156078e-01, -7.483191e-02, -5.522787e-02, 6.488517e-02, -1.349224e-02, 5.257884e-02, 7.806560e-03, -4.264249e-02, 9.649229e-02, -4.469563e-02, -7.549132e-02, -1.020168e-01, 9.972359e-02, 1.000828e-02, 6.148981e-02, -5.858302e-02, -3.934092e-02, 7.367481e-03, 1.077591e-01, -9.223526e-02, -1.137816e-01, 3.584524e-02, 7.537793e-02, -1.292243e-02, 1.639397e-01, -5.487113e-02, -6.012651e-02, 5.719773e-02, 2.379403e-01, 3.202608e-02, 8.746173e-02, 6.657770e-02, -1.754188e-02, -5.397264e-03, -5.572050e-02, -1.906153e-01, 2.595697e-03, -5.613584e-03, -5.281674e-02, -6.529385e-03, -4.928799e-02, -2.180521e-01, 1.222711e-02, -6.810655e-02, 8.267356e-02, -9.574389e-02, -2.858737e-02, -5.758443e-02, -3.963591e-02, 6.265897e-02, 6.888873e-02, 1.148196e-02, -8.322898e-02, -1.824595e-02, -5.535389e-02, -3.596691e-01, 1.295666e-02, 1.667766e-02, -1.814633e-01, 1.116990e-01, 4.874503e-02, 7.734449e-02, 4.170108e-02, -1.030928e-01, 1.162903e-01, 7.120222e-02, 1.623543e-01, -5.354491e-02, 6.649236e-02, -6.894040e-02, -2.391194e-02, 4.428400e-02, -5.140743e-02, -5.551311e-02, 4.596996e-03, -3.422916e-02, -1.000396e-01, 5.795781e-02, -1.696481e-01, -3.825955e-02, 7.405038e-02, 3.648432e-03, 3.862889e-02, -1.388974e-01, -6.555142e-02, 6.361825e-03, 2.423615e-02, 2.560968e-01, -5.220817e-02, -7.073697e-02, 6.551764e-02, 1.100677e-01, 3.113773e-03, -3.362416e-02, -1.461523e-02, -9.486572e-02, -4.749418e-02, 5.091507e-02, 2.302579e-01, 5.741873e-02, 5.472215e-02, 3.606374e-03, 1.808175e-02, -3.744282e-02, -1.201736e-01, -3.328248e-02, 5.641080e-02, -3.559859e-02, 1.039332e-01, 1.022230e-01, -6.134256e-02, 2.620629e-03, -3.075959e-02, -2.148544e-01, 9.195793e-02, 1.147684e-02, 9.624365e-02, 6.702160e-02, 4.959074e-02},
{4.732920e-02, -3.465448e-02, -1.290708e-01, -1.426176e-01, -4.678965e-03, -5.194164e-02, -2.336511e-02, -9.717367e-02, 2.226087e-02, 5.350760e-02, -1.086697e-02, 9.511308e-02, 2.705619e-02, 1.530216e-02, -5.234697e-02, -4.386109e-02, -5.219397e-02, -5.229385e-02, 5.114681e-02, 8.547627e-02, -1.552711e-01, 3.183760e-02, 5.473335e-02, -1.779369e-03, -6.750315e-02, 6.356138e-02, -3.027225e-02, 2.314487e-02, -7.895755e-02, 5.048291e-02, 9.272528e-02, 4.892837e-02, 6.867145e-03, -4.624290e-02, -3.644832e-02, -2.504575e-02, -1.069774e-01, -1.259129e-01, 8.116692e-02, 3.978644e-02, 2.576919e-02, -1.518002e-02, 2.347527e-01, 6.368100e-02, 2.149039e-02, -2.018498e-02, -4.634597e-04, 5.378414e-03, -1.638307e-02, -6.324289e-02, 1.351342e-02, -4.040093e-02, 3.366730e-02, 1.548935e-02, -5.764938e-02, -1.468369e-01, 1.373382e-03, 3.282552e-02, 4.361666e-02, 1.517684e-02, -8.561569e-02, -4.959814e-02, -2.721387e-02, 9.423786e-02, -5.435006e-02, -6.848589e-02, -2.747129e-02, 1.971838e-02, 7.683631e-02, 3.184966e-02, 2.536672e-02, 7.840131e-02, 8.766495e-03, -4.623133e-02, -3.108432e-02, 2.475480e-02, 3.492398e-02, -5.979754e-02, 5.552539e-02, 1.617159e-02, 8.195451e-02, 6.852181e-02, 1.316529e-03, 5.429072e-02, -7.034854e-03, 6.603590e-02, 3.052237e-03, -3.203573e-02, -2.876472e-02, -2.151290e-02, -1.289949e-02, 7.607882e-02, 9.601073e-02, -6.310381e-02, 1.289774e-01, 3.740872e-02, -1.316733e-02, -4.633860e-02, -7.667017e-02, -5.865954e-02, -7.935629e-02, 6.701057e-02, 1.103982e-02, 4.745518e-02, 5.166075e-02, -1.014963e-01, -7.667875e-02, -3.748040e-02, -2.166686e-02, -2.718826e-02, -4.418789e-02, -7.888676e-02, -8.470275e-02, 8.949866e-03, 7.083234e-02, -2.564801e-02, -2.268177e-02, -7.555141e-04, 4.632704e-02, 9.382389e-02, -7.886345e-02, 6.475061e-03, -1.926118e-02, -5.943393e-02, 3.301738e-02, -2.502480e-02, 4.773558e-02, -1.196954e-02, 6.663144e-02, 3.586199e-02, -4.703512e-02, 1.705180e-02, -6.947848e-02},
{1.479568e-01, 8.134635e-02, -1.046970e-01, 1.959545e-01, 2.687138e-02, -1.404826e-01, -2.213318e-01, 7.747390e-02, -1.663486e-01, 3.159526e-02, 4.250534e-02, -1.873142e-01, 1.098597e-01, 5.442058e-02, 6.930386e-02, -8.053797e-02, 4.607829e-02, 5.620364e-02, 1.927934e-01, 1.346436e-01, 1.230347e-01, -1.413280e-01, -6.082228e-02, -1.034740e-02, -7.936026e-02, 1.485654e-01, -1.517490e-01, -1.709012e-01, -7.835962e-02, -6.816179e-02, -1.557925e-01, 7.493382e-02, -6.678315e-02, -5.475494e-02, 3.062606e-01, -6.307606e-02, 2.509744e-01, -4.932791e-02, 3.011279e-01, -2.643268e-03, 1.592999e-01, 3.868752e-01, -4.248256e-01, -2.934124e-01, 2.101439e-01, 2.233607e-01, -1.177468e-01, -1.669068e-01, 2.958996e-01, 3.143678e-01, 3.920941e-02, 1.008219e-02, 5.749525e-02, 2.472826e-01, -1.169378e-01, 2.673033e-02, 3.704521e-02, 9.158907e-02, 1.558951e-01, -2.176709e-01, -1.549746e-01, -3.275352e-02, 3.738903e-02, 7.563327e-02, -1.056535e-01, 3.026013e-01, 1.116422e-01, -8.975955e-02, -3.515391e-02, -9.230454e-02, -7.291755e-02, -9.540530e-04, 8.504167e-02, -5.512230e-02, 7.303116e-02, 7.400062e-02, 1.499504e-01, -7.895998e-02, -1.339713e-01, 2.588058e-01, -2.936862e-01, -2.255238e-01, -9.457558e-02, 1.352865e-01, -9.783609e-02, -1.432682e-01, 1.909704e-01, -3.220919e-01, 2.624206e-01, 8.582428e-02, -4.541284e-02, -1.012180e-01, -5.673994e-03, -6.591874e-02, -1.321848e-01, 6.845597e-02, -1.136806e-01, -6.878114e-03, 2.311437e-01, -1.639231e-01, -8.148599e-02, -9.129089e-02, -1.498485e-01, -4.995126e-02, -3.403071e-02, 1.915193e-02, 6.543907e-02, -1.773802e-01, 8.189680e-02, 1.255848e-01, 3.401506e-01, -1.076767e-01, -2.778840e-02, -6.843970e-02, 2.524082e-02, 2.786665e-01, -6.933017e-02, 8.350459e-02, 6.081728e-02, -3.091610e-02, 1.653393e-02, 2.945487e-02, -1.985488e-01, -6.296122e-02, 5.197974e-02, 4.218513e-02, 2.122919e-01, 2.502292e-01, 2.677380e-01, -9.425820e-02, 1.757514e-01, 1.245936e-02, 1.472003e-01},
{1.092956e-01, -1.339813e-01, 8.286734e-02, 4.772036e-01, -8.033531e-01, 4.784146e-02, 8.637629e-02, -1.816765e-01, 1.943760e-01, -2.684164e-02, 7.370536e-02, -1.379843e-01, -4.645855e-02, 4.279452e-02, -6.908192e-02, -8.735174e-02, -3.238575e-02, -1.823241e-02, -1.048017e-01, -1.407737e-01, 2.942854e-01, 9.300300e-03, 1.439655e-01, -1.690875e-01, 1.801517e-01, -2.051101e-02, -3.456080e-01, 7.789551e-02, 1.689180e-01, -4.799561e-02, -2.866029e-01, -2.238238e-02, -1.839994e-01, 1.122540e-01, 2.225933e-01, -1.074961e-02, 1.848342e-01, 7.522449e-02, 2.141513e-01, -1.097924e-01, 1.648916e-01, -4.081805e-02, -3.359311e-01, -4.682941e-01, 1.747530e-02, -9.954332e-02, -3.837878e-02, 5.081788e-02, 1.887027e-01, 6.334130e-02, -5.368995e-02, 1.544228e-01, 4.536172e-02, -1.208189e-01, -8.034930e-02, -3.247564e-01, 2.000046e-02, -1.170572e-01, 3.956615e-02, -5.652560e-01, 5.031327e-02, 3.267883e-02, -4.713546e-03, -4.134863e-05, 8.720397e-03, -6.660388e-02, -8.982644e-03, 6.510912e-02, -1.369188e-02, -3.102083e-01, 2.257061e-02, 9.607770e-02, 3.405454e-01, -1.461310e-01, 3.732533e-02, 8.945735e-02, -1.911778e-01, 3.488277e-02, 9.445918e-03, 2.002639e-02, -4.908226e-01, -5.426008e-01, -1.091112e-01, -1.426160e-01, 1.074878e-01, 2.774658e-02, -1.351646e-01, -1.045712e-01, -1.382595e-01, 8.109905e-02, 1.041980e-02, -2.828370e-02, -5.932126e-02, 1.665409e-01, 4.233475e-02, -1.458516e-01, 9.056462e-02, -2.420818e-01, -2.697215e-02, 1.447754e-01, 3.012201e-02, -1.705229e-01, -4.748105e-02, 2.772547e-02, -2.641982e-01, -1.812038e-03, 2.624100e-02, -1.829708e-02, 1.166787e-01, -1.727122e-02, 3.285975e-01, -1.428683e-01, -1.480653e-01, -3.696517e-02, -6.388418e-02, 9.492176e-03, -4.149988e-02, -5.820179e-02, -8.625118e-02, -6.579638e-02, -5.116682e-02, -2.775938e-02, -2.216635e-01, 6.590781e-02, -4.293149e-02, 4.665714e-02, 1.521103e-02, 2.626496e-02, -1.312552e-01, -2.577744e-01, -5.432779e-02, -3.003341e-01, 3.597092e-02},
{2.200663e-01, -2.417052e-01, -2.372895e-02, -7.885812e-03, -4.507758e-01, -1.437788e-01, -3.484494e-02, -1.177185e-01, 1.303793e-01, -4.473388e-02, -8.059931e-02, -1.656851e-01, 8.947390e-03, 2.274760e-01, 8.359167e-02, -1.866132e-01, 2.363230e-02, -7.833924e-03, 1.656530e-01, 8.339961e-02, 6.125923e-01, -1.281671e-01, 3.557770e-01, -1.456779e-01, -2.923324e-02, -4.757348e-02, -5.786937e-01, -1.157993e-01, 5.673622e-02, -2.275147e-01, -5.077067e-01, -2.668697e-02, -1.237393e-01, 6.576121e-02, 1.090479e-01, -1.982831e-01, 4.979745e-01, 3.539919e-01, 1.210897e-01, -2.128729e-01, -2.888988e-02, 1.680553e-01, -7.581888e-01, -5.467453e-01, 5.910409e-02, 1.807161e-02, -4.916567e-02, -2.278785e-02, 3.718816e-01, -6.252078e-02, 2.462826e-01, 6.973964e-02, 1.025234e-02, 3.253479e-02, -1.803790e-01, 2.057381e-01, -2.279283e-01, -4.982898e-01, 4.797924e-02, -8.402981e-01, -1.726987e-01, -2.049787e-01, -1.421898e-01, 2.362573e-01, 2.857475e-03, 1.708768e-01, 6.255028e-02, -8.860478e-02, -3.324476e-02, -8.185096e-01, 5.300689e-01, 1.985430e-01, 2.077143e-01, 1.534397e-01, 2.655460e-01, 2.584857e-01, -4.597008e-01, 2.471160e-01, -2.570912e-01, 1.799551e-01, -1.578957e-01, -5.586870e-01, -1.198488e-01, 1.377691e-01, 1.241358e-01, -1.935861e-01, -3.979642e-02, -4.254240e-01, 2.394178e-03, 3.394806e-01, -4.542109e-02, 8.603100e-02, -4.191071e-01, 6.091216e-01, -8.985087e-02, -1.628457e-01, -6.521058e-02, 9.799864e-02, 1.972198e-01, -1.041560e-01, -1.070807e-02, -3.992099e-01, -1.923845e-01, 5.683938e-02, -1.549355e-01, 3.103814e-01, 6.148087e-02, 5.196929e-02, -7.772226e-02, 5.760308e-02, 7.458449e-01, 8.231136e-02, -5.532699e-02, 1.429048e-01, 1.653563e-01, 1.479978e-01, -1.192933e-01, -1.991383e-02, -1.421321e-01, 2.894886e-02, 2.672576e-01, -1.426896e-01, -4.730534e-01, 3.323576e-01, 1.690311e-01, -1.264222e-01, 7.244977e-03, -2.649453e-01, 1.716281e-01, -4.033812e-01, 1.735892e-01, -4.445596e-01, 1.878102e-01},
{-1.908755e-02, -6.964297e-02, 2.786027e-03, -8.397949e-02, -6.755891e-02, -3.565032e-02, -2.922282e-02, 2.034955e-02, 4.041413e-02, 3.387264e-02, -2.806980e-02, 3.779995e-02, 3.466160e-02, 6.643028e-04, -2.126532e-04, 6.226407e-02, -2.194986e-02, -6.910794e-02, -3.231851e-02, 1.644614e-02, 4.396723e-02, 2.362712e-02, 7.907348e-02, -1.292431e-01, 1.590673e-02, -4.685161e-02, -2.756764e-03, 2.490772e-02, -1.526437e-03, 6.564566e-02, 8.887472e-02, 2.353037e-02, 7.961170e-03, 8.433101e-02, -2.627938e-02, -9.183377e-02, 1.293204e-02, -7.432353e-02, -4.419887e-02, -1.327077e-02, 6.191930e-02, 2.414307e-02, 1.365400e-01, 9.405071e-02, -7.294933e-02, -4.239833e-03, -9.152190e-02, 8.142550e-02, 1.294166e-02, -1.328031e-01, 1.281757e-02, 2.307774e-03, 8.012000e-02, -2.310833e-03, -5.214133e-02, -1.201689e-01, 7.327367e-02, 5.198162e-02, 2.964324e-03, 1.894782e-02, 5.623917e-02, -3.484996e-02, -1.352508e-02, -9.963499e-03, 3.523099e-02, 8.411674e-02, -6.594929e-02, -8.684717e-02, 4.781037e-02, -1.182470e-01, -3.344978e-02, -5.311424e-02, -1.125739e-02, -2.915473e-03, 7.147156e-02, -1.993176e-03, 2.463036e-02, -1.527953e-02, -3.243017e-03, 5.356858e-02, 7.361366e-02, -7.997128e-02, 3.402113e-02, 3.887748e-02, -6.256681e-02, 6.297607e-03, 8.938460e-02, 1.071351e-01, 6.853335e-02, -2.912445e-02, -4.050776e-02, -5.895858e-02, 7.082549e-02, 8.072301e-02, -5.071887e-02, 1.267892e-02, 1.163679e-02, -3.732681e-02, -1.796370e-02, 6.327673e-02, 3.845832e-02, 1.640715e-02, -6.567114e-02, -5.422228e-03, -3.948990e-02, -6.673651e-02, 4.800986e-02, -8.570439e-02, 3.641208e-02, -1.347797e-02, 8.511990e-02, 2.349483e-02, 6.477671e-02, 8.141023e-02, 2.598274e-02, 5.106449e-02, -6.109293e-02, 4.239744e-03, -8.321290e-02, -4.928490e-02, -5.022078e-02, 2.993030e-02, 2.531048e-02, -4.893707e-03, 8.624242e-03, 7.647347e-02, -5.431103e-02, -9.209900e-02, 4.576182e-02, -5.175253e-03, -6.557062e-02, 4.550594e-02, 3.988128e-02},
{4.227566e-02, -2.676016e-02, 4.954927e-02, 6.305794e-02, -1.132906e-02, -5.003236e-02, -7.981921e-02, -2.811738e-02, -6.470082e-02, -3.871968e-02, -4.767687e-02, -4.412241e-02, 5.427238e-02, 1.130043e-01, -6.397849e-02, 2.616337e-02, -1.206190e-01, 6.259687e-02, 8.158412e-02, -4.764147e-02, 3.404760e-02, -3.976732e-02, 1.238009e-01, -1.653410e-01, -1.038271e-01, -2.436040e-02, 6.511499e-02, -5.409323e-02, -2.329912e-02, 2.049218e-02, -2.735182e-02, 1.046937e-01, 1.174119e-01, 1.842155e-02, -5.615032e-02, -3.944146e-02, -1.396535e-02, -7.208002e-02, -1.073399e-01, 8.111275e-02, 1.838695e-02, 5.053290e-02, 1.638204e-01, 3.714881e-02, 1.401814e-02, 6.603418e-02, -1.493170e-03, 4.169526e-02, -1.200754e-01, -2.141665e-01, 6.597380e-02, 8.792221e-03, 5.916297e-03, 7.392212e-02, 3.106085e-02, -5.021818e-02, 3.204683e-02, -9.931391e-02, -7.109299e-02, 6.469560e-02, 3.318899e-02, -1.708285e-03, -1.232393e-01, 2.724455e-02, 3.971883e-02, 9.316380e-02, 2.143101e-02, -5.134342e-02, -7.998744e-03, -1.944137e-01, 4.311973e-02, 1.077667e-01, -2.615626e-02, 8.328720e-02, -3.212747e-02, 2.838631e-02, -1.500832e-01, -1.202050e-02, -9.784254e-02, -5.632424e-02, 2.848805e-02, -1.472235e-01, 6.511606e-02, -2.007736e-02, 8.434429e-02, -4.247529e-02, -3.781045e-02, 2.177694e-02, 2.223395e-02, -2.564514e-02, 2.695904e-02, -2.525364e-02, -9.090406e-02, 1.745641e-01, -3.296721e-03, 1.008170e-01, -9.749427e-02, -2.455413e-02, -2.225590e-02, -9.739253e-02, 5.775173e-02, 5.373068e-02, 4.233073e-02, -3.886992e-02, -1.438209e-02, -7.572255e-02, 3.102823e-02, -3.701485e-02, 2.578876e-02, 2.954758e-02, 1.114560e-02, 5.812914e-03, 4.498874e-02, 4.081732e-02, 4.648290e-02, -7.612536e-03, -3.711239e-02, 2.793786e-02, -1.117151e-01, 1.158859e-02, 9.069542e-02, 3.221207e-02, 3.722944e-02, 5.814357e-02, -8.414576e-02, 4.435974e-02, -6.953821e-02, -2.564202e-01, -4.633721e-02, 3.515318e-02, -1.811147e-02, 3.132526e-02, 5.539480e-02},
{8.343849e-02, -3.336214e-02, -7.702736e-02, 4.626063e-02, -1.119882e-01, -5.133823e-02, -7.459208e-02, -6.508882e-02, 4.162673e-02, -5.621297e-02, -9.219354e-02, 9.292468e-02, 5.711727e-02, 3.934292e-02, -1.153478e-02, 1.437877e-02, -3.568242e-02, -6.968628e-02, 7.848459e-02, -3.349957e-02, -1.869886e-01, 2.556889e-02, 1.274687e-01, -9.307881e-02, 7.737746e-02, -3.936285e-03, -2.200576e-02, 9.441436e-03, -2.520171e-02, 1.042982e-01, -4.516202e-02, 9.934881e-02, 8.014847e-02, -6.273022e-02, -3.068563e-02, -9.215875e-03, 8.360075e-02, -8.746523e-02, 1.335224e-01, 1.616686e-02, -1.572899e-02, -1.400631e-03, 1.935237e-01, 2.940271e-02, 4.421986e-02, -1.081070e-02, 1.306379e-02, -5.764537e-02, -1.687959e-02, -2.203834e-01, 1.130455e-02, -6.184372e-02, -8.635125e-02, -2.774997e-02, 7.506148e-03, -1.927607e-02, -1.922114e-03, -4.911426e-02, -1.407336e-03, -1.235675e-01, -5.170720e-02, 3.013807e-02, -1.867066e-02, 2.540214e-02, -2.179184e-02, -7.697829e-02, 1.380828e-02, -7.229093e-02, 5.416631e-02, -1.118494e-01, -6.571279e-02, -4.240799e-02, -1.425495e-01, 1.647155e-02, 9.661990e-03, 4.577341e-02, -7.106307e-02, -1.935028e-02, -4.873256e-02, 7.424185e-02, 1.437319e-01, -4.526286e-02, 2.677146e-02, -6.525367e-02, -7.341872e-03, 4.220174e-02, 6.500725e-02, -5.157140e-02, -1.110249e-02, 5.932941e-02, -8.945955e-02, -7.623851e-02, -2.306842e-02, 7.176531e-02, -3.658468e-02, -4.340110e-02, -3.581247e-02, -3.057559e-02, -4.190631e-02, 9.721696e-03, 6.233821e-02, 3.722467e-02, 1.797535e-02, -4.206323e-02, -1.484809e-02, 4.493422e-02, 4.968143e-02, -1.196288e-02, -4.789628e-02, -3.984184e-02, 9.185192e-02, 1.103283e-01, 7.308741e-03, -1.032386e-01, -1.683539e-02, 7.720028e-02, -1.217594e-02, 1.220641e-02, -6.071650e-02, 8.322737e-02, -8.094974e-02, -6.642338e-02, -1.639273e-02, 2.765137e-02, 4.045681e-02, -1.472161e-02, -6.569725e-03, -1.918472e-01, 6.379906e-02, -4.431662e-02, -7.071439e-02, 5.990211e-02, -3.120194e-02},
{1.573965e-01, -1.463312e-03, -1.049666e-01, 3.703978e-02, 2.394278e-02, 1.504960e-02, -4.729538e-02, 2.038142e-05, 7.944052e-02, 4.749916e-02, 3.976541e-02, -1.083716e-02, 8.266519e-02, -1.508249e-02, 2.320518e-02, -6.238781e-02, 8.552054e-04, -4.240001e-02, -5.646054e-02, 7.344606e-04, -3.051748e-02, -4.341194e-02, 1.041690e-01, -1.221761e-01, 2.473258e-02, 2.830888e-02, 3.541452e-02, -7.973608e-02, -8.200707e-02, 9.371790e-02, 4.273475e-02, 4.826551e-02, 9.708881e-02, 8.319222e-02, 5.048280e-02, -2.493953e-02, -6.747051e-02, 6.895757e-02, -2.482526e-03, 5.668579e-02, 1.400567e-02, -7.524240e-02, -3.041309e-02, 2.672935e-02, 1.713345e-02, 5.182484e-02, 5.633194e-02, -4.803916e-02, 5.958426e-02, -1.313911e-01, 3.622117e-02, 6.143327e-02, -6.321678e-02, -2.523562e-02, -6.484769e-02, -1.312072e-01, -4.013544e-02, -1.532173e-01, 6.059958e-02, -2.615601e-02, 6.366786e-02, 5.047831e-02, -4.551924e-02, -3.790275e-02, -5.231241e-04, -8.223516e-02, 1.029265e-02, -4.412149e-02, 9.565436e-02, 4.093338e-03, -8.037187e-02, 3.099551e-03, -8.326787e-02, -3.670938e-02, 9.116133e-02, -5.395035e-02, 5.737717e-03, -8.456954e-02, 2.207933e-02, -3.870875e-02, -8.755487e-02, -5.523669e-02, -4.954082e-02, -7.067416e-02, 8.624326e-02, 6.605954e-02, -4.807071e-02, 2.334350e-02, -2.725953e-02, 2.031773e-02, -4.214947e-02, -6.853811e-02, 5.969113e-02, -2.147954e-02, -4.030411e-02, 5.568830e-02, 4.553657e-02, 2.771708e-03, 1.631653e-02, -4.800744e-02, -2.478157e-02, 7.933666e-02, 1.684402e-03, 3.669126e-02, -4.600459e-02, 3.655150e-02, 4.866240e-02, -2.359065e-02, 6.021461e-02, -1.951343e-02, -9.873874e-03, 3.534957e-03, 5.115463e-02, -4.148998e-02, 8.073979e-02, 4.329484e-02, -7.185932e-02, -8.668048e-02, -3.589799e-02, -6.111433e-03, -6.311781e-03, 6.879319e-02, 6.677686e-02, 1.903953e-02, 5.551314e-02, 3.675360e-02, -5.644992e-02, -4.953350e-02, -6.619880e-02, -7.834043e-03, 7.286753e-02, 9.303783e-02, -6.945251e-02},
{2.346649e-02, -9.232726e-02, 7.442635e-02, -7.989167e-02, -2.483355e-02, -3.646337e-02, 9.535786e-02, 1.972740e-02, 6.827943e-02, 1.667840e-02, 1.892942e-02, 1.013416e-01, 3.968938e-02, -2.092715e-02, -6.492586e-02, -9.215258e-04, -9.886578e-02, 3.911659e-02, 8.891647e-02, 5.987541e-02, -1.640273e-01, 4.514477e-02, 1.806609e-02, -3.198310e-02, -3.616850e-02, 6.103726e-04, -8.891806e-02, 1.049725e-02, 8.604378e-04, 1.105234e-01, 2.469454e-02, -3.394261e-02, 4.800781e-02, 8.952539e-02, -1.535255e-02, -8.344594e-02, 5.433436e-03, -6.883766e-03, 6.892617e-02, -2.180444e-02, 6.752902e-02, 4.248500e-02, 1.942709e-01, -5.590742e-02, 8.060357e-03, -3.001551e-02, 1.827625e-02, 5.784409e-02, -2.097725e-02, -2.269734e-02, 9.310160e-03, 3.727608e-02, 8.266539e-02, -7.586420e-02, 2.046017e-03, -4.325366e-02, -3.710238e-02, -2.562852e-02, 7.130416e-02, 6.293967e-02, 6.675648e-02, -3.933737e-02, -7.430464e-02, -2.876944e-03, -4.725002e-02, -7.991263e-02, -1.805356e-02, 4.117452e-02, 1.016475e-01, -1.626809e-02, -3.036846e-02, 8.813291e-02, -1.387336e-01, 2.616512e-02, -4.661845e-02, 4.360606e-02, -1.082735e-01, 4.076974e-02, 5.644231e-02, -7.836053e-05, -1.915046e-02, -1.556706e-01, 5.340930e-02, -2.373839e-02, -3.911472e-03, -6.159442e-02, -1.291280e-02, -1.825164e-02, -9.133101e-02, -1.013662e-02, 7.397393e-02, 8.123513e-02, -4.435838e-02, 1.613863e-03, -5.354516e-02, -2.274814e-02, -5.712936e-02, 2.421003e-03, 1.373526e-02, 8.302731e-02, 9.096204e-02, 1.358298e-01, -1.489393e-03, -7.325564e-03, 7.116476e-03, 2.058173e-02, 5.931051e-02, -3.207847e-02, 1.614798e-02, -9.639268e-02, -4.679257e-02, -5.652516e-02, 2.336665e-02, -2.478269e-02, -2.717023e-02, -7.592703e-02, 1.557083e-03, -8.719508e-02, 9.002516e-03, 6.708230e-02, 5.690171e-02, -4.853512e-02, 7.421043e-02, 5.996152e-02, 5.380291e-02, 8.083863e-02, -2.003269e-02, -1.036425e-01, -8.790441e-02, -3.185088e-02, 3.853515e-02, 9.917296e-02, -6.387652e-02},
{-2.126018e-02, 7.733639e-02, -7.950312e-02, -4.539751e-02, -1.570347e-01, 6.233403e-02, 3.965845e-02, -4.310051e-02, 2.158501e-02, -4.884876e-02, -1.231841e-01, 1.299579e-01, 3.611046e-02, 3.299616e-02, -1.098280e-01, 9.446929e-02, 8.546673e-02, -6.786817e-02, -3.487586e-02, 8.258794e-03, -1.204047e-01, -2.997412e-03, 1.218489e-01, -1.471803e-01, -5.113893e-02, 1.500898e-02, 1.381518e-01, -2.575501e-02, 8.469163e-02, -1.517562e-02, -2.796886e-02, -1.817280e-02, 2.442826e-02, -2.104912e-03, -4.330061e-03, 6.799259e-03, -2.634631e-01, 3.506489e-02, -5.277227e-03, 2.483106e-02, 2.076089e-01, -8.506884e-03, 1.462907e-01, 9.331968e-02, -6.921564e-02, -1.216580e-01, -2.317434e-02, 1.347092e-01, -3.617597e-02, -1.476686e-01, -3.640285e-02, -1.535382e-02, 7.835104e-02, -1.148660e-01, 1.870969e-03, -4.999370e-02, -3.272251e-02, -2.344648e-01, -1.527461e-03, 1.228648e-01, 3.153825e-02, 6.946715e-02, -3.651168e-02, 3.244047e-02, 1.500428e-01, -3.542121e-02, 2.188698e-02, 3.391573e-02, 5.777494e-02, -4.105111e-02, 1.149765e-02, 4.551719e-02, -1.187353e-01, -3.726853e-02, -2.328267e-02, -4.023200e-02, 2.927254e-01, -3.659258e-02, 1.421621e-01, -2.011704e-01, 1.340139e-01, -9.674734e-03, 4.214728e-02, -9.150942e-02, 5.284709e-02, 6.970900e-02, -7.706482e-02, 9.216072e-02, -2.855925e-02, -8.650462e-02, 1.316776e-01, 1.841872e-01, 7.466970e-02, 4.441614e-02, 2.921848e-02, -1.164491e-01, 1.062680e-02, -5.104108e-02, -4.020656e-02, 4.300443e-02, 3.866677e-02, 9.755118e-02, 9.957112e-02, 6.998235e-02, -2.432460e-02, -1.084211e-01, -9.705032e-03, 1.209702e-01, 3.325331e-02, -1.116545e-01, 5.058439e-02, 5.847610e-02, -1.691903e-01, -9.127182e-03, -7.307304e-02, -1.183123e-01, -1.187499e-02, -8.207977e-02, -1.088500e-01, -5.449309e-03, -1.181774e-01, -3.622911e-02, 1.705855e-02, 3.407450e-02, -2.612910e-02, 9.741513e-02, -1.318947e-01, -7.128661e-02, -9.477587e-02, -7.481297e-03, -4.430455e-03, 1.466345e-02, 1.775422e-02},
{7.579295e-02, -6.124773e-02, -9.528420e-02, -3.205656e-02, -7.594278e-02, 4.573582e-02, -1.029779e-02, -3.002056e-02, 5.153954e-02, -2.841341e-02, -9.177189e-03, 5.596456e-02, -5.846157e-03, 5.291856e-02, -9.476586e-02, 4.391154e-02, -7.410546e-02, -5.873714e-02, -8.318331e-02, 2.221716e-02, -2.959441e-02, -1.267719e-02, 1.469632e-02, -9.150370e-02, -5.419283e-02, 6.686980e-02, 4.174210e-02, 1.021490e-02, -4.427394e-02, 6.190043e-02, 1.867759e-02, -5.915392e-02, 7.766500e-03, 1.265120e-01, 8.400267e-02, 8.721648e-02, -4.553872e-02, -2.559832e-03, 1.783929e-02, -4.025252e-02, 1.334474e-01, -9.564408e-02, -6.322164e-02, 9.417889e-02, 6.719915e-02, -8.402291e-02, -7.820804e-02, 7.251117e-02, 1.831383e-03, 1.590852e-02, -1.494475e-02, 3.158585e-02, -5.707959e-02, 5.967468e-02, -2.893077e-02, -3.281224e-02, 4.854909e-02, 1.215363e-01, 7.947596e-02, 6.744702e-02, 9.091897e-02, -8.838882e-02, 1.018764e-01, 6.660610e-02, -7.577708e-03, -9.309369e-02, 6.814507e-02, 6.721145e-02, 7.303627e-02, 1.573282e-01, 4.393639e-02, 5.293041e-03, 3.092024e-03, -5.795466e-02, -5.084544e-02, -1.570713e-02, -4.139193e-02, -9.744339e-02, -7.939656e-02, -1.225403e-01, -3.350057e-02, 5.261941e-02, -3.981575e-02, 3.664980e-02, -6.519581e-02, -4.816462e-02, 2.056209e-02, 1.995125e-01, -7.019925e-03, 6.443608e-03, -8.339142e-02, 2.205335e-02, 2.853780e-02, 3.377457e-02, 1.011087e-01, -1.025996e-01, 2.758135e-02, -9.954809e-02, -8.638584e-02, -4.987773e-02, 1.607503e-02, 8.543253e-02, -1.698479e-02, 6.883829e-02, -1.711948e-02, -5.301251e-02, -1.423879e-02, 6.823394e-02, 3.295948e-02, 3.468143e-02, 7.819193e-02, 6.842910e-02, -5.260724e-02, -3.762215e-02, 7.308064e-02, 3.272554e-02, -4.205431e-03, -8.916754e-02, -6.355855e-02, -8.393343e-02, 2.131725e-02, 1.059941e-01, 7.196967e-02, 4.825649e-02, 3.006977e-02, -3.739296e-02, -3.089644e-02, -1.413092e-02, -2.061009e-02, -8.946878e-02, -2.885253e-02, 2.829375e-02, -2.043696e-02},
{-1.738738e-02, -3.297442e-02, -2.136157e-02, -4.228722e-02, -1.131722e-01, -5.804208e-02, 2.893985e-03, 2.230367e-02, 5.001299e-03, -5.500370e-02, 2.668221e-03, -4.640548e-02, 8.259801e-02, -5.095725e-02, 1.348000e-02, -5.001675e-02, -7.814227e-02, -4.777827e-02, -6.475535e-02, -8.416252e-02, -1.007938e-01, 5.379489e-02, 6.566879e-02, 6.601773e-02, -6.368298e-02, -3.798087e-02, -1.888702e-02, 1.762983e-02, 5.123394e-02, -8.734426e-03, 9.951937e-02, 8.993113e-03, -3.856614e-02, -6.756110e-02, 8.245707e-02, 7.355431e-02, 7.617092e-02, -5.045789e-02, 1.047869e-01, 8.493942e-02, -3.079012e-02, 6.372236e-02, 5.272873e-02, 6.273486e-02, -7.875501e-02, 1.212541e-02, -6.890411e-02, 2.782093e-02, 4.669622e-02, 2.891292e-02, -7.508147e-02, 5.332968e-02, 8.735859e-02, -2.625573e-03, -6.447136e-02, -8.057480e-02, -6.542488e-02, -5.311865e-02, -6.351870e-02, -7.149065e-02, -2.227351e-02, 2.736217e-02, -9.447363e-02, -2.193126e-02, 6.053491e-02, -4.937924e-02, 2.322316e-02, -2.352537e-02, 7.366932e-02, 4.786218e-02, 9.984420e-03, -4.212330e-02, 1.453873e-02, -6.399363e-02, 4.429151e-02, -4.429792e-02, 5.274511e-03, 7.907502e-02, 6.374800e-02, -8.091643e-02, 6.782036e-02, 7.936389e-02, -5.202446e-02, -4.171316e-02, -6.201540e-02, 7.181493e-02, -4.777748e-02, 1.131293e-02, 4.274634e-02, 4.769972e-02, -3.258632e-02, -7.245538e-02, -4.210007e-02, 9.428122e-02, 1.227847e-02, -4.651793e-02, 3.687329e-02, -1.314872e-01, -5.222059e-02, -3.123699e-04, -6.123148e-02, -4.875896e-02, -5.086244e-02, 4.304245e-02, 4.081994e-02, 6.261038e-02, -5.584044e-02, -3.977482e-03, 6.499926e-03, 7.767168e-02, -2.987662e-02, 9.760705e-02, -3.168391e-02, -9.575737e-02, 7.544972e-02, 4.614311e-02, -3.021125e-02, -4.884615e-02, -2.987616e-02, -7.478717e-02, 6.724599e-03, -3.007702e-02, 8.228444e-02, -4.603843e-02, -8.493858e-02, -3.309659e-02, -2.301906e-02, -7.486624e-02, -7.305287e-02, 6.472597e-02, 9.418757e-02, -1.835451e-02, 3.922435e-02},
{-6.204486e-02, -1.849867e-01, -1.094214e-01, 1.327732e-01, -7.683609e-02, -8.428176e-02, 6.208543e-02, 1.667654e-02, -1.027694e-02, 8.283333e-02, 1.069384e-01, -1.325849e-02, 8.393342e-03, -2.780432e-02, 5.169674e-02, 4.460390e-02, -5.186469e-02, 6.088320e-02, -3.092470e-02, -1.658384e-02, 1.674716e-01, 8.096415e-02, 4.648285e-02, -3.120253e-02, 1.254404e-02, 1.083835e-01, 1.394775e-02, -5.546707e-02, -4.280321e-02, 6.018045e-03, -7.714123e-02, 7.390806e-02, -7.329976e-03, 5.149400e-02, 4.898339e-02, 1.088355e-02, 3.667208e-02, -1.103598e-01, 4.647338e-02, 6.339458e-02, 1.019493e-01, 9.952527e-02, -2.526966e-01, 1.677568e-02, 2.638577e-02, -1.502064e-02, -2.912240e-02, 2.314718e-02, 1.737275e-01, 1.642751e-01, 2.003559e-02, 3.572055e-02, 6.740629e-02, -5.022134e-02, -7.003740e-03, 6.090027e-02, -3.494518e-03, -2.241524e-02, 7.873052e-02, 7.461783e-02, 6.409200e-02, -1.399652e-02, 6.288273e-03, 6.017905e-02, -1.863826e-02, 2.011257e-02, 6.727809e-02, -4.866049e-02, -8.766288e-02, 2.242477e-01, 8.519826e-02, -8.510895e-02, 1.205867e-01, -8.738279e-02, -3.012499e-02, 5.149858e-02, -8.751217e-02, -3.367596e-02, -6.011115e-02, -4.245210e-02, -3.046862e-02, 6.395310e-02, -5.694726e-03, 4.504375e-02, -9.250900e-02, -8.822663e-02, -2.522621e-03, 1.368094e-01, 6.868333e-02, 7.265437e-02, 2.806001e-02, -1.386783e-01, 1.916413e-02, 5.838260e-02, -9.614209e-03, 1.790156e-02, -2.790823e-02, -1.906618e-01, -1.937355e-03, -3.732551e-02, 5.903681e-02, 3.898261e-02, -6.643651e-02, -7.461003e-02, 3.560217e-02, -2.949632e-02, 5.233498e-02, 2.945196e-02, 1.052165e-02, -6.374413e-03, -3.404571e-02, -9.025381e-02, -1.822777e-01, -3.708040e-02, 5.184736e-02, 1.237756e-01, 2.392078e-02, 3.689737e-03, -5.344496e-02, -1.508709e-02, -7.489831e-02, 2.638921e-02, 2.314267e-02, 1.408202e-02, -1.326022e-02, -3.469034e-02, -5.469956e-02, 1.073747e-01, 2.079831e-02, -6.285959e-02, 5.823829e-02, -1.320662e-01, 1.977228e-02},
{8.305874e-02, -3.917010e-02, 8.031401e-03, -4.813347e-02, -2.259965e-01, -1.329001e-01, 8.823642e-03, 6.608142e-02, 1.573478e-01, 6.160897e-02, 1.904564e-02, -1.287654e-01, -1.500415e-01, 9.172139e-02, -2.103391e-02, -1.836485e-01, 1.432433e-01, -4.286984e-03, 8.983961e-02, 4.406530e-02, -1.599260e-02, -1.825722e-02, 1.252884e-01, -1.251133e-02, -1.080097e-01, 2.134897e-01, -2.468201e-01, 2.894632e-02, 6.196342e-03, -1.422375e-01, -8.893681e-02, -1.087336e-01, -1.763045e-01, 8.624092e-02, 2.737698e-01, 8.538363e-03, 1.579192e-01, 3.939471e-02, 1.713502e-01, -3.957898e-02, 2.335677e-01, 1.069360e-01, -4.439223e-01, -4.912268e-01, 9.539881e-02, 1.162747e-02, -1.637227e-01, -8.986612e-02, 5.210553e-01, 2.805701e-01, -1.282948e-02, -9.103819e-02, 4.001647e-02, 6.261866e-02, -1.184185e-01, 3.720075e-02, 7.647059e-03, 1.234108e-01, 1.342115e-01, -2.861516e-01, -1.083051e-01, -8.738564e-02, 7.212788e-02, 4.148586e-02, 3.083323e-02, 1.398081e-01, 7.249876e-02, -1.686337e-02, 5.935143e-02, 1.502312e-02, 1.520741e-01, 1.084343e-01, 2.367868e-01, -5.834934e-02, -9.412298e-03, -4.175945e-03, 3.563897e-01, 4.283664e-02, -3.057135e-02, 1.084270e-01, -3.404468e-01, -1.550385e-01, -2.021713e-02, 6.051368e-02, 1.334472e-02, 5.465294e-02, -4.937384e-02, -7.967260e-02, 5.672191e-03, 7.981696e-02, 5.004534e-02, 2.897933e-02, 2.962525e-01, 4.811728e-03, 6.920337e-02, -1.927047e-01, -7.657772e-02, -1.598870e-01, 5.226483e-02, 4.679417e-02, -8.204345e-02, -2.323567e-01, 1.796004e-01, -1.560555e-01, -1.449197e-01, -1.476331e-03, 4.182904e-03, -9.692479e-02, 8.794978e-02, 9.007347e-02, 2.000453e-01, -2.112141e-01, -1.429444e-01, -4.157172e-02, -2.382219e-02, 6.343871e-02, 2.206679e-02, -3.401260e-02, 1.408414e-01, 4.765383e-03, 2.724580e-02, 8.535912e-04, -2.075750e-01, -5.880812e-02, 5.273173e-02, 1.103997e-01, 6.216382e-02, 2.101465e-01, -9.765757e-03, -1.562381e-01, 2.511031e-02, -1.095784e-01, 3.366994e-02},
{-1.102600e-01, 4.327057e-02, -1.723172e-02, -5.000107e-02, -2.415450e-02, -2.631406e-02, 8.979009e-03, 2.320817e-02, 1.118084e-01, 2.335813e-02, -6.351241e-02, 5.283229e-02, -9.583043e-02, 7.782747e-02, 4.081346e-02, -2.090849e-02, -5.790645e-03, 2.647838e-02, -1.765129e-04, -1.992618e-02, -4.168902e-02, 7.396169e-02, 1.185661e-01, -1.021268e-01, -6.310286e-02, -9.277960e-02, 8.962829e-02, -6.541014e-02, -8.209814e-02, 2.383610e-02, 7.194535e-02, -2.357640e-02, 3.506687e-02, 7.360756e-02, -1.213361e-02, 1.565571e-02, -1.521395e-01, 5.315877e-02, 6.569487e-02, -3.107214e-02, -3.270309e-02, -9.769933e-02, 2.858374e-02, -3.210835e-02, -8.907089e-02, 4.541907e-02, -7.545357e-02, -6.533047e-02, -9.174932e-02, -6.394275e-02, -6.693665e-03, 5.985202e-02, 6.305476e-02, 4.679484e-02, 6.266712e-02, 4.433486e-02, -7.228907e-02, -1.253912e-01, -3.380997e-02, -1.461529e-02, -2.128282e-02, 5.210738e-02, 2.605416e-02, -4.988065e-02, 6.319008e-02, -4.429597e-02, -8.010633e-02, 7.256335e-02, 9.202146e-02, 3.052516e-02, 3.344105e-04, 2.631406e-02, -1.012308e-01, 1.808478e-02, -7.996362e-02, 3.220062e-02, 1.237419e-01, -5.597083e-02, -6.607514e-03, -6.297948e-02, -2.192660e-02, -3.517934e-03, 6.102285e-02, 2.486036e-02, 6.337865e-03, 1.246009e-01, -4.279384e-02, 2.482252e-02, 3.149998e-02, -3.897656e-02, -2.389405e-02, 1.032050e-01, 1.122577e-01, 3.570204e-02, 2.486456e-02, -1.245342e-01, -9.045157e-02, 1.662396e-01, 3.899972e-02, -4.384841e-02, 8.710171e-02, 1.511814e-02, 1.010141e-01, 7.176405e-02, 4.230922e-02, -1.522218e-02, 7.943035e-02, 2.107630e-02, -5.608176e-02, 1.260032e-02, -5.429554e-02, 2.687673e-02, -8.379664e-02, -7.883671e-02, 9.895948e-03, -6.186938e-02, -3.591223e-02, -9.662133e-02, -6.220178e-02, 2.741136e-02, -1.956111e-02, 6.190386e-02, 4.889576e-02, 9.127952e-02, -7.006491e-02, -4.674390e-02, -7.667023e-02, -8.711453e-02, -5.953240e-02, 7.627636e-02, -3.121738e-02, 1.410715e-02, 1.560163e-02},
{-5.160024e-02, 4.834209e-03, -4.416549e-02, 9.754929e-02, -3.014936e-01, -6.970179e-02, 7.734517e-02, -5.564281e-04, 7.649745e-03, -2.794981e-02, -6.521505e-02, 7.495485e-02, 9.933397e-03, 2.621838e-02, 5.291090e-03, 1.978127e-02, 5.174282e-02, 2.209999e-02, -9.417564e-02, -1.027607e-01, 1.069390e-01, -6.714486e-02, 1.487978e-02, 9.934070e-02, 2.511308e-02, 2.419699e-02, 2.418920e-02, 6.729330e-02, 5.580330e-02, 1.621145e-02, 2.342572e-02, 1.228666e-02, 9.467585e-02, -3.034042e-02, -1.301756e-01, 4.609356e-02, 5.276750e-02, -1.239100e-01, 1.159483e-01, -6.294185e-03, 1.652731e-04, -7.063901e-02, -1.136383e-01, -5.193139e-02, -3.386886e-02, 4.360696e-02, -5.152766e-02, -1.577565e-02, -4.443881e-02, -2.420480e-01, -1.243566e-01, -5.008134e-02, 4.003635e-02, 6.669336e-02, -7.681698e-02, -2.805061e-02, 3.930718e-02, -5.916897e-02, 1.680914e-03, 9.752409e-03, -6.718384e-02, 1.961556e-02, -2.576175e-02, -5.659049e-03, 1.121913e-01, -6.153487e-03, -1.065766e-01, 3.571016e-02, -2.808628e-02, -2.599609e-01, -9.462199e-02, 2.406207e-02, -9.072172e-03, -2.084737e-02, -2.028381e-02, 1.022470e-02, -1.161179e-01, 2.161425e-02, 3.930838e-02, 3.720158e-03, 4.278480e-02, -5.624234e-02, 1.164461e-02, 4.342555e-02, -4.729499e-02, -4.949109e-02, -6.684107e-02, 3.725059e-02, 4.459376e-02, 5.279576e-02, 3.694724e-02, -5.917580e-02, 3.905319e-02, 1.185586e-01, -5.554449e-02, -1.743842e-02, 8.357435e-02, -9.332617e-02, -7.928353e-02, 7.824514e-02, 1.801365e-02, 3.856543e-02, -1.551244e-02, -5.346733e-02, -2.508059e-02, -2.698830e-03, 9.187129e-02, -7.875365e-02, -6.795241e-02, -9.457566e-02, -1.431265e-03, 1.009721e-01, -3.364053e-02, -8.611254e-02, 1.593036e-02, -1.023126e-01, 5.200641e-04, 3.442940e-02, 3.046945e-02, 2.136008e-02, 3.402757e-02, 7.133257e-02, -3.319479e-02, -1.972571e-02, -7.522741e-04, 1.890941e-02, -1.084354e-01, -1.185440e-01, 2.815819e-02, -5.758616e-02, 8.005369e-02, 4.863231e-02, -9.506053e-02},
{-3.427216e-02, -7.302973e-02, 4.622326e-02, -6.915898e-02, -1.546834e-01, 4.962439e-02, -3.566001e-02, -1.763324e-02, -5.857260e-03, 1.981311e-02, -2.491258e-02, 3.267232e-02, 2.713016e-02, 8.665487e-03, 4.218480e-02, 5.701478e-02, 2.891373e-02, -7.204169e-02, -6.810305e-02, -1.162703e-03, -7.074398e-02, -1.103812e-02, 7.130393e-02, -6.668805e-02, -3.516044e-02, -4.823966e-02, -1.054223e-01, 8.478529e-02, 5.148123e-02, -4.778553e-02, -6.641996e-02, -5.346270e-02, 6.074794e-02, 5.333304e-02, -1.085719e-01, 6.812308e-02, 3.904729e-02, -5.055350e-02, 1.605293e-01, 8.276991e-02, 1.139075e-01, -3.586956e-02, 3.790698e-01, 4.937856e-02, -2.640211e-02, -9.091745e-03, -3.701666e-02, 5.104092e-02, 1.958673e-02, -1.120061e-01, -4.908363e-02, 5.075201e-02, -6.978441e-03, -5.264622e-02, -7.031666e-02, -1.172107e-01, -5.221522e-02, -2.981954e-02, 6.056284e-02, -1.472851e-01, -5.472899e-02, -2.845782e-02, -5.854721e-02, 2.620353e-03, 2.282429e-02, -5.793101e-02, 7.663076e-02, -2.057594e-02, 8.793084e-02, -2.490269e-01, 4.204550e-02, -5.028430e-02, -1.495715e-01, 4.210742e-02, 2.971485e-02, 3.949270e-02, 4.551229e-02, -1.020223e-01, 2.841659e-02, 4.472174e-02, 6.585146e-02, -9.549173e-02, 3.162700e-02, -1.953033e-02, 6.972755e-02, 3.154417e-02, -8.216707e-02, -1.403482e-02, -6.173903e-02, 3.946670e-02, -7.625800e-03, 3.427407e-02, 1.354069e-02, 1.486586e-01, -4.859348e-02, -5.180706e-02, -2.692097e-02, -1.858179e-02, -5.065124e-03, 4.437935e-02, -4.216824e-02, 2.264432e-01, 1.872343e-02, -6.459306e-02, -4.357645e-02, -2.692617e-02, 5.216081e-02, 1.248822e-02, 4.850626e-02, -3.214423e-03, 4.911246e-02, 5.494893e-02, 4.177042e-02, -9.099878e-02, -1.061209e-02, 2.755117e-02, -2.276611e-02, -4.890401e-02, -3.647078e-02, -9.665862e-02, 8.055681e-02, -3.853366e-02, -1.219685e-01, -4.767312e-02, -1.149641e-02, 1.150152e-02, -7.707727e-02, -2.199860e-01, -1.060542e-02, -4.139461e-02, 3.252890e-02, -6.431158e-02, -4.814070e-02},
{1.603680e-01, -7.987663e-02, -5.679399e-02, 1.380180e-01, -5.889370e-01, -3.584657e-02, -4.208805e-02, 7.899427e-02, -2.158922e-02, -3.173265e-02, -3.442560e-02, 1.080908e-02, -2.804885e-02, 3.079486e-02, -5.038645e-02, 1.656679e-02, 2.416551e-02, -8.791126e-02, -1.784252e-02, -2.441652e-02, -1.621531e-02, 5.802635e-02, 4.808967e-02, 4.575926e-02, -1.162477e-02, 2.235863e-02, -7.668160e-02, -5.565955e-02, 7.648663e-02, 6.321277e-02, -4.463544e-02, -1.164314e-02, -3.469183e-02, 4.625144e-02, -1.170138e-01, 7.999601e-02, -1.076819e-01, 1.103033e-02, 1.025580e-01, -4.324343e-02, 1.656449e-01, 4.994316e-02, -2.002586e-01, 1.861323e-01, 3.877825e-02, 2.267856e-02, 1.072721e-02, 3.974538e-02, 1.503305e-02, -4.372400e-02, 2.998485e-02, 8.100486e-02, -5.272634e-02, 3.856344e-02, -6.215382e-02, -7.324700e-02, 6.231510e-02, -1.363109e-01, -3.513131e-02, 1.007491e-01, 8.907875e-02, 4.982188e-02, -7.982685e-02, -8.511503e-02, 4.303589e-02, -1.494585e-02, 7.343955e-03, 6.154111e-02, 9.448557e-02, 1.709697e-01, 8.112075e-02, 3.961482e-02, -9.124137e-02, -1.559299e-01, -7.797409e-02, -5.412567e-02, -8.686065e-02, -5.028441e-02, -5.011660e-02, -4.374209e-02, -8.572957e-03, -9.317674e-02, -2.872018e-02, -4.695322e-02, -1.339783e-02, 4.898186e-02, 8.933978e-02, 9.058131e-02, 5.833619e-02, -1.148398e-01, 2.410584e-02, 1.068196e-01, 1.056119e-01, 8.004280e-02, 3.708478e-02, -1.006065e-01, 9.661949e-02, -3.330465e-01, -6.115816e-02, -3.157954e-02, 1.058334e-01, 8.005939e-02, -5.034591e-02, 1.686179e-02, 7.517454e-02, -5.790202e-02, 8.003165e-02, 5.052727e-02, 8.330935e-02, -3.525829e-02, -1.012454e-01, -4.597218e-02, -1.906521e-01, -7.814112e-02, 9.784869e-03, -5.875245e-02, 9.089528e-02, 3.431987e-02, -9.132955e-02, 4.926885e-02, 3.568716e-02, 4.466976e-02, 4.214119e-02, 9.694833e-02, -4.264135e-02, 5.288180e-02, -3.204952e-02, -2.799645e-03, 3.505506e-02, 4.767161e-02, 1.986182e-03, -3.790419e-02, -1.700565e-02},
{1.337037e-01, 2.225436e-01, -6.644609e-02, -1.402804e-01, 4.599258e-01, -1.305591e-01, -1.423736e-01, 1.336755e-01, -1.563341e-01, 6.902964e-02, -1.912722e-01, -1.441243e-01, 1.655250e-01, 1.577970e-01, 2.717039e-01, -1.014423e-01, -4.983983e-02, 2.532994e-01, 2.252415e-01, 2.160295e-01, -4.146856e-01, -2.519540e-01, -4.626409e-01, -4.500126e-02, -2.286016e-01, -1.647851e-01, -2.216171e-01, -1.933531e-01, -1.601777e-01, -2.658349e-01, -4.473323e-02, 2.043022e-01, 1.296122e-01, -4.236148e-01, -6.077587e-02, -3.900003e-02, -4.321207e-02, 5.589122e-02, 4.123774e-02, -1.024485e-01, 5.940480e-02, 2.589377e-01, 4.357748e-01, 1.362999e-01, 3.174366e-01, 2.527917e-01, -6.559838e-02, -2.336872e-01, 8.738816e-02, 2.506211e-01, 2.403407e-01, -9.291861e-02, 4.164105e-02, 1.869120e-01, -1.445117e-01, -6.766994e-02, -2.371524e-01, -1.991650e-01, 8.000378e-02, 3.170490e-01, -8.061148e-03, -2.496652e-02, -1.808663e-01, 2.942437e-01, -1.979825e-01, 1.569769e-01, 1.608352e-01, -1.863601e-01, -3.129581e-02, -1.793933e-01, -1.545232e-01, -7.214057e-02, -4.342963e-01, 5.932690e-02, 1.332555e-01, -2.509301e-02, 1.149864e-01, 2.047288e-02, -1.062426e-01, 4.031684e-01, 1.941652e-01, -8.310476e-02, 1.358696e-01, 9.389279e-02, -1.520484e-01, -1.230320e-01, 1.326128e-01, -1.309727e-01, 3.452342e-01, 3.071275e-01, -1.371381e-01, 3.990027e-03, 1.075510e-02, -4.507377e-01, 1.761543e-01, 2.308022e-01, -1.159569e-01, -9.257334e-01, 2.169527e-02, -3.042173e-01, -1.858377e-01, -2.146962e-01, -3.277455e-03, 6.964121e-02, 1.602792e-01, 2.170844e-01, -1.719105e-01, -1.417795e-01, -4.822553e-02, 2.477973e-01, -4.129269e-01, 1.626251e-01, 1.396715e-01, -9.540931e-02, 1.115242e-01, 2.686707e-01, -2.313883e-01, 1.124699e-01, 5.613110e-02, -2.414404e-02, 2.584908e-01, -3.136754e-01, 2.690823e-01, -1.551138e-01, 1.944761e-01, -1.095577e-01, 3.093638e-01, 4.243277e-01, 1.747020e-01, -4.832953e-03, 2.280196e-01, 3.952775e-01, 1.955666e-01},
{1.266742e-01, 5.522004e-02, -3.815803e-02, -2.354630e-02, -1.467605e-01, -1.034032e-01, 2.790939e-02, -6.529675e-02, -1.559580e-02, -2.624276e-03, 8.921473e-02, 9.044086e-03, 2.490300e-02, -2.481890e-02, -5.719602e-02, -7.526503e-02, 5.057114e-02, 2.162131e-02, -4.543460e-02, -3.328649e-02, -8.271322e-02, 4.466352e-02, 9.034291e-02, -1.278011e-01, 4.911091e-02, -8.391456e-02, -6.660832e-02, 3.720786e-02, -1.876221e-02, 5.065345e-02, -8.192653e-03, 2.204480e-02, 1.120939e-01, -2.696434e-02, 8.991137e-02, -9.843744e-02, 7.668930e-02, -1.595953e-03, 3.495758e-02, -2.697974e-02, 2.161945e-02, 1.871700e-02, -1.151675e-01, 2.227729e-02, -2.666427e-02, 3.519455e-02, -6.529657e-02, 8.119936e-02, -2.644500e-02, -5.481188e-02, -7.649561e-02, 8.527648e-02, -3.543456e-02, -8.341399e-03, 7.782525e-02, -9.696014e-02, -1.321757e-02, -6.198596e-02, 5.436935e-02, -6.361517e-02, 4.821376e-02, 1.213780e-02, 6.775798e-02, -4.615242e-02, -6.491809e-02, 9.889580e-02, -4.789452e-02, -1.158043e-02, 8.433678e-02, 3.466877e-02, 8.874576e-02, -2.368032e-02, 3.016627e-02, -1.131627e-02, 2.864719e-02, -3.647073e-02, -8.904983e-02, -1.075742e-02, 5.763579e-02, -5.192599e-02, -8.669618e-02, -1.410804e-01, -9.331824e-02, 7.041278e-02, 6.839760e-02, -9.113576e-02, 1.281218e-02, 7.145615e-02, -1.433085e-02, 2.041925e-02, 2.270322e-03, -9.043445e-02, 7.743416e-02, 6.571981e-02, -4.537028e-02, 6.107417e-02, 2.935861e-02, -1.486862e-01, -7.842799e-02, -6.029857e-02, 6.261670e-02, -2.398974e-02, -6.011634e-02, -2.210744e-02, -7.621887e-02, -7.828491e-02, -3.435913e-02, 1.096827e-02, -6.711160e-02, -1.993058e-02, 4.566072e-02, -1.520662e-02, 5.110089e-02, -7.116453e-02, 5.449938e-04, 3.430316e-02, 7.767350e-02, 9.171706e-02, 6.310567e-03, 5.597326e-02, 7.103480e-02, 4.316353e-02, -9.874760e-02, -3.059402e-02, 8.492428e-02, -6.241618e-02, -7.773458e-03, -1.905402e-02, 1.901470e-02, 3.207998e-02, -5.945176e-02, 3.846283e-02, 7.946161e-04},
{1.150093e-01, -3.023504e-02, -9.796598e-03, 2.719280e-02, -1.691569e-01, -1.882358e-02, -5.374619e-03, -9.862455e-02, 1.115783e-01, 7.747674e-02, 1.042906e-02, -1.567482e-01, -5.399920e-02, 7.261912e-02, 4.123430e-02, 5.027990e-02, 3.547270e-03, -8.747701e-02, -1.432768e-03, -7.150453e-02, 7.818726e-02, 8.165032e-02, 1.078612e-01, -3.142560e-02, 5.932504e-02, 3.835487e-02, -1.408406e-01, -1.119052e-01, 3.222349e-02, -2.322752e-02, -4.495018e-02, 2.292029e-03, -9.934314e-02, 2.688152e-03, -8.893661e-03, -4.967582e-02, 7.299764e-02, 1.619578e-01, -1.318504e-01, 1.167108e-02, 5.695283e-02, 2.518273e-03, -5.897454e-01, -1.887494e-01, -3.283106e-02, 4.636385e-02, -5.638774e-02, -1.322221e-02, 6.850548e-02, -6.592639e-02, -5.820883e-02, -7.380109e-02, 6.564799e-06, 1.513719e-01, -5.001973e-03, 1.245407e-01, -3.037108e-02, -1.408253e-02, 1.062431e-01, -2.299523e-01, -6.006843e-02, 6.599899e-02, 1.158994e-01, -1.750110e-04, 2.738003e-02, 5.147276e-02, -3.494276e-02, -4.480696e-02, -4.070525e-02, -1.475140e-01, 7.117027e-03, -3.295443e-02, 2.945602e-02, -7.112247e-02, 1.233777e-02, 1.036592e-01, 1.648923e-01, 1.656685e-01, -1.683651e-01, 1.212693e-01, -1.333275e-01, -1.950614e-01, -4.149336e-02, 2.612970e-02, 4.453604e-02, 9.440025e-02, -3.690104e-03, -9.818433e-02, 5.376465e-02, 9.821771e-02, 2.423766e-02, 4.694427e-02, 1.373738e-01, 4.784059e-01, 7.458850e-02, -2.498471e-02, 5.788926e-02, 1.563374e-01, 7.431839e-02, 4.930659e-02, -6.815237e-03, -1.768697e-01, 4.911776e-02, 1.075702e-01, 8.193784e-03, -5.958406e-02, 4.162425e-02, -1.388260e-02, -1.494140e-01, 4.956565e-03, 1.443845e-01, -1.090643e-01, -1.334677e-01, 6.691322e-02, -7.106789e-02, 1.377158e-01, 6.625517e-02, -1.196184e-01, -4.624332e-02, -3.245860e-02, 6.186391e-02, 3.790018e-02, -8.003278e-02, 8.125851e-03, 3.178050e-02, 9.347466e-02, 3.777471e-02, -1.483816e-01, -3.255995e-02, -1.198180e-01, -9.784586e-03, -7.856479e-02, 6.119967e-02},
{3.682096e-02, 6.172347e-02, -4.350941e-02, -2.185919e-02, -9.037254e-02, -8.914323e-03, -2.378243e-02, 3.500554e-02, -7.239135e-04, -5.632884e-03, 4.858394e-02, -1.991889e-02, 4.887014e-02, -4.444440e-02, 3.331725e-02, -8.986791e-02, -9.693740e-02, -5.215356e-02, 8.445873e-02, 8.151855e-02, -1.029916e-02, -1.058707e-02, 8.021659e-02, -4.923018e-02, 5.514346e-02, -3.524809e-02, -3.734582e-02, -8.832200e-02, -4.535713e-02, 4.175103e-02, -3.572861e-02, -2.889069e-02, -5.128216e-02, 1.066598e-02, -1.886170e-01, -8.524443e-02, -1.227679e-02, 2.416839e-02, 9.943013e-04, 4.790532e-02, -9.019656e-02, 7.098114e-02, 1.315096e-01, -1.429499e-02, -4.017885e-02, 8.249465e-02, -3.138889e-02, -6.438829e-02, -7.697622e-02, -2.642775e-01, 1.186306e-02, 7.210117e-02, 3.232060e-02, 8.443321e-02, -3.348717e-02, -9.568932e-02, -5.893647e-02, -5.289334e-02, 3.331043e-02, -2.552151e-02, -2.192467e-02, -2.138532e-02, -1.039591e-01, 5.275102e-02, -4.846380e-02, 8.913706e-02, -2.820522e-02, -7.496394e-02, 9.806612e-03, -1.291821e-01, -1.123445e-02, -4.886546e-03, -1.567602e-01, 4.127711e-02, 1.713351e-02, -2.840156e-02, -1.423546e-01, 2.288600e-02, 2.523728e-02, -5.653652e-02, 4.618256e-02, 1.264185e-02, 4.401885e-02, 6.016908e-02, -7.797603e-02, 5.574842e-02, 9.708301e-02, 5.540385e-02, -2.032754e-03, -2.753247e-02, 5.836367e-02, 2.119584e-02, -1.665056e-01, 1.246108e-01, -5.710137e-02, -3.769686e-02, 4.666594e-02, 4.097558e-02, -3.772275e-02, -2.719388e-02, 2.783617e-03, 4.138297e-02, 7.030480e-03, 1.235357e-02, 5.607804e-02, -4.434160e-02, 2.585509e-02, 5.692079e-02, 6.741958e-03, 3.740093e-02, 3.380798e-02, 1.106864e-01, -2.073194e-02, -6.247392e-02, -8.192371e-03, 3.889784e-02, -4.454008e-02, 4.607100e-02, -2.982206e-02, -2.805292e-02, -6.784128e-02, -1.045548e-01, 7.505118e-02, 3.782796e-02, 7.468789e-02, -1.020529e-01, -3.681657e-02, -1.390536e-01, -4.381549e-03, -2.776406e-02, -1.213433e-02, 8.043153e-02, 1.675376e-02},
{1.329235e-01, -2.048086e-01, -1.322776e-01, 1.209026e-02, 6.554824e-03, 5.551923e-02, -2.297384e-02, 9.107628e-02, -4.377816e-02, 9.270774e-02, -4.132868e-02, -1.332309e-01, 5.063424e-02, 1.054601e-01, 1.303684e-01, -6.946962e-03, -5.228756e-02, 1.090876e-02, 8.248247e-02, -5.644104e-02, 1.556156e-01, -6.994677e-02, -6.661227e-02, -4.099238e-02, 2.146278e-02, 6.908683e-03, -6.015211e-02, -3.736976e-02, -3.221298e-02, -3.379289e-02, -4.899918e-02, 1.974998e-02, -1.027897e-01, 6.528970e-02, 2.227303e-01, -1.085260e-01, 1.236463e-01, 1.219567e-01, 1.412130e-01, -8.468728e-02, -7.892762e-02, 1.102814e-01, -3.072267e-01, -1.542620e-01, -3.191202e-03, 1.602718e-01, -1.256022e-01, -1.332166e-01, 1.049042e-01, 2.746375e-02, 4.430175e-02, 3.811498e-02, 1.141352e-01, 8.963036e-02, -6.320823e-02, -5.070582e-02, -7.489625e-02, 2.464276e-02, 2.721428e-02, -6.378891e-02, -8.252095e-02, -1.061459e-01, 8.611710e-02, 1.296646e-01, 2.396840e-02, 1.523547e-01, 2.262701e-02, 5.717763e-03, -5.081657e-02, -2.842323e-01, 1.280209e-01, 3.504710e-02, -5.094613e-03, -6.387146e-02, -2.667287e-02, -2.906191e-02, 1.698921e-02, 1.321542e-01, -1.088349e-01, 5.815439e-02, -1.461303e-01, -7.660080e-02, 3.681428e-02, -3.470389e-02, 4.428268e-02, -1.154808e-02, 1.057603e-01, -1.040347e-01, 1.093683e-01, 6.507397e-03, -9.314478e-02, -4.054163e-02, 2.906718e-02, 1.245112e-01, -1.043563e-01, 6.606961e-02, -4.789679e-02, -2.433642e-01, 1.617565e-01, -1.981705e-01, 9.225309e-02, -7.980767e-02, -7.084265e-02, 9.668929e-04, -1.315347e-01, 9.511479e-04, 1.110121e-01, 4.543797e-02, -4.170929e-02, 1.214356e-01, 2.184629e-01, 1.552703e-01, 7.214927e-02, 4.272927e-02, 4.886921e-02, 1.398630e-01, -3.320275e-02, 1.295923e-01, -9.138463e-02, 7.662759e-02, 1.010385e-01, 3.753367e-02, -1.325658e-01, -1.777926e-02, 7.277019e-02, 3.234122e-02, 1.895063e-01, 7.471593e-02, 5.770942e-02, -1.813790e-02, 1.138586e-01, -8.350603e-02, 1.739117e-01},
{1.829816e-01, 6.820192e-02, -1.831369e-02, -1.365656e-01, -8.114171e-02, -3.081589e-03, 3.297852e-02, 2.926801e-02, 2.160798e-02, -7.167558e-02, 6.917512e-02, 6.507422e-02, 8.245594e-02, -7.320138e-02, 2.925373e-02, 5.305650e-02, -1.116340e-01, -1.180094e-02, 6.735647e-02, 7.573156e-02, -1.720637e-01, 2.881326e-02, -1.667346e-02, -6.262714e-03, -5.050868e-02, -8.336420e-02, -4.116565e-02, 8.528394e-02, 3.470491e-02, -4.519582e-02, 2.803283e-02, 8.317064e-02, -7.340260e-04, -5.803474e-03, 3.183696e-03, -7.408678e-02, -4.052785e-02, 2.540637e-02, 1.053493e-01, 6.995489e-02, 1.049722e-01, 5.145127e-02, 1.817359e-01, -2.809815e-02, 3.559682e-02, -2.492054e-02, 1.112277e-02, 3.276294e-02, -2.987196e-02, -8.382744e-02, -5.744100e-02, 1.402613e-02, -4.573384e-02, 9.916984e-02, -7.674449e-02, -1.209557e-01, -6.815671e-03, -1.848255e-02, 3.379288e-02, 1.688078e-01, -8.528439e-02, -6.725571e-02, -3.014553e-02, 4.635853e-02, -1.210033e-02, 3.400537e-02, -2.667585e-02, -8.019650e-02, -6.554519e-02, -1.411431e-01, -1.740229e-02, -8.830053e-03, -9.083490e-02, 7.848170e-02, 1.718979e-02, -1.278511e-02, -4.854422e-02, -1.535165e-01, -8.309812e-02, -1.056290e-02, -4.537245e-02, -7.135234e-03, 3.728656e-02, 2.045232e-02, 8.213766e-03, 3.208216e-02, -5.122876e-03, 3.035100e-02, 9.132443e-02, -6.453038e-02, 6.739528e-02, -7.822918e-02, 5.745788e-02, -6.011455e-02, -6.420840e-02, -1.909123e-02, -6.848603e-02, 1.887600e-02, -5.722962e-02, -6.858385e-02, 4.116963e-02, 1.837105e-01, -1.980534e-02, -1.023024e-02, 1.171223e-02, -9.306785e-02, -3.836997e-02, -6.195166e-02, -5.839132e-02, -8.660662e-02, -1.268464e-04, 8.960708e-02, 1.104623e-02, -4.653652e-02, 5.739543e-02, 5.866390e-02, 1.092420e-02, 3.532948e-02, 6.487035e-03, 1.023902e-02, -3.889792e-02, 2.810983e-02, 9.304369e-02, 9.151894e-02, 2.138813e-02, 6.502664e-02, -8.949302e-02, -1.534047e-01, -1.213800e-02, 9.736323e-02, -6.254046e-02, -1.515551e-02, 7.620970e-02}

};
float Bias0_o[128] =
{
    -1.169035e-01, 8.449905e-02, 1.580724e-01, 4.507486e-02, -2.030793e-01, -1.776934e-01, 2.673335e-02, 5.890156e-02, 1.589769e-02, -6.004645e-02, 2.186130e-02, 1.855113e-01, 1.090912e-01, 3.844292e-02, -1.767792e-02, -5.573022e-02, 4.300321e-02, -1.662507e-02, -6.962482e-02, -1.598175e-01, -1.123786e-01, 8.543192e-02, -6.995680e-02, -1.186515e-01, 2.092283e-02, -1.773198e-01, -4.106082e-03, 1.760867e-02, -1.688263e-01, -1.402836e-01, -1.076160e-01, 4.330378e-01, -2.629873e-02, -1.834436e-01, -1.443792e-04, 2.186188e-01, -5.314130e-02, 3.440232e-02, 2.116479e-01, 1.477133e-01, -1.113432e-01, -6.192896e-03, -7.307953e-02, 1.380378e-01, 6.021072e-01, 4.901223e-02, -4.103712e-02, -4.335365e-02, 1.893607e-01, -3.838855e-02, -2.090757e-02, -7.138635e-02, 2.908691e-01, -6.899244e-02, 2.393417e-01, -1.054847e-01, 3.571759e-02, -1.087198e-01, 2.581269e-03, -1.107073e-01, 1.118398e-01, 1.334705e-02, 7.141890e-02, 3.216472e-03, 8.634896e-02, -7.425990e-02, -1.447067e-01, -1.965498e-01, -1.488049e-01, -1.816449e-02, -1.050249e-01, 9.346027e-01, -2.110901e-01, 3.963266e-02, 1.379257e-01, -1.101879e-01, 2.281796e-01, -2.500464e-02, -3.168590e-03, -8.673584e-02, 8.345599e-02, -8.169877e-02, 2.551926e-01, -7.548802e-02, 1.641243e-01, -4.214309e-02, -5.036090e-02, 2.124066e-01, 8.367782e-03, 1.539596e-01, 5.339563e-02, -3.435585e-02, -8.795641e-03, -1.215751e-01, -1.458496e-01, 4.368387e-02, -2.336424e-02, 1.489196e-01, 5.037741e-02, -2.695249e-02, 4.787378e-02, 5.655213e-02, 2.239265e-02, 9.170109e-02, 3.549395e-02, 1.623728e-01, -4.228190e-02, 2.607729e-02, 2.614963e-02, 5.726586e-02, 5.758144e-02, -5.120932e-02, 5.098019e-02, -5.228540e-02, -1.123824e-01, -1.137228e-01, -5.249492e-02, 1.906850e-01, 3.612553e-02, -1.433139e-01, -1.147067e-02, -1.513798e-01, 7.170572e-01, 9.701061e-02, 9.731150e-02, 3.957060e-02, 6.143471e-02, 1.505241e-01

};
float Weight_lc[1][128] =
{
   -1.021610e-01, -1.256504e-01, 1.709733e-01, -8.997607e-02, 7.817382e-02, 6.303602e-04, -1.398414e-01, 9.965475e-02, 6.982382e-02, 1.129103e-01, -1.117351e-01, -1.652474e-01, 1.072817e-01, 1.200977e-01, 8.703686e-02, 4.965904e-02, -1.295350e-01, -1.101679e-01, 8.441670e-03, -1.360357e-01, -1.427122e-02, -4.992569e-02, -1.234863e-01, -7.074082e-02, -5.096224e-02, -4.628257e-02, 4.375992e-02, -7.791113e-02, -1.294363e-01, 1.024903e-01, -7.278264e-02, 2.775226e-01, -2.496896e-02, -1.089661e-01, -6.467962e-02, -1.879672e-01, 1.399442e-01, -3.865742e-02, 1.502279e-02, 1.530906e-01, 9.418237e-02, -8.541364e-02, -1.520845e-01, 1.882417e-01, 4.056894e-01, 1.024896e-01, -1.017360e-01, -2.138116e-02, 1.513905e-01, -1.270747e-01, 5.608715e-02, -8.410107e-02, 2.169603e-01, 8.618826e-02, -1.988967e-01, -3.149936e-02, -3.070962e-02, -1.037156e-01, 9.227785e-02, -1.464508e-01, 1.462503e-01, 7.718208e-02, -7.769316e-02, -7.692195e-02, -5.991407e-02, -8.308953e-04, -1.243071e-03, -3.173041e-02, 7.220072e-02, 1.198052e-01, 5.416006e-02, -5.691940e-01, -1.382191e-02, -1.795900e-01, 1.791481e-01, 3.605668e-02, -1.374633e-01, 2.200897e-02, 8.419245e-02, -6.866240e-02, -1.498277e-01, 8.261941e-02, -1.913336e-01, 1.269671e-01, 9.127376e-02, -9.592815e-02, -3.238431e-02, -1.908660e-01, -1.778346e-01, -2.022232e-01, 1.327772e-01, -6.554263e-02, 5.874897e-02, 1.230733e-01, -1.197861e-01, -1.008242e-01, -2.699686e-02, -1.384814e-01, 1.107333e-03, -6.701483e-02, 1.366358e-01, -1.278999e-01, -4.962643e-02, -1.468898e-01, 1.106243e-01, 8.467676e-02, 1.269723e-01, 1.781903e-01, -6.505102e-03, 9.397118e-02, 1.511912e-01, -1.027895e-01, 1.220544e-01, 1.067108e-01, 6.114291e-02, 8.620774e-02, -1.174186e-01, 7.295331e-02, -1.157546e-01, 5.444496e-02, -1.386847e-01, 1.303027e-01, 3.290454e-01, 1.437883e-01, 1.296994e-02, 1.329117e-01, 2.276566e-02, 1.499870e-01

};
float Bias_lc[1] =
{
    1.564872e-01
};
# 6 "lstm_hls/rnn.cpp" 2
# 17 "lstm_hls/rnn.cpp"
inline void sigmoid(float* res, float* a, int size)
{



 VITIS_LOOP_22_1: for (int i = 0; i < size; ++i){
  res[i] = (1 / (1 + expf(-a[i])));
 }

}


inline void tanh(float* res, float* a, int size)
{



 VITIS_LOOP_34_1: for (int i = 0; i < size; ++i){
  res[i] = (expf(a[i]) - expf(-a[i])) / (expf(a[i]) + expf(-a[i]));
 }
}


inline void geva(float* res, float* a, int size)
{



 VITIS_LOOP_45_1: for (int i = 0; i < size; ++i){
  res[i] = res[i] + a[i];
 }
}


inline void hprod(float* res, float* a, float* b, int size)
{



 VITIS_LOOP_56_1: for (int i = 0; i < size; ++i) {
        res[i] = a[i] * b[i];
    }
}





void infer(float input[20 * 5], float res[1])

{
 float gate_f[128] = { 0.0 };
 float gate_i[128] = { 0.0 };
 float stat_C[128] = { 0.0 };
 float C_t[128] = { 0.0 };
 float gate_o[128] = { 0.0 };
 float h_t[128] = { 0.0 };

 float vec_i[5 + 128];
 float vec_tmp[128];
 float vec_tmp_s[128];


 VITIS_LOOP_80_1: for (int i = 0; i < 5; i++)
 {
# 107 "lstm_hls/rnn.cpp"
  VITIS_LOOP_107_2: for (int j = 0; j < 5; j++) vec_i[j] = input[i * 5 + j];
  VITIS_LOOP_108_3: for (int j = 0; j < 128; j++) vec_i[5 + j] = h_t[j];





  VITIS_LOOP_114_4: for(int i = 0;i < 128;++i){
   vec_tmp[i] = 0;
   VITIS_LOOP_116_5: for(int j = 0; j < 5 + 128; j++){
    vec_tmp[i] += Weight0_f[i][j] * vec_i[j];
   }
   vec_tmp[i] += Bias0_f[i];
  }

  sigmoid(gate_f,vec_tmp,128);





  VITIS_LOOP_128_6: for(int i = 0;i < 128;++i){
   vec_tmp[i] = 0;
   VITIS_LOOP_130_7: for(int j = 0; j < 5 + 128; j++){
    vec_tmp[i] += Weight0_i[i][j] * vec_i[j];
   }
   vec_tmp[i] += Bias0_i[i];
  }

  sigmoid(gate_i,vec_tmp,128);





  VITIS_LOOP_142_8: for(int i = 0;i < 128;++i){
   vec_tmp[i] = 0;
   VITIS_LOOP_144_9: for(int j = 0; j < 5 + 128; j++){
    vec_tmp[i] += Weight0_c[i][j] * vec_i[j];
   }
   vec_tmp[i] += Bias0_c[i];
  }

  tanh(stat_C, vec_tmp, 128);





  VITIS_LOOP_156_10: for(int i = 0;i < 128;++i){
   vec_tmp[i] = 0;
   VITIS_LOOP_158_11: for(int j = 0; j < 5 + 128; j++){
    vec_tmp[i] += Weight0_o[i][j] * vec_i[j];
   }
   vec_tmp[i] += Bias0_o[i];
  }

  sigmoid(gate_o,vec_tmp,128);





  VITIS_LOOP_170_12: for(int i = 0;i < 128;++i){
   vec_tmp[i] = 0;
  }
  hprod(vec_tmp, C_t, gate_f, 128);
  hprod(C_t, gate_i , stat_C, 128);
  geva(C_t, vec_tmp, 128);





  VITIS_LOOP_181_13: for(int i = 0;i < 128;++i){
   vec_tmp[i] = 0;
  }
  tanh(vec_tmp, C_t, 128);
  hprod(h_t, vec_tmp, gate_o, 128);
 }






 { std::fill_n(res, 1, 0.0); VITIS_LOOP_193_14: for (int r = 0; r < 1; r++) VITIS_LOOP_193_15: for (int c = 0; c < 128; c++) res[r] += Weight_lc[r][c] * h_t[c]; };
 geva(res, Bias_lc, 1);
# 203 "lstm_hls/rnn.cpp"
}
